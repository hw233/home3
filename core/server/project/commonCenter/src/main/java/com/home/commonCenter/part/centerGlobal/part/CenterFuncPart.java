package com.home.commonCenter.part.centerGlobal.part;
import com.home.commonBase.config.game.SubsectionRankConfig;
import com.home.commonBase.constlist.generate.FuncToolType;
import com.home.commonBase.constlist.system.PartCallPhaseType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.data.role.RoleShowChangeData;
import com.home.commonBase.data.social.RoleSocialData;
import com.home.commonBase.data.social.rank.RankToolData;
import com.home.commonBase.data.social.roleGroup.RoleGroupChangeData;
import com.home.commonBase.part.centerGlobal.data.CenterFuncPartData;
import com.home.commonBase.tool.func.AuctionTool;
import com.home.commonBase.tool.func.FuncTool;
import com.home.commonBase.tool.func.RankTool;
import com.home.commonBase.tool.func.RoleSocialPoolTool;
import com.home.commonCenter.global.CenterC;
import com.home.commonCenter.net.serverRequest.game.social.RefreshRoleGroupChangeToGameServerRequest;
import com.home.commonCenter.net.serverRequest.game.social.RefreshRoleShowDataChangeToGameServerRequest;
import com.home.commonCenter.part.centerGlobal.base.CenterGlobalBasePart;
import com.home.commonCenter.tool.func.CenterAuctionTool;
import com.home.commonCenter.tool.func.CenterMatchTool;
import com.home.commonCenter.tool.func.CenterPageShowTool;
import com.home.commonCenter.tool.func.CenterPlayerRankTool;
import com.home.commonCenter.tool.func.CenterPlayerSubsectionRankTool;
import com.home.commonCenter.tool.func.CenterRankTool;
import com.home.commonCenter.tool.func.CenterRoleGroupRankTool;
import com.home.commonCenter.tool.func.CenterRoleGroupTool;
import com.home.commonCenter.tool.func.CenterSubsectionRankTool;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.global.ShineSetting;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SList;

/** 通用功能数据(generated by shine) */
public class CenterFuncPart extends CenterGlobalBasePart
{
	/** 数据 */
	private CenterFuncPartData _d;
	
	/** 功能插件字典 */
	private IntObjectMap<FuncTool>[] _funcToolDic=new IntObjectMap[FuncToolType.size];
	
	/** 功能插件列表 */
	private SList<FuncTool> _funcToolList=new SList<>(FuncTool[]::new);
	
	private SList<CenterPlayerRankTool> _playerRankToolList=new SList<>(CenterPlayerRankTool[]::new);
	
	private IntObjectMap<SList<CenterRoleGroupRankTool>> _roleGroupRankToolDic=new IntObjectMap<>(SList[]::new);
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(CenterFuncPartData)data;
	}
	
	/** 获取数据 */
	public CenterFuncPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new CenterFuncPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		SubsectionRankConfig.getDic().forEach(v->{

			FuncTool funcTool;

			if(v.isCenter)
			{
				funcTool=new CenterPlayerSubsectionRankTool(v.id,v.maxNum,v.minValue);

				registFuncTool(funcTool);
			}
			else
			{
				//TODO
			}
		});
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].init();
		}
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].dispose();
		}
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			v=values[i];
			
			IntObjectMap<FuncToolData> dic=_d.funcTools.get(v.getType());
			
			if(dic!=null)
			{
				v.setData(dic.get(v.getFuncID()));
			}
			else
			{
				v.setData(null);
			}
		}
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].afterReadData();
		}
		
	
	}
	
	@Override
	public void afterReadDataSecond()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].afterReadDataSecond();
		}
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].onSecond(delay);
		}
	}
	
	/** 每分调用 */
	@Override
	public void onMinute()
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].onMinute();
		}
	}
	
	@Override
	public void onDaily()
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].onDaily();
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		_d.funcTools=new IntObjectMap<>(IntObjectMap[]::new);
		
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			v=values[i];
			
			FuncToolData toolData=v.getNewCreateData();
			
			if(toolData!=null)
			{
				_d.funcTools.computeIfAbsent(v.getType(),k->new IntObjectMap<>(FuncToolData[]::new)).put(v.getFuncID(),toolData);
			}
		}
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void onPlayerDelete(long playerID)
	{
		for(CenterPlayerRankTool v : _playerRankToolList)
		{
			v.removeRankData(playerID);
		}
	}
	
	@Override
	public void onRoleGroupDelete(int funcID,long groupID)
	{
		SList<CenterRoleGroupRankTool> list=_roleGroupRankToolDic.get(funcID);
		
		if(list!=null)
		{
			SList<CenterRoleGroupRankTool> fDic;
			if(!(fDic=list).isEmpty())
			{
				CenterRoleGroupRankTool[] values=fDic.getValues();
				CenterRoleGroupRankTool v;
				
				for(int i=0,len=fDic.size();i<len;++i)
				{
					v=values[i];
					
					v.removeRankData(groupID);
				}
			}
		}
	}
	
	/** 获取功能插件组(没有就创建) */
	public IntObjectMap<FuncTool> getFuncToolDic(int type)
	{
		IntObjectMap<FuncTool> dic=_funcToolDic[type];
		
		if(dic==null)
		{
			return _funcToolDic[type]=new IntObjectMap<>(FuncTool[]::new);
		}
		else
		{
			return dic;
		}
	}
	
	/** 注册功能插件 */
	public void registFuncTool(FuncTool tool)
	{
		if(me.getPhase()!=PartCallPhaseType.Construct)
		{
			Ctrl.throwError("注册功能插件时,必须在construct阶段");
			return;
		}
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(tool.getType());
		
		int funcID=tool.getFuncID();
		
		if(ShineSetting.openCheck)
		{
			if(dic.contains(funcID))
			{
				Ctrl.throwError("已经存在功能插件:",tool.getType(),funcID);
			}
		}
		
		tool.setEntity(me);
		dic.put(funcID,tool);
		_funcToolList.add(tool);
		tool.construct();
		
		if(tool instanceof CenterPlayerRankTool)
		{
			_playerRankToolList.add((CenterPlayerRankTool)tool);
		}
		else if(tool instanceof CenterRoleGroupRankTool)
		{
			CenterRoleGroupRankTool ct=(CenterRoleGroupRankTool)tool;
			_roleGroupRankToolDic.computeIfAbsent(ct.getRoleGroupFuncID(),k->new SList<>(CenterRoleGroupRankTool[]::new)).add(ct);
		}
	}
	
	/** 获取功能拆件 */
	public FuncTool getFuncTool(int type,int funcID)
	{
		return getFuncToolDic(type).get(funcID);
	}
	
	/** 获取排行插件基类 */
	public CenterRankTool getRankTool(int funcID)
	{
		return (CenterRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取角色排行插件 */
	public CenterPlayerRankTool getPlayerRankTool(int funcID)
	{
		return (CenterPlayerRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取分段排行插件基类 */
	public CenterSubsectionRankTool getSubsectionRankTool(int funcID)
	{
		return (CenterSubsectionRankTool)getFuncTool(FuncToolType.SubsectionRank,funcID);
	}
	
	/** 获取玩家群排行插件 */
	public CenterRoleGroupRankTool getRoleGroupRankTool(int funcID)
	{
		return (CenterRoleGroupRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取匹配插件 */
	public CenterMatchTool getMatchTool(int funcID)
	{
		return (CenterMatchTool)getFuncTool(FuncToolType.Match,funcID);
	}
	
	/** 获取角色社交数据池插件 */
	public RoleSocialPoolTool getRoleSocialPoolTool(int funcID)
	{
		return (RoleSocialPoolTool)getFuncTool(FuncToolType.RoleSocialPool,funcID);
	}
	
	/** 获取翻页显示插件 */
	public CenterPageShowTool getPageShowTool(int funcID)
	{
		return (CenterPageShowTool)getFuncTool(FuncToolType.PageShow,funcID);
	}
	
	/** 获取玩家群插件接口 */
	public CenterRoleGroupTool getRoleGroupTool(int funcID)
	{
		return (CenterRoleGroupTool)getFuncTool(FuncToolType.RoleGroup,funcID);
	}
	
	/** 获取拍卖行插件接口 */
	public CenterAuctionTool getAuctionTool(int funcID)
	{
		return (CenterAuctionTool)getFuncTool(FuncToolType.Auction,funcID);
	}
	
	@Override
	public void makeGameLoginData(int gameID,GameLoginData data)
	{
		data.funcTools=new IntObjectMap<>(IntObjectMap[]::new);
		
		IntObjectMap<FuncToolData> dic=data.funcTools.computeIfAbsent(FuncToolType.Rank,v->new IntObjectMap<>(FuncToolData[]::new));
		
		getFuncToolDic(FuncToolType.Rank).forEachValue(v->
		{
			dic.put(v.getFuncID(),v.getData());
		});
		
		IntObjectMap<FuncToolData> dic2=data.funcTools.computeIfAbsent(FuncToolType.Auction,v->new IntObjectMap<>(FuncToolData[]::new));
		
		getFuncToolDic(FuncToolType.Auction).forEachValue(v->
		{
			AuctionTool tool=(AuctionTool)v;
			dic2.put(v.getFuncID(),tool.createGameToolData());
		});

		IntObjectMap<FuncToolData> dic3=data.funcTools.computeIfAbsent(FuncToolType.SubsectionRank,v->new IntObjectMap<>(FuncToolData[]::new));

		getFuncToolDic(FuncToolType.SubsectionRank).forEachValue(v->
		{
			dic3.put(v.getFuncID(),v.getData());
		});
	}
	
	/** 玩家是否在某排行榜中 */
	protected boolean isPlayerInRank(long playerID)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		if(dic.isEmpty())
			return false;
		
		FuncTool[] values=dic.getValues();
		RankTool v;
		
		for(int i=values.length-1;i>=0;--i)
		{
			if(values[i]!=null)
			{
				v=(RankTool)values[i];
				
				if(v.getRank(playerID)>0)
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	/** 玩家是否在某社交数据池中 */
	protected boolean isPlayerInRoleSocialPool(long playerID)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.RoleSocialPool);
		
		if(dic.isEmpty())
			return false;
		
		FuncTool[] values=dic.getValues();
		RoleSocialPoolTool v;
		
		for(int i=values.length-1;i>=0;--i)
		{
			if(values[i]!=null)
			{
				v=(RoleSocialPoolTool)values[i];
				
				if(v.hasPlayer(playerID))
				{
					return true;
				}
			}
		}
		
		return false;
	}
	
	/** 是否需要该角色的显示数据 */
	public boolean needPlayerRoleSocial(long playerID)
	{
		//排行榜
		if(isPlayerInRank(playerID))
			return true;
		
		//玩家池
		if(isPlayerInRoleSocialPool(playerID))
			return true;
		
		return false;
	}
	
	/** 是否需要该角色的显示数据广播逻辑服 */
	protected boolean needPlayerRoleSocialRadio(long playerID)
	{
		return false;
	}
	
	/** 更新角色外显数据 */
	public void onRefreshPartRoleSocial(long playerID,RoleShowChangeData data)
	{
		boolean need=false;
		
		if(!_playerRankToolList.isEmpty())
		{
			for(CenterPlayerRankTool v : _playerRankToolList)
			{
				v.onRefreshRoleShow(playerID,data);
				need=true;
			}
		}
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.SubsectionRank);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values=dic.getValues();
			FuncTool v0;
			
			for(int i=values.length-1;i>=0;--i)
			{
				if((v0=values[i])!=null)
				{
					if(v0 instanceof CenterPlayerSubsectionRankTool)
					{
						((CenterPlayerSubsectionRankTool)v0).onRefreshRoleShow(playerID,data);
						
						need=true;
					}
				}
			}
		}
		
		dic=getFuncToolDic(FuncToolType.RoleSocialPool);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values=dic.getValues();
			RoleSocialPoolTool v;
			
			for(int i=values.length-1;i>=0;--i)
			{
				if(values[i]!=null)
				{
					v=(RoleSocialPoolTool)values[i];
					
					v.refreshOne(playerID,data);
					
					need=true;
				}
			}
		}
		
		if(need || needPlayerRoleSocialRadio(playerID))
		{
			CenterC.server.radioGames(RefreshRoleShowDataChangeToGameServerRequest.create(playerID,data));
		}
	}
	
	/** 添加了新的社交数据 */
	public void addNewSocialData(RoleSocialData data)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.RoleSocialPool);
		
		if(dic.isEmpty())
			return;
		
		FuncTool[] values=dic.getValues();
		RoleSocialPoolTool v;
		
		for(int i=values.length-1;i>=0;--i)
		{
			if(values[i]!=null)
			{
				v=(RoleSocialPoolTool)values[i];
				
				v.addOne(data);
			}
		}
	}
	
	/** 添加自定义社交数据组 */
	public void addCustomRoleSocialDatas(IntObjectMap<RoleSocialData> dic)
	{
		dic.forEach((k,v)->
		{
			RoleSocialPoolTool tool=getRoleSocialPoolTool(k);
			
			if(tool.isUseCustom())
			{
				tool.addOne(v);
			}
			else
			{
				Ctrl.errorLog("提交社交数据时,中心服的RoleSocialData不是useCustom的");
			}
		});
	}
	
	/** 是否需要该角色的显示数据广播逻辑服 */
	protected boolean needRoleGroupRadio(long groupID)
	{
		return false;
	}
	
	/** 更新简版玩家群数据 */
	public void onRefreshPartRoleGroup(int funcID,long groupID,RoleGroupChangeData data)
	{
		boolean need=false;
		
		SList<CenterRoleGroupRankTool> list=_roleGroupRankToolDic.get(funcID);
		
		if(list!=null)
		{
			SList<CenterRoleGroupRankTool> fDic;
			if(!(fDic=list).isEmpty())
			{
				CenterRoleGroupRankTool[] values=fDic.getValues();
				CenterRoleGroupRankTool v;
				
				for(int i=0,len=fDic.size();i<len;++i)
				{
					v=values[i];
					
					v.onRefreshPartRoleGroup(groupID,data);
					
					need=true;
				}
			}
		}
		
		if(need || needRoleGroupRadio(groupID))
		{
			CenterC.server.radioGames(RefreshRoleGroupChangeToGameServerRequest.create(funcID,groupID,data));
		}
		
	}
	
}
