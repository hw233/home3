package com.home.commonCenter.part.centerGlobal.part;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.constlist.system.WorkSenderType;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.data.system.AreaGlobalWorkData;
import com.home.commonBase.data.system.CenterGlobalWorkData;
import com.home.commonBase.data.system.WorkData;
import com.home.commonBase.data.system.WorkReceiverData;
import com.home.commonBase.part.centerGlobal.data.CenterSystemPartData;
import com.home.commonBase.tool.WorkReceiveTool;
import com.home.commonBase.tool.WorkSendTool;
import com.home.commonBase.utils.BaseGameUtils;
import com.home.commonCenter.global.CenterC;
import com.home.commonCenter.net.serverRequest.game.system.ReceiptWorkToGameFromCenterServerRequest;
import com.home.commonCenter.net.serverRequest.game.system.RefreshServerOffTimeToGameServerRequest;
import com.home.commonCenter.part.centerGlobal.base.CenterGlobalBasePart;
import com.home.shine.control.DateControl;
import com.home.shine.data.BaseData;
import com.home.shine.utils.MathUtils;

/** 系统数据(generated by shine) */
public class CenterSystemPart extends CenterGlobalBasePart
{
	/** 数据 */
	private CenterSystemPartData _d;
	
	/** 事务发出工具 */
	private WorkSendTool _workSendTool;
	
	/** 事务接收工具 */
	private WorkReceiveTool _workReceiveTool;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(CenterSystemPartData)data;
	}
	
	/** 获取数据 */
	public CenterSystemPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new CenterSystemPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		_workSendTool=new WorkSendTool(CenterC.app.getQName())
		{
			@Override
			protected void resendWork(WorkData data)
			{
				CenterC.main.resendWork(data);
			}
			
			@Override
			protected void completeWork(WorkData data)
			{
				CenterC.main.completeWork(data);
			}
		};
		
		_workReceiveTool=new WorkReceiveTool();
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		_workSendTool.setData(_d.workSenderData);
		
		//运行次数+1
		_d.serverRunIndex++;
		
		//设置时间
		DateControl.setOffTime(_d.serverOffTime*1000L);
		
		//fix
		if(_d.workReceiverData==null)
			_d.workReceiverData=new WorkReceiverData();
		
		_workReceiveTool.setData(_d.workReceiverData);
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		if(me.getTimeMillis()>=_d.nextDailyTime)
		{
			long nextDailyTimeT=DateControl.getNextDailyTime();
			
			if(_d.nextDailyTime!=nextDailyTimeT)
			{
				_d.nextDailyTime=nextDailyTimeT;
				
				//每天调用
				me.onDaily();
			}
		}
		
		_workSendTool.onSecond(delay);
	}
	
	@Override
	public void onDaily()
	{
		_workReceiveTool.onDaily();
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		//版本
		_d.version.setNowVersion();
		_d.serverStartTime=me.getTimeMillis();
		_d.nextDailyTime=DateControl.getNextDailyTime();
		_d.serverRunIndex=0;
		_d.serverBornCode=MathUtils.getToken();
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void makeGameLoginData(int gameID,GameLoginData data)
	{
		data.serverOffTime=_d.serverOffTime;
		data.serverBornCode=_d.serverBornCode;
		data.clientGMSet=CenterC.clientGM.getCMDSet();
		data.serverRunIndex=_d.serverRunIndex;
	}
	
	/** 获取global的全局时间 */
	public long getNextDailyTime()
	{
		return _d.nextDailyTime;
	}
	
	/** 获取偏移时间 */
	public long getOffTime()
	{
		return _d.serverOffTime;
	}
	
	/** 设置偏移时间(秒) */
	public void setOffTime(long off)
	{
		_d.serverOffTime=off;
		DateControl.setOffTime(off*1000L);
		
		CenterC.server.radioGames(RefreshServerOffTimeToGameServerRequest.create(off));
		
		me.activity.timeChanged();
	}
	
	/** 获取事务发出工具 */
	public WorkSendTool getWorkSendTool()
	{
		return _workSendTool;
	}
	
	/** 获取事务接收工具 */
	public WorkReceiveTool getWorkReceiveTool()
	{
		return _workReceiveTool;
	}
	
	/** 获取生成码 */
	public int getBornCode()
	{
		return _d.serverBornCode;
	}
	
	public void executeCenterWork(CenterGlobalWorkData data)
	{
		//有实例ID
		if(data.workInstanceID>0L)
		{
			int re=InfoCodeType.WorkError;
			
			if(_workReceiveTool.record(data))
			{
				CenterC.centerWork.execute(data);
				re=InfoCodeType.Success;
			}
			
			receiptAreaWork(data,re);
		}
		else
		{
			CenterC.centerWork.execute(data);
		}
	}
	
	/** 事务回执 */
	private void receiptAreaWork(WorkData data,int result)
	{
		//没有实例ID
		if(data.workInstanceID<=0L)
			return;
		
		int type=BaseGameUtils.getWorkSenderType(data.senderIndex);
		
		if(type==WorkSenderType.Game)
		{
			int senderID=BaseGameUtils.getWorkSenderID(data.senderIndex);
			
			ReceiptWorkToGameFromCenterServerRequest.create(data.senderIndex,data.workInstanceID,result).send(CenterC.main.getNowGameID(senderID));
		}
	}
	
}
