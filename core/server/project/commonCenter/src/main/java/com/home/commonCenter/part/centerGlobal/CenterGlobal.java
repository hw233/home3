package com.home.commonCenter.part.centerGlobal;
import com.home.commonBase.constlist.system.PartCallPhaseType;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.data.login.GameLoginToCenterData;
import com.home.commonBase.logic.LogicEntity;
import com.home.commonBase.part.centerGlobal.data.CenterActivityPartData;
import com.home.commonBase.part.centerGlobal.data.CenterFuncPartData;
import com.home.commonBase.part.centerGlobal.data.CenterMailPartData;
import com.home.commonBase.part.centerGlobal.data.CenterSocialPartData;
import com.home.commonBase.part.centerGlobal.data.CenterSystemPartData;
import com.home.commonBase.part.centerGlobal.data.CenterUnionPartData;
import com.home.commonBase.part.centerGlobal.list.CenterGlobalListData;
import com.home.commonCenter.global.CenterC;
import com.home.commonCenter.part.centerGlobal.base.CenterGlobalBasePart;
import com.home.commonCenter.part.centerGlobal.part.CenterActivityPart;
import com.home.commonCenter.part.centerGlobal.part.CenterFuncPart;
import com.home.commonCenter.part.centerGlobal.part.CenterMailPart;
import com.home.commonCenter.part.centerGlobal.part.CenterSocialPart;
import com.home.commonCenter.part.centerGlobal.part.CenterSystemPart;
import com.home.commonCenter.part.centerGlobal.part.CenterUnionPart;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.ctrl.Ctrl;

/** 中心服全局数据(generated by shine) */
public class CenterGlobal extends LogicEntity
{
	protected CenterGlobalBasePart[] _list;
	
	/** 当前代码调用阶段 */
	private int _phase=PartCallPhaseType.None;
	
	private int _minuteTick=0;
	
	/** 系统数据 */
	public CenterSystemPart system;
	
	/** 通用功能数据 */
	public CenterFuncPart func;
	
	/** 社交数据 */
	public CenterSocialPart social;
	
	/** 邮件数据 */
	public CenterMailPart mail;
	
	/** 活动数据 */
	public CenterActivityPart activity;
	
	/** 中心服宗门数据 */
	public CenterUnionPart union;
	
	/** 注册部件 */
	protected void registParts()
	{
		_list=new CenterGlobalBasePart[6];
		int i=0;
		
		system=new CenterSystemPart();
		system.setMe(this);
		_list[i++]=system;
		
		social=new CenterSocialPart();
		social.setMe(this);
		_list[i++]=social;
		
		func=new CenterFuncPart();
		func.setMe(this);
		_list[i++]=func;
		
		activity=new CenterActivityPart();
		activity.setMe(this);
		_list[i++]=activity;
		
		mail=new CenterMailPart();
		mail.setMe(this);
		_list[i++]=mail;
		
		union=new CenterUnionPart();
		union.setMe(this);
		_list[i++]=union;
		
	}
	
	/** 创建列表数据 */
	public CenterGlobalListData createListData()
	{
		return new CenterGlobalListData();
	}
	
	/** 从列表数据读取 */
	public void readListData(CenterGlobalListData listData)
	{
		this.system.setData(listData.system);
		this.social.setData(listData.social);
		this.func.setData(listData.func);
		this.activity.setData(listData.activity);
		this.mail.setData(listData.mail);
		this.union.setData(listData.union);
	}
	
	/** 写列表数据(深拷) */
	public void writeListData(CenterGlobalListData listData)
	{
		listData.system=(CenterSystemPartData)this.system.makePartData();
		listData.social=(CenterSocialPartData)this.social.makePartData();
		listData.func=(CenterFuncPartData)this.func.makePartData();
		listData.activity=(CenterActivityPartData)this.activity.makePartData();
		listData.mail=(CenterMailPartData)this.mail.makePartData();
		listData.union=(CenterUnionPartData)this.union.makePartData();
	}
	
	/** 写列表数据(潜拷) */
	public void writeShadowListData(CenterGlobalListData listData)
	{
		listData.system=(CenterSystemPartData)this.system.makeShadowPartData();
		listData.social=(CenterSocialPartData)this.social.makeShadowPartData();
		listData.func=(CenterFuncPartData)this.func.makeShadowPartData();
		listData.activity=(CenterActivityPartData)this.activity.makeShadowPartData();
		listData.mail=(CenterMailPartData)this.mail.makeShadowPartData();
		listData.union=(CenterUnionPartData)this.union.makeShadowPartData();
	}
	
	/** 获取当前阶段 */
	public int getPhase()
	{
		return _phase;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	public void construct()
	{
		_phase=PartCallPhaseType.Construct;
		
		registParts();
		
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].construct();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	public void init()
	{
		_phase=PartCallPhaseType.Init;
		
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].init();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 析构(回池前调用,与init成对) */
	public void dispose()
	{
		_phase=PartCallPhaseType.Dispose;
		
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].dispose();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	public void afterReadData()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].afterReadData();
		}
		
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].afterReadDataSecond();
		}
	}
	
	/** 每秒调用 */
	public void onSecond(int delay)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onSecond(delay);
		}
		
		if((++_minuteTick)>=60)
		{
			_minuteTick=0;
			
			onMinute();
		}
	}
	
	/** 每秒调用 */
	public void onMinute()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onMinute();
		}
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	public void onDaily()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onDaily();
		}
	}
	
	/** 配置表更新后(配置替换) */
	public void onReloadConfig()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onReloadConfig();
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	public void onNewCreate()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onNewCreate();
		}
	}
	
	/** 初次构造数据(只为new出Data,跟onCreate不是一回事) */
	public void newInitData()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].newInitData();
		}
	}
	
	/** 活动开启 */
	public void onActivityOpen(int id,boolean atTime)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityOpen(id,atTime);
		}
	}
	
	/** 活动关闭 */
	public void onActivityClose(int id,boolean atTime)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityClose(id,atTime);
		}
	}
	
	/** 活动重置 */
	public void onActivityReset(int id,boolean atTime)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityReset(id,atTime);
		}
	}
	
	/** 开始启动 */
	public void onStart()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onStart();
		}
	}
	
	/** 游戏服登录 */
	public void makeGameLoginData(int gameID,GameLoginData data)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].makeGameLoginData(gameID,data);
		}
	}
	
	/** 读取逻辑服数据 */
	public void readGameLoginData(int gameID,GameLoginToCenterData data)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].readGameLoginData(gameID,data);
		}
	}
	
	/** 检查新增模块 */
	public void checkNewAdd()
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].checkNewAdd();
		}
	}
	
	/** 角色删除(主线程) */
	public void onPlayerDelete(long playerID)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onPlayerDelete(playerID);
		}
	}
	
	/** 角色删除(主线程) */
	public void onRoleGroupDelete(int funcID,long groupID)
	{
		CenterGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onRoleGroupDelete(funcID,groupID);
		}
	}
	
	/** 初始读取 */
	public void load()
	{
		//放在这里是为了等Config初始化好
		construct();
		init();
		
		//新的
		if(CenterC.db.isNewGlobal())
		{
			Ctrl.log("新开Center服");
			newInitData();
			onNewCreate();
		}
		else
		{
			BytesReadStream stream=BytesReadStream.create(CenterC.db.getGlobalTable().data);
			
			CenterGlobalListData listData=createListData();
			listData.readBytesFull(stream);
			readListData(listData);
			//检查新增
			checkNewAdd();
			//版本检查
			CenterC.version.checkVersion(this);
		}
		
		afterReadData();
	}
	
	@Override
	public void writeInfo(StringBuilder sb)
	{
	
	}
	
	@Override
	protected void sendWarnLog(String str)
	{
	
	}
	
}
