package com.home.commonCenter.part.centerGlobal.part;
import com.home.commonBase.config.game.ActivityConfig;
import com.home.commonBase.data.activity.ActivityServerData;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.part.centerGlobal.data.CenterActivityPartData;
import com.home.commonCenter.global.CenterC;
import com.home.commonCenter.net.serverRequest.game.activity.ActivityResetToGameServerRequest;
import com.home.commonCenter.net.serverRequest.game.activity.ActivitySwitchToGameServerRequest;
import com.home.commonCenter.net.serverRequest.game.activity.ChangeActivityForceCloseToGameServerRequest;
import com.home.commonCenter.part.centerGlobal.base.CenterGlobalBasePart;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.utils.OtherUtils;
import com.home.shine.utils.TimeUtils;

/** 活动数据(generated by shine) */
public class CenterActivityPart extends CenterGlobalBasePart
{
	/** 数据 */
	private CenterActivityPartData _d;
	
	private boolean _timeChanged=false;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(CenterActivityPartData)data;
	}
	
	/** 获取数据 */
	public CenterActivityPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new CenterActivityPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		
		
		ActivityConfig.getDic().forEachValue(v->
		{
			ActivityServerData sData=_d.datas.get(v.id);
			
			//补充
			if(sData==null)
			{
				sData=new ActivityServerData();
				sData.id=v.id;
				sData.nextResetTime=0;
				sData.lastTurnTime=0;
				sData.nextTurnTime=0;
				
				_d.datas.put(sData.id,sData);
			}
			
			sData.config=v;
		});
		
		//fixed
		OtherUtils.removeNotExistFromDic1WithDic2(_d.datas,ActivityConfig.getDic());
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		long now=me.getTimeMillis();
		
		//准备时间
		boolean needOnTime=false;
		if(_timeChanged)
		{
			_timeChanged=false;
			needOnTime=true;
		}
		
		ActivityServerData[] values;
		ActivityServerData v;
		
		for(int i=(values=_d.datas.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				//还活着
				if(!v.isForceClosed)
				{
					if(needOnTime)
					{
						runOnTime(v,true);
					}
					else
					{
						if(v.nextTurnTime>0 && now>v.nextTurnTime)
						{
							//运行中
							if(v.isRunning)
							{
								doActivityCloseAtTime(v);
							}
							else
							{
								doActivityOpenAtTime(v);
							}
						}
						
						if(v.nextResetTime>0 && now>v.nextResetTime)
						{
							doActivityResetAtTime(v);
						}
					}
				}
			}
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
	
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
	
	}
	
	@Override
	public void onStart()
	{
		_d.datas.forEachValue(v->
		{
			//还活着
			if(!v.isForceClosed)
			{
				runOnTime(v,false);
			}
		});
	}
	
	@Override
	public void makeGameLoginData(int gameID,GameLoginData data)
	{
		//直接赋值
		data.activities=_d.datas;
	}
	
	@Override
	public void onReloadConfig()
	{
		_d.datas.forEachValue(v->
		{
			v.reloadConfig();
			
			runOnTime(v,false);
		});
	}
	
	/** 根据当前时间运算 */
	private void runOnTime(ActivityServerData data,boolean atTime)
	{
		ActivityConfig config=data.config;
		
		long nextEnd=config.endTimeT.getNextTime(me);
		long nextStart=config.startTimeT.getNextTime(me);
		
		boolean isRunning;
		
		//没有关闭时间
		if(config.endTimeT.isEmpty())
		{
			isRunning=true;
		}
		else
		{
			//已关闭
			if(nextEnd==-1L)
			{
				isRunning=false;
			}
			else
			{
				if(nextStart==-1L)
				{
					isRunning=true;
				}
				else
				{
					//根据两个时间差判定开关
					isRunning=nextStart>nextEnd;
				}
			}
		}
		
		if(data.isRunning!=isRunning || data.nextTurnTime==0)
		{
			if(isRunning)
				doActivityOpen(data,nextEnd,atTime);
			else
				doActivityClose(data,nextStart,atTime);
		}
		else
		{
			long nextTurn=isRunning ? nextEnd : nextStart;
			
			//需要计算
			if(data.nextTurnTime!=nextTurn)
			{
				//配置变更
				if(data.nextTurnTime==-1)
				{
					data.nextTurnTime=nextTurn;
				}
				else
				{
					long now=me.getTimeMillis();
					
					//之前的时间
					if(data.nextTurnTime<now)
					{
						//关开一下
						if(isRunning)
						{
							doActivityClose(data,nextStart,atTime);
							doActivityOpen(data,nextEnd,atTime);
						}
						else
						{
							data.nextTurnTime=nextTurn;
						}
					}
					else
					{
						data.nextTurnTime=nextTurn;
					}
				}
			}
		}
		
		if(data.nextResetTime==0)
		{
			data.nextResetTime=config.resetTimeT.getNextTime(me);
		}
		else
		{
			long nextResetTime=config.resetTimeT.getNextTime(me);
			
			if(nextResetTime!=data.nextResetTime)
			{
				//配置变更
				if(data.nextResetTime==-1)
				{
					data.nextResetTime=nextResetTime;
				}
				else
				{
					long now=me.getTimeMillis();
					
					if(data.nextResetTime<now)
					{
						doActivityReset(data,nextResetTime,atTime);
					}
				}
			}
		}
	}
	
	/** 活动开启 */
	private void doActivityOpenAtTime(ActivityServerData data)
	{
		doActivityOpen(data,data.nextTurnTime,data.config.endTimeT.getNextTime(me),true);
	}
	
	private void doActivityOpen(ActivityServerData data,long nextTurnTime,boolean atTime)
	{
		doActivityOpen(data,data.config.startTimeT.getPrevTime(me),nextTurnTime,atTime);
	}
	
	/** 活动开启 */
	private void doActivityOpen(ActivityServerData data,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		data.isRunning=true;
		data.lastTurnTime=lastTurnTime;
		data.nextTurnTime=nextTurnTime;
		
		CenterC.server.radioGames(ActivitySwitchToGameServerRequest.create(data.id,data.isRunning,data.lastTurnTime,data.nextTurnTime,atTime));
		
		me.onActivityOpen(data.id,atTime);
	}
	
	/** 活动关闭 */
	private void doActivityCloseAtTime(ActivityServerData data)
	{
		doActivityClose(data,data.nextTurnTime,data.config.startTimeT.getNextTime(me),true);
	}
	
	/** 活动关闭 */
	private void doActivityClose(ActivityServerData data,long nextTurnTime,boolean atTime)
	{
		doActivityClose(data,data.config.endTimeT.getPrevTime(me),nextTurnTime,atTime);
	}
	
	/** 活动关闭 */
	private void doActivityClose(ActivityServerData data,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		
		data.lastTurnTime=lastTurnTime;
		data.nextTurnTime=nextTurnTime;
		
		//初始值不重复关闭
		if(data.isRunning)
		{
			data.isRunning=false;
			CenterC.server.radioGames(ActivitySwitchToGameServerRequest.create(data.id,data.isRunning,data.lastTurnTime,data.nextTurnTime,atTime));
			me.onActivityClose(data.id,atTime);
		}
	}
	
	/** 活动重置 */
	private void doActivityResetAtTime(ActivityServerData data)
	{
		doActivityReset(data,data.config.resetTimeT.getNextTime(me),true);
	}
	
	/** 活动重置 */
	private void doActivityReset(ActivityServerData data,long nextTurnTime,boolean atTime)
	{
		data.nextResetTime=nextTurnTime;
		
		CenterC.server.radioGames(ActivityResetToGameServerRequest.create(data.id,data.nextResetTime,atTime));
		
		me.onActivityReset(data.id,atTime);
	}
	
	/** 活动是否开启 */
	public boolean isActivityRunning(int id)
	{
		return _d.datas.get(id).isRunning;
	}
	
	/** gm开启活动 */
	public void openActivityByGM(int id)
	{
		ActivityServerData data=_d.datas.get(id);
		
		if(data==null || data.isForceClosed)
			return;
		
		if(data.isRunning)
			return;
		
		doActivityOpen(data,data.config.endTimeT.getNextTime(me),false);
	}
	
	/** gm关闭活动 */
	public void forceCloseActivityByGM(int id)
	{
		ActivityServerData data=_d.datas.get(id);
		
		if(data==null || !data.isForceClosed)
			return;
		
		data.isForceClosed=true;
		
		CenterC.server.radioGames(ChangeActivityForceCloseToGameServerRequest.create(data.id,true));
		
		if(!data.isRunning)
			return;
		
		doActivityClose(data,data.config.startTimeT.getNextTime(me),false);
	}
	
	/** 取消gm强制关闭活动(只取消,等下次到时间了开启） */
	public void cancelForceCloseActivityByGM(int id)
	{
		ActivityServerData data=_d.datas.get(id);
		
		if(data==null || !data.isForceClosed)
			return;
		
		data.isForceClosed=false;
		
		CenterC.server.radioGames(ChangeActivityForceCloseToGameServerRequest.create(data.id,false));
		
		runOnTime(data,false);
	}
	
	public void timeChanged()
	{
		_timeChanged=true;
	}
	
}
