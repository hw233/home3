package com.home.commonCenter.part.centerGlobal.part;
import com.home.commonBase.data.role.RoleShowChangeData;
import com.home.commonBase.data.role.RoleShowData;
import com.home.commonBase.data.social.RoleSocialData;
import com.home.commonBase.part.centerGlobal.data.CenterSocialPartData;
import com.home.commonCenter.global.CenterC;
import com.home.commonCenter.net.serverRequest.game.social.RemoveCenterRoleSocialDataToPlayerServerRequest;
import com.home.commonCenter.part.centerGlobal.base.CenterGlobalBasePart;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.support.collection.LongObjectMap;

/** 社交数据(generated by shine) */
public class CenterSocialPart extends CenterGlobalBasePart
{
	/** 数据 */
	private CenterSocialPartData _d;
	
	/** 角色社交数据字典 */
	private LongObjectMap<RoleSocialData> _roleSocialDataDic;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(CenterSocialPartData)data;
	}
	
	/** 获取数据 */
	public CenterSocialPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new CenterSocialPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
	
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		_roleSocialDataDic=new LongObjectMap<>(RoleSocialData[]::new);
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
	
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
	
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
	
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void onPlayerDelete(long playerID)
	{
		//移除角色外显数据
		deletePlayerRoleSocial(playerID);
	}
	
	/** 获取某角色的在线显示数据 */
	public RoleShowData getRoleShowData(long playerID)
	{
		RoleSocialData data=_roleSocialDataDic.get(playerID);
		
		if(data==null)
			return null;
		
		return data.showData;
	}
	
	/** 获取角色社交数据 */
	public RoleSocialData getRoleSocialData(long playerID)
	{
		return _roleSocialDataDic.get(playerID);
	}
	
	/** 获取角色社交数据字典 */
	public LongObjectMap<RoleSocialData> getRoleSocialDataDic()
	{
		return _roleSocialDataDic;
	}
	
	/** 添加角色社交数据 */
	public void addPlayerRoleSocial(RoleSocialData data)
	{
		long playerID=data.showData.playerID;
		
		//此处兼容旧数据
		
		RoleSocialData oldData;
		
		if((oldData=_roleSocialDataDic.get(playerID))!=null)
		{
			oldData.copy(data);
			//CenterC.db.refreshRoleSocial(playerID);
		}
		else
		{
			_roleSocialDataDic.put(playerID,data);
			//CenterC.db.addNewRoleSocial(data);
			//新的
			me.func.addNewSocialData(data);
		}
	}
	
	/** 添加角色社交数据(工具) */
	public RoleSocialData addOrGetPlayerRoleSocial(RoleSocialData data)
	{
		long playerID=data.showData.playerID;
		
		RoleSocialData oldData;
		
		if((oldData=_roleSocialDataDic.get(playerID))!=null)
		{
			return oldData;
		}
		else
		{
			_roleSocialDataDic.put(playerID,data);
			//CenterC.db.addNewRoleSocial(data);
			return data;
		}
	}
	
	/** 移除角色外显数据(本服) */
	public void deletePlayerRoleSocial(long playerID)
	{
		if(_roleSocialDataDic.remove(playerID)!=null)
		{
			//CenterC.db.deleteRoleSocial(playerID);
		}
	}
	
	/** 尝试删除角色社交数据(center部分调用) */
	public void tryRemovePlayerRoleSocial(long playerID)
	{
		//self和center都无需要
		if(!needPlayerRoleSocial(playerID))
		{
			deletePlayerRoleSocial(playerID);
			
			//发送到角色
			RemoveCenterRoleSocialDataToPlayerServerRequest.create().sendToPlayer(playerID);
		}
	}
	
	/** 刷新角色外显数据(在线的) */
	public void refreshRoleSocialDataOnline(long playerID,RoleShowChangeData data)
	{
		RoleSocialData rData=getRoleSocialData(playerID);
		
		if(rData!=null)
		{
			//更新数据
			rData.onChange(data);
			//CenterC.db.refreshRoleSocial(playerID);
			
			//功能插件
			CenterC.global.func.onRefreshPartRoleSocial(playerID,data);
		}
		else
		{
			Ctrl.warnLog("refreshRoleSocialDataOnline时,数据不存在",playerID);
		}
	}
	
	/** 是否需要该角色的显示数据(全) */
	public boolean needPlayerRoleSocial(long playerID)
	{
		//排行榜
		if(me.func.needPlayerRoleSocial(playerID))
			return true;
		
		return false;
	}
	
	/** 设置集合 */
	public void setRoleSocialDic(LongObjectMap<RoleSocialData> dic)
	{
		_roleSocialDataDic=dic;
	}
	
}
