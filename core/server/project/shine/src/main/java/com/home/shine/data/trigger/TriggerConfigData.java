package com.home.shine.data.trigger;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.data.BaseData;
import com.home.shine.data.trigger.TriggerFuncData;
import com.home.shine.data.trigger.TriggerFuncListData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 单个trigger数据(generated by shine) */
public class TriggerConfigData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.TriggerConfig;
	
	/** id */
	public int id;
	
	/** 名字 */
	public String name="";
	
	/** 组类型 */
	public int groupType;
	
	/** 组ID */
	public int groupID;
	
	/** 是否开启 */
	public boolean isOpen;
	
	/** 事件优先级(默认0) */
	public int priority;
	
	/** 事件组 */
	public TriggerFuncData[] events;
	
	/** 环境组 */
	public TriggerFuncData[] conditions;
	
	/** 动作组 */
	public TriggerFuncData[] actions;
	
	public TriggerConfigData()
	{
		_dataID=ShineDataType.TriggerConfig;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "TriggerConfigData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.groupType=stream.readInt();
		
		this.groupID=stream.readInt();
		
		this.isOpen=stream.readBoolean();
		
		this.priority=stream.readInt();
		
		int eventsLen=stream.readLen();
		if(this.events==null || this.events.length!=eventsLen)
		{
			this.events=new TriggerFuncData[eventsLen];
		}
		TriggerFuncData[] eventsT=this.events;
		for(int eventsI=0;eventsI<eventsLen;++eventsI)
		{
			TriggerFuncData eventsV;
			BaseData eventsVT=stream.readDataFullNotNull();
			if(eventsVT!=null)
			{
				if(eventsVT instanceof TriggerFuncData)
				{
					eventsV=(TriggerFuncData)eventsVT;
				}
				else
				{
					eventsV=new TriggerFuncData();
					if(!(eventsVT.getClass().isAssignableFrom(TriggerFuncData.class)))
					{
						stream.throwTypeReadError(TriggerFuncData.class,eventsVT.getClass());
					}
					eventsV.shadowCopy(eventsVT);
				}
			}
			else
			{
				eventsV=null;
			}
			
			eventsT[eventsI]=eventsV;
		}
		
		int conditionsLen=stream.readLen();
		if(this.conditions==null || this.conditions.length!=conditionsLen)
		{
			this.conditions=new TriggerFuncData[conditionsLen];
		}
		TriggerFuncData[] conditionsT=this.conditions;
		for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
		{
			TriggerFuncData conditionsV;
			BaseData conditionsVT=stream.readDataFullNotNull();
			if(conditionsVT!=null)
			{
				if(conditionsVT instanceof TriggerFuncData)
				{
					conditionsV=(TriggerFuncData)conditionsVT;
				}
				else
				{
					conditionsV=new TriggerFuncData();
					if(!(conditionsVT.getClass().isAssignableFrom(TriggerFuncData.class)))
					{
						stream.throwTypeReadError(TriggerFuncData.class,conditionsVT.getClass());
					}
					conditionsV.shadowCopy(conditionsVT);
				}
			}
			else
			{
				conditionsV=null;
			}
			
			conditionsT[conditionsI]=conditionsV;
		}
		
		int actionsLen=stream.readLen();
		if(this.actions==null || this.actions.length!=actionsLen)
		{
			this.actions=new TriggerFuncData[actionsLen];
		}
		TriggerFuncData[] actionsT=this.actions;
		for(int actionsI=0;actionsI<actionsLen;++actionsI)
		{
			TriggerFuncData actionsV;
			BaseData actionsVT=stream.readDataFullNotNull();
			if(actionsVT!=null)
			{
				if(actionsVT instanceof TriggerFuncData)
				{
					actionsV=(TriggerFuncData)actionsVT;
				}
				else
				{
					actionsV=new TriggerFuncData();
					if(!(actionsVT.getClass().isAssignableFrom(TriggerFuncData.class)))
					{
						stream.throwTypeReadError(TriggerFuncData.class,actionsVT.getClass());
					}
					actionsV.shadowCopy(actionsVT);
				}
			}
			else
			{
				actionsV=null;
			}
			
			actionsT[actionsI]=actionsV;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.groupType);
		
		stream.writeInt(this.groupID);
		
		stream.writeBoolean(this.isOpen);
		
		stream.writeInt(this.priority);
		
		if(this.events!=null)
		{
			TriggerFuncData[] eventsT=this.events;
			stream.writeLen(eventsT.length);
			for(int eventsVI=0,eventsVLen=eventsT.length;eventsVI<eventsVLen;++eventsVI)
			{
				TriggerFuncData eventsV=eventsT[eventsVI];
				if(eventsV!=null)
				{
					stream.writeDataFullNotNull(eventsV);
				}
				else
				{
					nullObjError("eventsV");
				}
				
			}
		}
		else
		{
			nullObjError("events");
		}
		
		if(this.conditions!=null)
		{
			TriggerFuncData[] conditionsT=this.conditions;
			stream.writeLen(conditionsT.length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				TriggerFuncData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					stream.writeDataFullNotNull(conditionsV);
				}
				else
				{
					nullObjError("conditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("conditions");
		}
		
		if(this.actions!=null)
		{
			TriggerFuncData[] actionsT=this.actions;
			stream.writeLen(actionsT.length);
			for(int actionsVI=0,actionsVLen=actionsT.length;actionsVI<actionsVLen;++actionsVI)
			{
				TriggerFuncData actionsV=actionsT[actionsVI];
				if(actionsV!=null)
				{
					stream.writeDataFullNotNull(actionsV);
				}
				else
				{
					nullObjError("actionsV");
				}
				
			}
		}
		else
		{
			nullObjError("actions");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.groupType=stream.readInt();
		
		this.groupID=stream.readInt();
		
		this.isOpen=stream.readBoolean();
		
		this.priority=stream.readInt();
		
		int eventsLen=stream.readLen();
		if(this.events==null || this.events.length!=eventsLen)
		{
			this.events=new TriggerFuncData[eventsLen];
		}
		TriggerFuncData[] eventsT=this.events;
		for(int eventsI=0;eventsI<eventsLen;++eventsI)
		{
			TriggerFuncData eventsV;
			eventsV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			eventsT[eventsI]=eventsV;
		}
		
		int conditionsLen=stream.readLen();
		if(this.conditions==null || this.conditions.length!=conditionsLen)
		{
			this.conditions=new TriggerFuncData[conditionsLen];
		}
		TriggerFuncData[] conditionsT=this.conditions;
		for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
		{
			TriggerFuncData conditionsV;
			conditionsV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			conditionsT[conditionsI]=conditionsV;
		}
		
		int actionsLen=stream.readLen();
		if(this.actions==null || this.actions.length!=actionsLen)
		{
			this.actions=new TriggerFuncData[actionsLen];
		}
		TriggerFuncData[] actionsT=this.actions;
		for(int actionsI=0;actionsI<actionsLen;++actionsI)
		{
			TriggerFuncData actionsV;
			actionsV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			actionsT[actionsI]=actionsV;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.groupType);
		
		stream.writeInt(this.groupID);
		
		stream.writeBoolean(this.isOpen);
		
		stream.writeInt(this.priority);
		
		if(this.events!=null)
		{
			TriggerFuncData[] eventsT=this.events;
			stream.writeLen(eventsT.length);
			for(int eventsVI=0,eventsVLen=eventsT.length;eventsVI<eventsVLen;++eventsVI)
			{
				TriggerFuncData eventsV=eventsT[eventsVI];
				if(eventsV!=null)
				{
					stream.writeDataSimpleNotNull(eventsV);
				}
				else
				{
					nullObjError("eventsV");
				}
				
			}
		}
		else
		{
			nullObjError("events");
		}
		
		if(this.conditions!=null)
		{
			TriggerFuncData[] conditionsT=this.conditions;
			stream.writeLen(conditionsT.length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				TriggerFuncData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					stream.writeDataSimpleNotNull(conditionsV);
				}
				else
				{
					nullObjError("conditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("conditions");
		}
		
		if(this.actions!=null)
		{
			TriggerFuncData[] actionsT=this.actions;
			stream.writeLen(actionsT.length);
			for(int actionsVI=0,actionsVLen=actionsT.length;actionsVI<actionsVLen;++actionsVI)
			{
				TriggerFuncData actionsV=actionsT[actionsVI];
				if(actionsV!=null)
				{
					stream.writeDataSimpleNotNull(actionsV);
				}
				else
				{
					nullObjError("actionsV");
				}
				
			}
		}
		else
		{
			nullObjError("actions");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof TriggerConfigData))
			return;
		
		TriggerConfigData mData=(TriggerConfigData)data;
		
		this.id=mData.id;
		this.name=mData.name;
		this.groupType=mData.groupType;
		this.groupID=mData.groupID;
		this.isOpen=mData.isOpen;
		this.priority=mData.priority;
		this.events=mData.events;
		this.conditions=mData.conditions;
		this.actions=mData.actions;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof TriggerConfigData))
			return;
		
		TriggerConfigData mData=(TriggerConfigData)data;
		
		this.id=mData.id;
		
		this.name=mData.name;
		
		this.groupType=mData.groupType;
		
		this.groupID=mData.groupID;
		
		this.isOpen=mData.isOpen;
		
		this.priority=mData.priority;
		
		if(mData.events!=null)
		{
			TriggerFuncData[] eventsR=mData.events;
			int eventsLen=eventsR.length;
			if(this.events==null || this.events.length!=eventsLen)
			{
				this.events=new TriggerFuncData[eventsLen];
			}
			TriggerFuncData[] eventsT=this.events;
			for(int eventsI=0;eventsI<eventsLen;++eventsI)
			{
				TriggerFuncData eventsV=eventsR[eventsI];
				TriggerFuncData eventsU;
				if(eventsV!=null)
				{
					eventsU=(TriggerFuncData)eventsV.clone();
				}
				else
				{
					eventsU=null;
					nullObjError("eventsU");
				}
				
				eventsT[eventsI]=eventsU;
			}
		}
		else
		{
			this.events=null;
			nullObjError("events");
		}
		
		if(mData.conditions!=null)
		{
			TriggerFuncData[] conditionsR=mData.conditions;
			int conditionsLen=conditionsR.length;
			if(this.conditions==null || this.conditions.length!=conditionsLen)
			{
				this.conditions=new TriggerFuncData[conditionsLen];
			}
			TriggerFuncData[] conditionsT=this.conditions;
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				TriggerFuncData conditionsV=conditionsR[conditionsI];
				TriggerFuncData conditionsU;
				if(conditionsV!=null)
				{
					conditionsU=(TriggerFuncData)conditionsV.clone();
				}
				else
				{
					conditionsU=null;
					nullObjError("conditionsU");
				}
				
				conditionsT[conditionsI]=conditionsU;
			}
		}
		else
		{
			this.conditions=null;
			nullObjError("conditions");
		}
		
		if(mData.actions!=null)
		{
			TriggerFuncData[] actionsR=mData.actions;
			int actionsLen=actionsR.length;
			if(this.actions==null || this.actions.length!=actionsLen)
			{
				this.actions=new TriggerFuncData[actionsLen];
			}
			TriggerFuncData[] actionsT=this.actions;
			for(int actionsI=0;actionsI<actionsLen;++actionsI)
			{
				TriggerFuncData actionsV=actionsR[actionsI];
				TriggerFuncData actionsU;
				if(actionsV!=null)
				{
					actionsU=(TriggerFuncData)actionsV.clone();
				}
				else
				{
					actionsU=null;
					nullObjError("actionsU");
				}
				
				actionsT[actionsI]=actionsU;
			}
		}
		else
		{
			this.actions=null;
			nullObjError("actions");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		TriggerConfigData mData=(TriggerConfigData)data;
		if(this.id!=mData.id)
			return false;
		
		if(!this.name.equals(mData.name))
			return false;
		
		if(this.groupType!=mData.groupType)
			return false;
		
		if(this.groupID!=mData.groupID)
			return false;
		
		if(this.isOpen!=mData.isOpen)
			return false;
		
		if(this.priority!=mData.priority)
			return false;
		
		if(mData.events!=null)
		{
			if(this.events==null)
				return false;
			if(this.events.length!=mData.events.length)
				return false;
			TriggerFuncData[] eventsT=this.events;
			TriggerFuncData[] eventsR=mData.events;
			int eventsLen=eventsT.length;
			for(int eventsI=0;eventsI<eventsLen;++eventsI)
			{
				TriggerFuncData eventsU=eventsT[eventsI];
				TriggerFuncData eventsV=eventsR[eventsI];
				if(eventsV!=null)
				{
					if(eventsU==null)
						return false;
					if(!eventsU.dataEquals(eventsV))
						return false;
				}
				else
				{
					if(eventsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.events!=null)
				return false;
		}
		
		if(mData.conditions!=null)
		{
			if(this.conditions==null)
				return false;
			if(this.conditions.length!=mData.conditions.length)
				return false;
			TriggerFuncData[] conditionsT=this.conditions;
			TriggerFuncData[] conditionsR=mData.conditions;
			int conditionsLen=conditionsT.length;
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				TriggerFuncData conditionsU=conditionsT[conditionsI];
				TriggerFuncData conditionsV=conditionsR[conditionsI];
				if(conditionsV!=null)
				{
					if(conditionsU==null)
						return false;
					if(!conditionsU.dataEquals(conditionsV))
						return false;
				}
				else
				{
					if(conditionsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.conditions!=null)
				return false;
		}
		
		if(mData.actions!=null)
		{
			if(this.actions==null)
				return false;
			if(this.actions.length!=mData.actions.length)
				return false;
			TriggerFuncData[] actionsT=this.actions;
			TriggerFuncData[] actionsR=mData.actions;
			int actionsLen=actionsT.length;
			for(int actionsI=0;actionsI<actionsLen;++actionsI)
			{
				TriggerFuncData actionsU=actionsT[actionsI];
				TriggerFuncData actionsV=actionsR[actionsI];
				if(actionsV!=null)
				{
					if(actionsU==null)
						return false;
					if(!actionsU.dataEquals(actionsV))
						return false;
				}
				else
				{
					if(actionsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.actions!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("name");
		writer.sb.append(':');
		writer.sb.append(this.name);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("groupType");
		writer.sb.append(':');
		writer.sb.append(this.groupType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("groupID");
		writer.sb.append(':');
		writer.sb.append(this.groupID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isOpen");
		writer.sb.append(':');
		writer.sb.append(this.isOpen);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("priority");
		writer.sb.append(':');
		writer.sb.append(this.priority);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("events");
		writer.sb.append(':');
		writer.sb.append("Array<TriggerFuncData>");
		if(this.events!=null)
		{
			TriggerFuncData[] eventsT=this.events;
			int eventsLen=eventsT.length;
			writer.sb.append('(');
			writer.sb.append(eventsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int eventsI=0;eventsI<eventsLen;++eventsI)
			{
				TriggerFuncData eventsV=eventsT[eventsI];
				writer.writeTabs();
				writer.sb.append(eventsI);
				writer.sb.append(':');
				if(eventsV!=null)
				{
					eventsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("conditions");
		writer.sb.append(':');
		writer.sb.append("Array<TriggerFuncData>");
		if(this.conditions!=null)
		{
			TriggerFuncData[] conditionsT=this.conditions;
			int conditionsLen=conditionsT.length;
			writer.sb.append('(');
			writer.sb.append(conditionsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				TriggerFuncData conditionsV=conditionsT[conditionsI];
				writer.writeTabs();
				writer.sb.append(conditionsI);
				writer.sb.append(':');
				if(conditionsV!=null)
				{
					conditionsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("actions");
		writer.sb.append(':');
		writer.sb.append("Array<TriggerFuncData>");
		if(this.actions!=null)
		{
			TriggerFuncData[] actionsT=this.actions;
			int actionsLen=actionsT.length;
			writer.sb.append('(');
			writer.sb.append(actionsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int actionsI=0;actionsI<actionsLen;++actionsI)
			{
				TriggerFuncData actionsV=actionsT[actionsI];
				writer.writeTabs();
				writer.sb.append(actionsI);
				writer.sb.append(':');
				if(actionsV!=null)
				{
					actionsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.events=new TriggerFuncData[0];
		this.conditions=new TriggerFuncData[0];
		this.actions=new TriggerFuncData[0];
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.id=0;
		this.name="";
		this.groupType=0;
		this.groupID=0;
		this.isOpen=false;
		this.priority=0;
		this.events=null;
		this.conditions=null;
		this.actions=null;
	}
	
}
