package com.home.shine.data;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.global.ShineSetting;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.pool.BigNumberPool;
import com.home.shine.support.pool.DataPool;

/** 大数(只支持正整数)(generated by shine) */
public class BigNumberData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.BigNumber;
	
	/** 值组 */
	public IntList values;
	
	/** 十进制字符串dirty */
	private boolean _numberStrDirty=true;
	
	/** 十进制字符串 */
	private String _numberStr;
	
	/** 临时builder */
	private StringBuilder _sb;
	
	public BigNumberData()
	{
		_dataID=ShineDataType.BigNumber;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "BigNumberData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int valuesLen=stream.readLen();
		if(this.values!=null)
		{
			this.values.clear();
			this.values.ensureCapacity(valuesLen);
		}
		else
		{
			this.values=new IntList(valuesLen);
		}
		
		IntList valuesT=this.values;
		for(int valuesI=valuesLen-1;valuesI>=0;--valuesI)
		{
			int valuesV;
			valuesV=stream.readInt();
			
			valuesT.add(valuesV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.values!=null)
		{
			stream.writeLen(this.values.size());
			if(!this.values.isEmpty())
			{
				int[] valuesVValues=this.values.getValues();
				for(int valuesVI=0,valuesVLen=this.values.length();valuesVI<valuesVLen;++valuesVI)
				{
					int valuesV=valuesVValues[valuesVI];
					stream.writeInt(valuesV);
					
				}
			}
		}
		else
		{
			nullObjError("values");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		int valuesLen=stream.readLen();
		if(this.values!=null)
		{
			this.values.clear();
			this.values.ensureCapacity(valuesLen);
		}
		else
		{
			this.values=new IntList(valuesLen);
		}
		
		IntList valuesT=this.values;
		for(int valuesI=valuesLen-1;valuesI>=0;--valuesI)
		{
			int valuesV;
			valuesV=stream.readInt();
			
			valuesT.add(valuesV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.values!=null)
		{
			stream.writeLen(this.values.size());
			if(!this.values.isEmpty())
			{
				int[] valuesVValues=this.values.getValues();
				for(int valuesVI=0,valuesVLen=this.values.length();valuesVI<valuesVLen;++valuesVI)
				{
					int valuesV=valuesVValues[valuesVI];
					stream.writeInt(valuesV);
					
				}
			}
		}
		else
		{
			nullObjError("values");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof BigNumberData))
			return;
		
		BigNumberData mData=(BigNumberData)data;
		
		this.values=mData.values;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof BigNumberData))
			return;
		
		BigNumberData mData=(BigNumberData)data;
		
		if(mData.values!=null)
		{
			if(this.values!=null)
			{
				this.values.clear();
				this.values.ensureCapacity(mData.values.size());
			}
			else
			{
				this.values=new IntList(mData.values.size());
			}
			
			IntList valuesT=this.values;
			if(!mData.values.isEmpty())
			{
				int[] valuesVValues=mData.values.getValues();
				for(int valuesVI=0,valuesVLen=mData.values.length();valuesVI<valuesVLen;++valuesVI)
				{
					int valuesV=valuesVValues[valuesVI];
					int valuesU;
					valuesU=valuesV;
					
					valuesT.add(valuesU);
				}
			}
		}
		else
		{
			this.values=null;
			nullObjError("values");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		BigNumberData mData=(BigNumberData)data;
		if(mData.values!=null)
		{
			if(this.values==null)
				return false;
			if(this.values.size()!=mData.values.size())
				return false;
			IntList valuesT=this.values;
			IntList valuesR=mData.values;
			int valuesLen=valuesT.size();
			for(int valuesI=0;valuesI<valuesLen;++valuesI)
			{
				int valuesU=valuesT.get(valuesI);
				int valuesV=valuesR.get(valuesI);
				if(valuesU!=valuesV)
					return false;
				
			}
		}
		else
		{
			if(this.values!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("values");
		writer.sb.append(':');
		writer.sb.append("List<int>");
		if(this.values!=null)
		{
			IntList valuesT=this.values;
			int valuesLen=valuesT.size();
			writer.sb.append('(');
			writer.sb.append(valuesLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int valuesI=0;valuesI<valuesLen;++valuesI)
			{
				int valuesV=valuesT.get(valuesI);
				writer.writeTabs();
				writer.sb.append(valuesI);
				writer.sb.append(':');
				writer.sb.append(valuesV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.values=new IntList();
	}
	
	@Override
	public void clear()
	{
		clearInit();
	}
	
	/** 确认初始化了 */
	private void ensureInit()
	{
		if(values==null)
		{
			values=new IntList();
			setDirty();
		}
	}
	
	/** 清空初始化 */
	private void clearInit()
	{
		if(values==null)
			values=new IntList();
		else
			values.clear();
		
		setDirty();
	}
	
	/** 归零 */
	public void setEmpty()
	{
		if(values!=null)
			values.clear();
		
		setDirty();
	}
	
	@Override
	public String toString()
	{
		return toNumberString();
	}
	
	/** 转化数字显示 */
	public String toNumberString()
	{
		if(_numberStrDirty)
		{
			_numberStrDirty=false;
			
			if(_sb==null)
			{
				_sb=new StringBuilder();
			}
			else
			{
				_sb.setLength(0);
			}
			
			int len=values.size();
			
			if(len==0)
				return "0";
			
			int[] values2=values.getValues();
			
			_sb.append(values2[len-1]);
			
			String v;
			int last;
			
			for(int i=values.size()-2;i>=0;--i)
			{
				v=String.valueOf(values2[i]);
				
				if((last=ShineSetting.bigNumberWei-v.length())>0)
				{
					while((--last)>=0)
					{
						_sb.append("0");
					}
				}
				
				_sb.append(v);
			}
			
			_numberStr=_sb.toString();
		}
		
		return _numberStr;
	}
	
	private void setDirty()
	{
		_numberStrDirty=true;
	}
	
	/** 通过字符串初始化 */
	public void initByStr(String str)
	{
		clearInit();
		
		if(str.isEmpty())
			return;
		
		if(str.charAt(0)=='-')
		{
			Ctrl.warnLog("不支持负数",str);
			return;
		}
		
		int len=str.length();
		
		int wei=ShineSetting.bigNumberWei;
		//段数
		int num=len/wei;
		int last=len-(wei*num);
		
		if(last>0)
		{
			num++;
		}
		
		values.setLength(num);
		
		for(int i=0;i<num;++i)
		{
			int ss=len-i*wei;
			int ee=ss-wei;
			
			if(ee<0)
				ee=0;
			
			int thisV=Integer.parseInt(str.substring(ee,ss));
			
			values.set(i,thisV);
		}
	}
	
	/** 通过字符串初始化 */
	public void initByInt(int value)
	{
		clearInit();
		
		if(value<0)
		{
			Ctrl.warnLog("不支持负数",value);
			return;
		}
		
		if(value==0)
			return;
		
		//是否负数
		int vv;
		int div;
		
		while(value>0)
		{
			div=value/ShineSetting.bigNumberWeiValue;
			vv=value-div*ShineSetting.bigNumberWeiValue;
			values.add(vv);
			
			value=div;
		}
	}
	
	/** 通过字符串初始化 */
	public void initByLong(long value)
	{
		clearInit();
		
		if(value<0)
		{
			Ctrl.warnLog("不支持负数",value);
			return;
		}
		
		if(value==0)
			return;
		
		//是否负数
		
		int vv;
		long div;
		
		while(value>0)
		{
			div=value/ShineSetting.bigNumberWeiValue;
			vv=(int)(value-div*ShineSetting.bigNumberWeiValue);
			values.add(vv);
			
			value=div;
		}
	}
	
	/** 是否为空 */
	public boolean isEmpty()
	{
		return values==null || values.isEmpty();
	}
	
	/** 通过字符串创建 */
	public static BigNumberData createByStr(String str)
	{
		BigNumberData re=new BigNumberData();
		re.initByStr(str);
		return re;
	}
	
	/** 通过int创建 */
	public static BigNumberData createByInt(int value)
	{
		BigNumberData re=new BigNumberData();
		re.initByInt(value);
		return re;
	}
	
	/** 通过int创建 */
	public static BigNumberData createByLong(long value)
	{
		BigNumberData re=new BigNumberData();
		re.initByLong(value);
		return re;
	}
	
	/** 相等比较 */
	public boolean equals(BigNumberData data)
	{
		return compare(this,data)==0;
	}
	
	/** 将list1的值拷贝到list2 */
	private static void copyValueTo(IntList list1,IntList list2)
	{
		int len1=list1.size();
		
		list2.setLength(list1.size());
		System.arraycopy(list1.getValues(),0,list2.getValues(),0,len1);
	}
	
	/** 比大小(b1<b2返回-1),b1==b2返回0,b1>b2返回1 */
	public static int compare(BigNumberData b1,BigNumberData b2)
	{
		boolean isEmpty1=b1.isEmpty();
		boolean isEmpty2=b2.isEmpty();
		
		if(isEmpty1)
		{
			return isEmpty2 ? 0 : -1;
		}
		
		if(isEmpty2)
		{
			return 1;
		}
		
		return compareValue(b1.values,b2.values);
	}
	
	/** 比大小(b1<value返回-1),b1==value返回0,b1>value返回1 */
	public static int compare(BigNumberData b1,int value)
	{
		if(value<0)
		{
			Ctrl.warnLog("不支持负数");
			return 1;
		}
		
		boolean isEmpty1=b1.isEmpty();
		
		if(isEmpty1)
		{
			return value==0 ? 0 : -1;
		}
		
		if(value==0)
		{
			return 1;
		}
		
		return compareValue(b1.values,value);
	}
	
	/** 比大小(b1<value返回-1),b1==value返回0,b1>value返回1 */
	public static int compare(BigNumberData b1,long value)
	{
		if(value<0)
		{
			Ctrl.warnLog("不支持负数");
			return 1;
		}
		
		boolean isEmpty1=b1.isEmpty();
		
		if(isEmpty1)
		{
			return value==0 ? 0 : -1;
		}
		
		if(value==0)
		{
			return 1;
		}
		
		return compareValue(b1.values,value);
	}
	
	/** 比较绝对值 */
	private static int compareValue(IntList list1,IntList list2)
	{
		int len1;
		int len2;
		
		if((len1=list1.size())!=(len2=list2.size()))
		{
			return len1<len2 ? -1 : 1;
		}
		
		int[] values1=list1.getValues();
		int[] values2=list2.getValues();
		
		int v1;
		int v2;
		
		for(int i=len1-1;i>=0;--i)
		{
		    if((v1=values1[i])!=(v2=values2[i]))
			{
				return v1<v2 ? -1 : 1;
			}
		}
		
		return 0;
	}
	
	/** 比较绝对值 */
	private static int compareValue(IntList list1,int value)
	{
		if(value<ShineSetting.bigNumberWeiValue)
		{
			if(list1.size()>1)
				return 1;
			
			return Integer.compare(list1.get(0),value);
		}
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByInt(value);
		int re=compareValue(list1,tData.values);
		BigNumberPool.release(tData);
		return re;
	}
	
	/** 比较绝对值 */
	private static int compareValue(IntList list1,long value)
	{
		if(value<ShineSetting.bigNumberWeiValue)
		{
			if(list1.size()>1)
				return 1;
			
			return Long.compare(list1.get(0),value);
		}
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByLong(value);
		int re=compareValue(list1,tData.values);
		BigNumberPool.release(tData);
		return re;
	}
	
	/** 处理进位 */
	private static void remake(IntList list)
	{
		int len=list.size();
		int[] values=list.getValues();
		int v;
		int t;
		
		for(int i=0;i<len;++i)
		{
			if((v=values[i])>=ShineSetting.bigNumberWeiValue)
			{
				t=v/ShineSetting.bigNumberWeiValue;
			}
		}
	}
	
	/** 处理进位一次 */
	private static void remakeOnce(int[] values,int index,int len)
	{
		int temp;
		
		for(int i=index;i<len;++i)
		{
			if(values[i]>=ShineSetting.bigNumberWeiValue)
			{
				temp=values[i]/ShineSetting.bigNumberWeiValue;
				values[i]-=(temp*ShineSetting.bigNumberWeiValue);
				values[i+1]+=temp;
			}
		}
	}
	
	/** 恢复长度 */
	private static void reLength(IntList list)
	{
		int[] values=list.getValues();
		
		//长度归
		for(int i=list.size()-1;i>=0;--i)
		{
			if(values[i]==0)
			{
				list.justSetSize(i);
			}
			else
			{
				break;
			}
		}
	}
	
	/** 绝对值相加,把list2加到list1上 */
	private static void doAddValue(IntList list1,IntList list2)
	{
		int len1;
		int len2;
		
		int maxLen=Math.max(len1=list1.size(),len2=list2.size());
		
		list1.setLength(maxLen);
		
		int[] values1=list1.getValues();
		int[] values2=list2.getValues();
		
		int v2;
		
		for(int i=0;i<maxLen;i++)
		{
			v2=i<len2 ? values2[i] : 0;
			
			//超了
			if((values1[i]+=v2)>=ShineSetting.bigNumberWeiValue)
			{
				values1[i]-=ShineSetting.bigNumberWeiValue;
				
				if((i+1)==maxLen)
				{
					list1.setLength(maxLen+1);
					values1=list1.getValues();
				}
				
				//进位
				values1[i+1]++;
			}
		}
	}
	
	/** 绝对值相减(已比较过，list1>list2,结果记录到list1上) */
	private static void doSubValue(IntList list1,IntList list2)
	{
		int len1=list1.size();
		int len2=list2.size();
		
		int[] values1=list1.getValues();
		int[] values2=list2.getValues();
		
		int v2;
		
		for(int i=0;i<len2;i++)
		{
			v2=values2[i];
			
			//需要借
			if((values1[i]-=v2)<0)
			{
				values1[i+1]--;
				values1[i]+=ShineSetting.bigNumberWeiValue;
			}
		}
		
		reLength(list1);
	}
	
	/** 绝对值相乘(已比较过，list1>list2,结果记录到list1上) */
	private static void doMulValue(IntList list1,IntList list2)
	{
		BigNumberData tData=BigNumberPool.create();
		copyValueTo(list1,tData.values);
		IntList result=list1;
		list1=tData.values;
		
		int len1=list1.size();
		int len2=list2.size();
		
		result.clear();
		result.setLength(len1+len2);
		
		int[] values1=list1.getValues();
		int[] values2=list2.getValues();
		int[] values3=result.getValues();
		
		
		for(int i=0;i<len1;i++)
		{
			for(int j=0;j<len2;j++)
			{
				values3[i+j]+=values1[i]*values2[j];
			}
			
			remakeOnce(values3,i,i+len2);
		}
		
		reLength(result);
		
		BigNumberPool.release(tData);
	}
	
	/** 绝对值相除(已比较过，list1>list2,结果记录到list1上) */
	private static void doDivValue(IntList list1,IntList list2)
	{
		BigNumberData tData=BigNumberPool.create();
		copyValueTo(list1,tData.values);
		IntList result=list1;
		list1=tData.values;
		
		int len1=list1.size();
		int len2=list2.size();
		
		int lastLen=len1-len2+1;
		
		result.clear();
		result.setLength(lastLen);
		
		int[] values1=list1.getValues();
		int[] values2=list2.getValues();
		int[] values3=result.getValues();
		
		for(int i=lastLen-1;i>=0;--i)
		{
		
		}
		
		for(int i=0;i<len1;i++)
		{
			for(int j=0;j<len2;j++)
			{
				values3[i+j]+=values1[i]*values2[j];
			}
			
			remakeOnce(values3,i,i+len2);
		}
		
		reLength(result);
	}
	
	/** 加法 */
	public void add(BigNumberData data)
	{
		ensureInit();
		data.ensureInit();
		
		doAddValue(this.values,data.values);
		setDirty();
	}
	
	/** 加法 */
	public void add(int value)
	{
		ensureInit();
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByInt(value);
		doAddValue(this.values,tData.values);
		BigNumberPool.release(tData);
		setDirty();
	}
	
	/** 加法 */
	public void add(long value)
	{
		ensureInit();
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByLong(value);
		doAddValue(this.values,tData.values);
		BigNumberPool.release(tData);
		setDirty();
	}
	
	/** 减法 */
	public void sub(BigNumberData data)
	{
		ensureInit();
		data.ensureInit();
		
		int re=compare(this,data);
		if(re<=0)
		{
			setEmpty();
			return;
		}
		
		doSubValue(this.values,data.values);
		setDirty();
	}
	
	/** 减法 */
	public void sub(int value)
	{
		ensureInit();
		
		int re=compare(this,value);
		if(re<=0)
		{
			setEmpty();
			return;
		}
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByInt(value);
		doSubValue(this.values,tData.values);
		BigNumberPool.release(tData);
		setDirty();
	}
	
	/** 减法 */
	public void sub(long value)
	{
		ensureInit();
		
		int re=compare(this,value);
		if(re<=0)
		{
			setEmpty();
			return;
		}
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByLong(value);
		doSubValue(this.values,tData.values);
		BigNumberPool.release(tData);
		setDirty();
	}
	
	/** 乘法 */
	public void mul(BigNumberData data)
	{
		ensureInit();
		data.ensureInit();
		
		if(isEmpty())
			return;
		
		if(data.isEmpty())
		{
			setEmpty();
			return;
		}
		
		doMulValue(this.values,data.values);
		setDirty();
	}
	
	/** 乘法 */
	public void mul(int value)
	{
		ensureInit();
		
		if(isEmpty())
			return;
		
		if(value==0)
		{
			setEmpty();
			return;
		}
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByInt(value);
		doMulValue(this.values,tData.values);
		BigNumberPool.release(tData);
		setDirty();
	}
	
	/** 乘法 */
	public void mul(long value)
	{
		ensureInit();
		
		if(isEmpty())
			return;
		
		if(value==0)
		{
			setEmpty();
			return;
		}
		
		BigNumberData tData=BigNumberPool.create();
		tData.initByLong(value);
		doMulValue(this.values,tData.values);
		BigNumberPool.release(tData);
		setDirty();
	}
	
	/** 除法 */
	public void div(BigNumberData data)
	{
		ensureInit();
		data.ensureInit();
		
		if(isEmpty())
			return;
		
		if(data.isEmpty())
		{
			Ctrl.errorLog("除数不能为0");
			setEmpty();
			return;
		}
		
		int re=compare(this,data);
		
		if(re==0)
		{
			setEmpty();
			values.add(1);//1
			return;
		}
		else if(re<0)
		{
			setEmpty();
			return;
		}
		
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.values=null;
	}
	
}
