package com.home.shine.data.trigger;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.data.BaseData;
import com.home.shine.data.trigger.TriggerObjData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class TriggerListData extends TriggerObjData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.TriggerList;
	
	public SList<TriggerObjData> value;
	
	public TriggerListData()
	{
		_dataID=ShineDataType.TriggerList;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "TriggerListData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int valueLen=stream.readLen();
		if(this.value!=null)
		{
			this.value.clear();
			this.value.ensureCapacity(valueLen);
		}
		else
		{
			this.value=new SList<TriggerObjData>(TriggerObjData[]::new,valueLen);
		}
		
		SList<TriggerObjData> valueT=this.value;
		for(int valueI=valueLen-1;valueI>=0;--valueI)
		{
			TriggerObjData valueV;
			BaseData valueVT=stream.readDataFullNotNull();
			if(valueVT!=null)
			{
				if(valueVT instanceof TriggerObjData)
				{
					valueV=(TriggerObjData)valueVT;
				}
				else
				{
					valueV=new TriggerObjData();
					if(!(valueVT.getClass().isAssignableFrom(TriggerObjData.class)))
					{
						stream.throwTypeReadError(TriggerObjData.class,valueVT.getClass());
					}
					valueV.shadowCopy(valueVT);
				}
			}
			else
			{
				valueV=null;
			}
			
			valueT.add(valueV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.value!=null)
		{
			stream.writeLen(this.value.size());
			if(!this.value.isEmpty())
			{
				Object[] valueVValues=this.value.getValues();
				for(int valueVI=0,valueVLen=this.value.length();valueVI<valueVLen;++valueVI)
				{
					TriggerObjData valueV=(TriggerObjData)valueVValues[valueVI];
					if(valueV!=null)
					{
						stream.writeDataFullNotNull(valueV);
					}
					else
					{
						nullObjError("valueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("value");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int valueLen=stream.readLen();
		if(this.value!=null)
		{
			this.value.clear();
			this.value.ensureCapacity(valueLen);
		}
		else
		{
			this.value=new SList<TriggerObjData>(TriggerObjData[]::new,valueLen);
		}
		
		SList<TriggerObjData> valueT=this.value;
		for(int valueI=valueLen-1;valueI>=0;--valueI)
		{
			TriggerObjData valueV;
			valueV=(TriggerObjData)stream.readDataSimpleNotNull();
			
			valueT.add(valueV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.value!=null)
		{
			stream.writeLen(this.value.size());
			if(!this.value.isEmpty())
			{
				Object[] valueVValues=this.value.getValues();
				for(int valueVI=0,valueVLen=this.value.length();valueVI<valueVLen;++valueVI)
				{
					TriggerObjData valueV=(TriggerObjData)valueVValues[valueVI];
					if(valueV!=null)
					{
						stream.writeDataSimpleNotNull(valueV);
					}
					else
					{
						nullObjError("valueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("value");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof TriggerListData))
			return;
		
		TriggerListData mData=(TriggerListData)data;
		
		this.value=mData.value;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof TriggerListData))
			return;
		
		TriggerListData mData=(TriggerListData)data;
		
		if(mData.value!=null)
		{
			if(this.value!=null)
			{
				this.value.clear();
				this.value.ensureCapacity(mData.value.size());
			}
			else
			{
				this.value=new SList<TriggerObjData>(TriggerObjData[]::new,mData.value.size());
			}
			
			SList<TriggerObjData> valueT=this.value;
			if(!mData.value.isEmpty())
			{
				Object[] valueVValues=mData.value.getValues();
				for(int valueVI=0,valueVLen=mData.value.length();valueVI<valueVLen;++valueVI)
				{
					TriggerObjData valueV=(TriggerObjData)valueVValues[valueVI];
					TriggerObjData valueU;
					if(valueV!=null)
					{
						valueU=(TriggerObjData)valueV.clone();
					}
					else
					{
						valueU=null;
						nullObjError("valueU");
					}
					
					valueT.add(valueU);
				}
			}
		}
		else
		{
			this.value=null;
			nullObjError("value");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		TriggerListData mData=(TriggerListData)data;
		if(mData.value!=null)
		{
			if(this.value==null)
				return false;
			if(this.value.size()!=mData.value.size())
				return false;
			SList<TriggerObjData> valueT=this.value;
			SList<TriggerObjData> valueR=mData.value;
			int valueLen=valueT.size();
			for(int valueI=0;valueI<valueLen;++valueI)
			{
				TriggerObjData valueU=valueT.get(valueI);
				TriggerObjData valueV=valueR.get(valueI);
				if(valueV!=null)
				{
					if(valueU==null)
						return false;
					if(!valueU.dataEquals(valueV))
						return false;
				}
				else
				{
					if(valueU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.value!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("value");
		writer.sb.append(':');
		writer.sb.append("List<TriggerObjData>");
		if(this.value!=null)
		{
			SList<TriggerObjData> valueT=this.value;
			int valueLen=valueT.size();
			writer.sb.append('(');
			writer.sb.append(valueLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int valueI=0;valueI<valueLen;++valueI)
			{
				TriggerObjData valueV=valueT.get(valueI);
				writer.writeTabs();
				writer.sb.append(valueI);
				writer.sb.append(':');
				if(valueV!=null)
				{
					valueV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("TriggerObjData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.value=new SList<TriggerObjData>(TriggerObjData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.value=null;
	}
	
}
