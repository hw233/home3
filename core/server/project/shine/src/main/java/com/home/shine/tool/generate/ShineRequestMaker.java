package com.home.shine.tool.generate;
import com.home.shine.constlist.generate.ShineRequestType;
import com.home.shine.data.BaseData;
import com.home.shine.net.request.AckPingRequest;
import com.home.shine.net.request.PingRequest;
import com.home.shine.net.request.RePingRequest;
import com.home.shine.net.request.SocketConnectSuccessRequest;
import com.home.shine.net.request.SocketReconnectFailedRequest;
import com.home.shine.net.request.SocketReconnectRequest;
import com.home.shine.net.request.SocketReconnectSuccessRequest;
import com.home.shine.tool.CreateDataFunc;
import com.home.shine.tool.DataMaker;

/** (generated by shine) */
public class ShineRequestMaker extends DataMaker
{
	public ShineRequestMaker()
	{
		offSet=ShineRequestType.off;
		list=new CreateDataFunc[ShineRequestType.count-offSet];
		list[ShineRequestType.Ping-offSet]=this::createPingRequest;
		list[ShineRequestType.RePing-offSet]=this::createRePingRequest;
		list[ShineRequestType.SocketConnectSuccess-offSet]=this::createSocketConnectSuccessRequest;
		list[ShineRequestType.SocketReconnect-offSet]=this::createSocketReconnectRequest;
		list[ShineRequestType.SocketReconnectSuccess-offSet]=this::createSocketReconnectSuccessRequest;
		list[ShineRequestType.AckPing-offSet]=this::createAckPingRequest;
		list[ShineRequestType.SocketReconnectFailed-offSet]=this::createSocketReconnectFailedRequest;
	}
	
	private BaseData createPingRequest()
	{
		return new PingRequest();
	}
	
	private BaseData createRePingRequest()
	{
		return new RePingRequest();
	}
	
	private BaseData createSocketConnectSuccessRequest()
	{
		return new SocketConnectSuccessRequest();
	}
	
	private BaseData createSocketReconnectRequest()
	{
		return new SocketReconnectRequest();
	}
	
	private BaseData createSocketReconnectSuccessRequest()
	{
		return new SocketReconnectSuccessRequest();
	}
	
	private BaseData createAckPingRequest()
	{
		return new AckPingRequest();
	}
	
	private BaseData createSocketReconnectFailedRequest()
	{
		return new SocketReconnectFailedRequest();
	}
	
}
