package com.home.shine.net.response;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.constlist.generate.ShineResponseType;
import com.home.shine.control.ThreadControl;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.net.base.ShineResponse;
import com.home.shine.net.request.SocketReconnectFailedRequest;
import com.home.shine.net.socket.BaseSocket;
import com.home.shine.server.BaseServer;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 重连消息(generated by shine) */
public class SocketReconnectResponse extends ShineResponse
{
	/** 数据类型ID */
	public static final int dataID=ShineResponseType.SocketReconnect;
	
	public BaseServer server;
	
	/** 源socketID */
	public int socketID;
	
	/** 令牌 */
	public int token;
	
	/** 最后收包索引 */
	public int lastReceiveIndex;
	
	public SocketReconnectResponse()
	{
		_dataID=ShineResponseType.SocketReconnect;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SocketReconnectResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.socketID=stream.readInt();
		
		this.token=stream.readInt();
		
		this.lastReceiveIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.socketID=stream.readInt();
		
		this.token=stream.readInt();
		
		this.lastReceiveIndex=stream.readInt();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("socketID");
		writer.sb.append(':');
		writer.sb.append(this.socketID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("token");
		writer.sb.append(':');
		writer.sb.append(this.token);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastReceiveIndex");
		writer.sb.append(':');
		writer.sb.append(this.lastReceiveIndex);
		
		writer.writeEnter();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		BaseSocket lastSocket=server.getSocket(socketID);
		
		Ctrl.log("收到重连",socketID);
		
		//不是重连中
		if(lastSocket==null)// || !lastSocket.isReconnecting() //不再判定是否重连中,因为udp
		{
			Ctrl.warnLog("重连时,连接不存在，或者连接不在重连中:",socketID);
			socket.reConnectFailedClose();
			return;
		}
		
		if(lastSocket.getToken()!=token)
		{
			Ctrl.warnLog("重连时,令牌不正确:",socketID);
			socket.reConnectFailedClose();
			return;
		}
		
		ThreadControl.addIOFunc(lastSocket.ioIndex,()->
		{
			lastSocket.doReconnect(socket,(short)lastReceiveIndex);
		});
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.socketID=0;
		this.token=0;
		this.lastReceiveIndex=0;
	}
	
}
