package com.home.shine.net.response;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.constlist.generate.ShineResponseType;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.net.base.ShineResponse;
import com.home.shine.net.request.RePingRequest;
import com.home.shine.net.socket.ReceiveSocket;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** ping包第一步(generated by shine) */
public class PingResponse extends ShineResponse
{
	/** 数据类型ID */
	public static final int dataID=ShineResponseType.Ping;
	
	public int index;
	
	public PingResponse()
	{
		_dataID=ShineResponseType.Ping;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PingResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		if(!(socket instanceof ReceiveSocket))
		{
			Ctrl.warnLog("收到Ping消息时,不是ReceiveSocket");
			return;
		}
		
		((ReceiveSocket)socket).onPing(index);
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.index=stream.readInt();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("index");
		writer.sb.append(':');
		writer.sb.append(this.index);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.index=0;
	}
	
}
