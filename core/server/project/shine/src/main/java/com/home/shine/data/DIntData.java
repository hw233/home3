package com.home.shine.data;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 双整形数据(generated by shine) */
public class DIntData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.DInt;
	
	/** 键 */
	public int key=-1;
	
	/** 值 */
	public int value=0;
	
	public DIntData()
	{
		_dataID=ShineDataType.DInt;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.key=stream.readInt();
		
		this.value=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.key);
		
		stream.writeInt(this.value);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.key=stream.readInt();
		
		this.value=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.key);
		
		stream.writeInt(this.value);
		
	}
	
	@Override
	public String toString()
	{
		return this.key + ":" + this.value;
	}
	
	public void readByString(String str)
	{
		readByStringAll(str,0);
	}
	
	public void readByStringAll(String str,int defaultValue)
	{
		key=-1;
		value=defaultValue;
		
		if(!str.isEmpty())
		{
			String[] arr=str.split(":");
			
			key=Integer.parseInt(arr[0]);
			
			if(arr.length>1)
			{
				value=Integer.parseInt(arr[1]);
			}
		}
	}
	
	/** 构建一个 */
	public static DIntData create(int key,int value)
	{
		DIntData re=new DIntData();
		re.key=key;
		re.value=value;
		
		return re;
	}
	
	/** 构建一个 */
	public static DIntData readByStr(String str)
	{
		DIntData re=new DIntData();
		re.readByString(str);
		
		return re;
	}
	
	/** 读取一组 */
	public static DIntData[] readArrayByString(String str)
	{
		return readArrayByString(str,",",0);
	}
	
	/** 读一数组 */
	public static DIntData[] readArrayByString(String str,String split,int defaultValue)
	{
		DIntData[] re;
		
		int i;

		String[] arr;

		if(str.equals(""))
		{
			re=new DIntData[0];
		}
		else
		{
			arr=str.split(split);

			re=new DIntData[arr.length];

			for(i=0;i<arr.length;i++)
			{
				re[i]=new DIntData();
				re[i].readByStringAll(arr[i],defaultValue);
			}
		}
		
		return re;
	}
	
	/** 读取一个列表 */
	public static SList<DIntData> readListByString(String str)
	{
		SList<DIntData> re=new SList<DIntData>();
		
		int i;

		String[] arr;

		if(!str.isEmpty())
		{
			arr=str.split(",");
			
			DIntData cc;

			for(i=0;i<arr.length;i++)
			{
				cc=new DIntData();
				cc.readByString(arr[i]);
				re.add(cc);
			}
		}
		
		return re;
	}
	
	/** 读一字典(3目的字典) */
	public static IntObjectMap<DIntData> readDicByString(String str)
	{
		IntObjectMap<DIntData> re=null;
		
		int i;
		
		String[] arr;
		
		String[] arr2;
		
		if(!str.equals(""))
		{
			arr=str.split(",");
			
			re=new IntObjectMap<>(arr.length);
			
			for(i=0;i<arr.length;i++)
			{
				arr2=arr[i].split(":");
				
				re.put(Integer.parseInt(arr2[0]),DIntData.create(Integer.parseInt(arr2[1]),Integer.parseInt(arr2[2])));
			}
		}
		
		if(re==null)
		{
			re=new IntObjectMap<>();
		}
		
		return re;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "DIntData";
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof DIntData))
			return;
		
		DIntData mData=(DIntData)data;
		
		this.key=mData.key;
		this.value=mData.value;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof DIntData))
			return;
		
		DIntData mData=(DIntData)data;
		
		this.key=mData.key;
		
		this.value=mData.value;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		DIntData mData=(DIntData)data;
		if(this.key!=mData.key)
			return false;
		
		if(this.value!=mData.value)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("key");
		writer.sb.append(':');
		writer.sb.append(this.key);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("value");
		writer.sb.append(':');
		writer.sb.append(this.value);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 是否为空 */
	public boolean isEmpty()
	{
		return key<=0 && value<=0;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.key=0;
		this.value=0;
	}
	
}
