package com.home.shine.data;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.control.DateControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;
import com.home.shine.support.pool.StringBuilderPool;
import com.home.shine.utils.StringUtils;
import java.sql.Timestamp;
import java.util.Calendar;

/** 日期数据(generated by shine) */
public class DateData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.Date;
	
	/** 当前秒 */
	public long timeSeconds;
	
	/** 年 */
	private int _year=0;
	
	/** 月 */
	private int _month=0;
	
	/** 日 */
	private int _day=0;
	
	/** 时 */
	private int _hour=0;
	
	/** 分 */
	private int _minute=0;
	
	/** 秒 */
	private int _second=0;
	
	/** 拆分时间dirty */
	private boolean _timeDirty=true;
	
	private Calendar _tempCalendar;
	
	public DateData()
	{
		_dataID=ShineDataType.Date;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.timeSeconds=stream.readLong();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.timeSeconds);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.timeSeconds=stream.readLong();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.timeSeconds);
		
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof DateData))
			return;
		
		DateData mData=(DateData)data;
		
		this.timeSeconds=mData.timeSeconds;
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof DateData))
			return;
		
		DateData mData=(DateData)data;
		
		this.timeSeconds=mData.timeSeconds;
	}
	
	/** 读后 */
	protected void afterRead()
	{
		_timeDirty=true;
	}
	
	/** 通过原生日期读取 */
	public void initByTimeMillis(long timeMillis)
	{
		this.timeSeconds=timeMillis/1000L;
		_timeDirty=true;
	}
	
	/** 通过原生日期读取 */
	public void initByTimeSeconds(long timeSeconds)
	{
		this.timeSeconds=timeSeconds;
		_timeDirty=true;
	}
	
	/** 获取当前数据时间年 */
	public int getYear()
	{
		ensureTime();
		return _year;
	}
	
	/** 获取当前数据时间月 */
	public int getMonth()
	{
		ensureTime();
		return _month;
	}
	
	/** 获取当前数据时间日 */
	public int getDay()
	{
		ensureTime();
		return _day;
	}
	
	/** 获取当前数据时间小时数 */
	public int getHour()
	{
		ensureTime();
		return _hour;
	}
	
	/** 获取当前数据时间分钟数 */
	public int getMinute()
	{
		ensureTime();
		return _minute;
	}
	
	/** 获取当前数据时间秒数 */
	public int getSecond()
	{
		ensureTime();
		return _second;
	}
	
	/** 刷时间 */
	private void ensureTime()
	{
		if(_timeDirty)
		{
			Calendar c=getTempCalendar();
			c.setTimeInMillis(timeSeconds*1000L);
			initDTime(c);
			_timeDirty=false;
		}
	}
	
	/** 通过原生日期读取 */
	public void initByCalendar(Calendar calendar)
	{
		timeSeconds=calendar.getTimeInMillis()/1000L;
		
		initDTime(calendar);
		
		_timeDirty=false;
	}
	
	private void initDTime(Calendar calendar)
	{
		_year=calendar.get(Calendar.YEAR);
		_month=calendar.get(Calendar.MONTH) + 1;
		_day=calendar.get(Calendar.DAY_OF_MONTH);
		_hour=calendar.get(Calendar.HOUR_OF_DAY);
		_minute=calendar.get(Calendar.MINUTE);
		_second=calendar.get(Calendar.SECOND);
	}
	
	/** 初始化mysql时间戳 */
	public void initByTimestamp(Timestamp ts)
	{
		initByTimeMillis(ts.getTime());
	}
	
	/** 初始化mysql时间戳字符串 */
	public void initByTimestampString(String str)
	{
		initByTimestamp(Timestamp.valueOf(str));
	}
	
	/** 初始化mysql时间戳字符串 */
	public void initByUnixStr(String str)
	{
		initByTimeMillis(Long.parseLong(str));
	}
	
	private Calendar getTempCalendar()
	{
		if(_tempCalendar==null)
		{
			_tempCalendar=Calendar.getInstance();
		}
		
		return _tempCalendar;
	}
	
	/** 获取所表达的秒时间 */
	public long getTimeSeconds()
	{
		return timeSeconds;
	}
	
	/** 获取所表达的毫秒时间 */
	public long getTimeMillis()
	{
		return timeSeconds*1000L;
	}
	
	/** 获取UNIX时间戳 */
	public Timestamp getTimestamp()
	{
		return new Timestamp(timeSeconds);
	}
	
	/** 获取UNIX时间戳时间 */
	public String getTimestampString()
	{
		return getTimestamp().toString();
	}
	
	/** 获取UNIX时间戳 */
	public String getUnixStr()
	{
		return String.valueOf(timeSeconds);
	}
	
	/** 克隆 */
	public DateData cloneDate()
	{
		DateData re=new DateData();
		re.timeSeconds=this.timeSeconds;
		re._timeDirty=true;
		
		return re;
	}
	
	/** 是否在此日期前 */
	public boolean before(DateData data)
	{
		return this.timeSeconds<data.timeSeconds;
	}
	
	/** 是否在此日期后 */
	public boolean after(DateData data)
	{
		return this.timeSeconds>data.timeSeconds;
	}
	
	/** 是否和此日期相等 */
	public boolean equalsDate(DateData data)
	{
		return this.timeSeconds>data.timeSeconds;
	}
	
	/** 增加秒时间(主线程) */
	public void addTime(long seconds)
	{
		timeSeconds+=seconds;
		_timeDirty=true;
	}
	
	public String toString()
	{
		StringBuilder sb=StringBuilderPool.create();
		writeToStringBuilder(sb);
		return StringBuilderPool.releaseStr(sb);
	}
	
	public void writeToStringBuilder(StringBuilder sb)
	{
		writeToStringBuilder(sb,false);
	}
	
	/** onlyDay仅仅需要到日 */
	public void writeToStringBuilder(StringBuilder sb,boolean onlyDay)
	{
		ensureTime();
		
		sb.append(_year);
		sb.append('-');
		StringUtils.writeIntWei(sb,_month,2);
		sb.append('-');
		StringUtils.writeIntWei(sb,_day,2);
		
		if (!onlyDay)
		{
			sb.append(' ');
			StringUtils.writeIntWei(sb,_hour,2);
			sb.append(':');
			StringUtils.writeIntWei(sb,_minute,2);
			sb.append(':');
			StringUtils.writeIntWei(sb,_second,2);
		}
	}
	
	/** 获取当前日期 */
	public static DateData getNow()
	{
		return DateControl.getNow();
	}
	
	/** 获取原生当前日期 */
	public static DateData getNatureNow()
	{
		Calendar ca=Calendar.getInstance();
		
		DateData date=new DateData();
		
		date.initByCalendar(ca);
		date._tempCalendar=ca;
		
		return date;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "DateData";
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		DateData mData=(DateData)data;
		if(this.timeSeconds!=mData.timeSeconds)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("timeSeconds");
		writer.sb.append(':');
		writer.sb.append(this.timeSeconds);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 创建日期数据 */
	public static DateData createByTimeSeconds(long timeSeconds)
	{
		DateData re=new DateData();
		re.initByTimeSeconds(timeSeconds);
		return re;
	}
	
	/** 创建日期数据 */
	public static DateData createByTimeMillis(long millisecond)
	{
		DateData re=new DateData();
		re.initByTimeMillis(millisecond);
		return re;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.timeSeconds=0L;
	}
	
}
