package com.home.shine.data;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.data.UIObjectData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class UIObjectData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.UIObject;
	
	/** 名字 */
	public String name="";
	
	/** 类型 */
	public int type;
	
	/** 样式 */
	public String style="";
	
	/** 子项组 */
	public SList<UIObjectData> children=new SList<UIObjectData>();
	
	/** 整型参数组 */
	public int[] intArgs;
	
	/** 字符参数组 */
	public String[] strArgs;
	
	public UIObjectData()
	{
		_dataID=ShineDataType.UIObject;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.name=stream.readUTF();
		
		this.type=stream.readInt();
		
		this.style=stream.readUTF();
		
		if(stream.readBoolean())
		{
			int childrenLen=stream.readLen();
			if(this.children!=null)
			{
				this.children.clear();
				this.children.ensureCapacity(childrenLen);
			}
			else
			{
				this.children=new SList<UIObjectData>(UIObjectData[]::new,childrenLen);
			}
			
			SList<UIObjectData> childrenT=this.children;
			for(int childrenI=childrenLen-1;childrenI>=0;--childrenI)
			{
				UIObjectData childrenV;
				if(stream.readBoolean())
				{
					childrenV=new UIObjectData();
					childrenV.readBytesFull(stream);
				}
				else
				{
					childrenV=null;
				}
				
				childrenT.add(childrenV);
			}
		}
		else
		{
			this.children=null;
		}
		
		if(stream.readBoolean())
		{
			int intArgsLen=stream.readLen();
			if(this.intArgs==null || this.intArgs.length!=intArgsLen)
			{
				this.intArgs=new int[intArgsLen];
			}
			int[] intArgsT=this.intArgs;
			for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
			{
				int intArgsV;
				intArgsV=stream.readInt();
				
				intArgsT[intArgsI]=intArgsV;
			}
		}
		else
		{
			this.intArgs=null;
		}
		
		if(stream.readBoolean())
		{
			int strArgsLen=stream.readLen();
			if(this.strArgs==null || this.strArgs.length!=strArgsLen)
			{
				this.strArgs=new String[strArgsLen];
			}
			String[] strArgsT=this.strArgs;
			for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
			{
				String strArgsV;
				strArgsV=stream.readUTF();
				
				strArgsT[strArgsI]=strArgsV;
			}
		}
		else
		{
			this.strArgs=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.type);
		
		stream.writeUTF(this.style);
		
		if(this.children!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.children.size());
			if(!this.children.isEmpty())
			{
				Object[] childrenVValues=this.children.getValues();
				for(int childrenVI=0,childrenVLen=this.children.length();childrenVI<childrenVLen;++childrenVI)
				{
					UIObjectData childrenV=(UIObjectData)childrenVValues[childrenVI];
					if(childrenV!=null)
					{
						stream.writeBoolean(true);
						childrenV.writeBytesFull(stream);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.intArgs!=null)
		{
			stream.writeBoolean(true);
			int[] intArgsT=this.intArgs;
			stream.writeLen(intArgsT.length);
			for(int intArgsVI=0,intArgsVLen=intArgsT.length;intArgsVI<intArgsVLen;++intArgsVI)
			{
				int intArgsV=intArgsT[intArgsVI];
				stream.writeInt(intArgsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.strArgs!=null)
		{
			stream.writeBoolean(true);
			String[] strArgsT=this.strArgs;
			stream.writeLen(strArgsT.length);
			for(int strArgsVI=0,strArgsVLen=strArgsT.length;strArgsVI<strArgsVLen;++strArgsVI)
			{
				String strArgsV=strArgsT[strArgsVI];
				stream.writeUTF(strArgsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.name=stream.readUTF();
		
		this.type=stream.readInt();
		
		this.style=stream.readUTF();
		
		if(stream.readBoolean())
		{
			int childrenLen=stream.readLen();
			if(this.children!=null)
			{
				this.children.clear();
				this.children.ensureCapacity(childrenLen);
			}
			else
			{
				this.children=new SList<UIObjectData>(UIObjectData[]::new,childrenLen);
			}
			
			SList<UIObjectData> childrenT=this.children;
			for(int childrenI=childrenLen-1;childrenI>=0;--childrenI)
			{
				UIObjectData childrenV;
				if(stream.readBoolean())
				{
					childrenV=new UIObjectData();
					childrenV.readBytesSimple(stream);
				}
				else
				{
					childrenV=null;
				}
				
				childrenT.add(childrenV);
			}
		}
		else
		{
			this.children=null;
		}
		
		if(stream.readBoolean())
		{
			int intArgsLen=stream.readLen();
			if(this.intArgs==null || this.intArgs.length!=intArgsLen)
			{
				this.intArgs=new int[intArgsLen];
			}
			int[] intArgsT=this.intArgs;
			for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
			{
				int intArgsV;
				intArgsV=stream.readInt();
				
				intArgsT[intArgsI]=intArgsV;
			}
		}
		else
		{
			this.intArgs=null;
		}
		
		if(stream.readBoolean())
		{
			int strArgsLen=stream.readLen();
			if(this.strArgs==null || this.strArgs.length!=strArgsLen)
			{
				this.strArgs=new String[strArgsLen];
			}
			String[] strArgsT=this.strArgs;
			for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
			{
				String strArgsV;
				strArgsV=stream.readUTF();
				
				strArgsT[strArgsI]=strArgsV;
			}
		}
		else
		{
			this.strArgs=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeUTF(this.name);
		
		stream.writeInt(this.type);
		
		stream.writeUTF(this.style);
		
		if(this.children!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.children.size());
			if(!this.children.isEmpty())
			{
				Object[] childrenVValues=this.children.getValues();
				for(int childrenVI=0,childrenVLen=this.children.length();childrenVI<childrenVLen;++childrenVI)
				{
					UIObjectData childrenV=(UIObjectData)childrenVValues[childrenVI];
					if(childrenV!=null)
					{
						stream.writeBoolean(true);
						childrenV.writeBytesSimple(stream);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.intArgs!=null)
		{
			stream.writeBoolean(true);
			int[] intArgsT=this.intArgs;
			stream.writeLen(intArgsT.length);
			for(int intArgsVI=0,intArgsVLen=intArgsT.length;intArgsVI<intArgsVLen;++intArgsVI)
			{
				int intArgsV=intArgsT[intArgsVI];
				stream.writeInt(intArgsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.strArgs!=null)
		{
			stream.writeBoolean(true);
			String[] strArgsT=this.strArgs;
			stream.writeLen(strArgsT.length);
			for(int strArgsVI=0,strArgsVLen=strArgsT.length;strArgsVI<strArgsVLen;++strArgsVI)
			{
				String strArgsV=strArgsT[strArgsVI];
				stream.writeUTF(strArgsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UIObjectData";
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof UIObjectData))
			return;
		
		UIObjectData mData=(UIObjectData)data;
		
		this.name=mData.name;
		this.type=mData.type;
		this.style=mData.style;
		this.children=mData.children;
		this.intArgs=mData.intArgs;
		this.strArgs=mData.strArgs;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof UIObjectData))
			return;
		
		UIObjectData mData=(UIObjectData)data;
		
		this.name=mData.name;
		
		this.type=mData.type;
		
		this.style=mData.style;
		
		if(mData.children!=null)
		{
			if(this.children!=null)
			{
				this.children.clear();
				this.children.ensureCapacity(mData.children.size());
			}
			else
			{
				this.children=new SList<UIObjectData>(UIObjectData[]::new,mData.children.size());
			}
			
			SList<UIObjectData> childrenT=this.children;
			if(!mData.children.isEmpty())
			{
				Object[] childrenVValues=mData.children.getValues();
				for(int childrenVI=0,childrenVLen=mData.children.length();childrenVI<childrenVLen;++childrenVI)
				{
					UIObjectData childrenV=(UIObjectData)childrenVValues[childrenVI];
					UIObjectData childrenU;
					if(childrenV!=null)
					{
						childrenU=new UIObjectData();
						childrenU.copy(childrenV);
					}
					else
					{
						childrenU=null;
					}
					
					childrenT.add(childrenU);
				}
			}
		}
		else
		{
			this.children=null;
		}
		
		if(mData.intArgs!=null)
		{
			int[] intArgsR=mData.intArgs;
			int intArgsLen=intArgsR.length;
			if(this.intArgs==null || this.intArgs.length!=intArgsLen)
			{
				this.intArgs=new int[intArgsLen];
			}
			BytesControl.arrayCopy(mData.intArgs,this.intArgs,intArgsLen);
		}
		else
		{
			this.intArgs=null;
		}
		
		if(mData.strArgs!=null)
		{
			String[] strArgsR=mData.strArgs;
			int strArgsLen=strArgsR.length;
			if(this.strArgs==null || this.strArgs.length!=strArgsLen)
			{
				this.strArgs=new String[strArgsLen];
			}
			BytesControl.arrayCopy(mData.strArgs,this.strArgs,strArgsLen);
		}
		else
		{
			this.strArgs=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		UIObjectData mData=(UIObjectData)data;
		if(!this.name.equals(mData.name))
			return false;
		
		if(this.type!=mData.type)
			return false;
		
		if(!this.style.equals(mData.style))
			return false;
		
		if(mData.children!=null)
		{
			if(this.children==null)
				return false;
			if(this.children.size()!=mData.children.size())
				return false;
			SList<UIObjectData> childrenT=this.children;
			SList<UIObjectData> childrenR=mData.children;
			int childrenLen=childrenT.size();
			for(int childrenI=0;childrenI<childrenLen;++childrenI)
			{
				UIObjectData childrenU=childrenT.get(childrenI);
				UIObjectData childrenV=childrenR.get(childrenI);
				if(childrenV!=null)
				{
					if(childrenU==null)
						return false;
					if(!childrenU.dataEquals(childrenV))
						return false;
				}
				else
				{
					if(childrenU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.children!=null)
				return false;
		}
		
		if(mData.intArgs!=null)
		{
			if(this.intArgs==null)
				return false;
			if(this.intArgs.length!=mData.intArgs.length)
				return false;
			int[] intArgsT=this.intArgs;
			int[] intArgsR=mData.intArgs;
			int intArgsLen=intArgsT.length;
			for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
			{
				int intArgsU=intArgsT[intArgsI];
				int intArgsV=intArgsR[intArgsI];
				if(intArgsU!=intArgsV)
					return false;
				
			}
		}
		else
		{
			if(this.intArgs!=null)
				return false;
		}
		
		if(mData.strArgs!=null)
		{
			if(this.strArgs==null)
				return false;
			if(this.strArgs.length!=mData.strArgs.length)
				return false;
			String[] strArgsT=this.strArgs;
			String[] strArgsR=mData.strArgs;
			int strArgsLen=strArgsT.length;
			for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
			{
				String strArgsU=strArgsT[strArgsI];
				String strArgsV=strArgsR[strArgsI];
				if(!strArgsU.equals(strArgsV))
					return false;
				
			}
		}
		else
		{
			if(this.strArgs!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("name");
		writer.sb.append(':');
		writer.sb.append(this.name);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("style");
		writer.sb.append(':');
		writer.sb.append(this.style);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("children");
		writer.sb.append(':');
		writer.sb.append("List<UIObjectData>");
		if(this.children!=null)
		{
			SList<UIObjectData> childrenT=this.children;
			int childrenLen=childrenT.size();
			writer.sb.append('(');
			writer.sb.append(childrenLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int childrenI=0;childrenI<childrenLen;++childrenI)
			{
				UIObjectData childrenV=childrenT.get(childrenI);
				writer.writeTabs();
				writer.sb.append(childrenI);
				writer.sb.append(':');
				if(childrenV!=null)
				{
					childrenV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("UIObjectData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("intArgs");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.intArgs!=null)
		{
			int[] intArgsT=this.intArgs;
			int intArgsLen=intArgsT.length;
			writer.sb.append('(');
			writer.sb.append(intArgsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
			{
				int intArgsV=intArgsT[intArgsI];
				writer.writeTabs();
				writer.sb.append(intArgsI);
				writer.sb.append(':');
				writer.sb.append(intArgsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("strArgs");
		writer.sb.append(':');
		writer.sb.append("Array<String>");
		if(this.strArgs!=null)
		{
			String[] strArgsT=this.strArgs;
			int strArgsLen=strArgsT.length;
			writer.sb.append('(');
			writer.sb.append(strArgsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
			{
				String strArgsV=strArgsT[strArgsI];
				writer.writeTabs();
				writer.sb.append(strArgsI);
				writer.sb.append(':');
				writer.sb.append(strArgsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.name="";
		this.type=0;
		this.style="";
		this.children=null;
		this.intArgs=null;
		this.strArgs=null;
	}
	
}
