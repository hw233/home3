package com.home.shine.data.trigger;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.constlist.generate.ShineDataType;
import com.home.shine.data.BaseData;
import com.home.shine.data.trigger.TriggerFuncData;
import com.home.shine.data.trigger.TriggerObjData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** trigger方法组(generated by shine) */
public class TriggerFuncListData extends TriggerObjData
{
	/** 数据类型ID */
	public static final int dataID=ShineDataType.TriggerFuncList;
	
	/** 函数组 */
	public TriggerFuncData[] funcList;
	
	public TriggerFuncListData()
	{
		_dataID=ShineDataType.TriggerFuncList;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "TriggerFuncListData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int funcListLen=stream.readLen();
		if(this.funcList==null || this.funcList.length!=funcListLen)
		{
			this.funcList=new TriggerFuncData[funcListLen];
		}
		TriggerFuncData[] funcListT=this.funcList;
		for(int funcListI=0;funcListI<funcListLen;++funcListI)
		{
			TriggerFuncData funcListV;
			BaseData funcListVT=stream.readDataFullNotNull();
			if(funcListVT!=null)
			{
				if(funcListVT instanceof TriggerFuncData)
				{
					funcListV=(TriggerFuncData)funcListVT;
				}
				else
				{
					funcListV=new TriggerFuncData();
					if(!(funcListVT.getClass().isAssignableFrom(TriggerFuncData.class)))
					{
						stream.throwTypeReadError(TriggerFuncData.class,funcListVT.getClass());
					}
					funcListV.shadowCopy(funcListVT);
				}
			}
			else
			{
				funcListV=null;
			}
			
			funcListT[funcListI]=funcListV;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.funcList!=null)
		{
			TriggerFuncData[] funcListT=this.funcList;
			stream.writeLen(funcListT.length);
			for(int funcListVI=0,funcListVLen=funcListT.length;funcListVI<funcListVLen;++funcListVI)
			{
				TriggerFuncData funcListV=funcListT[funcListVI];
				if(funcListV!=null)
				{
					stream.writeDataFullNotNull(funcListV);
				}
				else
				{
					nullObjError("funcListV");
				}
				
			}
		}
		else
		{
			nullObjError("funcList");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int funcListLen=stream.readLen();
		if(this.funcList==null || this.funcList.length!=funcListLen)
		{
			this.funcList=new TriggerFuncData[funcListLen];
		}
		TriggerFuncData[] funcListT=this.funcList;
		for(int funcListI=0;funcListI<funcListLen;++funcListI)
		{
			TriggerFuncData funcListV;
			funcListV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			funcListT[funcListI]=funcListV;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.funcList!=null)
		{
			TriggerFuncData[] funcListT=this.funcList;
			stream.writeLen(funcListT.length);
			for(int funcListVI=0,funcListVLen=funcListT.length;funcListVI<funcListVLen;++funcListVI)
			{
				TriggerFuncData funcListV=funcListT[funcListVI];
				if(funcListV!=null)
				{
					stream.writeDataSimpleNotNull(funcListV);
				}
				else
				{
					nullObjError("funcListV");
				}
				
			}
		}
		else
		{
			nullObjError("funcList");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof TriggerFuncListData))
			return;
		
		TriggerFuncListData mData=(TriggerFuncListData)data;
		
		this.funcList=mData.funcList;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof TriggerFuncListData))
			return;
		
		TriggerFuncListData mData=(TriggerFuncListData)data;
		
		if(mData.funcList!=null)
		{
			TriggerFuncData[] funcListR=mData.funcList;
			int funcListLen=funcListR.length;
			if(this.funcList==null || this.funcList.length!=funcListLen)
			{
				this.funcList=new TriggerFuncData[funcListLen];
			}
			TriggerFuncData[] funcListT=this.funcList;
			for(int funcListI=0;funcListI<funcListLen;++funcListI)
			{
				TriggerFuncData funcListV=funcListR[funcListI];
				TriggerFuncData funcListU;
				if(funcListV!=null)
				{
					funcListU=(TriggerFuncData)funcListV.clone();
				}
				else
				{
					funcListU=null;
					nullObjError("funcListU");
				}
				
				funcListT[funcListI]=funcListU;
			}
		}
		else
		{
			this.funcList=null;
			nullObjError("funcList");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		TriggerFuncListData mData=(TriggerFuncListData)data;
		if(mData.funcList!=null)
		{
			if(this.funcList==null)
				return false;
			if(this.funcList.length!=mData.funcList.length)
				return false;
			TriggerFuncData[] funcListT=this.funcList;
			TriggerFuncData[] funcListR=mData.funcList;
			int funcListLen=funcListT.length;
			for(int funcListI=0;funcListI<funcListLen;++funcListI)
			{
				TriggerFuncData funcListU=funcListT[funcListI];
				TriggerFuncData funcListV=funcListR[funcListI];
				if(funcListV!=null)
				{
					if(funcListU==null)
						return false;
					if(!funcListU.dataEquals(funcListV))
						return false;
				}
				else
				{
					if(funcListU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.funcList!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("funcList");
		writer.sb.append(':');
		writer.sb.append("Array<TriggerFuncData>");
		if(this.funcList!=null)
		{
			TriggerFuncData[] funcListT=this.funcList;
			int funcListLen=funcListT.length;
			writer.sb.append('(');
			writer.sb.append(funcListLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int funcListI=0;funcListI<funcListLen;++funcListI)
			{
				TriggerFuncData funcListV=funcListT[funcListI];
				writer.writeTabs();
				writer.sb.append(funcListI);
				writer.sb.append(':');
				if(funcListV!=null)
				{
					funcListV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.funcList=new TriggerFuncData[0];
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.funcList=null;
	}
	
}
