package com.home.commonGame.net.request.func.item;
import com.home.commonBase.data.item.ItemData;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.request.func.base.FuncSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 推送整理物品消息(generated by shine) */
public class FuncSendCleanUpItemRequest extends FuncSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.FuncSendCleanUpItem;
	
	/** 道具组 */
	public SList<ItemData> items;
	
	public FuncSendCleanUpItemRequest()
	{
		_dataID=GameRequestType.FuncSendCleanUpItem;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SList<ItemData> itemsTemp=items;
		if(itemsTemp!=null)
		{
			this.items=new SList<ItemData>(ItemData[]::new,itemsTemp.size());
			SList<ItemData> itemsT=this.items;
			if(!itemsTemp.isEmpty())
			{
				Object[] itemsVValues=itemsTemp.getValues();
				for(int itemsVI=0,itemsVLen=itemsTemp.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					ItemData itemsU;
					if(itemsV!=null)
					{
						itemsU=(ItemData)itemsV.clone();
					}
					else
					{
						itemsU=null;
					}
					
					itemsT.add(itemsU);
				}
			}
		}
		else
		{
			this.items=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncSendCleanUpItemRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("items");
		writer.sb.append(':');
		writer.sb.append("List<ItemData>");
		if(this.items!=null)
		{
			SList<ItemData> itemsT=this.items;
			int itemsLen=itemsT.size();
			writer.sb.append('(');
			writer.sb.append(itemsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int itemsI=0;itemsI<itemsLen;++itemsI)
			{
				ItemData itemsV=itemsT.get(itemsI);
				writer.writeTabs();
				writer.sb.append(itemsI);
				writer.sb.append(':');
				if(itemsV!=null)
				{
					itemsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ItemData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				Object[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(itemsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				Object[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(itemsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.items!=null)
		{
			if(!this.items.isEmpty())
			{
				Object[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						itemsV.release(pool);
						itemsV=null;
					}
					itemsVValues[itemsVI]=null;
				}
			}
			this.items.justClearSize();
		}
	}
	
	/** 创建实例 */
	public static FuncSendCleanUpItemRequest create(int funcID,SList<ItemData> items)
	{
		FuncSendCleanUpItemRequest re=(FuncSendCleanUpItemRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.items=items;
		return re;
	}
	
}
