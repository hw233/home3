package com.home.commonGame.net.response.login;
import com.home.commonBase.data.system.ClientOfflineWorkData;
import com.home.commonGame.constlist.generate.GameResponseType;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.response.login.PlayerLoginResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 离线角色登录消息(generated by shine) */
public class PlayerLoginForOfflineResponse extends PlayerLoginResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.PlayerLoginForOffline;
	
	/** 离线记录组 */
	public SList<ClientOfflineWorkData> records;
	
	/** 当前客户端种子序号 */
	public int clientRandomSeedIndex;
	
	public PlayerLoginForOfflineResponse()
	{
		_dataID=GameResponseType.PlayerLoginForOffline;
		setLongMessage();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		GameC.main.playerLogin(gameSocket,playerID,records);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PlayerLoginForOfflineResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int recordsLen=stream.readLen();
		if(this.records!=null)
		{
			this.records.clear();
			this.records.ensureCapacity(recordsLen);
		}
		else
		{
			this.records=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new,recordsLen);
		}
		
		SList<ClientOfflineWorkData> recordsT=this.records;
		for(int recordsI=recordsLen-1;recordsI>=0;--recordsI)
		{
			ClientOfflineWorkData recordsV;
			BaseData recordsVT=stream.readDataFullNotNull();
			if(recordsVT!=null)
			{
				if(recordsVT instanceof ClientOfflineWorkData)
				{
					recordsV=(ClientOfflineWorkData)recordsVT;
				}
				else
				{
					recordsV=new ClientOfflineWorkData();
					if(!(recordsVT.getClass().isAssignableFrom(ClientOfflineWorkData.class)))
					{
						stream.throwTypeReadError(ClientOfflineWorkData.class,recordsVT.getClass());
					}
					recordsV.shadowCopy(recordsVT);
				}
			}
			else
			{
				recordsV=null;
			}
			
			recordsT.add(recordsV);
		}
		
		this.clientRandomSeedIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int recordsLen=stream.readLen();
		if(this.records!=null)
		{
			this.records.clear();
			this.records.ensureCapacity(recordsLen);
		}
		else
		{
			this.records=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new,recordsLen);
		}
		
		SList<ClientOfflineWorkData> recordsT=this.records;
		for(int recordsI=recordsLen-1;recordsI>=0;--recordsI)
		{
			ClientOfflineWorkData recordsV;
			recordsV=(ClientOfflineWorkData)stream.readDataSimpleNotNull();
			
			recordsT.add(recordsV);
		}
		
		this.clientRandomSeedIndex=stream.readInt();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("records");
		writer.sb.append(':');
		writer.sb.append("List<ClientOfflineWorkData>");
		if(this.records!=null)
		{
			SList<ClientOfflineWorkData> recordsT=this.records;
			int recordsLen=recordsT.size();
			writer.sb.append('(');
			writer.sb.append(recordsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int recordsI=0;recordsI<recordsLen;++recordsI)
			{
				ClientOfflineWorkData recordsV=recordsT.get(recordsI);
				writer.writeTabs();
				writer.sb.append(recordsI);
				writer.sb.append(':');
				if(recordsV!=null)
				{
					recordsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ClientOfflineWorkData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeedIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientRandomSeedIndex);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.records=null;
		this.clientRandomSeedIndex=0;
	}
	
}
