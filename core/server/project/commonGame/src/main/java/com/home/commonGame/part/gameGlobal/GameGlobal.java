package com.home.commonGame.part.gameGlobal;
import com.home.commonBase.constlist.system.PartCallPhaseType;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.data.login.GameLoginToCenterData;
import com.home.commonBase.data.login.GameLoginToGameData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.logic.LogicEntity;
import com.home.commonBase.part.gameGlobal.data.GameActivityPartData;
import com.home.commonBase.part.gameGlobal.data.GameFuncPartData;
import com.home.commonBase.part.gameGlobal.data.GameMailPartData;
import com.home.commonBase.part.gameGlobal.data.GameSocialPartData;
import com.home.commonBase.part.gameGlobal.data.GameSystemPartData;
import com.home.commonBase.part.gameGlobal.data.GameTeamPartData;
import com.home.commonBase.part.gameGlobal.data.GameUnionPartData;
import com.home.commonBase.part.gameGlobal.list.GameGlobalListData;
import com.home.commonBase.table.table.GlobalTable;
import com.home.commonGame.global.GameC;
import com.home.commonGame.logic.func.RoleGroup;
import com.home.commonGame.net.serverRequest.center.system.GameLoginToCenterServerRequest;
import com.home.commonGame.part.gameGlobal.base.GameGlobalBasePart;
import com.home.commonGame.part.gameGlobal.part.GameActivityPart;
import com.home.commonGame.part.gameGlobal.part.GameFuncPart;
import com.home.commonGame.part.gameGlobal.part.GameMailPart;
import com.home.commonGame.part.gameGlobal.part.GameSocialPart;
import com.home.commonGame.part.gameGlobal.part.GameSystemPart;
import com.home.commonGame.part.gameGlobal.part.GameTeamPart;
import com.home.commonGame.part.gameGlobal.part.GameUnionPart;
import com.home.commonGame.part.player.Player;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.ctrl.Ctrl;

/** 游戏服全局数据(generated by shine) */
public class GameGlobal extends LogicEntity
{
	protected GameGlobalBasePart[] _list;
	
	/** 当前代码调用阶段 */
	private int _phase=PartCallPhaseType.None;
	
	private int _minuteTick=0;
	
	/** 系统数据 */
	public GameSystemPart system;
	
	/** 通用功能数据 */
	public GameFuncPart func;
	
	/** 社交数据 */
	public GameSocialPart social;
	
	/** 邮件数据 */
	public GameMailPart mail;
	
	/** 活动数据 */
	public GameActivityPart activity;
	
	/** 工会数据 */
	public GameUnionPart union;
	
	/** 队伍数据 */
	public GameTeamPart team;
	
	/** 注册部件 */
	protected void registParts()
	{
		_list=new GameGlobalBasePart[7];
		int i=0;
		
		system=new GameSystemPart();
		system.setMe(this);
		_list[i++]=system;
		
		social=new GameSocialPart();
		social.setMe(this);
		_list[i++]=social;
		
		func=new GameFuncPart();
		func.setMe(this);
		_list[i++]=func;
		
		activity=new GameActivityPart();
		activity.setMe(this);
		_list[i++]=activity;
		
		mail=new GameMailPart();
		mail.setMe(this);
		_list[i++]=mail;
		
		union=new GameUnionPart();
		union.setMe(this);
		_list[i++]=union;
		
		team=new GameTeamPart();
		team.setMe(this);
		_list[i++]=team;
		
	}
	
	/** 创建列表数据 */
	public GameGlobalListData createListData()
	{
		return new GameGlobalListData();
	}
	
	/** 从列表数据读取 */
	public void readListData(GameGlobalListData listData)
	{
		this.system.setData(listData.system);
		this.social.setData(listData.social);
		this.func.setData(listData.func);
		this.activity.setData(listData.activity);
		this.mail.setData(listData.mail);
		this.union.setData(listData.union);
		this.team.setData(listData.team);
	}
	
	/** 写列表数据(深拷) */
	public void writeListData(GameGlobalListData listData)
	{
		listData.system=(GameSystemPartData)this.system.makePartData();
		listData.social=(GameSocialPartData)this.social.makePartData();
		listData.func=(GameFuncPartData)this.func.makePartData();
		listData.activity=(GameActivityPartData)this.activity.makePartData();
		listData.mail=(GameMailPartData)this.mail.makePartData();
		listData.union=(GameUnionPartData)this.union.makePartData();
		listData.team=(GameTeamPartData)this.team.makePartData();
	}
	
	/** 写列表数据(潜拷) */
	public void writeShadowListData(GameGlobalListData listData)
	{
		listData.system=(GameSystemPartData)this.system.makeShadowPartData();
		listData.social=(GameSocialPartData)this.social.makeShadowPartData();
		listData.func=(GameFuncPartData)this.func.makeShadowPartData();
		listData.activity=(GameActivityPartData)this.activity.makeShadowPartData();
		listData.mail=(GameMailPartData)this.mail.makeShadowPartData();
		listData.union=(GameUnionPartData)this.union.makeShadowPartData();
		listData.team=(GameTeamPartData)this.team.makeShadowPartData();
	}
	
	/** 获取当前阶段 */
	public int getPhase()
	{
		return _phase;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	public void construct()
	{
		_phase=PartCallPhaseType.Construct;
		
		registParts();
		
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].construct();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	public void init()
	{
		_phase=PartCallPhaseType.Init;
		
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].init();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 析构(回池前调用,与init成对) */
	public void dispose()
	{
		_phase=PartCallPhaseType.Dispose;
		
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].dispose();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	public void afterReadData()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].afterReadData();
		}
		
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].afterReadDataSecond();
		}
	}
	
	/** 每秒调用 */
	public void onSecond(int delay)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onSecond(delay);
		}
		
		if((++_minuteTick)>=60)
		{
			_minuteTick=0;
			
			onMinute();
		}
	}
	
	/** 每秒调用 */
	public void onMinute()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onMinute();
		}
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	public void onDaily()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onDaily();
		}
	}
	
	/** 配置表更新后(配置替换) */
	public void onReloadConfig()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onReloadConfig();
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	public void onNewCreate()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onNewCreate();
		}
	}
	
	/** 初次构造数据(只为new出Data,跟onCreate不是一回事) */
	public void newInitData()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].newInitData();
		}
	}
	
	/** 活动开启 */
	public void onActivityOpen(int id,boolean atTime)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityOpen(id,atTime);
		}
	}
	
	/** 活动关闭 */
	public void onActivityClose(int id,boolean atTime)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityClose(id,atTime);
		}
	}
	
	/** 活动重置 */
	public void onActivityReset(int id,boolean atTime)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityReset(id,atTime);
		}
	}
	
	/** 开始启动 */
	public void onStart()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onStart();
		}
	}
	
	/** 读登录数据 */
	public void readCenterLoginData(GameLoginData data,boolean isInit)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].readCenterLoginData(data,isInit);
		}
	}
	
	/** 构造登录数据 */
	public void makeLoginCenterData(GameLoginToCenterData data)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].makeLoginCenterData(data);
		}
	}
	
	/** 构造登录逻辑服数据 */
	public void makeLoginGameData(GameLoginToGameData data)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].makeLoginGameData(data);
		}
	}
	
	/** 读登录逻辑服数据 */
	public void readGameLoginData(int gameID,GameLoginToGameData data)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].readGameLoginData(gameID,data);
		}
	}
	
	/** 角色进入(主线程) */
	public void onPlayerEnter(Player player)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onPlayerEnter(player);
		}
	}
	
	/** 角色退出(主线程) */
	public void onPlayerLeave(Player player)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onPlayerLeave(player);
		}
	}
	
	/** 检查新增模块 */
	public void checkNewAdd()
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].checkNewAdd();
		}
	}
	
	/** 角色创建时 */
	public void onPlayerCreate(Player player)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onPlayerCreate(player);
		}
	}
	
	/** 角色删除(主线程) */
	public void onPlayerDelete(Player player)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onPlayerDelete(player);
		}
	}
	
	/** 玩家群删除(主线程) */
	public void onRoleGroupDelete(RoleGroup roleGroup)
	{
		GameGlobalBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onRoleGroupDelete(roleGroup);
		}
	}
	
	/** 初始读取 */
	public void load()
	{
		//放在这里是为了等Config初始化好
		construct();
		init();
		
		if(GameC.main.isAssist())
		{
			Ctrl.log("新开Game服(Assist)");
			newInitData();
			onNewCreate();
			afterReadData();
		}
		else
		{
			//新的
			if(GameC.db.isNewGlobal())
			{
				Ctrl.log("新开Game服");
				newInitData();
				onNewCreate();
				afterReadData();
			}
			else
			{
				loadCustom(GameC.db.getGlobalTable());
			}
		}
	}
	
	/** 自定义读取 */
	public void loadCustom(GlobalTable table)
	{
		BytesReadStream stream=BytesReadStream.create(table.data);
		
		GameGlobalListData listData=createListData();
		listData.readBytesFull(stream);
		readListData(listData);
		//检查新增
		checkNewAdd();
		//版本检查
		GameC.version.checkVersion(this);
		
		afterReadData();
	}
	
	/** 发送登陆到中心服 */
	public void sendLoginToCenter()
	{
		GameLoginToCenterData data=BaseC.factory.createGameLoginToCenterData();
		data.initDefault();
		makeLoginCenterData(data);
		GameLoginToCenterServerRequest.create(data).send();
	}
	
	/** 发送登陆到逻辑服 */
	public GameLoginToGameData createLoginToGameData()
	{
		GameLoginToGameData data=BaseC.factory.createGameLoginToGameData();
		data.initDefault();
		makeLoginGameData(data);
		return data;
	}
	
	@Override
	public void writeInfo(StringBuilder sb)
	{
	
	}
	
	@Override
	protected void sendWarnLog(String str)
	{
	
	}
	
}
