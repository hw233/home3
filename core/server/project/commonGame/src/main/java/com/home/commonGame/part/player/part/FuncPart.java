package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.config.game.FunctionConfig;
import com.home.commonBase.config.game.SubsectionRankConfig;
import com.home.commonBase.constlist.generate.FuncToolType;
import com.home.commonBase.constlist.generate.FunctionConditionType;
import com.home.commonBase.constlist.generate.SubsectionRankConditionType;
import com.home.commonBase.constlist.system.PartCallPhaseType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.login.PlayerLoginToEachGameData;
import com.home.commonBase.data.login.PlayerSwitchGameData;
import com.home.commonBase.data.login.RePlayerLoginFromEachGameData;
import com.home.commonBase.data.role.RoleShowChangeData;
import com.home.commonBase.data.social.rank.RankSimpleData;
import com.home.commonBase.data.social.rank.SubsectionRankSimpleData;
import com.home.commonBase.data.social.roleGroup.PlayerRoleGroupData;
import com.home.commonBase.part.player.clientData.FuncClientPartData;
import com.home.commonBase.part.player.data.FuncPartData;
import com.home.commonBase.tool.func.BaseItemContainerTool;
import com.home.commonBase.tool.func.FuncTool;
import com.home.commonGame.logic.func.PlayerRoleGroup;
import com.home.commonGame.net.request.func.base.FuncCloseRequest;
import com.home.commonGame.net.request.func.base.FuncOpenRequest;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.commonGame.tool.func.GameToCenterPlayerSubsectionRankTool;
import com.home.commonGame.tool.func.IPlayerFuncTool;
import com.home.commonGame.tool.func.PlayerAuctionTool;
import com.home.commonGame.tool.func.PlayerEquipContainerTool;
import com.home.commonGame.tool.func.PlayerFuncTool;
import com.home.commonGame.tool.func.PlayerItemContainerTool;
import com.home.commonGame.tool.func.PlayerItemDicContainerTool;
import com.home.commonGame.tool.func.PlayerPageShowTool;
import com.home.commonGame.tool.func.PlayerRankTool;
import com.home.commonGame.tool.func.PlayerRoleGroupTool;
import com.home.commonGame.tool.func.PlayerSelfPageShowTool;
import com.home.commonGame.tool.func.PlayerSubsectionPageShowTool;
import com.home.commonGame.tool.func.PlayerSubsectionRankTool;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.global.ShineSetting;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.SList;

/** 通用功能(generated by shine) */
public class FuncPart extends PlayerBasePart
{
	/** 数据 */
	private FuncPartData _d;
	
	/** 功能插件字典 */
	private IntObjectMap<FuncTool>[] _funcToolDic=new IntObjectMap[FuncToolType.size];
	
	/** 功能插件列表 */
	private SList<FuncTool> _funcToolList=new SList<>(FuncTool[]::new);
	
	/** 功能插件列表 */
	private SList<IPlayerFuncTool> _playerFuncToolList=new SList<>(IPlayerFuncTool[]::new);
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(FuncPartData)data;
	}
	
	/** 获取数据 */
	public FuncPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new FuncPartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new FuncClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((FuncClientPartData)data);
	}
	
	/** 读数据后(为Main数据) */
	@Override
	public void afterReadDataSecond()
	{
		SList<FuncTool> list;
		
		FuncTool[] values=(list=_funcToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			//自行添加的不再执行
			if(!values[i].isAdded)
			{
				values[i].afterReadDataSecond();
			}
		}
	}
	
	/** 登录前(每次角色即将登录时调用)(在主线程时刻,取全局数据用) */
	@Override
	public void beforeLoginOnMain()
	{
		SList<IPlayerFuncTool> list;
		IPlayerFuncTool[] values=(list=_playerFuncToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].beforeLoginOnMain();
		}
	}
	
	@Override
	public void beforeEnterOnMain()
	{
		SList<IPlayerFuncTool> list;
		IPlayerFuncTool[] values=(list=_playerFuncToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].beforeEnterOnMain();
		}
	}
	
	/** 登录前(每次角色即将登录时调用) */
	@Override
	public void beforeLogin()
	{
		SList<IPlayerFuncTool> list;
		IPlayerFuncTool[] values=(list=_playerFuncToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].beforeLogin();
		}
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(FuncClientPartData data)
	{
		//先clone一下
		data.funcTools=data.funcTools.clone();
		
		IntObjectMap<FuncTool> rankDic=getFuncToolDic(FuncToolType.Rank);
		
		if(!rankDic.isEmpty())
		{
			IntObjectMap<FuncToolData> dic=new IntObjectMap<>();
			
			getFuncToolDic(FuncToolType.Rank).forEachValue(v2->
			{
				PlayerRankTool v=(PlayerRankTool)v2;
				RankSimpleData tempData=new RankSimpleData();
				tempData.rank=v.getRank();
				tempData.value=v.getData().value;
				dic.put(v.getFuncID(),tempData);
			});
			
			data.funcTools.put(FuncToolType.Rank,dic);
		}
		
		IntObjectMap<FuncTool> roleGroupDic=getFuncToolDic(FuncToolType.RoleGroup);
		
		if(!roleGroupDic.isEmpty())
		{
			IntObjectMap<FuncToolData> dic=new IntObjectMap<>();
			
			getFuncToolDic(FuncToolType.RoleGroup).forEachValue(v2->
			{
				PlayerRoleGroupTool v=(PlayerRoleGroupTool)v2;
				dic.put(v.getFuncID(),v.createClientData());
			});
			
			data.funcTools.put(FuncToolType.RoleGroup,dic);
		}

		IntObjectMap<FuncTool> subsectionRankDic=getFuncToolDic(FuncToolType.SubsectionRank);

		if(!subsectionRankDic.isEmpty())
		{
			IntObjectMap<FuncToolData> dic=new IntObjectMap<>();

			getFuncToolDic(FuncToolType.SubsectionRank).forEachValue(v2->
			{
				PlayerSubsectionRankTool v=(PlayerSubsectionRankTool)v2;
				SubsectionRankSimpleData tempData=new SubsectionRankSimpleData();
				tempData.rank=v.getRank();
				tempData.value=v.getData().value;
				tempData.subsectionIndex=v.getData().subsectionIndex;
				tempData.subsectionSubIndex=v.getData().subsectionSubIndex;
				dic.put(v.getFuncID(),tempData);
			});

			data.funcTools.put(FuncToolType.SubsectionRank,dic);
		}
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		SubsectionRankConfig.getDic().forEach(v->{

			PlayerFuncTool funcTool;

			funcTool=new PlayerSubsectionRankTool(v.id,v.minValue);

			registFuncTool(funcTool);

			if (v.needPageTool)
			{
				((PlayerSubsectionRankTool)funcTool).bindPageShowTool(v.eachPageShowNum,v.needPageCache);
			}
		});
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].init();
		}
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		//倒序+删除
		for(int i=list.size()-1;i>=0;--i)
		{
			(v=values[i]).dispose();
			
			if(v.isAdded)
			{
				removeFuncTool(v);
			}
		}
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		IntObjectMap<FuncToolData> dic;
		FuncToolData data;
		FuncToolData data2;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			v=values[i];
			
			if(v.isAdded)
			{
				Ctrl.throwError("不该有临时添加的FuncTool");
			}
			
			data=(dic=_d.funcTools.get(v.getType()))!=null ? dic.get(v.getFuncID()) : null;
			
			v.setData(data);
			
			//之前没有数据,后来有了数据(说明是新增的)
			if(data==null && (data2=v.getData())!=null)
			{
				_d.funcTools.computeIfAbsent(v.getType(),k->new IntObjectMap<>(FuncToolData[]::new)).put(v.getFuncID(),data2);
			}
		}
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].afterReadData();
		}
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		FuncTool[] values=_funcToolList.getValues();
		
		for(int i=0,len=_funcToolList.size();i<len;++i)
		{
			values[i].onSecond(delay);
		}
	}
	
	/** 每分调用 */
	@Override
	public void onMinute()
	{
		FuncTool[] values=_funcToolList.getValues();
		
		for(int i=0,len=_funcToolList.size();i<len;++i)
		{
			values[i].onMinute();
		}
	}
	
	@Override
	public void onOfflineTime(long delay)
	{
		FuncTool[] values=_funcToolList.getValues();

		for(int i=0,len=_funcToolList.size();i<len;++i)
		{
			values[i].onOfflineTime(delay);
		}
	}
	
	/** 配置表更新后(配置替换) */
	@Override
	public void onReloadConfig()
	{
		FuncTool[] values=_funcToolList.getValues();
		
		for(int i=0,len=_funcToolList.size();i<len;++i)
		{
			values[i].onReloadConfig();
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		_d.funcTools=new IntObjectMap<>(IntObjectMap[]::new);
		
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			v=values[i];
			
			FuncToolData toolData=v.getNewCreateData();
			
			if(toolData!=null)
			{
				_d.funcTools.computeIfAbsent(v.getType(),k->new IntObjectMap<>(FuncToolData[]::new)).put(v.getFuncID(),toolData);
			}
		}
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public long countFightForce()
	{
		long re=0;
		SList<IPlayerFuncTool> list;
		IPlayerFuncTool[] values=(list=_playerFuncToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			re+=values[i].countFightForce();
		}
		
		return re;
	}
	
	@Override
	public void beforeReconnectLogin()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			switch((v=values[i]).getType())
			{
				case FuncToolType.PageShow:
				{
					((PlayerPageShowTool)v).clear();
				}
					break;
			}
		}
	}
	
	@Override
	public void onLeave()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			switch((v=values[i]).getType())
			{
				case FuncToolType.PageShow:
				{
					((PlayerPageShowTool)v).clear();
				}
					break;
			}
		}
	}
	
	@Override
	public void makeLoginEachGameData(PlayerLoginToEachGameData data)
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			switch((v=values[i]).getType())
			{
				case FuncToolType.RoleGroup:
				{
					//加入groups组
					data.roleGroups.put(v.getFuncID(),((PlayerRoleGroupTool)v).getData().groups);
				}
					break;
			}
		}
	}
	
	/** 登录前(收到各个逻辑服返回数据时)(主线程) */
	@Override
	public void beforeLoginForEachGame(RePlayerLoginFromEachGameData data)
	{
		makeRoleGroups(data.roleGroups);
	}
	
	@Override
	public void writeSwitchData(PlayerSwitchGameData data)
	{
		data.roleGroups=new IntObjectMap<>(LongObjectMap[]::new);
		
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			switch((v=values[i]).getType())
			{
				case FuncToolType.RoleGroup:
				{
					LongObjectMap<PlayerRoleGroupData> dic;
					data.roleGroups.put(v.getFuncID(),dic=new LongObjectMap<>(PlayerRoleGroupData[]::new));
					
					PlayerRoleGroupTool gv=(PlayerRoleGroupTool)v;
					gv.getRoleGroupDic().forEachValue(v1->
					{
						dic.put(v1.groupID,v1.getData());
					});
				}
					break;
			}
		}
	}
	
	@Override
	public void readSwitchData(PlayerSwitchGameData data)
	{
		makeRoleGroups(data.roleGroups);
	}
	
	private void makeRoleGroups(IntObjectMap<LongObjectMap<PlayerRoleGroupData>> roleGroups)
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			switch((v=values[i]).getType())
			{
				case FuncToolType.RoleGroup:
				{
					((PlayerRoleGroupTool)v).setGameData(roleGroups.get(v.getFuncID()));
				}
				break;
			}
		}
	}
	
	/** 功能是否开启 */
	public boolean isFunctionOpen(int id)
	{
		return _d.funcOpenSet.contains(id);
	}
	
	/** 获取功能插件组(没有就创建) */
	public IntObjectMap<FuncTool> getFuncToolDic(int type)
	{
		IntObjectMap<FuncTool> dic=_funcToolDic[type];
		
		if(dic==null)
		{
			return _funcToolDic[type]=new IntObjectMap<>(FuncTool[]::new);
		}
		else
		{
			return dic;
		}
	}
	
	/** 注册功能插件(construct) */
	public FuncTool registFuncTool(IPlayerFuncTool tool)
	{
		if(me.getPhase()!=PartCallPhaseType.Construct)
		{
			Ctrl.throwError("注册功能插件时,必须在construct阶段");
			return null;
		}
		
		toRegistFuncTool(tool);
		
		return (FuncTool)tool;
	}
	
	private void toRegistFuncTool(IPlayerFuncTool tool)
	{
		FuncTool fTool=(FuncTool)tool;
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(fTool.getType());
		
		int funcID=fTool.getFuncID();
		
		if(ShineSetting.openCheck)
		{
			if(dic.contains(funcID))
			{
				Ctrl.throwError("已经存在功能插件:",fTool.getType(),funcID);
			}
		}
		
		//设置主角
		tool.setMe(me);
		fTool.setEntity(me);
		dic.put(funcID,fTool);
		_funcToolList.add(fTool);
		_playerFuncToolList.add(tool);
		fTool.construct();
	}
	
	/** 添加功能插件(数据不在FuncTool存，而是自行维护,也需要funcID) */
	public void addFuncTool(IPlayerFuncTool tool,FuncToolData data)
	{
		FuncTool fTool=(FuncTool)tool;
		
		fTool.isAdded=true;
		toRegistFuncTool(tool);
		fTool.setData(data);
		fTool.afterReadData();
		fTool.afterReadDataSecond();
	}
	
	/** 移除功能插件 */
	public void removeFuncTool(FuncTool tool)
	{
		if(!tool.isAdded)
		{
			Ctrl.throwError("不可删除非added的FuncTool");
			return;
		}
		
		_funcToolList.removeObj(tool);
		_playerFuncToolList.removeObj((IPlayerFuncTool)tool);
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(tool.getType());
		dic.remove(tool.getFuncID());
		tool.dispose();
	}
	
	/** 获取功能拆件 */
	public FuncTool getFuncTool(int type,int funcID)
	{
		return getFuncToolDic(type).get(funcID);
	}
	
	/** 获取排行工具 */
	public PlayerRankTool getRankTool(int funcID)
	{
		return (PlayerRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取分段排行工具 */
	public PlayerSubsectionRankTool getSubsectionRankTool(int funcID)
	{
		return (PlayerSubsectionRankTool)getFuncTool(FuncToolType.SubsectionRank,funcID);
	}
	
	/** 获取翻页显示工具 */
	public PlayerPageShowTool getPageShowTool(int funcID)
	{
		return (PlayerPageShowTool)getFuncTool(FuncToolType.PageShow,funcID);
	}
	
	/** 获取翻页显示工具 */
	public PlayerSubsectionPageShowTool getSubsectionPageShowTool(int funcID)
	{
		return (PlayerSubsectionPageShowTool)getFuncTool(FuncToolType.SubsectionPageShow,funcID);
	}
	
	/** 获取物品工具 */
	public BaseItemContainerTool getBaseItemContainerTool(int funcID)
	{
		FuncTool funcTool=getFuncTool(FuncToolType.ItemContainer,funcID);
		
		if(funcTool==null)
			funcTool=getFuncTool(FuncToolType.ItemDicContainer,funcID);
		
		return (BaseItemContainerTool)funcTool;
	}
	
	/** 获取物品容器工具 */
	public PlayerItemContainerTool getItemContainerTool(int funcID)
	{
		return (PlayerItemContainerTool)getFuncTool(FuncToolType.ItemContainer,funcID);
	}
	
	/** 获取物品字典容器工具 */
	public PlayerItemDicContainerTool getItemDicContainerTool(int funcID)
	{
		return (PlayerItemDicContainerTool)getFuncTool(FuncToolType.ItemDicContainer,funcID);
	}
	
	/** 获取自身翻页显示工具 */
	public PlayerSelfPageShowTool getSelfPageShowTool(int funcID)
	{
		return (PlayerSelfPageShowTool)getFuncTool(FuncToolType.SelfPageShow,funcID);
	}
	
	/** 获取装备容器工具 */
	public PlayerEquipContainerTool getEquipContainerTool(int funcID)
	{
		return (PlayerEquipContainerTool)getFuncTool(FuncToolType.EquipContainer,funcID);
	}
	
	/** 获取玩家群工具 */
	public PlayerRoleGroupTool getRoleGroupTool(int funcID)
	{
		return (PlayerRoleGroupTool)getFuncTool(FuncToolType.RoleGroup,funcID);
	}
	
	/** 获取拍卖行工具 */
	public PlayerAuctionTool getAuctionTool(int funcID)
	{
		return (PlayerAuctionTool)getFuncTool(FuncToolType.Auction,funcID);
	}
	
	/** 更新社交部分角色显示数据(自身) */
	public void refreshRoleSocialData(RoleShowChangeData data)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.RoleGroup);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values2;
			FuncTool v2;
			
			for(int i2=(values2=dic.getValues()).length-1;i2>=0;--i2)
			{
				if((v2=values2[i2])!=null)
				{
					PlayerRoleGroupTool v=(PlayerRoleGroupTool)v2;
					
					LongObjectMap<PlayerRoleGroup> roleGroupDic=v.getRoleGroupDic();
					
					if(!roleGroupDic.isEmpty())
					{
						PlayerRoleGroup[] values3;
						PlayerRoleGroup v3;
						
						for(int i3=(values3=roleGroupDic.getValues()).length-1;i3>=0;--i3)
						{
							if((v3=values3[i3])!=null)
							{
								v3.refreshRoleSocialData(data);
							}
						}
					}
				}
			}
		}
	}
	
	/** 检测某条件的功能开启 */
	public void checkFunctionsForCondition(int type)
	{
		IntObjectMap<FunctionConfig> dic=FunctionConfig.conditionDic.get(type);
		
		if(dic==null)
			return;
		
		toCheckDic(dic);
	}
	
	protected void toCheckDic(IntObjectMap<FunctionConfig> dic)
	{
		if(dic.isEmpty())
			return;
		
		FunctionConfig[] values;
		FunctionConfig v;
		
		for(int i=(values=dic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				if(isFunctionOpen(v.id))
				{
					if(v.needClose && checkConditions(v.closeConditions))
					{
						closeFunction(v.id);
					}
				}
				else
				{
					if(checkConditions(v.openConditions))
					{
						openFunction(v.id);
					}
				}
			}
		}
	}
	
	protected boolean checkConditions(int[][] arr)
	{
		for(int[] args:arr)
		{
			if(!checkOneFuncCondition(args))
				return false;
		}
		
		return true;
	}
	
	/** 检查单个功能条件 */
	protected boolean checkOneFuncCondition(int[] args)
	{
		switch(args[0])
		{
			case FunctionConditionType.Level:
			{
				return me.role.getLevel()>=args[1];
			}
			case FunctionConditionType.FunctionOpen:
			{
				return isFunctionOpen(args[1]);
			}
			case FunctionConditionType.NeedUnion:
			{
				return me.union!=null && me.union.hasUnion();
			}
			case FunctionConditionType.QuestComplete:
			{
				return me.quest.isQuestComplete(args[1]);
			}
		}
		
		return false;
	}
	
	/** 检测所有条件的功能开启 */
	public void checkAllFunctions()
	{
		toCheckDic(FunctionConfig.getDic());
	}
	
	protected void openFunction(int id)
	{
		_d.funcOpenSet.add(id);
		me.send(FuncOpenRequest.create(id));
		me.onFunctionOpen(id);
	}
	
	protected void closeFunction(int id)
	{
		_d.funcOpenSet.remove(id);
		me.send(FuncCloseRequest.create(id));
		me.onFunctionClose(id);
	}
	
	public boolean checkSubsectionRankOneCondition(int[] args)
	{
		switch (args[0])
		{
			case SubsectionRankConditionType.LevelBetween:
			{
				int level=me.role.getLevel();

				return (args[1]==-1 || level>=args[1])&&(args[2]==-1 || level<args[2]);
			}
		}

		return false;
	}
	
}
