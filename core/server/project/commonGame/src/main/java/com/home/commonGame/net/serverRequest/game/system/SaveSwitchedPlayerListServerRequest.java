package com.home.commonGame.net.serverRequest.game.system;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonGame.net.serverRequest.game.base.GameToGameServerRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.pool.DataPool;

/** 保存切换后的角色数据消息(generated by shine) */
public class SaveSwitchedPlayerListServerRequest extends GameToGameServerRequest
{
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.SaveSwitchedPlayerList;
	
	/** 数据组(playerID->listData(序列化好的)) */
	public LongObjectMap<byte[]> datas;
	
	public SaveSwitchedPlayerListServerRequest()
	{
		_dataID=ServerMessageType.SaveSwitchedPlayerList;
		setLongMessage();
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		LongObjectMap<byte[]> datasTemp=datas;
		if(datasTemp!=null)
		{
			this.datas=new LongObjectMap<byte[]>(byte[][]::new,datasTemp.size());
			LongObjectMap<byte[]> datasT=this.datas;
			if(!datasTemp.isEmpty())
			{
				long datasKFreeValue=datasTemp.getFreeValue();
				long[] datasKKeys=datasTemp.getKeys();
				Object[] datasVValues=datasTemp.getValues();
				for(int datasKI=datasKKeys.length-1;datasKI>=0;--datasKI)
				{
					long datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						byte[] datasV=(byte[])datasVValues[datasKI];
						long datasW;
						byte[] datasU;
						datasW=datasK;
						
						if(datasV!=null)
						{
							datasU=BytesControl.byteArrCopy(datasV);
						}
						else
						{
							datasU=null;
							nullObjError("datasU");
						}
						
						datasT.put(datasW,datasU);
					}
				}
			}
		}
		else
		{
			this.datas=null;
			nullObjError("datas");
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.datas!=null)
		{
			stream.writeLen(this.datas.size());
			if(!this.datas.isEmpty())
			{
				long datasKFreeValue=this.datas.getFreeValue();
				long[] datasKKeys=this.datas.getKeys();
				Object[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.length-1;datasKI>=0;--datasKI)
				{
					long datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						byte[] datasV=(byte[])datasVValues[datasKI];
						stream.writeLong(datasK);
						
						if(datasV!=null)
						{
							stream.writeLen(datasV.length);
							stream.writeByteArr(datasV);
						}
						else
						{
							nullObjError("datasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("datas");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SaveSwitchedPlayerListServerRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("datas");
		writer.sb.append(':');
		writer.sb.append("Map<long,byte[]>");
		if(this.datas!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.datas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.datas.isEmpty())
			{
				long datasKFreeValue=this.datas.getFreeValue();
				long[] datasKKeys=this.datas.getKeys();
				Object[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.length-1;datasKI>=0;--datasKI)
				{
					long datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						byte[] datasV=(byte[])datasVValues[datasKI];
						writer.writeTabs();
						writer.sb.append(datasK);
						
						writer.sb.append(':');
						writer.sb.append("Array<byte>");
						if(datasV!=null)
						{
							byte[] datasVT=datasV;
							int datasVLen=datasVT.length;
							writer.sb.append('(');
							writer.sb.append(datasVLen);
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int datasVI=0;datasVI<datasVLen;++datasVI)
							{
								byte datasVV=datasVT[datasVI];
								writer.writeTabs();
								writer.sb.append(datasVI);
								writer.sb.append(':');
								writer.sb.append(datasVV);
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.datas!=null)
		{
			if(!this.datas.isEmpty())
			{
				long datasKFreeValue=this.datas.getFreeValue();
				long[] datasKKeys=this.datas.getKeys();
				Object[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.length-1;datasKI>=0;--datasKI)
				{
					long datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						byte[] datasV=(byte[])datasVValues[datasKI];
						datasKKeys[datasKI]=datasKFreeValue;
						datasVValues[datasKI]=null;
					}
				}
			}
			this.datas.justClearSize();
		}
	}
	
	/** 创建实例 */
	public static SaveSwitchedPlayerListServerRequest create(LongObjectMap<byte[]> datas)
	{
		SaveSwitchedPlayerListServerRequest re=(SaveSwitchedPlayerListServerRequest)BytesControl.createRequest(dataID);
		re.datas=datas;
		return re;
	}
	
}
