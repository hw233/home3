package com.home.commonGame.net.response.func.item;
import com.home.commonBase.data.item.UseItemArgData;
import com.home.commonGame.constlist.generate.GameResponseType;
import com.home.commonGame.net.request.func.item.FuncUseItemResultRequest;
import com.home.commonGame.net.response.func.base.FuncRResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 使用物品消息(generated by shine) */
public class FuncUseItemResponse extends FuncRResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.FuncUseItem;
	
	/** 格子序号 */
	public int index;
	
	/** 数目 */
	public int num;
	
	/** 道具ID(检验用) */
	public int itemID;
	
	/** 额外使用参数 */
	public UseItemArgData arg;
	
	public FuncUseItemResponse()
	{
		_dataID=GameResponseType.FuncUseItem;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		boolean re=me.func.getBaseItemContainerTool(funcID).clientUseItemByIndex(index,num,itemID,arg);
		//返回结果
		me.send(FuncUseItemResultRequest.create(funcID,itemID,num,re));
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncUseItemResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		this.num=stream.readInt();
		
		this.itemID=stream.readInt();
		
		if(stream.readBoolean())
		{
			BaseData argT=stream.readDataFullNotNull();
			if(argT!=null)
			{
				if(argT instanceof UseItemArgData)
				{
					this.arg=(UseItemArgData)argT;
				}
				else
				{
					this.arg=new UseItemArgData();
					if(!(argT.getClass().isAssignableFrom(UseItemArgData.class)))
					{
						stream.throwTypeReadError(UseItemArgData.class,argT.getClass());
					}
					this.arg.shadowCopy(argT);
				}
			}
			else
			{
				this.arg=null;
			}
		}
		else
		{
			this.arg=null;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.index=stream.readInt();
		
		this.num=stream.readInt();
		
		this.itemID=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.arg=(UseItemArgData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.arg=null;
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("index");
		writer.sb.append(':');
		writer.sb.append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("num");
		writer.sb.append(':');
		writer.sb.append(this.num);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("itemID");
		writer.sb.append(':');
		writer.sb.append(this.itemID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg");
		writer.sb.append(':');
		if(this.arg!=null)
		{
			this.arg.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UseItemArgData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.index=0;
		this.num=0;
		this.itemID=0;
		this.arg=null;
	}
	
}
