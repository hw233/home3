package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.config.game.ActivationCodeConfig;
import com.home.commonBase.config.game.ActivityConfig;
import com.home.commonBase.constlist.generate.ActivityEnableConditionType;
import com.home.commonBase.constlist.generate.CallWayType;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.data.activity.ActivityData;
import com.home.commonBase.data.activity.ActivityServerData;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.global.Global;
import com.home.commonBase.part.player.clientData.ActivityClientPartData;
import com.home.commonBase.part.player.data.ActivityPartData;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.request.activity.ActivityCompleteOnceRequest;
import com.home.commonGame.net.request.activity.ActivitySwitchRequest;
import com.home.commonGame.net.serverRequest.center.activity.UseActivationCodeToCenterServerRequest;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.shine.data.BaseData;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SSet;
import com.home.shine.utils.OtherUtils;

/** 活动(generated by shine) */
public class ActivityPart extends PlayerBasePart
{
	/** 数据 */
	private ActivityPartData _d;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(ActivityPartData)data;
	}
	
	/** 获取数据 */
	public ActivityPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new ActivityPartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new ActivityClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((ActivityClientPartData)data);
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(ActivityClientPartData data)
	{
	
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
	
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
	
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
	
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		//fixed
		OtherUtils.removeNotExistFromDic1WithDic2(_d.datas,ActivityConfig.getDic());
		
		IntObjectMap<ActivityData> fDic;
		if(!(fDic=_d.datas).isEmpty())
		{
			fDic.forEachValue(v->
			{
				v.makeConfig();
			});
		}
		
		//兼容
		if(_d.usedActivationCodes==null)
		{
			_d.usedActivationCodes=new SSet<>();
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
	
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
	
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
	
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
	
	}
	
	@Override
	public void beforeLoginOnMain()
	{
		IntObjectMap<ActivityServerData> activityDic=GameC.global.activity.getActivityDic();
		
		activityDic.forEachValue(v->
		{
			ActivityData aData=_d.datas.get(v.id);
			
			if(aData==null)
			{
				aData=new ActivityData();
				aData.id=v.id;
				//回满次数
				aData.joinTimes=0;
				aData.isRunning=false;
				aData.nextResetTime=0;
				aData.lastTurnTime=0;
				aData.nextTurnTime=0;
				
				_d.datas.put(v.id,aData);
			}
			
			aData.isForceClosed=v.isForceClosed;
			aData.makeConfig();
			
			if(checkEnable(aData.config))
			{
				runOnTime(aData,false);
			}
		});
	}
	
	@Override
	public void onReloadConfig()
	{
		_d.datas.forEachValue(v->
		{
			v.reloadConfig();

			runOnTime(v,false);
		});
	}
	
	/** 检查单个初始化 */
	private void runOnTime(ActivityData data,boolean atTime)
	{
		runOnTimeForSwitch(data,atTime);
		runOnTimeForReset(data,atTime);
	}
	
	private void runOnTimeForSwitch(ActivityData data,boolean atTime)
	{
		ActivityConfig config=data.config;
		
		long nextEnd=config.endTimeT.getNextTime(me);
		long nextStart=config.startTimeT.getNextTime(me);
		
		boolean isRunning;
		
		//没有关闭时间
		if(config.endTimeT.isEmpty())
		{
			isRunning=true;
		}
		else
		{
			//已关闭
			if(nextEnd==-1L)
			{
				isRunning=false;
			}
			else
			{
				if(nextStart==-1L)
				{
					isRunning=true;
				}
				else
				{
					//根据两个时间差判定开关
					isRunning=nextStart>nextEnd;
				}
			}
		}
		
		if(data.isRunning!=isRunning || data.nextTurnTime==0)
		{
			if(isRunning)
				doActivityOpen(data,nextEnd,atTime);
			else
				doActivityClose(data,nextStart,atTime);
		}
		else
		{
			long nextTurn=isRunning ? nextEnd : nextStart;
			
			//需要计算
			if(data.nextTurnTime!=nextTurn)
			{
				//配置变更
				if(data.nextTurnTime==-1)
				{
					data.nextTurnTime=nextTurn;
				}
				else
				{
					long now=me.getTimeMillis();
					
					//之前的时间
					if(data.nextTurnTime<now)
					{
						//关开一下
						if(isRunning)
						{
							doActivityClose(data,nextStart,atTime);
							doActivityOpen(data,nextEnd,atTime);
						}
						else
						{
							data.nextTurnTime=nextTurn;
						}
					}
					else
					{
						data.nextTurnTime=nextTurn;
					}
				}
			}
		}
	}
	
	private void runOnTimeForReset(ActivityData data,boolean atTime)
	{
		ActivityConfig config=data.config;
		
		if(data.nextResetTime==0)
		{
			data.nextResetTime=config.resetTimeT.getNextTime(me);
		}
		else
		{
			long nextResetTime=config.resetTimeT.getNextTime(me);
			
			if(nextResetTime!=data.nextResetTime)
			{
				//配置变更
				if(data.nextResetTime==-1)
				{
					data.nextResetTime=nextResetTime;
				}
				else
				{
					long now=me.getTimeMillis();
					
					if(data.nextResetTime<now)
					{
						doActivityReset(data,nextResetTime,atTime);
					}
				}
			}
		}
	}
	
	@Override
	public void onOfflineTime(long delay)
	{
		IntObjectMap<ActivityData> fDic;
		if(!(fDic=_d.datas).isEmpty())
		{
			long now=me.getTimeMillis();
			
			fDic.forEachValue(v->
			{
				if(!v.isForceClosed)
				{
					if(v.nextTurnTime>0 && now>v.nextTurnTime)
					{
						runOnTimeForSwitch(v,true);
					}
					
					if(v.nextResetTime>0 && now>v.nextResetTime)
					{
						runOnTimeForReset(v,true);
					}
				}
			});
		}
	}
	
	/** 活动开启 */
	private void doActivityOpenAtTime(ActivityData data)
	{
		doActivityOpen(data,data.nextTurnTime,data.config.endTimeT.getNextTime(me),true);
	}
	
	/** 活动开启 */
	private void doActivityOpen(ActivityData data,long nextTurnTime,boolean atTime)
	{
		doActivityOpen(data,data.config.startTimeT.getPrevTime(me),nextTurnTime,atTime);
	}
	
	/** 活动开启 */
	public void doActivityOpen(int id,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		ActivityData data=_d.datas.get(id);
		
		doActivityOpen(data,lastTurnTime,nextTurnTime,atTime);
	}
	
	/** 活动开启 */
	private void doActivityOpen(ActivityData data,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		//不启用的
		if(!checkEnable(data.config))
			return;
		
		data.isRunning=true;
		data.lastTurnTime=lastTurnTime;
		data.nextTurnTime=nextTurnTime;
		
		me.send(ActivitySwitchRequest.create(data.id,data.isRunning,lastTurnTime,nextTurnTime,atTime));
		
		me.onActivityOpen(data.id,atTime);
	}
	
	/** 活动关闭 */
	private void doActivityCloseAtTime(ActivityData data)
	{
		doActivityClose(data,data.nextTurnTime,data.config.startTimeT.getNextTime(me),true);
	}
	
	/** 活动关闭 */
	private void doActivityClose(ActivityData data,long nextTurnTime,boolean atTime)
	{
		doActivityClose(data,data.config.endTimeT.getPrevTime(me),nextTurnTime,atTime);
	}
	
	/** 活动关闭 */
	public void doActivityClose(int id,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		ActivityData data=_d.datas.get(id);
		
		doActivityClose(data,lastTurnTime,nextTurnTime,atTime);
	}
	
	/** 活动关闭 */
	private void doActivityClose(ActivityData data,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		//不启用的
		if(!checkEnable(data.config))
			return;
		
		data.lastTurnTime=lastTurnTime;
		data.nextTurnTime=nextTurnTime;
		
		//初始值不重复关闭
		if(data.isRunning)
		{
			data.isRunning=false;
			me.send(ActivitySwitchRequest.create(data.id,data.isRunning,lastTurnTime,nextTurnTime,atTime));
			me.onActivityClose(data.id,atTime);
		}
	}
	
	/** 活动重置 */
	private void doActivityResetAtTime(ActivityData data)
	{
		doActivityReset(data,data.config.resetTimeT.getNextTime(me),true);
	}
	
	/** 活动重置 */
	public void doActivityReset(int id,long nextTurnTime,boolean atTime)
	{
		ActivityData data=_d.datas.get(id);
		
		doActivityReset(_d.datas.get(id),nextTurnTime,atTime);
	}
	
	/** 活动重置 */
	private void doActivityReset(ActivityData data,long nextTurnTime,boolean atTime)
	{
		data.nextResetTime=nextTurnTime;
		//回满次数
		data.joinTimes=0;
		
		me.onActivityReset(data.id,atTime);
	}
	
	/** 活动是否开启 */
	public boolean isActivityRunning(int id)
	{
		if(!_d.datas.contains(id))
		{
			return false;
		}
		
		return _d.datas.get(id).isRunning;
	}
	
	/** 检查是否可参加活动 */
	public boolean checkCanJoinActivity(int id,boolean needNotice)
	{
		ActivityData data=_d.datas.get(id);
		
		if(data==null)
		{
			me.warnLog("检查参加活动时，找不到活动",id);
			return false;
		}
		
		if(!data.isRunning)
		{
			me.warnLog("检查参加活动时，活动未开始",id);
			return false;
		}
		
		ActivityConfig config=data.config;
		
		if(config.joinCount>0 && data.joinTimes>=config.joinCount)
		{
			me.warnLog("检查参加活动时，次数不足",id);
			return false;
		}
		
		if(!me.role.checkRoleConditions(config.joinConditions,needNotice))
		{
			me.warnLog("检查参加活动时，进入条件不满足",id);
			return false;
		}
		
		return true;
	}
	
	/** 检查是否可参加活动 */
	public boolean checkEnable(ActivityConfig config)
	{
		for(int[] arr:config.enableConditions)
		{
			if(!checkOneEnable(arr))
				return false;
		}
		
		return true;
	}
	
	protected boolean checkOneEnable(int[] arr)
	{
		switch(arr[0])
		{
			case ActivityEnableConditionType.ClientPlatform:
			{
				return me.system.getClientPlatformType()==arr[1];
			}
		}
		
		return true;
	}
	
	/** 活动完成一次 */
	public void activityCompleteOnce(int id)
	{
		activityCompleteOnce(id,1);
	}
	
	/** 活动完成一次 */
	public void activityCompleteOnce(int id,int num)
	{
		ActivityData data=_d.datas.get(id);
		
		ActivityConfig config=data.config;
		
		if(config.joinCount>0)
		{
			if((data.joinTimes+=num)>config.joinCount)
			{
				data.joinTimes=config.joinCount;
			}
		}
		
		//奖励
		//TODO:确定下是如何发奖
		
		//推送
		me.send(ActivityCompleteOnceRequest.create(id,data.joinTimes));
		
		onActivityCompleteOnce(data);
	}
	
	/** 活动完成一次接口 */
	protected void onActivityCompleteOnce(ActivityData data)
	{
	
	}
	
	/** 使用激活码 */
	public void useActivationCode(String code)
	{
		//转大写
		code=code.toUpperCase();
		
		String mark=Global.activationCodeUseBatch ? code.substring(2) : code;
		
		if(_d.usedActivationCodes.contains(mark))
		{
			me.warningInfoCode(InfoCodeType.UseActivationCodeFailed_hasUsed,code);
			return;
		}
		
		UseActivationCodeToCenterServerRequest.create(me.role.playerID,code).send();
	}
	
	/** 使用激活码成功 */
	public void onUseActivationCodeSuccess(String code,int id)
	{
		String mark=Global.activationCodeUseBatch ? code.substring(2) : code;
		
		if(_d.usedActivationCodes.contains(mark))
		{
			me.warnLog("出现问题,激活码已使用过!!",code);
			me.warningInfoCode(InfoCodeType.UseActivationCodeFailed_hasUsed,code);
			return;
		}
		
		_d.usedActivationCodes.add(mark);
		
		ActivationCodeConfig config=ActivationCodeConfig.get(id);
		
		me.bag.addRewardAbs(config.reward,CallWayType.UseActivationCode);
		
		me.sendInfoCode(InfoCodeType.UseActivationCodeSuccess);
	}
	
}
