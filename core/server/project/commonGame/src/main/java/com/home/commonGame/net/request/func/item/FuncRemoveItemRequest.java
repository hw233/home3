package com.home.commonGame.net.request.func.item;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.base.GameRequest;
import com.home.commonGame.net.request.func.base.FuncSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.pool.DataPool;

/** 移除物品消息(generated by shine) */
public class FuncRemoveItemRequest extends FuncSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.FuncRemoveItem;
	
	/** 途径 */
	public int way;
	
	/** 移除序号数目组 */
	public IntIntMap dic;
	
	public FuncRemoveItemRequest()
	{
		_dataID=GameRequestType.FuncRemoveItem;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		IntIntMap dicTemp=dic;
		if(dicTemp!=null)
		{
			this.dic=new IntIntMap(dicTemp.size());
			IntIntMap dicT=this.dic;
			if(!dicTemp.isEmpty())
			{
				int dicKFreeValue=dicTemp.getFreeValue();
				long[] dicKTable=dicTemp.getTable();
				long dicKEntry;
				for(int dicKI=dicKTable.length-1;dicKI>=0;--dicKI)
				{
					dicKEntry=dicKTable[dicKI];
					int dicK=(int)dicKEntry;
					if(dicK!=dicKFreeValue)
					{
						int dicV=(int)(dicKEntry>>>32);
						int dicW;
						int dicU;
						dicW=dicK;
						
						dicU=dicV;
						
						dicT.put(dicW,dicU);
					}
				}
			}
		}
		else
		{
			this.dic=null;
			nullObjError("dic");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncRemoveItemRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("way");
		writer.sb.append(':');
		writer.sb.append(this.way);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("dic");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.dic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.dic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.dic.isEmpty())
			{
				int dicKFreeValue=this.dic.getFreeValue();
				long[] dicKTable=this.dic.getTable();
				long dicKEntry;
				for(int dicKI=dicKTable.length-1;dicKI>=0;--dicKI)
				{
					dicKEntry=dicKTable[dicKI];
					int dicK=(int)dicKEntry;
					if(dicK!=dicKFreeValue)
					{
						int dicV=(int)(dicKEntry>>>32);
						writer.writeTabs();
						writer.sb.append(dicK);
						
						writer.sb.append(':');
						writer.sb.append(dicV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.way);
		
		if(this.dic!=null)
		{
			stream.writeLen(this.dic.size());
			if(!this.dic.isEmpty())
			{
				int dicKFreeValue=this.dic.getFreeValue();
				long[] dicKTable=this.dic.getTable();
				long dicKEntry;
				for(int dicKI=dicKTable.length-1;dicKI>=0;--dicKI)
				{
					dicKEntry=dicKTable[dicKI];
					int dicK=(int)dicKEntry;
					if(dicK!=dicKFreeValue)
					{
						int dicV=(int)(dicKEntry>>>32);
						stream.writeInt(dicK);
						
						stream.writeInt(dicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("dic");
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.way);
		
		if(this.dic!=null)
		{
			stream.writeLen(this.dic.size());
			if(!this.dic.isEmpty())
			{
				int dicKFreeValue=this.dic.getFreeValue();
				long[] dicKTable=this.dic.getTable();
				long dicKEntry;
				for(int dicKI=dicKTable.length-1;dicKI>=0;--dicKI)
				{
					dicKEntry=dicKTable[dicKI];
					int dicK=(int)dicKEntry;
					if(dicK!=dicKFreeValue)
					{
						int dicV=(int)(dicKEntry>>>32);
						stream.writeInt(dicK);
						
						stream.writeInt(dicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("dic");
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.way=0;
		if(this.dic!=null)
		{
			this.dic.clear();
		}
	}
	
	/** 创建实例 */
	public static FuncRemoveItemRequest create(int funcID,int way,IntIntMap dic)
	{
		FuncRemoveItemRequest re=(FuncRemoveItemRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.way=way;
		re.dic=dic;
		return re;
	}
	
}
