package com.home.commonGame.part.gameGlobal.part;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.constlist.system.WorkSenderType;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.data.login.GameLoginToGameData;
import com.home.commonBase.data.social.roleGroup.work.RoleGroupWorkData;
import com.home.commonBase.data.system.AreaGlobalWorkData;
import com.home.commonBase.data.system.WorkData;
import com.home.commonBase.data.system.WorkReceiverData;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.part.gameGlobal.data.GameSystemPartData;
import com.home.commonBase.tool.WorkReceiveTool;
import com.home.commonBase.tool.WorkSendTool;
import com.home.commonBase.utils.BaseGameUtils;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.request.system.RefreshServerTimeRequest;
import com.home.commonGame.net.serverRequest.center.system.ReceiptWorkToCenterServerRequest;
import com.home.commonGame.net.serverRequest.game.system.ReceiptWorkToGameServerRequest;
import com.home.commonGame.part.gameGlobal.base.GameGlobalBasePart;
import com.home.shine.control.DateControl;
import com.home.shine.control.ThreadControl;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;

/** 系统数据(generated by shine) */
public class GameSystemPart extends GameGlobalBasePart
{
	/** 数据 */
	private GameSystemPartData _d;
	
	/** 事务工具 */
	private WorkSendTool _workSendTool;
	
	/** 事务接收工具 */
	private WorkReceiveTool _workReceiveTool;
	
	/** 服务器生成码 */
	private int _serverBornCode;
	
	/** 中心服运行序号 */
	private int _centerServerRunIndex;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(GameSystemPartData)data;
	}
	
	/** 获取数据 */
	public GameSystemPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new GameSystemPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		_workSendTool=new WorkSendTool(GameC.app.getQName())
		{
			@Override
			protected void resendWork(WorkData data)
			{
				GameC.main.resendWork(data);
			}
			
			@Override
			protected void completeWork(WorkData data)
			{
				GameC.main.completeWork(data);
			}
		};
		
		_workReceiveTool=new WorkReceiveTool();
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		//运行次数+1
		_d.serverRunIndex++;
		
		//兼容旧版
		if(_d.workReceiverData==null)
			_d.workReceiverData=new WorkReceiverData();
		
		_workSendTool.setData(_d.workSenderData);
		_workReceiveTool.setData(_d.workReceiverData);
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		if(me.getTimeMillis()>=_d.nextDailyTime)
		{
			long nextDailyTimeT=DateControl.getNextDailyTime();
			
			if(_d.nextDailyTime!=nextDailyTimeT)
			{
				_d.nextDailyTime=nextDailyTimeT;
				
				//每天调用
				me.onDaily();
			}
		}
		
		_workSendTool.onSecond(delay);
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		_d.version.setNowVersion();
		_d.serverStartTime=me.getTimeMillis();
		_d.nextDailyTime=DateControl.getNextDailyTime();
		_d.serverRunIndex=0;
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void readCenterLoginData(GameLoginData data,boolean isInit)
	{
		DateControl.setOffTime(data.serverOffTime*1000L);
		_serverBornCode=data.serverBornCode;
		_centerServerRunIndex=data.serverRunIndex;
	}
	
	@Override
	public void onDaily()
	{
		_workReceiveTool.onDaily();
	}
	
	/** 设置偏移时间(秒) */
	public void setOffTime(long off)
	{
		DateControl.setOffTime(off*1000L);
		
		GameC.main.radioAllPlayer(RefreshServerTimeRequest.create(DateControl.getTimeMillis()));
	}
	
	/** 获取一个新角色的ID(带了areaID前缀,areaID:原区ID)(如返回-1,则是注册已满) */
	public long getNewPlayerID(int areaID)
	{
		ThreadControl.checkCurrentIsMainThread();
		
		int index=_d.playerIndexDic.addValue(areaID,1);
		
		if(index>=CommonSetting.areaRegistMax)
		{
			Ctrl.throwError("没有新角色ID了");
			
			_d.playerIndexDic.put(areaID,index-1);
			
			return -1L;
		}
		
		return BaseGameUtils.makeLogicID(areaID,index);
	}
	
	/** 获取某取服的注册数 */
	public int getAreaRegistNum(int areaID)
	{
		return _d.playerIndexDic.get(areaID);
	}
	
	/** 获取global的全局时间 */
	public long getNextDailyTime()
	{
		return _d.nextDailyTime;
	}
	
	/** 获取运行序号 */
	public int getRunIndex()
	{
		return _d.serverRunIndex;
	}
	
	/** 获取事务发起工具 */
	public WorkSendTool getWorkSendTool()
	{
		return _workSendTool;
	}
	
	/** 获取事务接收工具 */
	public WorkReceiveTool getWorkReceiveTool()
	{
		return _workReceiveTool;
	}
	
	/** 接受回执 */
	public WorkData onReceiptWork(int senderIndex,long instanceID)
	{
		int senderID=BaseGameUtils.getWorkSenderID(senderIndex);
		
		if(!GameC.main.containsArea(senderID))
		{
			Ctrl.errorLog("game服接收回执时,不是该服的事务");
			return null;
		}
		
		return _workSendTool.onReceiptWork(instanceID);
	}
	
	public int getTempRecord(long userID,int areaID)
	{
		//return _d.tempPlayerRecord.get(userID<<16 | areaID);
		return 0;
	}
	
	public void addTempRecord(long userID,int areaID)
	{
		//_d.tempPlayerRecord.addValue(userID<<16 | areaID,1);
	}
	
	/** 获取服务器生成码 */
	public int getServerBornCode()
	{
		return _serverBornCode;
	}
	
	/** 获取服务器开服时间 */
	public long getServerStartTime()
	{
		return _d.serverStartTime;
	}
	
	/** 执行离线事务(主线程) */
	public void executeAreaWork(AreaGlobalWorkData data)
	{
		if(data instanceof RoleGroupWorkData)
		{
			RoleGroupWorkData wData=(RoleGroupWorkData)data;
			
			GameC.global.func.getRoleGroupTool(wData.funcID).getRoleGroupAbs(wData.groupID,group->
			{
				//有实例ID
				if(data.workInstanceID>0L)
				{
					int re=InfoCodeType.WorkError;
					
					if(_workReceiveTool.record(data))
					{
						if(group!=null)
						{
							re=GameC.areaWork.executeRoleGroup(group,wData);
						}
						else
						{
							re=InfoCodeType.RoleGroupMiss;
						}
					}
					
					receiptAreaWork(data,re);
				}
				else
				{
					if(group!=null)
					{
						GameC.areaWork.executeRoleGroup(group,wData);
					}
				}
			});
		}
		else
		{
			//有实例ID
			if(data.workInstanceID>0L)
			{
				int re=InfoCodeType.WorkError;
				
				if(_workReceiveTool.record(data))
				{
					GameC.areaWork.execute(data);
					re=InfoCodeType.Success;
				}
				
				receiptAreaWork(data,re);
			}
			else
			{
				GameC.areaWork.execute(data);
			}
		}
	}
	
	/** 事务回执 */
	private void receiptAreaWork(AreaGlobalWorkData data,int result)
	{
		//没有实例ID
		if(data.workInstanceID<=0L)
			return;
		
		int type=BaseGameUtils.getWorkSenderType(data.senderIndex);
		
		//中心服
		if(type==WorkSenderType.Center)
		{
			ReceiptWorkToCenterServerRequest.create(data.workInstanceID,result).send();
		}
		//game服
		else if(type==WorkSenderType.Game)
		{
			int senderID=BaseGameUtils.getWorkSenderID(data.senderIndex);
			
			//当前区
			if(GameC.main.containsArea(senderID))
			{
				GameC.main.onReceiptWork(data.senderIndex,data.workInstanceID,result);
			}
			else
			{
				ReceiptWorkToGameServerRequest.create(data.senderIndex,data.workInstanceID,result).send(GameC.main.getNowGameID(senderID));
			}
		}
	}
	
	@Override
	public void makeLoginGameData(GameLoginToGameData data)
	{
		data.isLoginLimit=GameC.main.isLoginLimit();
	}
	
	@Override
	public void readGameLoginData(int gameID,GameLoginToGameData data)
	{
		GameC.main.onLoginLimitChange(gameID,data.isLoginLimit);
	}
	
}
