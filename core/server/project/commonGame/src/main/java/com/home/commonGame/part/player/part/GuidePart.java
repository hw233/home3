package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.part.player.clientData.GuideClientPartData;
import com.home.commonBase.part.player.data.GuidePartData;
import com.home.commonGame.net.request.guide.RefreshMainGuideStepRequest;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.shine.data.BaseData;

/** 引导(generated by shine) */
public class GuidePart extends PlayerBasePart
{
	/** 数据 */
	private GuidePartData _d;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(GuidePartData)data;
	}
	
	/** 获取数据 */
	public GuidePartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new GuidePartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new GuideClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((GuideClientPartData)data);
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(GuideClientPartData data)
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	/** 设置引导步 */
	public void setMainStep(int value)
	{
		setMainStep(value,true);
	}
	
	/** 设置引导步 */
	public void setMainStep(int value,boolean needSend)
	{
		_d.mainStep=value;
		
		if(needSend)
			me.send(RefreshMainGuideStepRequest.create(value));
	}
	
	/** 是否完成主引导过程(可进入场景) */
	public boolean hasFinishFirstGuide()
	{
		//g层复写为 return _d.mainStep>=XXX;
		return true;
	}
	
}
