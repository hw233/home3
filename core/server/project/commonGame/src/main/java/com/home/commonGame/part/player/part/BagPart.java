package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.config.game.CostConfig;
import com.home.commonBase.config.game.ExchangeConfig;
import com.home.commonBase.config.game.ExchangeGroupConfig;
import com.home.commonBase.config.game.ItemConfig;
import com.home.commonBase.config.game.RewardConfig;
import com.home.commonBase.constlist.generate.CallWayType;
import com.home.commonBase.constlist.generate.ClientRandomSeedType;
import com.home.commonBase.constlist.generate.CurrencyType;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.data.item.ItemData;
import com.home.commonBase.data.item.UseItemArgData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.part.player.clientData.BagClientPartData;
import com.home.commonBase.part.player.data.BagPartData;
import com.home.commonBase.utils.BaseGameUtils;
import com.home.commonGame.control.LogicExecutor;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.request.item.AddRewardRequest;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.IntSet;
import com.home.shine.support.collection.SList;

/** 背包(generated by shine) */
public class BagPart extends PlayerBasePart
{
	/** 数据 */
	private BagPartData _d;
	
	private IntIntMap _tempMap=new IntIntMap();
	
	/** 临时物品组 */
	private SList<ItemData> _tempItems=new SList<>(ItemData[]::new);
	
	private IntSet _itemNumChangedSet=new IntSet();
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(BagPartData)data;
	}
	
	/** 获取数据 */
	public BagPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new BagPartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new BagClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((BagClientPartData)data);
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(BagClientPartData data)
	{
	
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
	
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
	
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		_itemNumChangedSet.clear();
		_tempMap.clear();
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
	
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
	
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
	
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
	
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
	
	}
	
	public void onPiece(int delay)
	{
		if(_itemNumChangedSet.isEmpty())
			return;
		
		_itemNumChangedSet.forEachAndClear(v->
		{
			me.quest.refreshTaskForItemNumChanged(v);
		});
	}
	
	/** 创建物品通过类型(只创建物品) */
	public ItemData createItemByType(int type)
	{
		ItemData re;
		
		LogicExecutor executor;
		
		if((executor=me.system.getExecutor())!=null)
		{
			re=executor.createItemData(type);
		}
		else
		{
			re=BaseC.factory.createItemData();
			re.initIdentityByType(type);
		}
		
		return re;
	}
	
	/** 创建物品数据 */
	public ItemData createItem(int id,int num)
	{
		ItemConfig config=ItemConfig.get(id);
		
		ItemData data=createItemByType(config.type);
		data.id=id;
		data.num=num;
		data.config=config;
		//失效时间
		data.disableTime=config.enableTimeT.getNextTime(me);
		
		//额外初始化
		BaseC.logic.initItem(data,id);
		
		return data;
	}
	
	/** 回收物品 */
	public void releaseItem(ItemData data)
	{
		LogicExecutor executor;
		
		if((executor=me.system.getExecutor())!=null)
		{
			executor.releaseItemData(data);
		}
	}
	
	/** 获取某序号的物品 */
	public ItemData getItem(int index)
	{
		Ctrl.throwError("must override");
		return null;
	}
	
	/** 获取某id的物品数量 */
	public int getItemNum(int itemID)
	{
		Ctrl.throwError("must override");
		return 0;
	}
	
	/** 是否有free格子 */
	public boolean hasFreeGrid(int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有物品位置 */
	public boolean hasItemPlace(ItemData data)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有物品位置 */
	public boolean hasItemPlace(int id,int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有物品位置 */
	public boolean hasItemPlace(SList<ItemData> list)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有物品位置 */
	public boolean hasItemPlace(DIntData[] dataArr)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 添加物品数据 */
	public boolean addItem(ItemData data,int way)
	{
		int num=data.num;
		
		if(toAddItem(data,way))
		{
			toLogAddItem(data.id,num,way);
			return true;
		}
		
		return false;
	}
	
	/** 添加物品数据 */
	public void addItemAbs(ItemData data,int way)
	{
		int num=data.num;
		
		if(toAddItem(data,way))
		{
			toLogAddItem(data.id,num,way);
		}
		else
		{
			me.mail.addMailForItem(data,way);
			toLogAddItemToMail(data.id,num,way);
		}
	}
	
	protected boolean toAddItem(ItemData data,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean addItem(int id,int way)
	{
		return addItem(id,1,way);
	}
	
	/** 添加指定id和数目的道具 */
	public boolean addItem(int id,int num,int way)
	{
		if(toAddItem(id,num,way))
		{
			toLogAddItem(id,num,way);
			return true;
		}
		
		return false;
	}
	
	/** 添加物品(包满邮件) */
	public void addItemAbs(int id,int num,int way)
	{
		_tempMap.clear();
		_tempMap.addValue(id,num);
		
		if(toAddItem(id,num,way))
		{
			toLogTempMap(way);
		}
		else
		{
			SList<ItemData> list=new SList<>();
			list.add(BaseC.logic.createItem(id,num,me));
			me.mail.addMailForItem(list,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected boolean toAddItem(int id,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 添加新物品到指定序号 */
	public boolean addNewItemToIndex(int index,ItemData data,int way)
	{
		if(toAddNewItemToIndex(index,data,way))
		{
			toLogAddItem(data.id,data.num,way);
			return true;
		}
		
		return false;
	}
	
	/** 添加新物品到指定序号 */
	protected boolean toAddNewItemToIndex(int index,ItemData data,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	private void toLogTempMap(int way)
	{
		_tempMap.forEach((k,v)->
		{
			toLogAddItem(k,v,way);
		});
		
		_tempMap.clear();
	}
	
	private void toLogTempMapToMail(int way)
	{
		_tempMap.forEach((k,v)->
		{
			toLogAddItemToMail(k,v,way);
		});
		
		_tempMap.clear();
	}
	
	/** 添加一组物品 */
	public boolean addItems(SList<ItemData> list,int way)
	{
		_tempMap.clear();
		ItemData data;
		for(int i=list.size()-1;i>=0;--i)
		{
			_tempMap.addValue((data=list.get(i)).id,data.num);
		}
		
		if(toAddItems(list,way))
		{
			toLogTempMap(way);
			return true;
		}
		else
		{
			_tempMap.clear();
			return false;
		}
	}
	
	/** 添加一组物品(包满邮件) */
	public void addItemsAbs(SList<ItemData> list,int way)
	{
		_tempMap.clear();
		ItemData data;
		for(int i=list.size()-1;i>=0;--i)
		{
			_tempMap.addValue((data=list.get(i)).id,data.num);
		}
		
		if(toAddItems(list,way))
		{
			toLogTempMap(way);
		}
		else
		{
			me.mail.addMailForItem(list,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected boolean toAddItems(SList<ItemData> list,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 添加一组物品 */
	public boolean addItems(DIntData[] list,int num,int way)
	{
		_tempMap.clear();
		for(int i=list.length-1;i>=0;--i)
		{
			_tempMap.addValue(list[i].key,list[i].value*num);
		}
		
		if(toAddItems(list,num,way))
		{
			toLogTempMap(way);
			
			//if(CallWayConfig.get(way).needAddItemNotice)
			//{
			//	me.send(AddItemListNoticeRequest.create(way,list));
			//}
			
			return true;
		}
		else
		{
			_tempMap.clear();
			return false;
		}
	}
	
	/** 添加一组物品(包满邮件) */
	public void addItemsAbs(DIntData[] list,int num,int way)
	{
		_tempMap.clear();
		for(int i=list.length-1;i>=0;--i)
		{
			_tempMap.addValue(list[i].key,list[i].value*num);
		}
		
		if(toAddItems(list,num,way))
		{
			toLogTempMap(way);
		}
		else
		{
			me.mail.addMailForItem(list,num,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected boolean toAddItems(DIntData[] list,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有指定id的物品 */
	public boolean containsItem(int id)
	{
		return containsItem(id,1);
	}
	
	/** 是否有指定id数目的物品 */
	public boolean containsItem(int id,int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有指定物品组(不考虑id重复) */
	public boolean containsItems(DIntData[] items)
	{
		for(DIntData v:items)
		{
			if(!containsItem(v.key,v.value))
				return false;
		}
		
		return true;
	}
	
	/** 是否有指定物品组(不考虑id重复) */
	public boolean containsItems(DIntData[] items,int num)
	{
		for(DIntData v:items)
		{
			if(!containsItem(v.key,v.value*num))
				return false;
		}
		
		return true;
	}
	
	/** 移除道具(1个)(会回收) */
	public boolean removeItem(int id,int way)
	{
		return removeItem(id,1,way);
	}
	
	/** 移除道具(会回收) */
	public boolean removeItem(int id,int num,int way)
	{
		if(toRemoveItem(id,num,way))
		{
			toLogRemoveItem(id,num,way);
			return true;
		}
		
		return false;
	}
	
	/** 移除道具组(会回收) */
	public boolean removeItems(DIntData[] items,int num,int way)
	{
		if(toRemoveItems(items,num,way))
		{
			for(DIntData v:items)
			{
				toLogRemoveItem(v.key,v.value*num,way);
			}
			
			return true;
		}
		
		return false;
	}
	
	protected boolean toRemoveItem(int id,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	protected boolean toRemoveItems(DIntData[] items,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 移除指定序号的物品(全部数目)(不回收) */
	public boolean removeItemByIndex(int index,int way)
	{
		ItemData data=getItem(index);
		
		if(data==null)
			return false;
		
		int num=data.num;
		
		if(toRemoveItemByIndex(index,num,way))
		{
			toLogRemoveItem(data.id,num,way);
			return true;
		}
		
		return false;
	}
	
	/** 移除指定序号的物品(部分数目)(不回收) */
	public boolean removeItemByIndex(int index,int num,int way)
	{
		ItemData data=getItem(index);
		
		if(data==null)
			return false;
		
		if(toRemoveItemByIndex(index,num,way))
		{
			toLogRemoveItem(data.id,num,way);
			return true;
		}
		
		return false;
	}
	
	protected boolean toRemoveItemByIndex(int index,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 通过ID使用物品 */
	public boolean useItemByID(int id)
	{
		return useItemByID(id,null);
	}
	
	/** 通过ID使用物品 */
	public boolean useItemByID(int id,UseItemArgData arg)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 使用物品 */
	public boolean useItemByIndex(int index)
	{
		return useItemByIndex(index,1,null);
	}
	
	/** 使用物品 */
	public boolean useItemByIndex(int index,int num,UseItemArgData arg)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 整理 */
	public void cleanUp()
	{
	
	}
	
	/** 输出背包 */
	public void printBag()
	{
	
	}
	
	/** 是否有某奖励的位置 */
	public boolean hasRewardPlace(int rewardID)
	{
		return hasRewardPlace(rewardID,1);
	}
	
	/** 是否有某奖励的位置 */
	public boolean hasRewardPlace(int rewardID,int num)
	{
		RewardConfig config=RewardConfig.get(rewardID);
		
		//没有随机
		if(config.randomListID<=0)
		{
			int n=0;
			int sMax;
			
			for(DIntData v:config.items)
			{
				if((sMax=ItemConfig.get(v.key).singlePlusMax)>0)
					n+=(v.value*num+sMax-1)/sMax;
				else
					n+=1;
			}
			
			return hasFreeGrid(n);
		}
		else
		{
			return hasFreeGrid(RewardConfig.get(rewardID).needGrid*num);
		}
	}
	
	/** 添加奖励 */
	public boolean addReward(int rewardID,int way)
	{
		return addReward(rewardID,1,way);
	}
	
	/** 添加奖励 */
	public boolean addReward(int rewardID,int num,int way)
	{
		return addRewardLevel(rewardID,me.role.getLevel(),num,way);
	}
	
	/** 添加对应等级奖励 */
	public boolean addRewardLevel(int rewardID,int level,int num,int way)
	{
		RewardConfig config=RewardConfig.get(rewardID);
		
		//没位置
		if(!hasRewardPlace(rewardID,num))
		{
			return false;
		}
		
		return doAddRewardLevel(config,level,num,false,way);
	}
	
	/** 执行添加奖励 */
	protected boolean doAddRewardLevel(RewardConfig config,int level,int num,boolean isAbs,int way)
	{
		if(!doAddRewardForItem(config,level,num,isAbs,way))
		{
			return false;
		}
		
		doAddRewardWithoutItem(config,level,num,way);
		
		//推送添加
		me.send(AddRewardRequest.create(way,config.id,level,num,_tempItems.isEmpty() ? null : _tempItems));
		
		_tempItems.clear();
		
		return true;
	}
	
	protected boolean doAddRewardForItem(RewardConfig config,int level,int num,boolean isAbs,int way)
	{
		if(isAbs)
		{
			addItemsAbs(config.items,num,way);
		}
		else
		{
			//添加物品ok
			if(!addItems(config.items,num,way))
			{
				me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
				return false;
			}
		}
		
		if(config.randomListID>0)
		{
			randomItemList(_tempItems,config.randomListID,num);
			
			if(isAbs)
			{
				addItemsAbs(_tempItems,way);
			}
			else
			{
				if(!addItems(_tempItems,way))
				{
					_tempItems.clear();
					
					me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
					return false;
				}
			}
		}
		
		return true;
	}
	
	/** 执行添加奖励(非物品部分) */
	protected void doAddRewardWithoutItem(RewardConfig config,int level,int num,int way)
	{
		if(config.currency.length>0)
		{
			if(config.needLevelAdapter)
			{
				int len=config.currency.length;
				for(int i=0;i<len;i++)
				{
					int v=BaseC.logic.calculateRewardLevel(config.currency[i].value,level,config.currencyLevelFormula[i]);
					me.role.addCurrencyAbs(config.currency[i].key,v,way);
				}
			}
			else
			{
				me.role.addCurrenciesAbs(config.currency,num,way);
			}
		}
		
		if(config.roleExp>0)
		{
			if(config.needLevelAdapter)
			{
				long v=BaseC.logic.calculateRewardLevel(config.roleExp,level,config.roleExpLevelFormula);
				me.role.addExp(v,way);
			}
			else
			{
				me.role.addExp(config.roleExp,way);
			}
		}
	}
	
	/** 构造奖励物品组 */
	protected void toMakeRewardItems(RewardConfig config,SList<ItemData> list,int level,int num)
	{
		list.clear();
		
		if(config.randomListID>0)
		{
			randomItemList(_tempItems,config.randomListID,num);
		}
		
		if(config.items.length>0)
		{
			for(DIntData v:config.items)
			{
				list.add(createItem(v.key,v.value*num));
			}
		}
	}
	
	/** 绝对添加奖励(包满进邮件) */
	public void addRewardAbs(int rewardID,int way)
	{
		addRewardAbs(rewardID,1,way);
	}
	
	/** 绝对添加奖励(包满进邮件) */
	public void addRewardAbs(int rewardID,int num,int way)
	{
		addRewardLevelAbs(rewardID,me.role.getLevel(),num,way);
	}
	
	/** 绝对添加奖励(包满进邮件) */
	public void addRewardLevelAbs(int rewardID,int level,int num,int way)
	{
		RewardConfig config=RewardConfig.get(rewardID);
		
		doAddRewardLevel(config,level,num,true,way);
	}
	
	/** 添加奖励(排除物品) */
	public void addRewardWithoutItem(RewardConfig config,int way)
	{
		doAddRewardWithoutItem(config,me.role.getLevel(),1,way);
	}
	
	/** 添加奖励(只物品) */
	public void addRewardForItem(RewardConfig config,boolean isAbs,int way)
	{
		doAddRewardForItem(config,me.role.getLevel(),1,isAbs,way);
	}
	
	/** 添加奖励(排除物品) */
	public void makeRewardItems(RewardConfig config,SList<ItemData> list)
	{
		toMakeRewardItems(config,list,me.role.getLevel(),1);
	}
	
	/** 是否有某cost的所需 */
	public boolean hasCost(int costID)
	{
		CostConfig config=CostConfig.get(costID);
		
		if(!me.role.hasCurrencies(config.currency))
			return false;
		
		if(!containsItems(config.items))
			return false;
		
		return true;
	}
	
	/** 是否有某cost num次的所需 */
	public boolean hasCost(int costID,int num)
	{
		CostConfig config=CostConfig.get(costID);
		
		if(!me.role.hasCurrencies(config.currency,num))
			return false;
		
		if(!containsItems(config.items,num))
			return false;
		
		return true;
	}
	
	/** 执行某id的消耗 */
	public boolean doCost(int costID,int way)
	{
		return doCost(costID,1,way);
	}
	
	/** 执行某id的消耗 */
	public boolean doCost(int costID,int num,int way)
	{
		CostConfig config=CostConfig.get(costID);
		
		if(!me.role.hasCurrencies(config.currency,num))
			return false;
		
		if(!removeItems(config.items,num,way))
			return false;
		
		if(!me.role.costCurrencies(config.currency,way))
		{
			Ctrl.errorLog("出严重错误，此时不该消耗不掉");
			addItems(config.items,num,way);
			return false;
		}
		
		return true;
	}
	
	/** 回滚某id的消耗 */
	public void rollbackCost(int costID,int way)
	{
		rollbackCost(costID,1,way);
	}
	
	/** 回滚某id的消耗 */
	public void rollbackCost(int costID,int num,int way)
	{
		CostConfig config=CostConfig.get(costID);
		
		me.role.addCurrenciesAbs(config.currency,num,way);
		
		addItemsAbs(config.items,num,way);
	}
	
	/** 随机一个物品(可能为空) */
	public ItemData randomItem(int randomItemConfigID)
	{
		return BaseC.logic.randomItem(randomItemConfigID,me, ClientRandomSeedType.Server);
	}
	
	/** 随机一组物品 */
	public void randomItemList(SList<ItemData> list,int randItemListConfigID,int num)
	{
		list.clear();
		for(int i=num-1;i>=0;--i)
		{
			BaseC.logic.randomItemList(list,randItemListConfigID,me);
		}
	}
	
	/** 检查物品使用条件 */
	public boolean checkItemUseConditions(ItemData data,int num,UseItemArgData arg)
	{
		int[][] conditions;
		
		if((conditions=data.config.useConditions)!=null)
		{
			for(int[] v:conditions)
			{
				if(!checkOneItemUseCondition(v,num,arg))
				{
					return false;
				}
			}
		}
		
		for(int[] v:data.config.useActions)
		{
			if(!checkOneItemUseConditionForAction(v,num,arg))
			{
				return false;
			}
		}
		
		return true;
	}
	
	/** 获取物品接口(G层可复写 执行自己的添加物品后操作) */
	public void onItemAdd(int index,ItemData data,int num,int way)
	{
	
	}
	
	/** 移除物品接口(G层可复写 执行自己的移除物品后操作) */
	public void onItemRemove(int index,ItemData data,int num,int way)
	{
	
	}
	
	/** 物品数目改变 */
	public void onItemNumChanged(int id)
	{
		_itemNumChangedSet.add(id);
	}
	
	/** 执行使用物品 */
	public void toUseItem(ItemData data,int num,UseItemArgData arg)
	{
		int[][] actions;
		
		if((actions=data.config.useActions)!=null)
		{
			doItemUseActions(actions,num,arg);
		}
		
		toLogRemoveItem(data.id,num,CallWayType.UseItem);
		
		onItemUse(data.id,num,data,arg);
	}
	
	/** 执行使用物品 */
	public void toUseItem(int id,int num,UseItemArgData arg,int way)
	{
		int[][] actions;
		
		if((actions=ItemConfig.get(id).useActions)!=null)
		{
			doItemUseActions(actions,num,arg);
		}
		
		toLogRemoveItem(id,num,way);
		
		onItemUse(id,num,null,arg);
	}
	
	/** 物品使用 */
	protected void onItemUse(int id,int num,ItemData itemData,UseItemArgData arg)
	{
	
	}
	
	protected void doItemUseActions(int[][] actions,int num,UseItemArgData arg)
	{
		for(int[] v:actions)
		{
			doOneItemUseAction(v,num,arg);
		}
	}
	
	/** 执行单个道具物品动作 */
	protected boolean checkOneItemUseCondition(int[] args,int num,UseItemArgData arg)
	{
		return me.role.checkOneRoleCondition(args,true);
	}
	
	/** 执行单个道具物品动作 */
	protected boolean checkOneItemUseConditionForAction(int[] args,int num,UseItemArgData arg)
	{
		return me.role.checkOneRoleConditionForAction(args,num);
	}
	
	/** 执行单个道具物品动作 */
	protected void doOneItemUseAction(int[] args,int num,UseItemArgData arg)
	{
		me.role.doOneRoleAction(args,num,CallWayType.UseItem);
	}
	
	/** 记录添加物品 */
	protected void toLogAddItem(int id,int num,int way)
	{
		GameC.log.playerAddItem(me,id,num,way);
	}
	
	/** 记录移除物品 */
	protected void toLogRemoveItem(int id,int num,int way)
	{
		GameC.log.playerRemoveItem(me,id,num,way);
	}
	
	/** 记录添加物品到邮件 */
	protected void toLogAddItemToMail(int id,int num,int way)
	{
		GameC.log.playerAddItemToMail(me,id,num,way);
	}
	
	/** 道具出售 */
	public boolean sellItem(int index,int num,int itemID)
	{
		if(!BaseGameUtils.checkClientNum(num))
		{
			me.warningInfoCode(InfoCodeType.Bag_sellItem_wrongNum,num);
			return false;
		}
		
		ItemData data;
		
		if((data=getItem(index))==null)
		{
			me.warningInfoCode(InfoCodeType.Bag_sellItem_itemNotExist,itemID);
			return false;
		}
		
		if(data.id!=itemID)
		{
			me.warningInfoCode(InfoCodeType.Bag_sellItem_wrongID,itemID);
			return false;
		}
		
		if(!removeItemByIndex(index,num,CallWayType.SellItem))
		{
			me.warningInfoCode(InfoCodeType.Bag_sellItem_removeItemFailed,itemID);
			return false;
		}
		
		me.role.addCurrency(CurrencyType.Coin,data.config.sellPrice*num,CallWayType.SellItem);
		return true;
	}
	
	/** 兑换(isClient:是否客户端发起) */
	public void exchange(int id,int num,boolean isClient)
	{
		exchange(id,num,isClient,CallWayType.Exchange,true);
	}
	
	/** 不需要检测的兑换(isClient:是否客户端发起) */
	public void exchangeNotCheck(int id,int num,boolean isClient,int way)
	{
		exchange(id,num,isClient,way,false);
	}
	
	/** 兑换(isClient:是否客户端发起) */
	public void exchange(int id,int num,boolean isClient,int way,boolean needCheck)
	{
		if(needCheck && !canExchange(id,num,isClient))
		{
			//不能兑换就返回
			return;
		}
		
		ExchangeConfig config=ExchangeConfig.get(id);
		
		doCost(config.costID,num,way);
		addReward(config.rewarID,num,way);
		exchangeSuccess(id,num);
	}
	
	/** 是否可兑换 */
	public boolean canExchange(int id,int num,boolean isClient)
	{
		if(!BaseGameUtils.checkClientNum(num))
		{
			me.warnLog("客户端次数非法",num);
			return false;
		}
		
		ExchangeConfig config=ExchangeConfig.get(id);
		
		if(config==null)
		{
			me.warnLog("兑换时,找不到兑换配置");
			return false;
		}
		
		ExchangeGroupConfig gConfig=ExchangeGroupConfig.get(config.groupID);
		
		if(isClient && !gConfig.canClientUse)
		{
			me.warnLog("兑换时,该兑换不可客户端发起");
			return false;
		}
		
		if(!me.role.checkRoleConditions(gConfig.conditions,true))
		{
			me.warnLog("兑换时,条件不满足");
			return false;
		}
		
		if(!checkConditionEx(id,num))
		{
			me.warnLog("兑换时,附加条件不满足");
			return false;
		}
		
		if(!hasCost(config.costID,num))
		{
			me.warnLog("兑换时,材料不足");
			return false;
		}
		
		if(!hasRewardPlace(config.rewarID,num))
		{
			me.warnLog("兑换时,没有足够的空间");
			me.sendInfoCode(InfoCodeType.BagNotEnough);
			return false;
		}
		
		return true;
	}
	
	/** 检查附加条件 */
	protected boolean checkConditionEx(int id,int num)
	{
		return true;
	}
	
	/** 兑换成功 */
	protected void exchangeSuccess(int id,int num)
	{
	
	}
	
}
