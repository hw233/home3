package com.home.commonGame.net.serverRequest.center.func.rank.subsection;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonGame.net.serverRequest.center.func.base.FuncPlayerToCenterServerRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 分段排行榜提交排行值到中心服(generated by shine) */
public class FuncCommitSubsectionRankValueToCenterServerRequest extends FuncPlayerToCenterServerRequest
{
	/** 大组index */
	public int subsectionIndex;
	
	/** 小组index */
	public int subsectionSubIndex;
	
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.FuncCommitSubsectionRankValueToCenter;
	
	/** 版本号 */
	public int version;
	
	/** 排行值 */
	public long value;
	
	/** 参数组 */
	public long[] args;
	
	public FuncCommitSubsectionRankValueToCenterServerRequest()
	{
		_dataID=ServerMessageType.FuncCommitSubsectionRankValueToCenter;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		long[] argsTemp=args;
		if(argsTemp!=null)
		{
			long[] argsR=argsTemp;
			int argsLen=argsR.length;
			this.args=new long[argsLen];
			BytesControl.arrayCopy(argsTemp,this.args,argsLen);
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncCommitSubsectionRankValueToCenterServerRequest";
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeInt(this.version);
		
		stream.writeLong(this.value);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			long[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				long argsV=argsT[argsVI];
				stream.writeLong(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("subsectionIndex");
		writer.sb.append(':');
		writer.sb.append(this.subsectionIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("subsectionSubIndex");
		writer.sb.append(':');
		writer.sb.append(this.subsectionSubIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("version");
		writer.sb.append(':');
		writer.sb.append(this.version);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("value");
		writer.sb.append(':');
		writer.sb.append(this.value);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("args");
		writer.sb.append(':');
		writer.sb.append("Array<long>");
		if(this.args!=null)
		{
			long[] argsT=this.args;
			int argsLen=argsT.length;
			writer.sb.append('(');
			writer.sb.append(argsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.append(argsI);
				writer.sb.append(':');
				writer.sb.append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.subsectionIndex=0;
		this.subsectionSubIndex=0;
		this.version=0;
		this.value=0L;
	}
	
	/** 创建实例 */
	public static FuncCommitSubsectionRankValueToCenterServerRequest create(long playerID,int funcID,int subsectionIndex,int subsectionSubIndex,int version,long value,long[] args)
	{
		FuncCommitSubsectionRankValueToCenterServerRequest re=(FuncCommitSubsectionRankValueToCenterServerRequest)BytesControl.createRequest(dataID);
		re.playerID=playerID;
		re.funcID=funcID;
		re.subsectionIndex=subsectionIndex;
		re.subsectionSubIndex=subsectionSubIndex;
		re.version=version;
		re.value=value;
		re.args=args;
		return re;
	}
	
}
