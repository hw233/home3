package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.config.game.CallWayConfig;
import com.home.commonBase.config.game.MailConfig;
import com.home.commonBase.config.game.RewardConfig;
import com.home.commonBase.config.game.enumT.MailTypeConfig;
import com.home.commonBase.constlist.generate.CallWayType;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.data.item.ItemData;
import com.home.commonBase.data.mail.AddMailOWData;
import com.home.commonBase.data.mail.MailData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.global.Global;
import com.home.commonBase.part.player.clientData.MailClientPartData;
import com.home.commonBase.part.player.data.MailPartData;
import com.home.commonGame.control.LogicExecutor;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.request.mail.AddMailRequest;
import com.home.commonGame.net.request.mail.ReGetAllMailRequest;
import com.home.commonGame.net.request.mail.SendDeleteMailRequest;
import com.home.commonGame.net.request.mail.TakeMailSuccessRequest;
import com.home.commonGame.part.gameGlobal.part.GameMailPart;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.SList;
import com.home.shine.utils.ObjectUtils;

/** 邮件(generated by shine) */
public class MailPart extends PlayerBasePart
{
	/** 数据 */
	private MailPartData _d;
	
	/** 邮件自增ID */
	private int _mailInstanceIDMaker=0;
	
	/** 新邮件数目 */
	private int _newNum=0;
	
	/** 是否获取过邮件列表 */
	private boolean _gotMails=false;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(MailPartData)data;
	}
	
	/** 获取数据 */
	public MailPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new MailPartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new MailClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((MailClientPartData)data);
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(MailClientPartData data)
	{
		data.mailNum=_d.mails.size();
		data.newNum=_newNum;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
	
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
	
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		_mailInstanceIDMaker=0;
		_newNum=0;
		_gotMails=false;
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		_mailInstanceIDMaker=0;
		_newNum=0;
		
		MailData[] values=_d.mails.getValues();
		MailData data;
		
		//重新赋值邮件实例ID
		for(int i=0,len=_d.mails.size();i<len;++i)
		{
			data=values[i];
			
			data.instanceID=++_mailInstanceIDMaker;
			
			if(!data.readed)
			{
				_newNum++;
			}
		}
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	@Override
	public void onDaily()
	{
		//有时间限制的
		if(Global.mailSaveMaxTimeT>0)
		{
			long now=me.getTimeMillis();
			
			MailData[] values=_d.mails.getValues();
			MailData v;
			
			for(int i=_d.mails.size()-1;i>=0;--i)
			{
				v=values[i];
				
				//超时
				if(v!=null)
				{
					if((now-v.time)>Global.mailSaveMaxTimeT)
					{
						toDeleteMail(i);
						++i;
					}
				}
			}
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
	
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
	
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
	
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
	
	}
	
	@Override
	public void beforeLoginOnMain()
	{
		GameMailPart mail=GameC.global.mail;
		
		int last=_d.lastGameMailIndex;
		int len;
		
		if(last<(len=mail.getMailIndex()))
		{
			MailData data;
			long playerCreateTime = me.system.getPartData().createDate.getTimeMillis();
			
			for(int i=last+1;i<=len;i++)
			{
				//i-1,邮件不删
				if((data=mail.getPartData().mails.get(i-1))!=null)
				{
					//添加邮件
					//验证时间邮件出生时间早于玩家出生时间才行
					if(data.time>=playerCreateTime)
					{
						addMailFromGameServer(data);
					}
				}
			}
			
			//再赋值一次
			_d.lastGameMailIndex=len;
		}
	}
	
	/** 创建邮件通过类型(只创建邮件) */
	protected MailData createMailByType(int type)
	{
		MailData re;
		
		LogicExecutor executor;
		
		if((executor=me.system.getExecutor())!=null)
		{
			re=executor.createMailData(type);
		}
		else
		{
			re=BaseC.logic.createMailData(type);
		}
		
		return re;
	}
	
	private void releaseMail(MailData data)
	{
		int type=MailConfig.get(data.id).type;
		
		LogicExecutor executor;
		
		if((executor=me.system.getExecutor())!=null)
		{
			executor.releaseMailData(type,data);
		}
	}
	
	/** 删除邮件 */
	private void toDeleteMail(int index)
	{
		MailData data=_d.mails.remove(index);
		
		if(data==null)
			return;
		
		toRemoveRedPoint(data);
		
		if(!data.readed)
		{
			_newNum--;
		}
		
		releaseMail(data);
		
		me.send(SendDeleteMailRequest.create(index));
	}
	
	private void toRemoveRedPoint(MailData data)
	{
		if(data.hasRedPoint)
		{
			data.hasRedPoint=false;
		}
	}
	
	/** 添加邮件 */
	public void addMail(MailData data)
	{
		data.instanceID=++_mailInstanceIDMaker;
		data.time=me.getTimeMillis();
		data.readed=false;//未读
		data.rewarded=false;//未读
		data.hasRedPoint=MailConfig.get(data.id).needRedPoint;
		
		makeReward(data);
		
		//超了
		if(Global.mailSaveMaxNum>0 && _d.mails.size()==Global.mailSaveMaxNum)
		{
			toDeleteMail(0);
		}
		
		_d.mails.add(data);
		_newNum++;
		
		me.send(AddMailRequest.create(data));
	}
	
	protected void makeReward(MailData data)
	{
		//看看rewardID
		MailConfig config=MailConfig.get(data.id);
		if(config.rewardID>0)
		{
			RewardConfig rewardConfig=RewardConfig.get(config.rewardID);
			
			if(rewardConfig!=null)
			{
				if(data.itemList==null)
				{
					data.itemList=new SList<>(ItemData[]::new,rewardConfig.items.length);
				}
				
				for(int i=0;i<rewardConfig.items.length;i++)
				{
					data.itemList.add(me.bag.createItem(rewardConfig.items[i].key,rewardConfig.items[i].value));
				}
			}
		}
	}
	
	/** 添加邮件 */
	public void addMail(int id)
	{
		addMail(id,null);
	}
	
	/** 添加邮件 */
	public void addMail(int id,SList<ItemData> itemDataList)
	{
		MailConfig config=MailConfig.get(id);
		
		if(config==null)
		{
			Ctrl.throwError("未找到邮件ID",id);
			return;
		}
		
		MailData data=createMailByType(config.type);
		data.id=id;
		
		if(itemDataList!=null)
		{
			data.itemList=itemDataList;
		}
		
		addMail(data);
	}
	
	/** 添加物品邮件 */
	public void addMailForItem(ItemData item,int way)
	{
		int mailID;
		
		if((mailID=CallWayConfig.get(way).mailID)<=0)
		{
			Ctrl.throwError("未配置邮件ID",way);
			return;
		}
		
		SList<ItemData> list=new SList<>(ItemData[]::new);
		list.add(item);
		
		toAddMailForItemList(list,mailID);
	}
	
	/** 添加物品邮件 */
	public void addMailForItem(SList<ItemData> list,int way)
	{
		int mailID;
		
		if((mailID=CallWayConfig.get(way).mailID)<=0)
		{
			Ctrl.throwError("未配置邮件ID",way);
			return;
		}
		
		toAddMailForItemList(list.clone(),mailID);
	}
	
	private void toAddMailForItemList(SList<ItemData> list,int mailID)
	{
		MailConfig config=MailConfig.get(mailID);
		
		MailData data=createMailByType(config.type);
		data.id=mailID;
		data.itemList=list;
		
		addMail(data);
	}
	
	/** 添加物品邮件 */
	public void addMailForItem(DIntData[] list,int num,int way)
	{
		SList<ItemData> itemList=new SList<>(ItemData[]::new,list.length);
		
		for(int i=0;i<list.length;++i)
		{
			itemList.add(me.bag.createItem(list[i].key,list[i].value*num));
		}
		
		addMailForItem(itemList,way);
	}
	
	/** 添加服务器邮件(需要自行克隆的) */
	public void addMailFromGameServer(MailData data)
	{
		data=(MailData)data.clone();
		_d.lastGameMailIndex=data.instanceID;
		
		addMail(data);
	}
	
	/** 邮件标记已读 */
	public void mailReaded(int index,int instanceID)
	{
		if(index<0 || index>=_d.mails.length())
		{
			me.warningInfoCode(InfoCodeType.Mail_read_wrongIndex,index,_d.mails.length());
			return;
		}
		
		MailData data=_d.mails.get(index);
		
		if(data==null)
		{
			me.warningInfoCode(InfoCodeType.Mail_markReaded_canNotFindMail);
			return;
		}
		
		if(data.instanceID!=instanceID)
		{
			me.warningInfoCode(InfoCodeType.Mail_markReaded_wrongID);
			return;
		}
		
		if(data.readed)
		{
			me.warningInfoCode(InfoCodeType.Mail_markReaded_alreadyReaded);
			return;
		}
		
		toRemoveRedPoint(data);
		
		data.readed=true;
		_newNum--;
	}
	
	/** 邮件移除小红点 */
	public void mailRemoveRedPoint(int index)
	{
		if(index<0 || index>=_d.mails.length())
		{
			me.warningInfoCode(InfoCodeType.Mail_removeRedPoint_wrongIndex,index,_d.mails.length());
			return;
		}
		
		MailData data=_d.mails.get(index);
		
		if(data==null)
		{
			me.warningInfoCode(InfoCodeType.Mail_removeRedPoint_canNotFindMail);
			return;
		}
		
		if(data.hasRedPoint)
		{
			me.warningInfoCode(InfoCodeType.Mail_removeRedPoint_redPointNotExist);
			return;
		}
		
		data.hasRedPoint=false;
	}
	
	/** 领取邮件内容 */
	public void takeMail(int index,int instanceID)
	{
		if(index<0 || index>=_d.mails.length())
		{
			me.warningInfoCode(InfoCodeType.Mail_take_wrongIndex,index,_d.mails.length());
			return;
		}
		
		MailData data=_d.mails.get(index);
		
		if(data==null)
		{
			me.warningInfoCode(InfoCodeType.Mail_take_canNotFindMail);
			return;
		}
		
		if(data.instanceID!=instanceID)
		{
			me.warningInfoCode(InfoCodeType.Mail_take_wrongID);
			return;
		}
		
		if(data.rewarded)
		{
			me.warningInfoCode(InfoCodeType.Mail_take_alreadyTake);
			return;
		}
		
		if(data.itemList==null || data.itemList.isEmpty())
		{
			me.warningInfoCode(InfoCodeType.Mail_take_itemListEmpty);
			return;
		}
		
		//背包空间不足
		if(!me.bag.addItems(data.itemList,CallWayType.TakeMail))
		{
			me.warningInfoCode(InfoCodeType.Mail_take_bagNotEnough);
			return;
		}
		
		toRemoveRedPoint(data);
		
		if(!data.readed)
		{
			data.readed=true;
			_newNum--;
		}
		
		data.rewarded=true;
		
		me.send(TakeMailSuccessRequest.create(index));
		
		//领取后移除
		if(MailTypeConfig.get(MailConfig.get(data.id).type).isDeleteAfterTake)
		{
			toDeleteMail(index);
		}
	}
	
	/** 删除邮件 */
	public void deleteMail(int index,int instanceID)
	{
		if(index<0 || index>=_d.mails.length())
		{
			me.warningInfoCode(InfoCodeType.Mail_remove_wrongIndex,index,_d.mails.length());
			return;
		}
		
		MailData data=_d.mails.get(index);
		
		if(data==null)
		{
			me.warningInfoCode(InfoCodeType.Mail_remove_canNotFindMail);
			return;
		}
		
		if(data.instanceID!=instanceID)
		{
			me.warningInfoCode(InfoCodeType.Mail_remove_wrongID);
			return;
		}
		
		toDeleteMail(index);
	}
	
	/** 获取全部邮件 */
	public void getAllMail()
	{
		_gotMails=true;
		
		me.send(ReGetAllMailRequest.create(_d.mails));
	}
	
	/** 客户端发送邮件 */
	public void clientSendMail(long playerID,MailData data)
	{
		if(playerID==me.role.playerID)
		{
			me.warningInfoCode(InfoCodeType.Mail_clientSend_canNotSendToSelf);
			return;
		}
		
		AddMailOWData oData=new AddMailOWData();
		oData.data=data;
		me.addPlayerOfflineWork(playerID,oData);
	}
	
	/** 发送邮件(给其他玩家) */
	public void sendMailToPlayer(long playerID,MailData data)
	{
		if(playerID==me.role.playerID)
		{
			me.warnLog("发送邮件时,给自己");
			return;
		}
		
		AddMailOWData oData=new AddMailOWData();
		oData.data=data;
		me.addPlayerOfflineWork(playerID,oData);
	}
	
	/** 输出邮件列表 */
	public void printMails()
	{
		if(_d.mails.isEmpty())
		{
			Ctrl.log("mail is empty");
			return;
		}
		
		ObjectUtils.printDataList(_d.mails);
	}
	
	/** 添加邮件GM指令 */
	public void addMailByGM(int id,String[] strs,int[] ints)
	{
		MailConfig config=MailConfig.get(id);
		
		if(config==null)
		{
			me.warnLog("找不到此邮件id",id);
			return;
		}
		
		MailData data=createMailByType(config.type);
		data.id=id;
		data.args=strs;
		
		if(ints!=null && ints.length>0)
		{
			data.itemList=new SList<>();
			
			for(int i=0;i<ints.length;i+=2)
			{
				data.itemList.add(me.bag.createItem(ints[i],ints[i+1]));
			}
		}
		
		addMail(data);
	}
	
	/** 添加邮件GM指令 */
	public void addMailByGM(int id,SList<ItemData> list,String title,String content)
	{
		MailConfig config=MailConfig.get(id);
		
		if(config==null)
		{
			me.warnLog("找不到此邮件id",id);
			return;
		}
		
		MailData data=createMailByType(config.type);
		data.id=id;
		data.itemList=list;
		
		String[] args=new String[2];
		args[0]=title;
		args[1]=content;
		
		data.args=args;
		data.time=me.getTimeMillis();
		data.rewarded=false;
		addMail(data);
	}
	
}
