package com.home.commonGame.net.request.func.item;
import com.home.commonBase.data.item.ItemData;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.request.func.base.FuncSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 添加物品消息(generated by shine) */
public class FuncAddItemRequest extends FuncSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.FuncAddItem;
	
	/** 途径 */
	public int way;
	
	/** 自动使用物品组 */
	public IntIntMap autoUseItems;
	
	/** 更新组 */
	public IntObjectMap<ItemData> items;
	
	public FuncAddItemRequest()
	{
		_dataID=GameRequestType.FuncAddItem;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		IntIntMap autoUseItemsTemp=autoUseItems;
		if(autoUseItemsTemp!=null)
		{
			this.autoUseItems=new IntIntMap(autoUseItemsTemp.size());
			IntIntMap autoUseItemsT=this.autoUseItems;
			if(!autoUseItemsTemp.isEmpty())
			{
				int autoUseItemsKFreeValue=autoUseItemsTemp.getFreeValue();
				int[] autoUseItemsKTable=autoUseItemsTemp.getTable();
				for(int autoUseItemsKI=autoUseItemsKTable.length-2;autoUseItemsKI>=0;autoUseItemsKI-=2)
				{
					if(autoUseItemsKTable[autoUseItemsKI]!=autoUseItemsKFreeValue)
					{
						int autoUseItemsK=autoUseItemsKTable[autoUseItemsKI];
						int autoUseItemsV=autoUseItemsKTable[autoUseItemsKI+1];
						int autoUseItemsW;
						int autoUseItemsU;
						autoUseItemsW=autoUseItemsK;
						
						autoUseItemsU=autoUseItemsV;
						
						autoUseItemsT.put(autoUseItemsW,autoUseItemsU);
					}
				}
			}
		}
		else
		{
			this.autoUseItems=null;
		}
		
		IntObjectMap<ItemData> itemsTemp=items;
		if(itemsTemp!=null)
		{
			this.items=new IntObjectMap<ItemData>(ItemData[]::new,itemsTemp.size());
			IntObjectMap<ItemData> itemsT=this.items;
			if(!itemsTemp.isEmpty())
			{
				int itemsKFreeValue=itemsTemp.getFreeValue();
				int[] itemsKKeys=itemsTemp.getKeys();
				Object[] itemsVValues=itemsTemp.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						int itemsW;
						ItemData itemsU;
						itemsW=itemsK;
						
						if(itemsV!=null)
						{
							itemsU=(ItemData)itemsV.clone();
						}
						else
						{
							itemsU=null;
						}
						
						itemsT.put(itemsW,itemsU);
					}
				}
			}
		}
		else
		{
			this.items=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncAddItemRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("way");
		writer.sb.append(':');
		writer.sb.append(this.way);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("autoUseItems");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.autoUseItems!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.autoUseItems.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.autoUseItems.isEmpty())
			{
				int autoUseItemsKFreeValue=this.autoUseItems.getFreeValue();
				int[] autoUseItemsKTable=this.autoUseItems.getTable();
				for(int autoUseItemsKI=autoUseItemsKTable.length-2;autoUseItemsKI>=0;autoUseItemsKI-=2)
				{
					if(autoUseItemsKTable[autoUseItemsKI]!=autoUseItemsKFreeValue)
					{
						int autoUseItemsK=autoUseItemsKTable[autoUseItemsKI];
						int autoUseItemsV=autoUseItemsKTable[autoUseItemsKI+1];
						writer.writeTabs();
						writer.sb.append(autoUseItemsK);
						
						writer.sb.append(':');
						writer.sb.append(autoUseItemsV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("items");
		writer.sb.append(':');
		writer.sb.append("Map<int,ItemData>");
		if(this.items!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.items.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						writer.writeTabs();
						writer.sb.append(itemsK);
						
						writer.sb.append(':');
						if(itemsV!=null)
						{
							itemsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ItemData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.way);
		
		if(this.autoUseItems!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.autoUseItems.size());
			if(!this.autoUseItems.isEmpty())
			{
				int autoUseItemsKFreeValue=this.autoUseItems.getFreeValue();
				int[] autoUseItemsKTable=this.autoUseItems.getTable();
				for(int autoUseItemsKI=autoUseItemsKTable.length-2;autoUseItemsKI>=0;autoUseItemsKI-=2)
				{
					if(autoUseItemsKTable[autoUseItemsKI]!=autoUseItemsKFreeValue)
					{
						int autoUseItemsK=autoUseItemsKTable[autoUseItemsKI];
						int autoUseItemsV=autoUseItemsKTable[autoUseItemsKI+1];
						stream.writeInt(autoUseItemsK);
						
						stream.writeInt(autoUseItemsV);
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						stream.writeInt(itemsK);
						
						if(itemsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataFullNotNull(itemsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.way);
		
		if(this.autoUseItems!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.autoUseItems.size());
			if(!this.autoUseItems.isEmpty())
			{
				int autoUseItemsKFreeValue=this.autoUseItems.getFreeValue();
				int[] autoUseItemsKTable=this.autoUseItems.getTable();
				for(int autoUseItemsKI=autoUseItemsKTable.length-2;autoUseItemsKI>=0;autoUseItemsKI-=2)
				{
					if(autoUseItemsKTable[autoUseItemsKI]!=autoUseItemsKFreeValue)
					{
						int autoUseItemsK=autoUseItemsKTable[autoUseItemsKI];
						int autoUseItemsV=autoUseItemsKTable[autoUseItemsKI+1];
						stream.writeInt(autoUseItemsK);
						
						stream.writeInt(autoUseItemsV);
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						stream.writeInt(itemsK);
						
						if(itemsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(itemsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.way=0;
		if(this.autoUseItems!=null)
		{
			this.autoUseItems.clear();
		}
		if(this.items!=null)
		{
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						if(itemsV!=null)
						{
							itemsV.release(pool);
							itemsV=null;
						}
						itemsKKeys[itemsKI]=itemsKFreeValue;
						itemsVValues[itemsKI]=null;
					}
				}
			}
			this.items.justClearSize();
		}
	}
	
	/** 创建实例 */
	public static FuncAddItemRequest create(int funcID,int way,IntIntMap autoUseItems,IntObjectMap<ItemData> items)
	{
		FuncAddItemRequest re=(FuncAddItemRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.way=way;
		re.autoUseItems=autoUseItems;
		re.items=items;
		return re;
	}
	
}
