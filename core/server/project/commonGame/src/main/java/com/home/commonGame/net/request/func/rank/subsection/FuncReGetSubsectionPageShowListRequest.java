package com.home.commonGame.net.request.func.rank.subsection;
import com.home.commonBase.data.system.KeyData;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.request.func.base.FuncSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 推送获取分段翻页显示内容，无缓存方式(generated by shine) */
public class FuncReGetSubsectionPageShowListRequest extends FuncSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.FuncReGetSubsectionPageShowList;
	
	/** 大组index */
	public int subsectionIndex;
	
	/** 小组index */
	public int subsectionSubIndex;
	
	/** 页码 */
	public int page;
	
	/** 参数 */
	public int arg;
	
	/** 数据组 */
	public SList<KeyData> list;
	
	public FuncReGetSubsectionPageShowListRequest()
	{
		_dataID=GameRequestType.FuncReGetSubsectionPageShowList;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SList<KeyData> listTemp=list;
		if(listTemp!=null)
		{
			this.list=new SList<KeyData>(KeyData[]::new,listTemp.size());
			SList<KeyData> listT=this.list;
			if(!listTemp.isEmpty())
			{
				Object[] listVValues=listTemp.getValues();
				for(int listVI=0,listVLen=listTemp.length();listVI<listVLen;++listVI)
				{
					KeyData listV=(KeyData)listVValues[listVI];
					KeyData listU;
					if(listV!=null)
					{
						listU=(KeyData)listV.clone();
					}
					else
					{
						listU=null;
					}
					
					listT.add(listU);
				}
			}
		}
		else
		{
			this.list=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncReGetSubsectionPageShowListRequest";
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeInt(this.page);
		
		stream.writeInt(this.arg);
		
		if(this.list!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.list.size());
			if(!this.list.isEmpty())
			{
				Object[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					KeyData listV=(KeyData)listVValues[listVI];
					if(listV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(listV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeInt(this.page);
		
		stream.writeInt(this.arg);
		
		if(this.list!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.list.size());
			if(!this.list.isEmpty())
			{
				Object[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					KeyData listV=(KeyData)listVValues[listVI];
					if(listV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(listV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("subsectionIndex");
		writer.sb.append(':');
		writer.sb.append(this.subsectionIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("subsectionSubIndex");
		writer.sb.append(':');
		writer.sb.append(this.subsectionSubIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("page");
		writer.sb.append(':');
		writer.sb.append(this.page);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg");
		writer.sb.append(':');
		writer.sb.append(this.arg);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("list");
		writer.sb.append(':');
		writer.sb.append("List<KeyData>");
		if(this.list!=null)
		{
			SList<KeyData> listT=this.list;
			int listLen=listT.size();
			writer.sb.append('(');
			writer.sb.append(listLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int listI=0;listI<listLen;++listI)
			{
				KeyData listV=listT.get(listI);
				writer.writeTabs();
				writer.sb.append(listI);
				writer.sb.append(':');
				if(listV!=null)
				{
					listV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("KeyData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.subsectionIndex=0;
		this.subsectionSubIndex=0;
		this.page=0;
		this.arg=0;
		if(this.list!=null)
		{
			if(!this.list.isEmpty())
			{
				Object[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					KeyData listV=(KeyData)listVValues[listVI];
					if(listV!=null)
					{
						listV.release(pool);
						listV=null;
					}
					listVValues[listVI]=null;
				}
			}
			this.list.justClearSize();
		}
	}
	
	/** 创建实例 */
	public static FuncReGetSubsectionPageShowListRequest create(int funcID,int subsectionIndex,int subsectionSubIndex,int page,int arg,SList<KeyData> list)
	{
		FuncReGetSubsectionPageShowListRequest re=(FuncReGetSubsectionPageShowListRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.subsectionIndex=subsectionIndex;
		re.subsectionSubIndex=subsectionSubIndex;
		re.page=page;
		re.arg=arg;
		re.list=list;
		return re;
	}
	
}
