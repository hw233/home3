package com.home.commonGame.net.response.scene.unit;
import com.home.commonBase.data.scene.base.PosDirData;
import com.home.commonBase.data.scene.fight.SkillTargetData;
import com.home.commonBase.scene.base.Unit;
import com.home.commonGame.constlist.generate.GameResponseType;
import com.home.commonGame.net.response.scene.base.CUnitRResponse;
import com.home.commonGame.net.response.scene.base.SceneRResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 玩家单位使用技能(generated by shine) */
public class CUnitUseSkillResponse extends CUnitRResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.CUnitUseSkill;
	
	/** 技能ID */
	public int skillID;
	
	/** 目标数据 */
	public SkillTargetData targetData;
	
	/** 是否强制当前技能 */
	public boolean isSuspend;
	
	/** 当前单位位置数据 */
	public PosDirData posDir;
	
	public CUnitUseSkillResponse()
	{
		_dataID=GameResponseType.CUnitUseSkill;
	}
	
	/** 执行 */
	protected void execute()
	{
		unit.fight.onClientUseSkill(skillID,targetData,posDir,socket.getPing());
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "CUnitUseSkillResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.skillID=stream.readInt();
		
		BaseData targetDataT=stream.readDataFullNotNull();
		if(targetDataT!=null)
		{
			if(targetDataT instanceof SkillTargetData)
			{
				this.targetData=(SkillTargetData)targetDataT;
			}
			else
			{
				this.targetData=new SkillTargetData();
				if(!(targetDataT.getClass().isAssignableFrom(SkillTargetData.class)))
				{
					stream.throwTypeReadError(SkillTargetData.class,targetDataT.getClass());
				}
				this.targetData.shadowCopy(targetDataT);
			}
		}
		else
		{
			this.targetData=null;
		}
		
		this.posDir=new PosDirData();
		this.posDir.readBytesFull(stream);
		
		this.isSuspend=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.skillID=stream.readInt();
		
		this.targetData=(SkillTargetData)stream.readDataSimpleNotNull();
		
		this.posDir=new PosDirData();
		this.posDir.readBytesSimple(stream);
		
		this.isSuspend=stream.readBoolean();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("skillID");
		writer.sb.append(':');
		writer.sb.append(this.skillID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("targetData");
		writer.sb.append(':');
		if(this.targetData!=null)
		{
			this.targetData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("posDir");
		writer.sb.append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isSuspend");
		writer.sb.append(':');
		writer.sb.append(this.isSuspend);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.skillID=0;
		this.targetData=null;
		this.posDir=null;
		this.isSuspend=false;
	}
	
}
