package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.constlist.generate.AddFriendType;
import com.home.commonBase.constlist.generate.CustomPlayerType;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.constlist.generate.TaskType;
import com.home.commonBase.data.login.PlayerLoginToEachGameData;
import com.home.commonBase.data.role.RoleShowData;
import com.home.commonBase.data.social.ReGetRoleSocialDataWData;
import com.home.commonBase.data.social.RoleSocialData;
import com.home.commonBase.data.social.friend.AddBeFriendOWData;
import com.home.commonBase.data.social.friend.AddFriendFailedForOvonicAWData;
import com.home.commonBase.data.social.friend.AddFriendForOvonicAWData;
import com.home.commonBase.data.social.friend.ApplyAddFriendData;
import com.home.commonBase.data.social.friend.ApplyAddFriendOWData;
import com.home.commonBase.data.social.friend.ContactData;
import com.home.commonBase.data.social.friend.FriendData;
import com.home.commonBase.data.social.friend.RemoveBeFriendOWData;
import com.home.commonBase.data.social.friend.RemoveFriendOWData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.global.Global;
import com.home.commonBase.part.player.clientData.FriendClientPartData;
import com.home.commonBase.part.player.data.FriendPartData;
import com.home.commonBase.utils.BaseGameUtils;
import com.home.commonGame.constlist.social.GetRoleSocialDataType;
import com.home.commonGame.net.request.social.friend.SendAddFriendBlackListRequest;
import com.home.commonGame.net.request.social.friend.SendAddFriendRequest;
import com.home.commonGame.net.request.social.friend.SendApplyAddFriendRequest;
import com.home.commonGame.net.request.social.friend.SendRemoveFriendBlackListRequest;
import com.home.commonGame.net.request.social.friend.SendRemoveFriendRequest;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.shine.data.BaseData;
import com.home.shine.utils.OtherUtils;
import java.util.Comparator;
import java.util.List;

/** 好友(generated by shine) */
public class FriendPart extends PlayerBasePart
{
	/** 数据 */
	private FriendPartData _d;
	
	private Comparator<ApplyAddFriendData> _applyComparator;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(FriendPartData)data;
	}
	
	/** 获取数据 */
	public FriendPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new FriendPartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new FriendClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((FriendClientPartData)data);
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(FriendClientPartData data)
	{
	
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		_applyComparator=this::compareApplyAddFriend;
		
		me.social.registReGetRoleSocialDataFunc(GetRoleSocialDataType.AddFriend,this::onReGetRoleSocialDataForAddFriend);
		me.social.registReGetRoleSocialDataFunc(GetRoleSocialDataType.AddFriendBlackList,this::onReGetRoleSocialDataForAddBlackList);
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		if(!_d.blackList.isEmpty())
		{
			_d.blackList.forEachValue(v->
			{
				//唯一实例
				v.data=me.social.addPlayerRoleSocial(v.playerID,v.data);
			});
		}
		
		if(!_d.friends.isEmpty())
		{
			_d.friends.forEachValue(v->
			{
				//唯一实例
				v.data=me.social.addPlayerRoleSocial(v.playerID,v.data);
			});
		}
		
		
		me.social.addBeContactCountList(_d.beFriends);
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	@Override
	public void onDaily()
	{
		//有时间限制的
		if(Global.friendApplySaveMaxTimeT>0)
		{
			long now=me.getTimeMillis();
			
			_d.applyDic.forEachValueS(v->
			{
				if((now-v.applyTime)>Global.friendApplySaveMaxTimeT)
				{
					_d.applyDic.remove(v.playerID);
				}
			});
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	@Override
	public void makeLoginEachGameData(PlayerLoginToEachGameData data)
	{
		_d.friends.forEach((k,v)->
		{
			data.needRoleSocials.add(k);
		});
		
		_d.blackList.forEach((k,v)->
		{
			data.needRoleSocials.add(k);
		});
	}
	
	@Override
	public void beforeLoginOnMain()
	{
	
	}
	
	/** 好友列表是否已满 */
	public boolean isFriendListFull()
	{
		return Global.friendMaxNum>0 && _d.friends.size()>=Global.friendMaxNum;
	}
	
	/** 黑名单列表是否已满 */
	public boolean isBlackListFull()
	{
		return Global.friendBlackListMaxNum>0 && _d.blackList.size()>=Global.friendBlackListMaxNum;
	}
	
	/** 是否为好友 */
	public boolean isFriend(long playerID)
	{
		return _d.friends.contains(playerID);
	}
	
	/** 获取好友数据 */
	public FriendData getFriend(long playerID)
	{
		return _d.friends.get(playerID);
	}
	
	/** 添加一批好友 */
	public void addAllFriend(List<Long> list,int type)
	{
		for(long playerID:list)
		{
			addFriend(playerID,type);
		}
	}
	
	/** 派发到g层 */
	protected void addFriendForG(long playerID,int type)
	{
	
	}
	
	/** 添加好友 */
	public void addFriend(long playerID,int type)
	{
		if(playerID==me.role.playerID)
		{
			me.warningInfoCode(InfoCodeType.Friend_add_canNotAddSelf);
			return;
		}
		
		//已存在
		if(_d.friends.contains(playerID))
		{
			me.warningInfoCode(InfoCodeType.Friend_add_repeatAdd,playerID);
			return;
		}
		
		if(_d.blackList.contains(playerID))
		{
			me.warningInfoCode(InfoCodeType.Friend_add_inBlack,playerID);
			return;
		}
		
		//好友数目已达到上限
		if(isFriendListFull())
		{
			me.warningInfoCode(InfoCodeType.Friend_add_numFull);
			return;
		}
		
		//无论单向还是双向，都要给对方发申请通知
		
		//离线事务
		ApplyAddFriendOWData wData=new ApplyAddFriendOWData();
		
		ApplyAddFriendData aData=new ApplyAddFriendData();
		aData.playerID=me.role.playerID;
		aData.data=me.social.createRoleSocialData();
		aData.applyTime=me.getTimeMillis();
		aData.type=type;
		
		wData.applyData=aData;
		
		me.addPlayerOfflineWork(playerID,wData);
		
		//单向直接加
		if(!Global.useOvonicFriend)
		{
			me.social.getAbsPlayerRoleSocialData(playerID,GetRoleSocialDataType.AddFriend);
		}
		
		addFriendForG(playerID,type);
	}
	
	/** 添加好友申请 */
	public void onAddApplyFriend(ApplyAddFriendData data)
	{
		//是好友
		if(isFriend(data.playerID))
			return;
		
		//是黑名单
		if(_d.blackList.contains(data.playerID))
			return;
		
		//快捷方式
		OtherUtils.putObjInDicWithMax(data.playerID,data,_d.applyDic,Global.applyAddFriendMaxNum,_applyComparator);
		
		//推送消息
		me.send(SendApplyAddFriendRequest.create(data));
	}
	
	private int compareApplyAddFriend(ApplyAddFriendData arg1,ApplyAddFriendData arg2)
	{
		if(arg1.applyTime<arg2.applyTime)
			return -1;
		
		if(arg1.applyTime==arg2.applyTime)
			return 0;
		
		return 1;
	}
	
	/** 同意添加好友(双向用) */
	public void agreeAddFriend(long playerID)
	{
		if(playerID==me.role.playerID)
		{
			me.warningInfoCode(InfoCodeType.Friend_agree_canNotAddSelf);
			return;
		}
		
		//已存在
		if(_d.friends.contains(playerID))
		{
			me.warningInfoCode(InfoCodeType.Friend_agree_repeatAdd,playerID);
			return;
		}
		
		if(_d.blackList.contains(playerID))
		{
			me.warningInfoCode(InfoCodeType.Friend_agree_inBlack,playerID);
			return;
		}
		
		//好友数目已达到上限
		if(isFriendListFull())
		{
			me.warningInfoCode(InfoCodeType.Friend_agree_numFull);
			return;
		}
		
		//移除邀请组
		ApplyAddFriendData aData=_d.applyDic.get(playerID);
		
		if(aData==null)
		{
			me.warningInfoCode(InfoCodeType.Friend_agree_canNotFindData);
			return;
		}
		
		//直接添加对方
		me.social.getAbsPlayerRoleSocialData(playerID,GetRoleSocialDataType.AddFriend);
		
		//如是双向，也直接让对方添加自己
		if(Global.useOvonicFriend)
		{
			AddFriendForOvonicAWData wData=new AddFriendForOvonicAWData();
			wData.data=me.social.createRoleSocialData();
			wData.type=aData.type;//相同类型
			
			me.addPlayerAbsWork(playerID,wData);
		}
	}
	
	/** 收到获取角色社交数据 */
	private void onReGetRoleSocialDataForAddFriend(ReGetRoleSocialDataWData wData)
	{
		//移除邀请组
		ApplyAddFriendData aData=_d.applyDic.remove(wData.playerID);
		
		int type=AddFriendType.Normal;
		
		if(aData!=null)
		{
			type=aData.type;
		}
		
		//执行添加到好友
		doAddFriend(wData.playerID,wData.data,type);
	}
	
	/** 被添加双向好友 */
	public void addFriendForOvonic(long playerID,RoleSocialData data,int type)
	{
		if(isFriendListFull())
		{
			AddFriendFailedForOvonicAWData wData=new AddFriendFailedForOvonicAWData();
			wData.playerID=me.role.playerID;
			
			me.addPlayerAbsWork(playerID,wData);
		}
		else
		{
			doAddFriend(playerID,data,type);
		}
	}
	
	/** 添加好友失败 */
	public void addFriendFailedForOvnic(long playerID)
	{
		doRemoveFriend(playerID);
		
		//目标好友已满
		me.sendInfoCode(InfoCodeType.Friend_targetFriendListIsFull);
	}
	
	/** 执行添加好友 */
	private void doAddFriend(long playerID,RoleSocialData data,int type)
	{
		if(data==null)
		{
			me.warnLog("执行添加好友时，目标不存在",playerID);
			return;
		}
		
		if(playerID==me.role.playerID)
		{
			me.warnLog("执行添加好友时，不能添加自己");
			return;
		}
		
		if(isFriendListFull())
		{
			me.warnLog("执行添加好友时，列表已满");
			return;
		}
		
		//已存在
		if(_d.friends.contains(playerID))
		{
			me.warnLog("同意添加好友时，重复添加",playerID);
			return;
		}
		
		if(_d.blackList.contains(playerID))
		{
			me.warnLog("同意添加好友时，在黑名单中",playerID);
			return;
		}
		
		//移除邀请组
		_d.applyDic.remove(playerID);
		
		doAddFriendNext(data,type);
	}
	
	/** 执行添加好友下一步 */
	protected void doAddFriendNext(RoleSocialData data,int type)
	{
		boolean isRobot=type==AddFriendType.Robot;
		
		long playerID=data.showData.playerID;
		
		FriendData fData=BaseC.factory.createFriendData();
		fData.playerID=playerID;
		fData.data=me.social.addPlayerRoleSocial(playerID,data);//唯一实例
		fData.addTime=me.getTimeMillis();
		
		fData.isRobot=isRobot;//是否机器人
		
		makeFriendData(fData,type);
		
		_d.friends.put(playerID,fData);
		
		//推送
		me.send(SendAddFriendRequest.create(fData));
		
		if(!isRobot)
		{
			AddBeFriendOWData owData=new AddBeFriendOWData();
			owData.playerID=me.role.playerID;
			
			me.addPlayerOfflineWork(playerID,owData);
		}
		
		me.quest.taskEvent(TaskType.FriendNum,_d.friends.size());
	}
	
	/** 构造好友数据 */
	protected void makeFriendData(FriendData data,int type)
	{
	
	}
	
	/** 添加完好友 */
	public void doAddBeFriend(long playerID)
	{
		if(_d.beFriends.add(playerID))
		{
			me.social.addBeContactCount(playerID);
		}
	}
	
	/** 移除被好友 */
	public void doRemoveBeFriend(long playerID)
	{
		if(_d.beFriends.remove(playerID))
		{
			me.social.minusBeContactCount(playerID);
		}
	}
	
	/** 移除好友 */
	public void removeFriend(long playerID)
	{
		FriendData fData=_d.friends.get(playerID);
		
		if(fData==null)
		{
			me.warningInfoCode(InfoCodeType.Friend_remove_notFriend);
			return;
		}
		
		doRemoveFriend(playerID);
		
		//双向好友
		if(Global.useOvonicFriend)
		{
			RemoveFriendOWData wData=new RemoveFriendOWData();
			wData.playerID=me.role.playerID;
			
			me.addPlayerOfflineWork(playerID,wData);
		}
	}
	
	/** 执行移除好友 */
	public void doRemoveFriend(long playerID)
	{
		if(_d.friends.remove(playerID)!=null)
		{
			
			RemoveBeFriendOWData wData=new RemoveBeFriendOWData();
			wData.playerID=me.role.playerID;
			
			me.addPlayerOfflineWork(playerID,wData);
			
			me.send(SendRemoveFriendRequest.create(playerID));
		}
	}
	
	/** 添加黑名单 */
	public void addBlackList(long playerID)
	{
		if(playerID==me.role.playerID)
		{
			me.warningInfoCode(InfoCodeType.Friend_addBlack_canNotAddSelf);
			return;
		}
		
		//已存在
		if(_d.blackList.contains(playerID))
		{
			me.warningInfoCode(InfoCodeType.Friend_addBlack_repeatAdd,playerID);
			return;
		}
		
		//黑名单数目已达到上限
		if(isBlackListFull())
		{
			me.warningInfoCode(InfoCodeType.Friend_addBlack_numFull);
			return;
		}
		
		//在好友组,就移除
		if(_d.friends.contains(playerID))
		{
			removeFriend(playerID);
		}
		
		me.social.getAbsPlayerRoleSocialData(playerID,GetRoleSocialDataType.AddFriendBlackList);
	}
	
	/** 收到获取角色社交数据 */
	private void onReGetRoleSocialDataForAddBlackList(ReGetRoleSocialDataWData wData)
	{
		//执行添加到好友
		doAddBlackList(wData.playerID,wData.data);
	}
	
	/** 执行添加黑名单 */
	private void doAddBlackList(long playerID,RoleSocialData data)
	{
		if(data==null)
		{
			me.warnLog("执行添加黑名单时，目标不存在",playerID);
			return;
		}
		
		if(playerID==me.role.playerID)
		{
			me.warnLog("执行添加黑名单时，不能添加自己");
			return;
		}
		
		if(isBlackListFull())
		{
			me.warnLog("执行添加黑名单时，列表已满");
			return;
		}
		
		ContactData cData=BaseC.factory.createContactData();
		
		cData.playerID=playerID;
		cData.data=me.social.addPlayerRoleSocial(playerID,data);//唯一实例
		
		_d.blackList.put(playerID,cData);
		
		//推送
		me.send(SendAddFriendBlackListRequest.create(cData));
	}
	
	/** 移除黑名单 */
	public void removeBlackList(long playerID)
	{
		ContactData cData=_d.blackList.get(playerID);
		
		if(cData==null)
		{
			me.warningInfoCode(InfoCodeType.Friend_removeBlack_memberNotExist);
			return;
		}
		
		_d.blackList.remove(playerID);
		me.send(SendRemoveFriendBlackListRequest.create(playerID));
	}
	
	/** 拒绝好友申请 */
	public void refuseApplyAddFriend(long playerID)
	{
		ApplyAddFriendData data=_d.applyDic.get(playerID);
		
		if(data==null)
		{
			me.warningInfoCode(InfoCodeType.Friend_refuse_memberNotExist);
			return;
		}
		
		_d.applyDic.remove(playerID);
	}
	
	/** 创建机器人好友数据(不用处理playerID) */
	public void createRobotFriend(RoleShowData data)
	{
		data.playerID=BaseGameUtils.makeCustomLogicID(CustomPlayerType.Friend,++_d.robotIndex);
		
		RoleSocialData re=BaseC.factory.createRoleSocialData();
		re.isOnline=true;
		re.lastOnlineTime=-1;
		re.showData=data;
		
		doAddFriendNext(re,AddFriendType.Robot);
	}
	
}
