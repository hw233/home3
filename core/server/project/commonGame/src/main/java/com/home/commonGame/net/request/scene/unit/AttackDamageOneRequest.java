package com.home.commonGame.net.request.scene.unit;
import com.home.commonBase.data.scene.fight.DamageOneData;
import com.home.commonBase.data.scene.fight.SkillTargetData;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.request.scene.base.SceneSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 攻击伤害单个数据()(generated by shine) */
public class AttackDamageOneRequest extends SceneSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.AttackDamageOne;
	
	/** 来源单位 */
	public int fromInstanceID;
	
	/** 目标数据 */
	public SkillTargetData target;
	
	/** 攻击ID */
	public int id;
	
	/** 攻击等级 */
	public int level;
	
	/** 伤害数据 */
	public DamageOneData data;
	
	public AttackDamageOneRequest()
	{
		_dataID=GameRequestType.AttackDamageOne;
		setDontCopy();
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SkillTargetData targetTemp=target;
		if(targetTemp!=null)
		{
			this.target=(SkillTargetData)targetTemp.clone();
		}
		else
		{
			this.target=null;
			nullObjError("target");
		}
		
		DamageOneData dataTemp=data;
		if(dataTemp!=null)
		{
			this.data=(DamageOneData)dataTemp.clone();
		}
		else
		{
			this.data=null;
			nullObjError("data");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AttackDamageOneRequest";
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.fromInstanceID);
		
		if(this.target!=null)
		{
			stream.writeDataFullNotNull(this.target);
		}
		else
		{
			nullObjError("target");
		}
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		if(this.data!=null)
		{
			stream.writeDataFullNotNull(this.data);
		}
		else
		{
			nullObjError("data");
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.fromInstanceID);
		
		if(this.target!=null)
		{
			stream.writeDataSimpleNotNull(this.target);
		}
		else
		{
			nullObjError("target");
		}
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		if(this.data!=null)
		{
			stream.writeDataSimpleNotNull(this.data);
		}
		else
		{
			nullObjError("data");
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("fromInstanceID");
		writer.sb.append(':');
		writer.sb.append(this.fromInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("target");
		writer.sb.append(':');
		if(this.target!=null)
		{
			this.target.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("level");
		writer.sb.append(':');
		writer.sb.append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("data");
		writer.sb.append(':');
		if(this.data!=null)
		{
			this.data.writeDataString(writer);
		}
		else
		{
			writer.sb.append("DamageOneData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.fromInstanceID=0;
		this.target=null;
		this.id=0;
		this.level=0;
		this.data=null;
	}
	
	/** 创建实例 */
	public static AttackDamageOneRequest create(int fromInstanceID,SkillTargetData target,int id,int level,DamageOneData data)
	{
		AttackDamageOneRequest re=(AttackDamageOneRequest)BytesControl.createRequest(dataID);
		re.fromInstanceID=fromInstanceID;
		re.target=target;
		re.id=id;
		re.level=level;
		re.data=data;
		return re;
	}
	
}
