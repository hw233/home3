package com.home.commonGame.part.player.part;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.global.Global;
import com.home.commonBase.part.player.clientData.UnionClientPartData;
import com.home.commonBase.part.player.data.UnionPartData;
import com.home.commonGame.global.GameC;
import com.home.commonGame.logic.union.PlayerUnion;
import com.home.commonGame.logic.union.PlayerUnionTool;
import com.home.commonGame.part.player.base.PlayerBasePart;
import com.home.shine.data.BaseData;

/** 工会(generated by shine) */
public class UnionPart extends PlayerBasePart
{
	/** 数据 */
	private UnionPartData _d;
	
	/** 玩家工会工具 */
	private PlayerUnionTool _tool;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(UnionPartData)data;
	}
	
	/** 获取数据 */
	public UnionPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new UnionPartData();
	}
	
	@Override
	protected BaseClientPartData createClientData()
	{
		return new UnionClientPartData();
	}
	
	/** 写客户端数据(copyServer过后的) */
	@Override
	protected void writeClientData(BaseClientPartData data)
	{
		toWriteClientData((UnionClientPartData)data);
	}
	
	/** 写客户端数据具体执行(已执行过copyServer了,就是说CPO中与SPO同名同类型的属性无需再赋值) */
	private void toWriteClientData(UnionClientPartData data)
	{
		
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		if(Global.unionRoleGroupID>0)
		{
			me.func.registFuncTool(_tool=GameC.factory.createPlayerUnionTool());
		}
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	/** 是否有工会 */
	public boolean hasUnion()
	{
		if(_tool==null)
			return false;
		
		return _tool.getOnlyOne()!=null;
	}
	
	/** 获取玩家工会工具 */
	public PlayerUnionTool getPlayerUnionTool()
	{
		return _tool;
	}
	
	/** 获取所在工会 */
	public PlayerUnion getUnion()
	{
		if(_tool==null)
			return null;
		
		return _tool.getOnlyOne();
	}
	
}
