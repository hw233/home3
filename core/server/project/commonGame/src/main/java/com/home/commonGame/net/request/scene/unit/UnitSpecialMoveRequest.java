package com.home.commonGame.net.request.scene.unit;
import com.home.commonBase.data.scene.base.PosData;
import com.home.commonBase.data.scene.base.PosDirData;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.request.scene.base.SceneSRequest;
import com.home.commonGame.net.request.scene.base.UnitSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 单位特殊移动消息(generated by shine) */
public class UnitSpecialMoveRequest extends UnitSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.UnitSpecialMove;
	
	/** 特殊移动ID */
	public int id;
	
	/** 当前位置 */
	public PosDirData posDir;
	
	/** 基元移动点位置 */
	public PosData baseMovePos;
	
	/** 特殊移动剩余时间 */
	public int specialMoveLastTime;
	
	/** 参数组 */
	public int[] args;
	
	public UnitSpecialMoveRequest()
	{
		_dataID=GameRequestType.UnitSpecialMove;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		PosDirData posDirTemp=posDir;
		if(posDirTemp!=null)
		{
			this.posDir=new PosDirData();
			this.posDir.copy(posDirTemp);
		}
		else
		{
			this.posDir=null;
			nullObjError("posDir");
		}
		
		int[] argsTemp=args;
		if(argsTemp!=null)
		{
			int[] argsR=argsTemp;
			int argsLen=argsR.length;
			this.args=new int[argsLen];
			BytesControl.arrayCopy(argsTemp,this.args,argsLen);
		}
		else
		{
			this.args=null;
		}
		
		PosData baseMovePosTemp=baseMovePos;
		if(baseMovePosTemp!=null)
		{
			this.baseMovePos=new PosData();
			this.baseMovePos.copy(baseMovePosTemp);
		}
		else
		{
			this.baseMovePos=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UnitSpecialMoveRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("posDir");
		writer.sb.append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("args");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.args!=null)
		{
			int[] argsT=this.args;
			int argsLen=argsT.length;
			writer.sb.append('(');
			writer.sb.append(argsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.append(argsI);
				writer.sb.append(':');
				writer.sb.append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("specialMoveLastTime");
		writer.sb.append(':');
		writer.sb.append(this.specialMoveLastTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("baseMovePos");
		writer.sb.append(':');
		if(this.baseMovePos!=null)
		{
			this.baseMovePos.writeDataString(writer);
		}
		else
		{
			writer.sb.append("PosData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		if(this.posDir!=null)
		{
			this.posDir.writeBytesFull(stream);
		}
		else
		{
			nullObjError("posDir");
		}
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			int[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				int argsV=argsT[argsVI];
				stream.writeInt(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.specialMoveLastTime);
		
		if(this.baseMovePos!=null)
		{
			stream.writeBoolean(true);
			this.baseMovePos.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.posDir!=null)
		{
			this.posDir.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("posDir");
		}
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			int[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				int argsV=argsT[argsVI];
				stream.writeInt(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.specialMoveLastTime);
		
		if(this.baseMovePos!=null)
		{
			stream.writeBoolean(true);
			this.baseMovePos.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.id=0;
		this.posDir.release(pool);
		this.posDir=null;
		this.specialMoveLastTime=0;
		if(this.baseMovePos!=null)
		{
			this.baseMovePos.release(pool);
			this.baseMovePos=null;
		}
	}
	
	/** 创建实例 */
	public static UnitSpecialMoveRequest create(int instanceID,int id,PosDirData posDir,int[] args,int specialMoveLastTime,PosData baseMovePos)
	{
		UnitSpecialMoveRequest re=(UnitSpecialMoveRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.id=id;
		re.posDir=posDir;
		re.args=args;
		re.specialMoveLastTime=specialMoveLastTime;
		re.baseMovePos=baseMovePos;
		return re;
	}
	
}
