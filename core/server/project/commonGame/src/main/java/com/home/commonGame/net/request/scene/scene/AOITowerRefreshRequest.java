package com.home.commonGame.net.request.scene.scene;
import com.home.commonBase.data.scene.unit.UnitData;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.request.scene.base.SceneSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** AOI灯塔刷新消息(删除一组+添加一组)(generated by shine) */
public class AOITowerRefreshRequest extends SceneSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.AOITowerRefresh;
	
	/** 移除单位组 */
	public IntList removeUnits;
	
	/** 添加单位组 */
	public SList<UnitData> addUnits;
	
	public AOITowerRefreshRequest()
	{
		_dataID=GameRequestType.AOITowerRefresh;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		IntList removeUnitsTemp=removeUnits;
		if(removeUnitsTemp!=null)
		{
			this.removeUnits=new IntList(removeUnitsTemp.size());
			IntList removeUnitsT=this.removeUnits;
			if(!removeUnitsTemp.isEmpty())
			{
				int[] removeUnitsVValues=removeUnitsTemp.getValues();
				for(int removeUnitsVI=0,removeUnitsVLen=removeUnitsTemp.length();removeUnitsVI<removeUnitsVLen;++removeUnitsVI)
				{
					int removeUnitsV=removeUnitsVValues[removeUnitsVI];
					int removeUnitsU;
					removeUnitsU=removeUnitsV;
					
					removeUnitsT.add(removeUnitsU);
				}
			}
		}
		else
		{
			this.removeUnits=null;
			nullObjError("removeUnits");
		}
		
		SList<UnitData> addUnitsTemp=addUnits;
		if(addUnitsTemp!=null)
		{
			this.addUnits=new SList<UnitData>(UnitData[]::new,addUnitsTemp.size());
			SList<UnitData> addUnitsT=this.addUnits;
			if(!addUnitsTemp.isEmpty())
			{
				Object[] addUnitsVValues=addUnitsTemp.getValues();
				for(int addUnitsVI=0,addUnitsVLen=addUnitsTemp.length();addUnitsVI<addUnitsVLen;++addUnitsVI)
				{
					UnitData addUnitsV=(UnitData)addUnitsVValues[addUnitsVI];
					UnitData addUnitsU;
					if(addUnitsV!=null)
					{
						addUnitsU=(UnitData)addUnitsV.clone();
					}
					else
					{
						addUnitsU=null;
						nullObjError("addUnitsU");
					}
					
					addUnitsT.add(addUnitsU);
				}
			}
		}
		else
		{
			this.addUnits=null;
			nullObjError("addUnits");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AOITowerRefreshRequest";
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.removeUnits!=null)
		{
			stream.writeLen(this.removeUnits.size());
			if(!this.removeUnits.isEmpty())
			{
				int[] removeUnitsVValues=this.removeUnits.getValues();
				for(int removeUnitsVI=0,removeUnitsVLen=this.removeUnits.length();removeUnitsVI<removeUnitsVLen;++removeUnitsVI)
				{
					int removeUnitsV=removeUnitsVValues[removeUnitsVI];
					stream.writeInt(removeUnitsV);
					
				}
			}
		}
		else
		{
			nullObjError("removeUnits");
		}
		
		if(this.addUnits!=null)
		{
			stream.writeLen(this.addUnits.size());
			if(!this.addUnits.isEmpty())
			{
				Object[] addUnitsVValues=this.addUnits.getValues();
				for(int addUnitsVI=0,addUnitsVLen=this.addUnits.length();addUnitsVI<addUnitsVLen;++addUnitsVI)
				{
					UnitData addUnitsV=(UnitData)addUnitsVValues[addUnitsVI];
					if(addUnitsV!=null)
					{
						stream.writeDataFullNotNull(addUnitsV);
					}
					else
					{
						nullObjError("addUnitsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("addUnits");
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.removeUnits!=null)
		{
			stream.writeLen(this.removeUnits.size());
			if(!this.removeUnits.isEmpty())
			{
				int[] removeUnitsVValues=this.removeUnits.getValues();
				for(int removeUnitsVI=0,removeUnitsVLen=this.removeUnits.length();removeUnitsVI<removeUnitsVLen;++removeUnitsVI)
				{
					int removeUnitsV=removeUnitsVValues[removeUnitsVI];
					stream.writeInt(removeUnitsV);
					
				}
			}
		}
		else
		{
			nullObjError("removeUnits");
		}
		
		if(this.addUnits!=null)
		{
			stream.writeLen(this.addUnits.size());
			if(!this.addUnits.isEmpty())
			{
				Object[] addUnitsVValues=this.addUnits.getValues();
				for(int addUnitsVI=0,addUnitsVLen=this.addUnits.length();addUnitsVI<addUnitsVLen;++addUnitsVI)
				{
					UnitData addUnitsV=(UnitData)addUnitsVValues[addUnitsVI];
					if(addUnitsV!=null)
					{
						stream.writeDataSimpleNotNull(addUnitsV);
					}
					else
					{
						nullObjError("addUnitsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("addUnits");
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("removeUnits");
		writer.sb.append(':');
		writer.sb.append("List<int>");
		if(this.removeUnits!=null)
		{
			IntList removeUnitsT=this.removeUnits;
			int removeUnitsLen=removeUnitsT.size();
			writer.sb.append('(');
			writer.sb.append(removeUnitsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int removeUnitsI=0;removeUnitsI<removeUnitsLen;++removeUnitsI)
			{
				int removeUnitsV=removeUnitsT.get(removeUnitsI);
				writer.writeTabs();
				writer.sb.append(removeUnitsI);
				writer.sb.append(':');
				writer.sb.append(removeUnitsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("addUnits");
		writer.sb.append(':');
		writer.sb.append("List<UnitData>");
		if(this.addUnits!=null)
		{
			SList<UnitData> addUnitsT=this.addUnits;
			int addUnitsLen=addUnitsT.size();
			writer.sb.append('(');
			writer.sb.append(addUnitsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int addUnitsI=0;addUnitsI<addUnitsLen;++addUnitsI)
			{
				UnitData addUnitsV=addUnitsT.get(addUnitsI);
				writer.writeTabs();
				writer.sb.append(addUnitsI);
				writer.sb.append(':');
				if(addUnitsV!=null)
				{
					addUnitsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("UnitData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.removeUnits!=null)
		{
			this.removeUnits.clear();
		}
		if(this.addUnits!=null)
		{
			if(!this.addUnits.isEmpty())
			{
				Object[] addUnitsVValues=this.addUnits.getValues();
				for(int addUnitsVI=0,addUnitsVLen=this.addUnits.length();addUnitsVI<addUnitsVLen;++addUnitsVI)
				{
					UnitData addUnitsV=(UnitData)addUnitsVValues[addUnitsVI];
					addUnitsV.release(pool);
					addUnitsV=null;
					addUnitsVValues[addUnitsVI]=null;
				}
			}
			this.addUnits.justClearSize();
		}
	}
	
	/** 创建实例 */
	public static AOITowerRefreshRequest create(IntList removeUnits,SList<UnitData> addUnits)
	{
		AOITowerRefreshRequest re=(AOITowerRefreshRequest)BytesControl.createRequest(dataID);
		re.removeUnits=removeUnits;
		re.addUnits=addUnits;
		return re;
	}
	
}
