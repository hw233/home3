package com.home.commonGame.net.serverResponse.manager;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonBase.data.login.ClientVersionData;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.serverResponse.manager.base.ManagerToGameServerResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 游戏服热更消息(generated by shine) */
public class HotfixToGameServerResponse extends ManagerToGameServerResponse
{
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.HotfixToGame;
	
	/** 客户端版本 */
	public IntObjectMap<ClientVersionData> clientVersion;
	
	public HotfixToGameServerResponse()
	{
		_dataID=ServerMessageType.HotfixToGame;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "HotfixToGameServerResponse";
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int clientVersionLen=stream.readLen();
		if(this.clientVersion!=null)
		{
			this.clientVersion.clear();
			this.clientVersion.ensureCapacity(clientVersionLen);
		}
		else
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionLen);
		}
		
		IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
		for(int clientVersionI=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
		{
			ClientVersionData clientVersionV;
			clientVersionV=new ClientVersionData();
			clientVersionV.readBytesSimple(stream);
			
			clientVersionT.put(clientVersionV.type,clientVersionV);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("clientVersion");
		writer.sb.append(':');
		writer.sb.append("Map<int,ClientVersionData>");
		if(this.clientVersion!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.clientVersion.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						writer.writeTabs();
						writer.sb.append(clientVersionK);
						
						writer.sb.append(':');
						if(clientVersionV!=null)
						{
							clientVersionV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ClientVersionData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		GameC.main.setClientVersion(clientVersion);
		
		//广播所有客户端
		GameC.main.radioHotfix();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.clientVersion=null;
	}
	
}
