package com.home.commonGame.part.gameGlobal.part;
import com.home.commonBase.data.login.PlayerLoginToEachGameData;
import com.home.commonBase.data.login.RePlayerLoginFromEachGameData;
import com.home.commonBase.data.role.RoleShowChangeData;
import com.home.commonBase.data.role.RoleShowData;
import com.home.commonBase.data.social.ReGetRoleSocialDataWData;
import com.home.commonBase.data.social.RoleSocialData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.part.gameGlobal.data.GameSocialPartData;
import com.home.commonGame.control.GameMainControl;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.serverRequest.game.social.GetRoleSocialDataToPlayerServerRequest;
import com.home.commonGame.part.gameGlobal.base.GameGlobalBasePart;
import com.home.commonGame.part.player.Player;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.control.ThreadControl;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.dataEx.VInt;
import com.home.shine.global.ShineSetting;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.StringIntMap;
import com.home.shine.support.func.ObjectCall;

/** 社交数据(generated by shine) */
public class GameSocialPart extends GameGlobalBasePart
{
	/** 数据 */
	private GameSocialPartData _d;
	
	/** 角色社交数据字典 */
	private LongObjectMap<RoleSocialData> _roleSocialDataDic;
	
	private LongObjectMap<SList<ObjectCall<RoleSocialData>>> _getRoleSocialFuncList=new LongObjectMap<>(SList[]::new);
	
	/** 其他服社交数据字典 */
	private LongObjectMap<RoleSocialData> _otherRoleSocialDataDic;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(GameSocialPartData)data;
	}
	
	/** 获取数据 */
	public GameSocialPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new GameSocialPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
	
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		_roleSocialDataDic=new LongObjectMap<>(RoleSocialData[]::new);
		_otherRoleSocialDataDic=new LongObjectMap<>(RoleSocialData[]::new);
		
		ThreadControl.getMainTimeDriver().setInterval(this::checkRoleSocialRemove,CommonSetting.playerOfflineCheckDelay);
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
	
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
	
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void onPlayerCreate(Player player)
	{
		addPlayerRoleSocialByCreate(player);
	}
	
	@Override
	public void onPlayerEnter(Player player)
	{
		if(!GameC.main.isCurrentGame(player.role.playerID))
		{
			_otherRoleSocialDataDic.put(player.role.playerID,player.social.createRoleSocialData());
		}
	}
	
	@Override
	public void onPlayerLeave(Player player)
	{
		if(!GameC.main.isCurrentGame(player.role.playerID))
		{
			_otherRoleSocialDataDic.remove(player.role.playerID);
		}
	}
	
	@Override
	public void onPlayerDelete(Player player)
	{
		//移除角色外显数据
		deletePlayerRoleSocial(player.role.playerID);
	}
	
	/** 设置集合 */
	public void setRoleSocialDic(LongObjectMap<RoleSocialData> dic)
	{
		_roleSocialDataDic=dic;
	}
	
	/** 获取某角色的显示数据 */
	public RoleShowData getRoleShowData(long playerID)
	{
		RoleSocialData data=getRoleSocialData(playerID);
		
		if(data==null)
			return null;
		
		return data.showData;
	}
	
	/** 获取某角色的社交数据 */
	public RoleSocialData getRoleSocialData(long playerID)
	{
		RoleSocialData data=_roleSocialDataDic.get(playerID);
		
		if(data==null)
		{
			data=_otherRoleSocialDataDic.get(playerID);
		}
		
		return data;
	}
	
	/** 获取角色社交数据集合 */
	public LongObjectMap<RoleSocialData> getRoleSocialDataDic()
	{
		return _roleSocialDataDic;
	}
	
	/** 添加角色外显数据(本服)(主线程)(创角 走这里) */
	public void addPlayerRoleSocialByCreate(Player player)
	{
		RoleSocialData sData;
		_roleSocialDataDic.put(player.role.playerID,sData=player.social.createRoleSocialData());
		
		GameC.db.addNewRoleSocial(sData);
	}
	
	/** 添加角色外显数据(本服)(主线程)(加载离线数据 走这里) */
	public void addPlayerRoleSocialByPlayer(Player player)
	{
		RoleSocialData sData;
		
		if((sData=_roleSocialDataDic.get(player.role.playerID))!=null)
		{
			player.social.makeRoleSocialData(sData);
			
		}
		else
		{
			_roleSocialDataDic.put(player.role.playerID,sData=player.social.createRoleSocialData());
		}
		
		//常在
		sData.lastKeepTime=-1;
		
		GameC.db.addRoleSocial(sData);
		
		//需要提交
		if(me.func.needCommitToCenter(sData,player))
		{
			player.social.commitRoleSocialForCenter(sData);
		}
		//不需要提交的，先归位
		else
		{
			player.social.onCenterRemoveSocial();
		}
		
		me.func.commitCustomRoleSocial(player);
	}
	
	/** 添加角色外显数据(本服) */
	private void addPlayerRoleSocial(RoleSocialData data)
	{
		long playerID=data.showData.playerID;
		
		if(ShineSetting.openCheck)
		{
			if(!GameC.main.isCurrentGame(playerID))
			{
				Ctrl.throwError("不是本服的角色",playerID);
				return;
			}
		}
		
		RoleSocialData oldData;
		
		if((oldData=_roleSocialDataDic.get(playerID))!=null)
		{
			oldData.copy(data);
		}
		else
		{
			_roleSocialDataDic.put(playerID,data);
		}
	}
	
	/** 移除角色外显数据(本服)(删除角色时) */
	public void deletePlayerRoleSocial(long playerID)
	{
		RoleSocialData data;
		if((data=_roleSocialDataDic.remove(playerID))!=null)
		{
			GameC.db.deleteRoleSocial(playerID);
		}
	}
	
	/** 移除角色外线数据(登出时) */
	public void removePlayerRoleSocial(long playerID)
	{
		RoleSocialData data=_roleSocialDataDic.get(playerID);
		
		if(data!=null)
		{
			data.lastKeepTime=CommonSetting.roleSocialDataKeepTime;
		}
		
		//RoleSocialData data;
		//if((data=_roleSocialDataDic.remove(playerID))!=null)
		//{
		//	GameC.db.removeRoleSocial(playerID);
		//}
	}
	
	public boolean needRoleSocialCenter(long playerID)
	{
		return me.func.needRoleSocialCenter(playerID);
	}
	
	/** 角色改变名字 */
	public void onPlayerChangeName(long playerID,String newName)
	{
		RoleSocialData data;
		
		if((data=_roleSocialDataDic.get(playerID))!=null)
		{
			data.showData.name=newName;
			
			GameC.db.refreshRoleSocial(playerID);
		}
	}
	
	/** 刷新角色外显数据 */
	public void refreshRoleSocialData(long playerID,RoleShowChangeData data)
	{
		RoleSocialData rData=getRoleSocialData(playerID);
		
		if(rData==null)
		{
			Ctrl.warnLog("刷新角色外线数据时，找不到角色数据",playerID);
			return;
		}
		
		//更新数据
		rData.onChange(data);
		
		//不是本服的就停
		if(!GameC.main.isCurrentGame(playerID))
		{
			return;
		}
		
		GameC.db.refreshRoleSocial(playerID);
		
		//功能插件
		GameC.global.func.onRefreshPartRoleSocial(playerID,data);
	}
	
	private void reGetAbsPlayerRoleSocialDataFromPlayer(long fromPlayerID,long playerID,int type,RoleSocialData data)
	{
		ReGetRoleSocialDataWData wData=new ReGetRoleSocialDataWData();
		wData.playerID=playerID;
		wData.type=type;
		
		if(data!=null)
		{
			wData.data=(RoleSocialData)data.clone();//clone一个
		}
		
		//在线事务返回
		GameC.main.addPlayerOnlineWork(fromPlayerID,wData);
	}
	
	/** 执行其他玩家获取RoleSocialData(主线程) */
	public void doGetAbsPlayerRoleSocialDataFromPlayer(long fromPlayerID,long playerID,int type)
	{
		ThreadControl.checkCurrentIsMainThread();
		
		RoleSocialData re;

		if((re=_otherRoleSocialDataDic.get(playerID))!=null)
		{
			reGetAbsPlayerRoleSocialDataFromPlayer(fromPlayerID,playerID,type,re);
			return;
		}
		
		int gameID=GameC.main.getNowGameIDByLogicID(playerID);
		
		//是当前服
		if(gameID==GameC.app.id)
		{
			getRoleSocialAbs(playerID,data->
			{
				reGetAbsPlayerRoleSocialDataFromPlayer(fromPlayerID,playerID,type,data);
			});
		}
		else
		{
			//存在
			if(GameC.server.getGameSocket(gameID)!=null)
			{
				GetRoleSocialDataToPlayerServerRequest.create(playerID,fromPlayerID,type).send(gameID);
			}
			//不存在的返回
			else
			{
				reGetAbsPlayerRoleSocialDataFromPlayer(fromPlayerID,playerID,type,null);
			}
		}
	}
	
	/** 收到获取角色社交数据(来自别的game服) */
	public void onGetAbsPlayerRoleSocialData(long fromPlayerID,long playerID,int type)
	{
		getRoleSocialAbs(playerID,v->
		{
			reGetAbsPlayerRoleSocialDataFromPlayer(fromPlayerID,playerID,type,v);
		});
	}
	
	/** 构造角色登陆逻辑服数据 */
	public void makePlayerLoginEachGame(PlayerLoginToEachGameData data,RePlayerLoginFromEachGameData re,Runnable overFunc)
	{
		if(data.needRoleSocials.isEmpty())
		{
			overFunc.run();
			return;
		}
		
		VInt vInt=new VInt(data.needRoleSocials.length());
		
		data.needRoleSocials.forEachA(k->
		{
			getRoleSocialAbs(k,v->
			{
				if(v==null)
				{
					Ctrl.warnLog("loginEachGame获取socialData时,丢失一个 self:",data.selfData.showData.playerID,"target:",k);
				}
				else
				{
					re.roleSocialDatas.put(k,v);
				}
				
				if((--vInt.value)==0)
				{
					overFunc.run();
				}
			});
		});
	}
	
	/** 直接获取玩家社交数据(如未就绪就从数据库加载出来) */
	public void getRoleSocialAbs(long playerID,ObjectCall<RoleSocialData> func)
	{
		RoleSocialData re;
		
		if((re=_otherRoleSocialDataDic.get(playerID))!=null)
		{
			func.apply(re);
			return;
		}
		
		if((re=_roleSocialDataDic.get(playerID))!=null)
		{
			func.apply(re);
			return;
		}
		
		SList<ObjectCall<RoleSocialData>> list=_getRoleSocialFuncList.get(playerID);
		
		if(list!=null)
		{
			list.add(func);
			return;
		}
		
		_getRoleSocialFuncList.put(playerID,list=new SList<>(ObjectCall[]::new));
		list.add(func);
		
		GameC.db.loadRoleSocialTable(playerID,table ->
		{
			if(table==null)
			{
				reGetRoleSocialAbs(playerID,null);
				return;
			}
			
			//切IO线程反序列化
			//ThreadControl.addIOFunc((int)(table.playerID & ThreadControl.ioThreadNumMark),()->
			//{
				RoleSocialData data;
				
				if(table.data==null || table.data.length==0)
				{
					Ctrl.errorLog("玩家群表数据为空,序列化时出现未write就写入的情况",table.playerID);
					data=null;
				}
				else
				{
					data=BaseC.factory.createRoleSocialData();
					BytesReadStream stream=BytesReadStream.create(table.data);
					data.readBytesFull(stream);
					
					//保留时间
					data.lastKeepTime=CommonSetting.roleSocialDataKeepTime;
					
					addPlayerRoleSocial(data);
				}
				
				//回主线程
				//ThreadControl.addMainFunc(()->
				//{
					reGetRoleSocialAbs(playerID,data);
				//});
			//});
		});
	}
	
	private void reGetRoleSocialAbs(long playerID,RoleSocialData data)
	{
		SList<ObjectCall<RoleSocialData>> list2=_getRoleSocialFuncList.remove(playerID);
		
		if(list2!=null)
		{
			ObjectCall<RoleSocialData>[] values=list2.getValues();
			ObjectCall<RoleSocialData> v;
			
			for(int i=0,len=list2.size();i<len;++i)
			{
				v=values[i];
				v.apply(data);
			}
		}
	}
	
	private void checkRoleSocialRemove(int delay)
	{
		RoleSocialData[] values;
		RoleSocialData v;
		
		long playerID;
		
		for(int i=(values=_roleSocialDataDic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				//不是常在的
				if(v.lastKeepTime>0)
				{
					if((v.lastKeepTime-=CommonSetting.playerOfflineCheckDelay)<=0)
					{
						v.lastKeepTime=0;
						
						_roleSocialDataDic.remove(playerID=v.showData.playerID);
						GameC.db.removeRoleSocial(playerID);
						
						++i;
					}
				}
			}
		}
	}
	
}
