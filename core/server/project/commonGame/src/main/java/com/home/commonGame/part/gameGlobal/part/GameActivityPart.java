package com.home.commonGame.part.gameGlobal.part;
import com.home.commonBase.config.game.ActivityConfig;
import com.home.commonBase.data.activity.ActivityServerData;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.part.gameGlobal.data.GameActivityPartData;
import com.home.commonGame.global.GameC;
import com.home.commonGame.net.request.activity.ActivityResetRequest;
import com.home.commonGame.net.request.activity.ActivitySwitchRequest;
import com.home.commonGame.part.gameGlobal.base.GameGlobalBasePart;
import com.home.shine.data.BaseData;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.utils.OtherUtils;

/** 活动数据(generated by shine) */
public class GameActivityPart extends GameGlobalBasePart
{
	/** 数据 */
	private GameActivityPartData _d;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(GameActivityPartData)data;
	}
	
	/** 获取数据 */
	public GameActivityPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new GameActivityPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void readCenterLoginData(GameLoginData data,boolean isInit)
	{
		data.activities.forEachValue(v->
		{
			ActivityServerData aData=_d.datas.get(v.id);
			
			if(aData==null || aData.nextTurnTime==0)
			{
				_d.datas.put(v.id,aData=v);
			}
			
			aData.isForceClosed=v.isForceClosed;
			
			aData.makeConfig();
		});
		
		//fixed
		OtherUtils.removeNotExistFromDic1WithDic2(_d.datas,ActivityConfig.getDic());
	}
	
	@Override
	public void onStart()
	{
		super.onStart();
		
		//运行开始
		_d.datas.forEachValue(v->
		{
			//还活着
			if(!v.isForceClosed)
			{
				runOnTime(v,false);
			}
		});
	}
	
	@Override
	public void onReloadConfig()
	{
		_d.datas.forEachValue(v->
		{
			v.reloadConfig();
		});
	}
	
	/** 检查单个初始化 */
	private void runOnTime(ActivityServerData data,boolean atTime)
	{
		ActivityConfig config=data.config;
		
		long nextEnd=config.endTimeT.getNextTime(me);
		long nextStart=config.startTimeT.getNextTime(me);
		
		boolean isRunning;
		
		//没有关闭时间
		if(config.endTimeT.isEmpty())
		{
			isRunning=true;
		}
		else
		{
			//已关闭
			if(nextEnd==-1L)
			{
				isRunning=false;
			}
			else
			{
				if(nextStart==-1L)
				{
					isRunning=true;
				}
				else
				{
					//根据两个时间差判定开关
					isRunning=nextStart>nextEnd;
				}
			}
		}
		
		if(data.isRunning!=isRunning || data.nextTurnTime==0)
		{
			if(isRunning)
				doActivityOpen(data,nextEnd,atTime);
			else
				doActivityClose(data,nextStart,atTime);
		}
		else
		{
			long nextTurn=isRunning ? nextEnd : nextStart;
			
			//需要计算
			if(data.nextTurnTime!=nextTurn)
			{
				//配置变更
				if(data.nextTurnTime==-1)
				{
					data.nextTurnTime=nextTurn;
				}
				else
				{
					long now=me.getTimeMillis();
					
					//之前的时间
					if(data.nextTurnTime<now)
					{
						//关开一下
						if(isRunning)
						{
							doActivityClose(data,nextStart,atTime);
							doActivityOpen(data,nextEnd,atTime);
						}
						else
						{
							data.nextTurnTime=nextTurn;
						}
					}
					else
					{
						data.nextTurnTime=nextTurn;
					}
				}
			}
		}
		
		if(data.nextResetTime==0)
		{
			data.nextResetTime=config.resetTimeT.getNextTime(me);
		}
		else
		{
			long nextResetTime=config.resetTimeT.getNextTime(me);
			
			if(nextResetTime!=data.nextResetTime)
			{
				//配置变更
				if(data.nextResetTime==-1)
				{
					data.nextResetTime=nextResetTime;
				}
				else
				{
					long now=me.getTimeMillis();
					
					if(data.nextResetTime<now)
					{
						doActivityReset(data,nextResetTime,atTime);
					}
				}
			}
		}
	}
	
	/** 活动开启 */
	private void doActivityOpenAtTime(ActivityServerData data)
	{
		doActivityOpen(data,data.nextTurnTime,data.config.endTimeT.getNextTime(me),true);
	}
	
	private void doActivityOpen(ActivityServerData data,long nextTurnTime,boolean atTime)
	{
		doActivityOpen(data,data.config.startTimeT.getPrevTime(me),nextTurnTime,atTime);
	}
	
	/** 活动开启 */
	private void doActivityOpen(ActivityServerData data,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		data.isRunning=true;
		data.lastTurnTime=lastTurnTime;
		data.nextTurnTime=nextTurnTime;
		
		//广播客户端
		GameC.main.addAllPlayerFunc(player->player.activity.doActivityOpen(data.id,lastTurnTime,nextTurnTime,atTime));
		
		me.onActivityOpen(data.id,atTime);
	}
	
	/** 活动关闭 */
	private void doActivityCloseAtTime(ActivityServerData data)
	{
		doActivityClose(data,data.nextTurnTime,data.config.startTimeT.getNextTime(me),true);
	}
	
	/** 活动关闭 */
	private void doActivityClose(ActivityServerData data,long nextTurnTime,boolean atTime)
	{
		doActivityClose(data,data.config.endTimeT.getPrevTime(me),nextTurnTime,atTime);
	}
	
	/** 活动关闭 */
	private void doActivityClose(ActivityServerData data,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		
		data.lastTurnTime=lastTurnTime;
		data.nextTurnTime=nextTurnTime;
		
		//初始值不重复关闭
		if(data.isRunning)
		{
			data.isRunning=false;
			//广播客户端
			GameC.main.radioAllPlayer(ActivitySwitchRequest.create(data.id,data.isRunning,lastTurnTime,nextTurnTime,atTime));
			
			GameC.main.addAllPlayerFunc(player->player.activity.doActivityClose(data.id,lastTurnTime,nextTurnTime,atTime));
			
			me.onActivityClose(data.id,atTime);
		}
	}
	
	/** 活动重置 */
	private void doActivityResetAtTime(ActivityServerData data)
	{
		doActivityReset(data,data.config.resetTimeT.getNextTime(me),true);
	}
	
	/** 活动重置 */
	private void doActivityReset(ActivityServerData data,long nextTurnTime,boolean atTime)
	{
		data.nextResetTime=nextTurnTime;
		
		//广播客户端
		GameC.main.radioAllPlayer(ActivityResetRequest.create(data.id,nextTurnTime,atTime));
		
		GameC.main.addAllPlayerFunc(player->player.activity.doActivityReset(data.id,nextTurnTime,atTime));
		
		me.onActivityReset(data.id,atTime);
	}
	
	/** 获取数据字典 */
	public IntObjectMap<ActivityServerData> getActivityDic()
	{
		return _d.datas;
	}
	
	/** 活动是否开启 */
	public boolean isActivityRunning(int id)
	{
		return _d.datas.get(id).isRunning;
	}
	
	public void onActivitySwitchFromCenter(int id,boolean isRunning,long lastTurnTime,long nextTurnTime,boolean atTime)
	{
		ActivityServerData data=_d.datas.get(id);
		
		if(data==null)
			return;
		
		if(isRunning)
			doActivityOpen(data,lastTurnTime,nextTurnTime,atTime);
		else
			doActivityClose(data,lastTurnTime,nextTurnTime,atTime);
	}
	
	public void onActivityResetFromCenter(int id,long nextTurnTime,boolean atTime)
	{
		ActivityServerData data=_d.datas.get(id);
		
		if(data==null)
			return;
		
		doActivityReset(data,nextTurnTime,atTime);
	}
	
	/** 更新强制关闭活动(来自中心服) */
	public void onForceCloseActivityFromCenter(int id,boolean isForceClose)
	{
		ActivityServerData data=_d.datas.get(id);
		
		if(data==null)
			return;
		
		if(data.isForceClosed==isForceClose)
			return;
		
		data.isForceClosed=isForceClose;
	}
	
}
