package com.home.commonGame.net.serverRequest.login.system;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonBase.data.system.AreaServerData;
import com.home.commonGame.net.serverRequest.login.base.GameToLoginServerRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class ReBeLoginToGameServerRequest extends GameToLoginServerRequest
{
	/** 承载区服列表 */
	public IntObjectMap<AreaServerData> areas;
	
	/** 该game服是否已达在线满人 */
	public boolean isGameFull;
	
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.ReBeLoginToGame;
	
	public ReBeLoginToGameServerRequest()
	{
		_dataID=ServerMessageType.ReBeLoginToGame;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		IntObjectMap<AreaServerData> areasTemp=areas;
		if(areasTemp!=null)
		{
			this.areas=new IntObjectMap<AreaServerData>(AreaServerData[]::new,areasTemp.size());
			IntObjectMap<AreaServerData> areasT=this.areas;
			if(!areasTemp.isEmpty())
			{
				Object[] areasVValues=areasTemp.getValues();
				for(int areasVI=areasVValues.length-1;areasVI>=0;--areasVI)
				{
					if(areasVValues[areasVI]!=null)
					{
						AreaServerData areasV=(AreaServerData)areasVValues[areasVI];
						AreaServerData areasU;
						if(areasV!=null)
						{
							areasU=(AreaServerData)areasV.clone();
						}
						else
						{
							areasU=null;
							nullObjError("areasU");
						}
						
						areasT.put(areasU.areaID,areasU);
					}
				}
			}
		}
		else
		{
			this.areas=null;
			nullObjError("areas");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ReBeLoginToGameServerRequest";
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.areas!=null)
		{
			stream.writeLen(this.areas.size());
			if(!this.areas.isEmpty())
			{
				Object[] areasVValues=this.areas.getValues();
				for(int areasVI=areasVValues.length-1;areasVI>=0;--areasVI)
				{
					if(areasVValues[areasVI]!=null)
					{
						AreaServerData areasV=(AreaServerData)areasVValues[areasVI];
						if(areasV!=null)
						{
							stream.writeDataSimpleNotNull(areasV);
						}
						else
						{
							nullObjError("areasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("areas");
		}
		
		stream.writeBoolean(this.isGameFull);
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("areas");
		writer.sb.append(':');
		writer.sb.append("Map<int,AreaServerData>");
		if(this.areas!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.areas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.areas.isEmpty())
			{
				int areasKFreeValue=this.areas.getFreeValue();
				int[] areasKKeys=this.areas.getKeys();
				Object[] areasVValues=this.areas.getValues();
				for(int areasKI=areasKKeys.length-1;areasKI>=0;--areasKI)
				{
					int areasK=areasKKeys[areasKI];
					if(areasK!=areasKFreeValue)
					{
						AreaServerData areasV=(AreaServerData)areasVValues[areasKI];
						writer.writeTabs();
						writer.sb.append(areasK);
						
						writer.sb.append(':');
						if(areasV!=null)
						{
							areasV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("AreaServerData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isGameFull");
		writer.sb.append(':');
		writer.sb.append(this.isGameFull);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.areas!=null)
		{
			if(!this.areas.isEmpty())
			{
				int areasKFreeValue=this.areas.getFreeValue();
				int[] areasKKeys=this.areas.getKeys();
				Object[] areasVValues=this.areas.getValues();
				for(int areasKI=areasKKeys.length-1;areasKI>=0;--areasKI)
				{
					int areasK=areasKKeys[areasKI];
					if(areasK!=areasKFreeValue)
					{
						AreaServerData areasV=(AreaServerData)areasVValues[areasKI];
						areasV.release(pool);
						areasV=null;
						areasKKeys[areasKI]=areasKFreeValue;
						areasVValues[areasKI]=null;
					}
				}
			}
			this.areas.justClearSize();
		}
		this.isGameFull=false;
	}
	
	/** 创建实例 */
	public static ReBeLoginToGameServerRequest create(IntObjectMap<AreaServerData> areas,boolean isGameFull)
	{
		ReBeLoginToGameServerRequest re=(ReBeLoginToGameServerRequest)BytesControl.createRequest(dataID);
		re.areas=areas;
		re.isGameFull=isGameFull;
		return re;
	}
	
}
