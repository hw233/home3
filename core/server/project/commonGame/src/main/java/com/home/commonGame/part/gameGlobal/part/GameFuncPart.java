package com.home.commonGame.part.gameGlobal.part;
import com.home.commonBase.config.game.SubsectionRankConfig;
import com.home.commonBase.constlist.generate.FuncToolType;
import com.home.commonBase.constlist.system.PartCallPhaseType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.item.auction.GameAuctionToolData;
import com.home.commonBase.data.login.GameLoginData;
import com.home.commonBase.data.login.GameLoginToCenterData;
import com.home.commonBase.data.login.GameLoginToGameData;
import com.home.commonBase.data.login.PlayerLoginToEachGameData;
import com.home.commonBase.data.login.RePlayerLoginFromEachGameData;
import com.home.commonBase.data.role.RoleShowChangeData;
import com.home.commonBase.data.social.RoleSocialData;
import com.home.commonBase.data.social.rank.RankToolData;
import com.home.commonBase.data.social.rank.SubsectionRankToolData;
import com.home.commonBase.data.social.roleGroup.PlayerRoleGroupData;
import com.home.commonBase.data.social.roleGroup.PlayerRoleGroupSaveData;
import com.home.commonBase.data.social.roleGroup.RoleGroupChangeData;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.part.gameGlobal.data.GameFuncPartData;
import com.home.commonBase.tool.func.FuncTool;
import com.home.commonBase.tool.func.RankTool;
import com.home.commonBase.utils.BaseGameUtils;
import com.home.commonGame.global.GameC;
import com.home.commonGame.logic.func.RoleGroup;
import com.home.commonGame.net.serverRequest.center.social.CommitCustomRoleSocialToCenterServerRequest;
import com.home.commonGame.part.gameGlobal.base.GameGlobalBasePart;
import com.home.commonGame.part.player.Player;
import com.home.commonGame.tool.func.GameAuctionTool;
import com.home.commonGame.tool.func.GameMatchTool;
import com.home.commonGame.tool.func.GamePageShowTool;
import com.home.commonGame.tool.func.GamePlayerRankTool;
import com.home.commonGame.tool.func.GameRoleGroupRankTool;
import com.home.commonGame.tool.func.GameRoleGroupTool;
import com.home.commonGame.tool.func.GameSubsectionPageShowTool;
import com.home.commonGame.tool.func.GameToCenterAuctionTool;
import com.home.commonGame.tool.func.GameToCenterMatchTool;
import com.home.commonGame.tool.func.GameToCenterPageShowTool;
import com.home.commonGame.tool.func.GameToCenterPlayerRankTool;
import com.home.commonGame.tool.func.GameToCenterPlayerSubsectionRankTool;
import com.home.commonGame.tool.func.GameToCenterRankTool;
import com.home.commonGame.tool.func.GameToCenterRoleGroupRankTool;
import com.home.commonGame.tool.func.GameToCenterRoleSocialPoolTool;
import com.home.commonGame.tool.func.GameToCenterSubsectionRankTool;
import com.home.commonGame.tool.func.IGameAuctionTool;
import com.home.commonGame.tool.func.IGameMatchTool;
import com.home.commonGame.tool.func.IGamePageShowTool;
import com.home.commonGame.tool.func.IGameRankTool;
import com.home.commonGame.tool.func.IGameSubsectionRankTool;
import com.home.shine.control.ThreadControl;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.dataEx.VBoolean;
import com.home.shine.global.ShineSetting;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.LongSet;
import com.home.shine.support.collection.SList;
import com.home.shine.support.func.ObjectCall3;

/** 通用功能数据(generated by shine) */
public class GameFuncPart extends GameGlobalBasePart
{
	/** 数据 */
	private GameFuncPartData _d;
	
	/** 功能插件字典 */
	private IntObjectMap<FuncTool>[] _funcToolDic=new IntObjectMap[FuncToolType.size];
	
	/** 功能插件列表 */
	private SList<FuncTool> _funcToolList=new SList<>(FuncTool[]::new);
	
	private SList<GamePlayerRankTool> _playerRankToolList=new SList<>(GamePlayerRankTool[]::new);
	
	private IntObjectMap<SList<GameRoleGroupRankTool>> _roleGroupRankToolDic=new IntObjectMap<>(SList[]::new);
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(GameFuncPartData)data;
	}
	
	/** 获取数据 */
	public GameFuncPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new GameFuncPartData();
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		SubsectionRankConfig.getDic().forEach(v->{

			FuncTool funcTool;

			if(v.isCenter)
			{
				funcTool= GameC.factory.createGameToCenterPlayerSubsectionRankTool(v.id,v.maxNum,v.minValue);

				registFuncTool(funcTool);

				if (v.needPageTool)
				{
					((GameToCenterPlayerSubsectionRankTool)funcTool).bindPageShowTool(v.showMaxNum,v.eachPageShowNum);
				}
			}
			else
			{
				//TODO
			}
		});
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].init();
		}
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		SList<FuncTool> funcToolList;
		FuncTool[] values=(funcToolList=_funcToolList).getValues();
		
		for(int i=funcToolList.size()-1;i>=0;--i)
		{
			values[i].dispose();
		}
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;

		FuncToolData data;
		FuncToolData data2;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			v=values[i];
			
			IntObjectMap<FuncToolData> dic=_d.funcTools.get(v.getType());

			if(dic!=null)
			{
				v.setData(data=dic.get(v.getFuncID()));
			}
			else
			{
				v.setData(null);
				data=null;
			}

			//之前没有数据,后来有了数据(说明是新增的)
			if(data==null && (data2=v.getData())!=null)
			{
				_d.funcTools.computeIfAbsent(v.getType(),k->new IntObjectMap<>(FuncToolData[]::new)).put(v.getFuncID(),data2);
			}
		}
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].afterReadData();
		}
		
		
	}
	
	@Override
	public void afterReadDataSecond()
	{
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		
		for(int i=list.size()-1;i>=0;--i)
		{
			values[i].afterReadDataSecond();
		}
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		SList<FuncTool> funcToolList;
		
		if(!(funcToolList=_funcToolList).isEmpty())
		{
			FuncTool[] values=funcToolList.getValues();
			
			for(int i=funcToolList.size()-1;i>=0;--i)
			{
				values[i].onSecond(delay);
			}
		}
	}
	
	/** 每分调用 */
	@Override
	public void onMinute()
	{
		SList<FuncTool> funcToolList;
		
		if(!(funcToolList=_funcToolList).isEmpty())
		{
			FuncTool[] values=funcToolList.getValues();
			
			for(int i=funcToolList.size()-1;i>=0;--i)
			{
				values[i].onMinute();
			}
		}
	}
	
	@Override
	public void onDaily()
	{
		SList<FuncTool> funcToolList;
		
		if(!(funcToolList=_funcToolList).isEmpty())
		{
			FuncTool[] values=funcToolList.getValues();
			
			for(int i=funcToolList.size()-1;i>=0;--i)
			{
				values[i].onDaily();
			}
		}
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	@Override
	public void onNewCreate()
	{
		_d.funcTools=new IntObjectMap<>(IntObjectMap[]::new);
		
		SList<FuncTool> list;
		FuncTool[] values=(list=_funcToolList).getValues();
		FuncTool v;
		
		for(int i=list.size()-1;i>=0;--i)
		{
			v=values[i];
			
			FuncToolData toolData=v.getNewCreateData();
			
			if(toolData!=null)
			{
				_d.funcTools.computeIfAbsent(v.getType(),k->new IntObjectMap<>(FuncToolData[]::new)).put(v.getFuncID(),toolData);
			}
		}
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	@Override
	public void onPlayerDelete(Player player)
	{
		for(GamePlayerRankTool v : _playerRankToolList)
		{
			v.removeRankData(player.role.playerID);
		}
	}
	
	@Override
	public void onRoleGroupDelete(RoleGroup roleGroup)
	{
		SList<GameRoleGroupRankTool> list=_roleGroupRankToolDic.get(roleGroup.getFuncID());
		
		if(list!=null)
		{
			SList<GameRoleGroupRankTool> fDic;
			if(!(fDic=list).isEmpty())
			{
				GameRoleGroupRankTool[] values=fDic.getValues();
				GameRoleGroupRankTool v;
				
				for(int i=0,len=fDic.size();i<len;++i)
				{
					v=values[i];
					
					v.removeRankData(roleGroup.groupID);
				}
			}
		}
	}
	
	/** 获取功能插件组(没有就创建) */
	public IntObjectMap<FuncTool> getFuncToolDic(int type)
	{
		IntObjectMap<FuncTool> dic=_funcToolDic[type];
		
		if(dic==null)
		{
			return _funcToolDic[type]=new IntObjectMap<>(FuncTool[]::new);
		}
		else
		{
			return dic;
		}
	}
	
	/** 注册功能插件 */
	public void registFuncTool(FuncTool tool)
	{
		if(me.getPhase()!=PartCallPhaseType.Construct)
		{
			Ctrl.throwError("注册功能插件时,必须在construct阶段");
			return;
		}
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(tool.getType());
		
		int funcID=tool.getFuncID();
		
		if(ShineSetting.openCheck)
		{
			if(dic.contains(funcID))
			{
				Ctrl.throwError("已经存在功能插件:",tool.getType(),funcID);
			}
		}
		
		tool.setEntity(me);
		dic.put(funcID,tool);
		_funcToolList.add(tool);
		tool.construct();
		
		if(tool instanceof GamePlayerRankTool)
		{
			_playerRankToolList.add((GamePlayerRankTool)tool);
		}
		else if(tool instanceof GameRoleGroupRankTool)
		{
			GameRoleGroupRankTool ct=(GameRoleGroupRankTool)tool;
			_roleGroupRankToolDic.computeIfAbsent(ct.getRoleGroupFuncID(),k->new SList<>(GameRoleGroupRankTool[]::new)).add(ct);
		}
	}
	
	/** 获取功能拆件 */
	public FuncTool getFuncTool(int type,int funcID)
	{
		return getFuncToolDic(type).get(funcID);
	}
	
	/** 获取翻页显示插件 */
	public IGamePageShowTool getPageShowToolBase(int funcID)
	{
		return (IGamePageShowTool)getFuncTool(FuncToolType.PageShow,funcID);
	}
	
	/** 获取翻页显示插件 */
	public GamePageShowTool getPageShowTool(int funcID)
	{
		return (GamePageShowTool)getFuncTool(FuncToolType.PageShow,funcID);
	}
	
	/** 获取翻页显示插件中心服接收 */
	public GameToCenterPageShowTool getPageShowToolForCenter(int funcID)
	{
		return (GameToCenterPageShowTool)getFuncTool(FuncToolType.PageShow,funcID);
	}
	
	/** 获取分段翻页显示插件 */
	public GameSubsectionPageShowTool getGameSubsectionPageShowTool(int funcID)
	{
		return (GameSubsectionPageShowTool)getFuncTool(FuncToolType.SubsectionPageShow,funcID);
	}
	
	/** 获取匹配插件接口 */
	public IGameMatchTool getMatchToolBase(int funcID)
	{
		return (IGameMatchTool)getFuncTool(FuncToolType.Match,funcID);
	}
	
	/** 获取匹配插件 */
	public GameMatchTool getMatchTool(int funcID)
	{
		return (GameMatchTool)getFuncTool(FuncToolType.Match,funcID);
	}
	
	/** 获取排行插件 */
	public GameToCenterMatchTool getMatchToolForCenter(int funcID)
	{
		return (GameToCenterMatchTool)getFuncTool(FuncToolType.Match,funcID);
	}
	
	/** 获取排行插件接口 */
	public IGameRankTool getRankToolBase(int funcID)
	{
		return (IGameRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取排行插件 */
	public GamePlayerRankTool getPlayerRankTool(int funcID)
	{
		return (GamePlayerRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取排行插件(GameToCenter) */
	public GameToCenterRankTool getRankToolForCenter(int funcID)
	{
		return (GameToCenterRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取排行插件 */
	public GameToCenterPlayerRankTool getPlayerRankToolForCenter(int funcID)
	{
		return (GameToCenterPlayerRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	/** 获取分段排行插件接口 */
	public IGameSubsectionRankTool getSubsectionRankToolBase(int funcID)
	{
		return (IGameSubsectionRankTool)getFuncTool(FuncToolType.SubsectionRank,funcID);
	}
	
	/** 获取排行插件(GameToCenter) */
	public GameToCenterSubsectionRankTool getSubsectionRankToolForCenter(int funcID)
	{
		return (GameToCenterSubsectionRankTool)getFuncTool(FuncToolType.SubsectionRank,funcID);
	}
	
	/** 获取玩家群插件接口 */
	public GameRoleGroupTool getRoleGroupTool(int funcID)
	{
		return (GameRoleGroupTool)getFuncTool(FuncToolType.RoleGroup,funcID);
	}
	
	/** 获取拍卖行工具基类 */
	public IGameAuctionTool getAuctionToolBase(int funcID)
	{
		return (IGameAuctionTool)getFuncTool(FuncToolType.Auction,funcID);
	}
	
	/** 获取拍卖行工具本服 */
	public GameAuctionTool getAuctionTool(int funcID)
	{
		return (GameAuctionTool)getFuncTool(FuncToolType.Auction,funcID);
	}
	
	/** 获取拍卖行工具来自中心服 */
	public GameToCenterAuctionTool getAuctionToolForCenter(int funcID)
	{
		return (GameToCenterAuctionTool)getFuncTool(FuncToolType.Auction,funcID);
	}
	
	@Override
	public void readCenterLoginData(GameLoginData data,boolean isInit)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		IntObjectMap<FuncToolData> rDic=data.funcTools.get(FuncToolType.Rank);
		
		dic.forEachValue(v->
		{
			if(v instanceof GameToCenterRankTool)
			{
				((GameToCenterRankTool)v).readFromCenter((RankToolData)rDic.get(v.getFuncID()));
			}
		});
		
		dic=getFuncToolDic(FuncToolType.Auction);
		
		IntObjectMap<FuncToolData> rDic2=data.funcTools.get(FuncToolType.Auction);
		
		dic.forEachValue(v->
		{
			if(v instanceof GameToCenterAuctionTool)
			{
				((GameToCenterAuctionTool)v).readFromCenter((GameAuctionToolData)rDic2.get(v.getFuncID()));
			}
		});

		dic=getFuncToolDic(FuncToolType.SubsectionRank);

		IntObjectMap<FuncToolData> rDic3=data.funcTools.get(FuncToolType.SubsectionRank);

		dic.forEachValue(v->
		{
			if(v instanceof GameToCenterSubsectionRankTool)
			{
				((GameToCenterSubsectionRankTool)v).readFromCenter((SubsectionRankToolData) rDic3.get(v.getFuncID()));
			}
		});

	}
	
	@Override
	public void makeLoginCenterData(GameLoginToCenterData data)
	{
	
	}
	
	@Override
	public void makeLoginGameData(GameLoginToGameData data)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.RoleGroup);
		
		if(!dic.isEmpty())
		{
			dic.forEachValue(v->
			{
				GameRoleGroupTool cv=(GameRoleGroupTool)v;
				
				if(cv.getConfig().needSimpleList && !cv.isOnlyLocalGame())
				{
					data.roleGroups.put(cv.getFuncID(),cv.getLocalSimpleDataDic());
				}
			});
		}
	}
	
	@Override
	public void readGameLoginData(int gameID,GameLoginToGameData data)
	{
		data.roleGroups.forEach((k,v)->
		{
			GameRoleGroupTool tool=getRoleGroupTool(k);
			
			tool.addGameSimpleInfo(v,true);
		});
	}
	
	/** 获取一个新群的ID(带了areaID前缀,areaID:原区ID)(如返回-1,则是注册已满)(主线程) */
	public long getNewGroupID(int areaID)
	{
		ThreadControl.checkCurrentIsMainThread();
		
		int index=_d.roleGroupIndexDic.addValue(areaID,1);
		
		if(index>= CommonSetting.areaRegistMax)
		{
			Ctrl.throwError("没有新玩家群ID了");
			
			_d.roleGroupIndexDic.put(areaID,index-1);
			
			return -1L;
		}
		
		return BaseGameUtils.makeLogicID(areaID,index);
	}
	
	/** 更新部分角色显示数据(本服) */
	public void onRefreshPartRoleSocial(long playerID,RoleShowChangeData data)
	{
		for(GamePlayerRankTool v : _playerRankToolList)
		{
			v.onRefreshRoleShow(playerID,data);
		}
	}
	
	/** 查询某角色id是否需要中心服社交数据 */
	public boolean needRoleSocialCenter(long playerID)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values;
			FuncTool v;
			
			for(int i=(values=dic.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//只处理本服榜,中心服的由中心服广播推送
					if(v instanceof GameToCenterPlayerRankTool)
					{
						GameToCenterPlayerRankTool cv=(GameToCenterPlayerRankTool)v;
						
						if(cv.getPlayerRankData(playerID)!=null)
							return true;
					}
				}
			}
		}
		
		return false;
	}
	
	/** 更新部分角色显示数据(来自中心服) */
	public void onRefreshPartRoleSocialFromCenter(long playerID,RoleShowChangeData data)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		if(!dic.isEmpty())
		{
			dic.forEachValue(v->
			{
				//只处理本服榜,中心服的由中心服广播推送
				if(v instanceof GameToCenterPlayerRankTool)
				{
					GameToCenterPlayerRankTool cv=(GameToCenterPlayerRankTool)v;
					
					cv.onRefreshRankRoleSocialDataFromCenter(playerID,data);
				}
			});
		}
		
	}
	
	/** 简版数据变化 */
	public void onRoleGroupSimpleChange(long groupID,RoleGroupChangeData data)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		if(!dic.isEmpty())
		{
			dic.forEachValue(v->
			{
				if(v instanceof GameToCenterRoleGroupRankTool)
				{
					((GameToCenterRoleGroupRankTool)v).onRefreshRoleSimpleDataFromCenter(groupID,data);
				}
				else if(v instanceof GameRoleGroupRankTool)
				{
					((GameRoleGroupRankTool)v).onRefreshPartRoleGroup(groupID,data);
				}
			});
		}
	}
	
	/** 构造角色登陆逻辑服数据 */
	protected void makePlayerLoginEachGameForRoleGroup(PlayerLoginToEachGameData data,RePlayerLoginFromEachGameData re,Runnable overFunc)
	{
		long playerID=data.selfData.showData.playerID;
		
		IntObjectMap<LongSet> tDic=new IntObjectMap<>();
		VBoolean bb=new VBoolean();
		
		data.roleGroups.forEach((k,v1)->
		{
			LongSet tSet=null;
			
			LongObjectMap<PlayerRoleGroupData> dic=new LongObjectMap<>();
			re.roleGroups.put(k,dic);
			
			PlayerRoleGroupSaveData[] values;
			PlayerRoleGroupSaveData v;
			
			for(int i=(values=v1.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					if(tSet==null)
					{
						tDic.put(k,tSet=new LongSet());
					}
					
					tSet.add(v.groupID);
				}
			}
		});
		
		ObjectCall3<Integer,Long,RoleGroup> oneFunc=(funcID,groupID,roleGroup)->
		{
			//还在
			if(roleGroup!=null && roleGroup.hasMember(playerID))
			{
				PlayerRoleGroupSaveData v=data.roleGroups.get(roleGroup.getFuncID()).get(roleGroup.groupID);
				roleGroup.updateRoleSaveData(data.selfData,v);
				
				PlayerRoleGroupData rData=roleGroup.createPlayerRoleGroupData(playerID);
				
				re.roleGroups.get(roleGroup.getFuncID()).put(rData.groupID,rData);
			}
			
			LongSet longSet=tDic.get(funcID);
			
			longSet.remove(groupID);
			
			if(longSet.isEmpty())
			{
				tDic.remove(funcID);
				
				if(tDic.isEmpty())
				{
					if(!bb.value)
					{
						bb.value=true;
						//完了
						overFunc.run();
					}
				}
			}
		};
		
		data.roleGroups.forEach((k,v1)->
		{
			GameRoleGroupTool tool=getRoleGroupTool(k);
			
			v1.forEachValue(v->
			{
				long gid=v.groupID;
				
				tool.getRoleGroupAbs(v.groupID,rg->
				{
					oneFunc.apply(k,gid,rg);
				});
			});
		});
		
		//完了
		if(tDic.isEmpty())
		{
			if(!bb.value)
			{
				bb.value=true;
				//完了
				overFunc.run();
			}
		}
	}
	
	/** 构造角色登陆逻辑服数据 */
	public void makePlayerLoginEachGame(PlayerLoginToEachGameData data,RePlayerLoginFromEachGameData re,Runnable overFunc)
	{
		makePlayerLoginEachGameForRoleGroup(data,re,overFunc);
	}
	
	/** 检查某社交数据是否需要提交到中心服(主线程) */
	public boolean needCommitToCenter(RoleSocialData data,Player player)
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values=dic.getValues();
			FuncTool v;
			GameToCenterPlayerRankTool cv;
			
			for(int i=values.length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//只处理本服榜,中心服的由中心服广播推送
					if(v instanceof GameToCenterPlayerRankTool)
					{
						cv=(GameToCenterPlayerRankTool)v;
						
						//在榜上
						if(cv.getRankData(data.showData.playerID)!=null)
						{
							return true;
						}
					}
				}
			}
		}
		
		dic=getFuncToolDic(FuncToolType.RoleSocialPool);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values;
			GameToCenterRoleSocialPoolTool v;
			
			for(int i=(values=dic.getValues()).length-1;i>=0;--i)
			{
				if((v=(GameToCenterRoleSocialPoolTool)values[i])!=null)
				{
					if(!v.isUseCustom() && v.needCommit(data,player))
					{
						return true;
					}
				}
			}
		}
		
		return false;
	}
	
	/** 提交自定义数据到中心服(主线程) */
	public void commitCustomRoleSocial(Player player)
	{
		IntObjectMap<RoleSocialData> reDic=null;
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.RoleSocialPool);
		
		if(!dic.isEmpty())
		{
			FuncTool[] values;
			GameToCenterRoleSocialPoolTool v;
			
			for(int i=(values=dic.getValues()).length-1;i>=0;--i)
			{
				if((v=(GameToCenterRoleSocialPoolTool)values[i])!=null)
				{
					if(v.isUseCustom() && v.needCommit(null,player))
					{
						if(reDic==null)
						{
							reDic=new IntObjectMap<>(RoleSocialData[]::new);
						}
						
						reDic.put(v.getFuncID(),v.createCustomRoleSocialData(player));
					}
				}
			}
		}
		
		if(reDic!=null)
		{
			CommitCustomRoleSocialToCenterServerRequest.create(player.role.playerID,reDic).send();
		}
	}
	
	/** 重新构造玩家群排行引用 */
	public void remakeRoleGroupRank()
	{
		IntObjectMap<FuncTool> dic=getFuncToolDic(FuncToolType.Rank);
		
		if(!dic.isEmpty())
		{
			dic.forEachValue(v->
			{
				if(v instanceof GameToCenterRoleGroupRankTool)
				{
					((GameToCenterRoleGroupRankTool)v).reMakeData();
				}
			});
		}
	}
	
}
