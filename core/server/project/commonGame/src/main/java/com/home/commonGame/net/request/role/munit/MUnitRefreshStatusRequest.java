package com.home.commonGame.net.request.role.munit;
import com.home.commonGame.constlist.generate.GameRequestType;
import com.home.commonGame.net.base.GameRequest;
import com.home.commonGame.net.request.role.munit.MUnitSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntBooleanMap;
import com.home.shine.support.pool.DataPool;

/** 刷新主角状态(generated by shine) */
public class MUnitRefreshStatusRequest extends MUnitSRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.MUnitRefreshStatus;
	
	/** 改变的状态组 */
	public IntBooleanMap status;
	
	public MUnitRefreshStatusRequest()
	{
		_dataID=GameRequestType.MUnitRefreshStatus;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		IntBooleanMap statusTemp=status;
		if(statusTemp!=null)
		{
			this.status=new IntBooleanMap(statusTemp.size());
			IntBooleanMap statusT=this.status;
			if(!statusTemp.isEmpty())
			{
				int statusKFreeValue=statusTemp.getFreeValue();
				int[] statusKKeys=statusTemp.getKeys();
				boolean[] statusVValues=statusTemp.getValues();
				for(int statusKI=statusKKeys.length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						boolean statusV=statusVValues[statusKI];
						int statusW;
						boolean statusU;
						statusW=statusK;
						
						statusU=statusV;
						
						statusT.put(statusW,statusU);
					}
				}
			}
		}
		else
		{
			this.status=null;
			nullObjError("status");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "MUnitRefreshStatusRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("status");
		writer.sb.append(':');
		writer.sb.append("Map<int,boolean>");
		if(this.status!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.status.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				boolean[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						boolean statusV=statusVValues[statusKI];
						writer.writeTabs();
						writer.sb.append(statusK);
						
						writer.sb.append(':');
						writer.sb.append(statusV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.status!=null)
		{
			stream.writeLen(this.status.size());
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				boolean[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						boolean statusV=statusVValues[statusKI];
						stream.writeInt(statusK);
						
						stream.writeBoolean(statusV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("status");
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.status!=null)
		{
			stream.writeLen(this.status.size());
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				boolean[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						boolean statusV=statusVValues[statusKI];
						stream.writeInt(statusK);
						
						stream.writeBoolean(statusV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("status");
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.status!=null)
		{
			this.status.clear();
		}
	}
	
	/** 创建实例 */
	public static MUnitRefreshStatusRequest create(int mIndex,IntBooleanMap status)
	{
		MUnitRefreshStatusRequest re=(MUnitRefreshStatusRequest)BytesControl.createRequest(dataID);
		re.mIndex=mIndex;
		re.status=status;
		return re;
	}
	
}
