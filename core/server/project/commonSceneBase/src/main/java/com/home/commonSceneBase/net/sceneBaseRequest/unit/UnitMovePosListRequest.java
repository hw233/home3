package com.home.commonSceneBase.net.sceneBaseRequest.unit;
import com.home.commonBase.data.scene.base.PosData;
import com.home.commonSceneBase.constlist.generate.SceneBaseRequestType;
import com.home.commonSceneBase.net.sceneBaseRequest.base.UnitSRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 单位移动点组消息(generated by shine) */
public class UnitMovePosListRequest extends UnitSRequest
{
	/** 数据类型ID */
	public static final int dataID=SceneBaseRequestType.UnitMovePosList;
	
	/** 移动类型 */
	public int type;
	
	/** 服务器首点移动时间(同步用) */
	public int moveTime;
	
	/** 位置组 */
	public SList<PosData> targets;
	
	public UnitMovePosListRequest()
	{
		_dataID=SceneBaseRequestType.UnitMovePosList;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SList<PosData> targetsTemp=targets;
		if(targetsTemp!=null)
		{
			this.targets=new SList<PosData>(PosData[]::new,targetsTemp.size());
			SList<PosData> targetsT=this.targets;
			if(!targetsTemp.isEmpty())
			{
				Object[] targetsVValues=targetsTemp.getValues();
				for(int targetsVI=0,targetsVLen=targetsTemp.length();targetsVI<targetsVLen;++targetsVI)
				{
					PosData targetsV=(PosData)targetsVValues[targetsVI];
					PosData targetsU;
					if(targetsV!=null)
					{
						targetsU=new PosData();
						targetsU.copy(targetsV);
					}
					else
					{
						targetsU=null;
						nullObjError("targetsU");
					}
					
					targetsT.add(targetsU);
				}
			}
		}
		else
		{
			this.targets=null;
			nullObjError("targets");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UnitMovePosListRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("targets");
		writer.sb.append(':');
		writer.sb.append("List<PosData>");
		if(this.targets!=null)
		{
			SList<PosData> targetsT=this.targets;
			int targetsLen=targetsT.size();
			writer.sb.append('(');
			writer.sb.append(targetsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int targetsI=0;targetsI<targetsLen;++targetsI)
			{
				PosData targetsV=targetsT.get(targetsI);
				writer.writeTabs();
				writer.sb.append(targetsI);
				writer.sb.append(':');
				if(targetsV!=null)
				{
					targetsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("PosData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("moveTime");
		writer.sb.append(':');
		writer.sb.append(this.moveTime);
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		if(this.targets!=null)
		{
			stream.writeLen(this.targets.size());
			if(!this.targets.isEmpty())
			{
				Object[] targetsVValues=this.targets.getValues();
				for(int targetsVI=0,targetsVLen=this.targets.length();targetsVI<targetsVLen;++targetsVI)
				{
					PosData targetsV=(PosData)targetsVValues[targetsVI];
					if(targetsV!=null)
					{
						targetsV.writeBytesFull(stream);
					}
					else
					{
						nullObjError("targetsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("targets");
		}
		
		stream.writeInt(this.moveTime);
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.type);
		
		if(this.targets!=null)
		{
			stream.writeLen(this.targets.size());
			if(!this.targets.isEmpty())
			{
				Object[] targetsVValues=this.targets.getValues();
				for(int targetsVI=0,targetsVLen=this.targets.length();targetsVI<targetsVLen;++targetsVI)
				{
					PosData targetsV=(PosData)targetsVValues[targetsVI];
					if(targetsV!=null)
					{
						targetsV.writeBytesSimple(stream);
					}
					else
					{
						nullObjError("targetsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("targets");
		}
		
		stream.writeInt(this.moveTime);
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.type=0;
		if(this.targets!=null)
		{
			if(!this.targets.isEmpty())
			{
				Object[] targetsVValues=this.targets.getValues();
				for(int targetsVI=0,targetsVLen=this.targets.length();targetsVI<targetsVLen;++targetsVI)
				{
					PosData targetsV=(PosData)targetsVValues[targetsVI];
					targetsV.release(pool);
					targetsV=null;
					targetsVValues[targetsVI]=null;
				}
			}
			this.targets.justClearSize();
		}
		this.moveTime=0;
	}
	
	/** 创建实例 */
	public static UnitMovePosListRequest create(int instanceID,int type,SList<PosData> targets,int moveTime)
	{
		UnitMovePosListRequest re=(UnitMovePosListRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.type=type;
		re.targets=targets;
		re.moveTime=moveTime;
		return re;
	}
	
}
