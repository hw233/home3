package com.home.commonLogin.net.serverResponse.game.system;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonBase.data.system.AreaServerData;
import com.home.commonLogin.global.LoginC;
import com.home.commonLogin.net.serverResponse.game.base.GameToLoginServerResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.constlist.SocketType;
import com.home.shine.net.socket.SendSocket;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class ReBeLoginToGameServerResponse extends GameToLoginServerResponse
{
	/** 承载区服列表 */
	public IntObjectMap<AreaServerData> areas;
	
	/** 该game服是否已达在线满人 */
	public boolean isGameFull;
	
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.ReBeLoginToGame;
	
	public ReBeLoginToGameServerResponse()
	{
		_dataID=ServerMessageType.ReBeLoginToGame;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ReBeLoginToGameServerResponse";
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		LoginC.server.reBack(SocketType.Game,((SendSocket)socket).sendID);
		LoginC.main.addAreaServerDic(areas,fromGameID,isGameFull);
		LoginC.server.checkNext();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int areasLen=stream.readLen();
		if(this.areas!=null)
		{
			this.areas.clear();
			this.areas.ensureCapacity(areasLen);
		}
		else
		{
			this.areas=new IntObjectMap<AreaServerData>(AreaServerData[]::new,areasLen);
		}
		
		IntObjectMap<AreaServerData> areasT=this.areas;
		for(int areasI=areasLen-1;areasI>=0;--areasI)
		{
			AreaServerData areasV;
			areasV=(AreaServerData)stream.readDataSimpleNotNull();
			
			areasT.put(areasV.areaID,areasV);
		}
		
		this.isGameFull=stream.readBoolean();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("areas");
		writer.sb.append(':');
		writer.sb.append("Map<int,AreaServerData>");
		if(this.areas!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.areas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.areas.isEmpty())
			{
				int areasKFreeValue=this.areas.getFreeValue();
				int[] areasKKeys=this.areas.getKeys();
				Object[] areasVValues=this.areas.getValues();
				for(int areasKI=areasKKeys.length-1;areasKI>=0;--areasKI)
				{
					int areasK=areasKKeys[areasKI];
					if(areasK!=areasKFreeValue)
					{
						AreaServerData areasV=(AreaServerData)areasVValues[areasKI];
						writer.writeTabs();
						writer.sb.append(areasK);
						
						writer.sb.append(':');
						if(areasV!=null)
						{
							areasV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("AreaServerData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isGameFull");
		writer.sb.append(':');
		writer.sb.append(this.isGameFull);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.areas=null;
		this.isGameFull=false;
	}
	
}
