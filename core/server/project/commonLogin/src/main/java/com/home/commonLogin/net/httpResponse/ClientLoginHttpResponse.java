package com.home.commonLogin.net.httpResponse;
import com.home.commonBase.data.login.ClientLoginData;
import com.home.commonBase.data.login.ClientLoginResultData;
import com.home.commonLogin.constlist.generate.LoginHttpResponseType;
import com.home.commonLogin.global.LoginC;
import com.home.commonLogin.net.base.LoginHttpResponse;
import com.home.commonLogin.net.httpResponseResult.ClientLoginResult;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;

/** 客户端登录(自有登录)(generated by shine) */
public class ClientLoginHttpResponse extends LoginHttpResponse
{
	/** 数据类型ID */
	public static final int dataID=LoginHttpResponseType.ClientLogin;
	
	/** 返回值 */
	protected ClientLoginResult _re=new ClientLoginResult();
	
	/** c层msg版本号 */
	public int cMsgVersion;
	
	/** g层msg版本号 */
	public int gMsgVersion;
	
	/** 登录数据 */
	public ClientLoginData data;
	
	public ClientLoginHttpResponse()
	{
		_dataID=LoginHttpResponseType.ClientLogin;
	}
	
	/** 执行 */
	protected void execute()
	{
		LoginC.main.userLogin(httpInstanceID,cMsgVersion,gMsgVersion,data,_http.remoteIP());
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.cMsgVersion=stream.readInt();
		
		this.gMsgVersion=stream.readInt();
		
		BaseData dataT=stream.readDataFullNotNull();
		if(dataT!=null)
		{
			if(dataT instanceof ClientLoginData)
			{
				this.data=(ClientLoginData)dataT;
			}
			else
			{
				this.data=new ClientLoginData();
				if(!(dataT.getClass().isAssignableFrom(ClientLoginData.class)))
				{
					stream.throwTypeReadError(ClientLoginData.class,dataT.getClass());
				}
				this.data.shadowCopy(dataT);
			}
		}
		else
		{
			this.data=null;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.cMsgVersion=stream.readInt();
		
		this.gMsgVersion=stream.readInt();
		
		this.data=(ClientLoginData)stream.readDataSimpleNotNull();
		
	}
	
	/** 收到返回方法 */
	public void reBack(ClientLoginResultData data)
	{
		_re.data=data;
		resultData(_re);
	}
	
}
