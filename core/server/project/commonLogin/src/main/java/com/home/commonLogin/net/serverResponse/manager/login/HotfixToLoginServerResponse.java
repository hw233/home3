package com.home.commonLogin.net.serverResponse.manager.login;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonBase.data.login.ClientVersionData;
import com.home.commonLogin.global.LoginC;
import com.home.commonLogin.net.serverResponse.manager.base.ManagerToLoginServerResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 登录服热更新消息(generated by shine) */
public class HotfixToLoginServerResponse extends ManagerToLoginServerResponse
{
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.HotfixToLogin;
	
	/** 客户端版本 */
	public IntObjectMap<ClientVersionData> clientVersion;
	
	/** url重定向组 */
	public IntObjectMap<IntObjectMap<String>> redirectURLDic;
	
	public HotfixToLoginServerResponse()
	{
		_dataID=ServerMessageType.HotfixToLogin;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "HotfixToLoginServerResponse";
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int clientVersionLen=stream.readLen();
		if(this.clientVersion!=null)
		{
			this.clientVersion.clear();
			this.clientVersion.ensureCapacity(clientVersionLen);
		}
		else
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionLen);
		}
		
		IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
		for(int clientVersionI=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
		{
			ClientVersionData clientVersionV;
			clientVersionV=new ClientVersionData();
			clientVersionV.readBytesSimple(stream);
			
			clientVersionT.put(clientVersionV.type,clientVersionV);
		}
		
		int redirectURLDicLen=stream.readLen();
		if(this.redirectURLDic!=null)
		{
			this.redirectURLDic.clear();
			this.redirectURLDic.ensureCapacity(redirectURLDicLen);
		}
		else
		{
			this.redirectURLDic=new IntObjectMap<IntObjectMap<String>>(IntObjectMap[]::new,redirectURLDicLen);
		}
		
		IntObjectMap<IntObjectMap<String>> redirectURLDicT=this.redirectURLDic;
		for(int redirectURLDicI=redirectURLDicLen-1;redirectURLDicI>=0;--redirectURLDicI)
		{
			int redirectURLDicK;
			IntObjectMap<String> redirectURLDicV;
			redirectURLDicK=stream.readInt();
			
			int redirectURLDicVLen=stream.readLen();
			redirectURLDicV=new IntObjectMap<String>(String[]::new,redirectURLDicVLen);
			IntObjectMap<String> redirectURLDicVT=redirectURLDicV;
			for(int redirectURLDicVI=redirectURLDicVLen-1;redirectURLDicVI>=0;--redirectURLDicVI)
			{
				int redirectURLDicVK;
				String redirectURLDicVV;
				redirectURLDicVK=stream.readInt();
				
				redirectURLDicVV=stream.readUTF();
				
				redirectURLDicVT.put(redirectURLDicVK,redirectURLDicVV);
			}
			
			redirectURLDicT.put(redirectURLDicK,redirectURLDicV);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("clientVersion");
		writer.sb.append(':');
		writer.sb.append("Map<int,ClientVersionData>");
		if(this.clientVersion!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.clientVersion.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						writer.writeTabs();
						writer.sb.append(clientVersionK);
						
						writer.sb.append(':');
						if(clientVersionV!=null)
						{
							clientVersionV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ClientVersionData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("redirectURLDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,IntObjectMap<String>>");
		if(this.redirectURLDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.redirectURLDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						writer.writeTabs();
						writer.sb.append(redirectURLDicK);
						
						writer.sb.append(':');
						writer.sb.append("Map<int,String>");
						if(redirectURLDicV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(redirectURLDicV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										writer.writeTabs();
										writer.sb.append(redirectURLDicVK);
										
										writer.sb.append(':');
										writer.sb.append(redirectURLDicVV);
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		LoginC.main.setClientInfo(clientVersion,redirectURLDic);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.clientVersion=null;
		this.redirectURLDic=null;
	}
	
}
