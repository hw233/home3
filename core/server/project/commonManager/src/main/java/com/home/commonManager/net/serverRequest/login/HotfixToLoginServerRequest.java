package com.home.commonManager.net.serverRequest.login;
import com.home.commonBase.constlist.generate.ServerMessageType;
import com.home.commonBase.data.login.ClientVersionData;
import com.home.commonManager.net.serverRequest.login.base.ManagerToLoginServerRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 登录服热更新消息(generated by shine) */
public class HotfixToLoginServerRequest extends ManagerToLoginServerRequest
{
	/** 数据类型ID */
	public static final int dataID=ServerMessageType.HotfixToLogin;
	
	/** 客户端版本 */
	public IntObjectMap<ClientVersionData> clientVersion;
	
	/** url重定向组 */
	public IntObjectMap<IntObjectMap<String>> redirectURLDic;
	
	public HotfixToLoginServerRequest()
	{
		_dataID=ServerMessageType.HotfixToLogin;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		IntObjectMap<ClientVersionData> clientVersionTemp=clientVersion;
		if(clientVersionTemp!=null)
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionTemp.size());
			IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
			if(!clientVersionTemp.isEmpty())
			{
				Object[] clientVersionVValues=clientVersionTemp.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						ClientVersionData clientVersionU;
						if(clientVersionV!=null)
						{
							clientVersionU=new ClientVersionData();
							clientVersionU.copy(clientVersionV);
						}
						else
						{
							clientVersionU=null;
							nullObjError("clientVersionU");
						}
						
						clientVersionT.put(clientVersionU.type,clientVersionU);
					}
				}
			}
		}
		else
		{
			this.clientVersion=null;
			nullObjError("clientVersion");
		}
		
		IntObjectMap<IntObjectMap<String>> redirectURLDicTemp=redirectURLDic;
		if(redirectURLDicTemp!=null)
		{
			this.redirectURLDic=new IntObjectMap<IntObjectMap<String>>(IntObjectMap[]::new,redirectURLDicTemp.size());
			IntObjectMap<IntObjectMap<String>> redirectURLDicT=this.redirectURLDic;
			if(!redirectURLDicTemp.isEmpty())
			{
				int redirectURLDicKFreeValue=redirectURLDicTemp.getFreeValue();
				int[] redirectURLDicKKeys=redirectURLDicTemp.getKeys();
				Object[] redirectURLDicVValues=redirectURLDicTemp.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						int redirectURLDicW;
						IntObjectMap<String> redirectURLDicU;
						redirectURLDicW=redirectURLDicK;
						
						if(redirectURLDicV!=null)
						{
							redirectURLDicU=new IntObjectMap<String>(String[]::new,redirectURLDicV.size());
							IntObjectMap<String> redirectURLDicUT=redirectURLDicU;
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicUKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicUKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicUVValues=redirectURLDicV.getValues();
								for(int redirectURLDicUKI=redirectURLDicUKKeys.length-1;redirectURLDicUKI>=0;--redirectURLDicUKI)
								{
									int redirectURLDicUK=redirectURLDicUKKeys[redirectURLDicUKI];
									if(redirectURLDicUK!=redirectURLDicUKFreeValue)
									{
										String redirectURLDicUV=(String)redirectURLDicUVValues[redirectURLDicUKI];
										int redirectURLDicUW;
										String redirectURLDicUU;
										redirectURLDicUW=redirectURLDicUK;
										
										redirectURLDicUU=redirectURLDicUV;
										
										redirectURLDicUT.put(redirectURLDicUW,redirectURLDicUU);
									}
								}
							}
						}
						else
						{
							redirectURLDicU=null;
							nullObjError("redirectURLDicU");
						}
						
						redirectURLDicT.put(redirectURLDicW,redirectURLDicU);
					}
				}
			}
		}
		else
		{
			this.redirectURLDic=null;
			nullObjError("redirectURLDic");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "HotfixToLoginServerRequest";
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.clientVersion!=null)
		{
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						if(clientVersionV!=null)
						{
							clientVersionV.writeBytesSimple(stream);
						}
						else
						{
							nullObjError("clientVersionV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("clientVersion");
		}
		
		if(this.redirectURLDic!=null)
		{
			stream.writeLen(this.redirectURLDic.size());
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						stream.writeInt(redirectURLDicK);
						
						if(redirectURLDicV!=null)
						{
							stream.writeLen(redirectURLDicV.size());
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										stream.writeInt(redirectURLDicVK);
										
										stream.writeUTF(redirectURLDicVV);
										
									}
								}
							}
						}
						else
						{
							nullObjError("redirectURLDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("redirectURLDic");
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("clientVersion");
		writer.sb.append(':');
		writer.sb.append("Map<int,ClientVersionData>");
		if(this.clientVersion!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.clientVersion.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						writer.writeTabs();
						writer.sb.append(clientVersionK);
						
						writer.sb.append(':');
						if(clientVersionV!=null)
						{
							clientVersionV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ClientVersionData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("redirectURLDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,IntObjectMap<String>>");
		if(this.redirectURLDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.redirectURLDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						writer.writeTabs();
						writer.sb.append(redirectURLDicK);
						
						writer.sb.append(':');
						writer.sb.append("Map<int,String>");
						if(redirectURLDicV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(redirectURLDicV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										writer.writeTabs();
										writer.sb.append(redirectURLDicVK);
										
										writer.sb.append(':');
										writer.sb.append(redirectURLDicVV);
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.clientVersion!=null)
		{
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						clientVersionV.release(pool);
						clientVersionV=null;
						clientVersionKKeys[clientVersionKI]=clientVersionKFreeValue;
						clientVersionVValues[clientVersionKI]=null;
					}
				}
			}
			this.clientVersion.justClearSize();
		}
		if(this.redirectURLDic!=null)
		{
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						if(redirectURLDicV!=null)
						{
							redirectURLDicV.clear();
						}
						redirectURLDicKKeys[redirectURLDicKI]=redirectURLDicKFreeValue;
						redirectURLDicVValues[redirectURLDicKI]=null;
					}
				}
			}
			this.redirectURLDic.justClearSize();
		}
	}
	
	/** 创建实例 */
	public static HotfixToLoginServerRequest create(IntObjectMap<ClientVersionData> clientVersion,IntObjectMap<IntObjectMap<String>> redirectURLDic)
	{
		HotfixToLoginServerRequest re=(HotfixToLoginServerRequest)BytesControl.createRequest(dataID);
		re.clientVersion=clientVersion;
		re.redirectURLDic=redirectURLDic;
		return re;
	}
	
}
