package com.home.commonBase.part.player.clientData;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.constlist.generate.PlayerPartClientDataType;
import com.home.commonBase.part.player.data.RolePartData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class RoleClientPartData extends BaseClientPartData
{
	/** 数据类型ID */
	public static final int dataID=PlayerPartClientDataType.Role;
	
	/** 是否成人 */
	public boolean isAdult;
	
	/** 性别 */
	public int sex;
	
	/** 职业 */
	public int vocation;
	
	/** 等级 */
	public int level;
	
	/** 经验 */
	public long exp;
	
	/** 货币组(货币) */
	public long[] currencies;
	
	/** 角色ID */
	public long playerID;
	
	/** 名字 */
	public String name="";
	
	/** 用户ID */
	public long userID;
	
	/** 用户UID */
	public String uid="";
	
	/** 原区ID */
	public int createAreaID;
	
	/** 货币上限组 */
	public long[] currenciesMax;
	
	/** 累计获得货币组(货币),累计消耗通过累计增加减去当前货币 */
	public long[] totalAddCurrencies;
	
	/** 当前战斗力 */
	public long fightForce;
	
	/** 平台 */
	public String platform="";
	
	public RoleClientPartData()
	{
		_dataID=PlayerPartClientDataType.Role;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.playerID=stream.readLong();
		
		this.name=stream.readUTF();
		
		this.userID=stream.readLong();
		
		this.uid=stream.readUTF();
		
		this.createAreaID=stream.readInt();
		
		this.platform=stream.readUTF();
		
		this.isAdult=stream.readBoolean();
		
		this.sex=stream.readInt();
		
		this.vocation=stream.readInt();
		
		this.level=stream.readInt();
		
		this.exp=stream.readLong();
		
		int currenciesLen=stream.readLen();
		if(this.currencies==null || this.currencies.length!=currenciesLen)
		{
			this.currencies=new long[currenciesLen];
		}
		long[] currenciesT=this.currencies;
		for(int currenciesI=0;currenciesI<currenciesLen;++currenciesI)
		{
			long currenciesV;
			currenciesV=stream.readLong();
			
			currenciesT[currenciesI]=currenciesV;
		}
		
		int currenciesMaxLen=stream.readLen();
		if(this.currenciesMax==null || this.currenciesMax.length!=currenciesMaxLen)
		{
			this.currenciesMax=new long[currenciesMaxLen];
		}
		long[] currenciesMaxT=this.currenciesMax;
		for(int currenciesMaxI=0;currenciesMaxI<currenciesMaxLen;++currenciesMaxI)
		{
			long currenciesMaxV;
			currenciesMaxV=stream.readLong();
			
			currenciesMaxT[currenciesMaxI]=currenciesMaxV;
		}
		
		int totalAddCurrenciesLen=stream.readLen();
		if(this.totalAddCurrencies==null || this.totalAddCurrencies.length!=totalAddCurrenciesLen)
		{
			this.totalAddCurrencies=new long[totalAddCurrenciesLen];
		}
		long[] totalAddCurrenciesT=this.totalAddCurrencies;
		for(int totalAddCurrenciesI=0;totalAddCurrenciesI<totalAddCurrenciesLen;++totalAddCurrenciesI)
		{
			long totalAddCurrenciesV;
			totalAddCurrenciesV=stream.readLong();
			
			totalAddCurrenciesT[totalAddCurrenciesI]=totalAddCurrenciesV;
		}
		
		this.fightForce=stream.readLong();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeLong(this.playerID);
		
		stream.writeUTF(this.name);
		
		stream.writeLong(this.userID);
		
		stream.writeUTF(this.uid);
		
		stream.writeInt(this.createAreaID);
		
		stream.writeUTF(this.platform);
		
		stream.writeBoolean(this.isAdult);
		
		stream.writeInt(this.sex);
		
		stream.writeInt(this.vocation);
		
		stream.writeInt(this.level);
		
		stream.writeLong(this.exp);
		
		if(this.currencies!=null)
		{
			long[] currenciesT=this.currencies;
			stream.writeLen(currenciesT.length);
			for(int currenciesVI=0,currenciesVLen=currenciesT.length;currenciesVI<currenciesVLen;++currenciesVI)
			{
				long currenciesV=currenciesT[currenciesVI];
				stream.writeLong(currenciesV);
				
			}
		}
		else
		{
			nullObjError("currencies");
		}
		
		if(this.currenciesMax!=null)
		{
			long[] currenciesMaxT=this.currenciesMax;
			stream.writeLen(currenciesMaxT.length);
			for(int currenciesMaxVI=0,currenciesMaxVLen=currenciesMaxT.length;currenciesMaxVI<currenciesMaxVLen;++currenciesMaxVI)
			{
				long currenciesMaxV=currenciesMaxT[currenciesMaxVI];
				stream.writeLong(currenciesMaxV);
				
			}
		}
		else
		{
			nullObjError("currenciesMax");
		}
		
		if(this.totalAddCurrencies!=null)
		{
			long[] totalAddCurrenciesT=this.totalAddCurrencies;
			stream.writeLen(totalAddCurrenciesT.length);
			for(int totalAddCurrenciesVI=0,totalAddCurrenciesVLen=totalAddCurrenciesT.length;totalAddCurrenciesVI<totalAddCurrenciesVLen;++totalAddCurrenciesVI)
			{
				long totalAddCurrenciesV=totalAddCurrenciesT[totalAddCurrenciesVI];
				stream.writeLong(totalAddCurrenciesV);
				
			}
		}
		else
		{
			nullObjError("totalAddCurrencies");
		}
		
		stream.writeLong(this.fightForce);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof RoleClientPartData))
			return;
		
		RoleClientPartData mData=(RoleClientPartData)data;
		
		this.playerID=mData.playerID;
		this.name=mData.name;
		this.userID=mData.userID;
		this.uid=mData.uid;
		this.createAreaID=mData.createAreaID;
		this.platform=mData.platform;
		this.isAdult=mData.isAdult;
		this.sex=mData.sex;
		this.vocation=mData.vocation;
		this.level=mData.level;
		this.exp=mData.exp;
		this.currencies=mData.currencies;
		this.currenciesMax=mData.currenciesMax;
		this.totalAddCurrencies=mData.totalAddCurrencies;
		this.fightForce=mData.fightForce;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof RoleClientPartData))
			return;
		
		RoleClientPartData mData=(RoleClientPartData)data;
		
		this.playerID=mData.playerID;
		
		this.name=mData.name;
		
		this.userID=mData.userID;
		
		this.uid=mData.uid;
		
		this.createAreaID=mData.createAreaID;
		
		this.platform=mData.platform;
		
		this.isAdult=mData.isAdult;
		
		this.sex=mData.sex;
		
		this.vocation=mData.vocation;
		
		this.level=mData.level;
		
		this.exp=mData.exp;
		
		if(mData.currencies!=null)
		{
			long[] currenciesR=mData.currencies;
			int currenciesLen=currenciesR.length;
			if(this.currencies==null || this.currencies.length!=currenciesLen)
			{
				this.currencies=new long[currenciesLen];
			}
			BytesControl.arrayCopy(mData.currencies,this.currencies,currenciesLen);
		}
		else
		{
			this.currencies=null;
			nullObjError("currencies");
		}
		
		if(mData.currenciesMax!=null)
		{
			long[] currenciesMaxR=mData.currenciesMax;
			int currenciesMaxLen=currenciesMaxR.length;
			if(this.currenciesMax==null || this.currenciesMax.length!=currenciesMaxLen)
			{
				this.currenciesMax=new long[currenciesMaxLen];
			}
			BytesControl.arrayCopy(mData.currenciesMax,this.currenciesMax,currenciesMaxLen);
		}
		else
		{
			this.currenciesMax=null;
			nullObjError("currenciesMax");
		}
		
		if(mData.totalAddCurrencies!=null)
		{
			long[] totalAddCurrenciesR=mData.totalAddCurrencies;
			int totalAddCurrenciesLen=totalAddCurrenciesR.length;
			if(this.totalAddCurrencies==null || this.totalAddCurrencies.length!=totalAddCurrenciesLen)
			{
				this.totalAddCurrencies=new long[totalAddCurrenciesLen];
			}
			BytesControl.arrayCopy(mData.totalAddCurrencies,this.totalAddCurrencies,totalAddCurrenciesLen);
		}
		else
		{
			this.totalAddCurrencies=null;
			nullObjError("totalAddCurrencies");
		}
		
		this.fightForce=mData.fightForce;
		
	}
	
	/** 从服务器数据上复制数据(潜拷,因InitClient会copy) */
	@Override
	protected void toCopyFromServer(BaseData data)
	{
		super.toCopyFromServer(data);
		if(!(data instanceof RolePartData))
			return;
		
		RolePartData mData=(RolePartData)data;
		
		this.isAdult=mData.isAdult;
		
		this.sex=mData.sex;
		
		this.vocation=mData.vocation;
		
		this.level=mData.level;
		
		this.exp=mData.exp;
		
		this.currencies=mData.currencies;
		
		this.totalAddCurrencies=mData.totalAddCurrencies;
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RoleClientPartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.playerID=stream.readLong();
		
		this.name=stream.readUTF();
		
		this.userID=stream.readLong();
		
		this.uid=stream.readUTF();
		
		this.createAreaID=stream.readInt();
		
		this.platform=stream.readUTF();
		
		this.isAdult=stream.readBoolean();
		
		this.sex=stream.readInt();
		
		this.vocation=stream.readInt();
		
		this.level=stream.readInt();
		
		this.exp=stream.readLong();
		
		int currenciesLen=stream.readLen();
		if(this.currencies==null || this.currencies.length!=currenciesLen)
		{
			this.currencies=new long[currenciesLen];
		}
		long[] currenciesT=this.currencies;
		for(int currenciesI=0;currenciesI<currenciesLen;++currenciesI)
		{
			long currenciesV;
			currenciesV=stream.readLong();
			
			currenciesT[currenciesI]=currenciesV;
		}
		
		int currenciesMaxLen=stream.readLen();
		if(this.currenciesMax==null || this.currenciesMax.length!=currenciesMaxLen)
		{
			this.currenciesMax=new long[currenciesMaxLen];
		}
		long[] currenciesMaxT=this.currenciesMax;
		for(int currenciesMaxI=0;currenciesMaxI<currenciesMaxLen;++currenciesMaxI)
		{
			long currenciesMaxV;
			currenciesMaxV=stream.readLong();
			
			currenciesMaxT[currenciesMaxI]=currenciesMaxV;
		}
		
		int totalAddCurrenciesLen=stream.readLen();
		if(this.totalAddCurrencies==null || this.totalAddCurrencies.length!=totalAddCurrenciesLen)
		{
			this.totalAddCurrencies=new long[totalAddCurrenciesLen];
		}
		long[] totalAddCurrenciesT=this.totalAddCurrencies;
		for(int totalAddCurrenciesI=0;totalAddCurrenciesI<totalAddCurrenciesLen;++totalAddCurrenciesI)
		{
			long totalAddCurrenciesV;
			totalAddCurrenciesV=stream.readLong();
			
			totalAddCurrenciesT[totalAddCurrenciesI]=totalAddCurrenciesV;
		}
		
		this.fightForce=stream.readLong();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeLong(this.playerID);
		
		stream.writeUTF(this.name);
		
		stream.writeLong(this.userID);
		
		stream.writeUTF(this.uid);
		
		stream.writeInt(this.createAreaID);
		
		stream.writeUTF(this.platform);
		
		stream.writeBoolean(this.isAdult);
		
		stream.writeInt(this.sex);
		
		stream.writeInt(this.vocation);
		
		stream.writeInt(this.level);
		
		stream.writeLong(this.exp);
		
		if(this.currencies!=null)
		{
			long[] currenciesT=this.currencies;
			stream.writeLen(currenciesT.length);
			for(int currenciesVI=0,currenciesVLen=currenciesT.length;currenciesVI<currenciesVLen;++currenciesVI)
			{
				long currenciesV=currenciesT[currenciesVI];
				stream.writeLong(currenciesV);
				
			}
		}
		else
		{
			nullObjError("currencies");
		}
		
		if(this.currenciesMax!=null)
		{
			long[] currenciesMaxT=this.currenciesMax;
			stream.writeLen(currenciesMaxT.length);
			for(int currenciesMaxVI=0,currenciesMaxVLen=currenciesMaxT.length;currenciesMaxVI<currenciesMaxVLen;++currenciesMaxVI)
			{
				long currenciesMaxV=currenciesMaxT[currenciesMaxVI];
				stream.writeLong(currenciesMaxV);
				
			}
		}
		else
		{
			nullObjError("currenciesMax");
		}
		
		if(this.totalAddCurrencies!=null)
		{
			long[] totalAddCurrenciesT=this.totalAddCurrencies;
			stream.writeLen(totalAddCurrenciesT.length);
			for(int totalAddCurrenciesVI=0,totalAddCurrenciesVLen=totalAddCurrenciesT.length;totalAddCurrenciesVI<totalAddCurrenciesVLen;++totalAddCurrenciesVI)
			{
				long totalAddCurrenciesV=totalAddCurrenciesT[totalAddCurrenciesVI];
				stream.writeLong(totalAddCurrenciesV);
				
			}
		}
		else
		{
			nullObjError("totalAddCurrencies");
		}
		
		stream.writeLong(this.fightForce);
		
		stream.endWriteObj();
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		RoleClientPartData mData=(RoleClientPartData)data;
		if(this.playerID!=mData.playerID)
			return false;
		
		if(!this.name.equals(mData.name))
			return false;
		
		if(this.userID!=mData.userID)
			return false;
		
		if(!this.uid.equals(mData.uid))
			return false;
		
		if(this.createAreaID!=mData.createAreaID)
			return false;
		
		if(!this.platform.equals(mData.platform))
			return false;
		
		if(this.isAdult!=mData.isAdult)
			return false;
		
		if(this.sex!=mData.sex)
			return false;
		
		if(this.vocation!=mData.vocation)
			return false;
		
		if(this.level!=mData.level)
			return false;
		
		if(this.exp!=mData.exp)
			return false;
		
		if(mData.currencies!=null)
		{
			if(this.currencies==null)
				return false;
			if(this.currencies.length!=mData.currencies.length)
				return false;
			long[] currenciesT=this.currencies;
			long[] currenciesR=mData.currencies;
			int currenciesLen=currenciesT.length;
			for(int currenciesI=0;currenciesI<currenciesLen;++currenciesI)
			{
				long currenciesU=currenciesT[currenciesI];
				long currenciesV=currenciesR[currenciesI];
				if(currenciesU!=currenciesV)
					return false;
				
			}
		}
		else
		{
			if(this.currencies!=null)
				return false;
		}
		
		if(mData.currenciesMax!=null)
		{
			if(this.currenciesMax==null)
				return false;
			if(this.currenciesMax.length!=mData.currenciesMax.length)
				return false;
			long[] currenciesMaxT=this.currenciesMax;
			long[] currenciesMaxR=mData.currenciesMax;
			int currenciesMaxLen=currenciesMaxT.length;
			for(int currenciesMaxI=0;currenciesMaxI<currenciesMaxLen;++currenciesMaxI)
			{
				long currenciesMaxU=currenciesMaxT[currenciesMaxI];
				long currenciesMaxV=currenciesMaxR[currenciesMaxI];
				if(currenciesMaxU!=currenciesMaxV)
					return false;
				
			}
		}
		else
		{
			if(this.currenciesMax!=null)
				return false;
		}
		
		if(mData.totalAddCurrencies!=null)
		{
			if(this.totalAddCurrencies==null)
				return false;
			if(this.totalAddCurrencies.length!=mData.totalAddCurrencies.length)
				return false;
			long[] totalAddCurrenciesT=this.totalAddCurrencies;
			long[] totalAddCurrenciesR=mData.totalAddCurrencies;
			int totalAddCurrenciesLen=totalAddCurrenciesT.length;
			for(int totalAddCurrenciesI=0;totalAddCurrenciesI<totalAddCurrenciesLen;++totalAddCurrenciesI)
			{
				long totalAddCurrenciesU=totalAddCurrenciesT[totalAddCurrenciesI];
				long totalAddCurrenciesV=totalAddCurrenciesR[totalAddCurrenciesI];
				if(totalAddCurrenciesU!=totalAddCurrenciesV)
					return false;
				
			}
		}
		else
		{
			if(this.totalAddCurrencies!=null)
				return false;
		}
		
		if(this.fightForce!=mData.fightForce)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("playerID");
		writer.sb.append(':');
		writer.sb.append(this.playerID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("name");
		writer.sb.append(':');
		writer.sb.append(this.name);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("userID");
		writer.sb.append(':');
		writer.sb.append(this.userID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("uid");
		writer.sb.append(':');
		writer.sb.append(this.uid);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("createAreaID");
		writer.sb.append(':');
		writer.sb.append(this.createAreaID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("platform");
		writer.sb.append(':');
		writer.sb.append(this.platform);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isAdult");
		writer.sb.append(':');
		writer.sb.append(this.isAdult);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("sex");
		writer.sb.append(':');
		writer.sb.append(this.sex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("vocation");
		writer.sb.append(':');
		writer.sb.append(this.vocation);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("level");
		writer.sb.append(':');
		writer.sb.append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("exp");
		writer.sb.append(':');
		writer.sb.append(this.exp);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currencies");
		writer.sb.append(':');
		writer.sb.append("Array<long>");
		if(this.currencies!=null)
		{
			long[] currenciesT=this.currencies;
			int currenciesLen=currenciesT.length;
			writer.sb.append('(');
			writer.sb.append(currenciesLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int currenciesI=0;currenciesI<currenciesLen;++currenciesI)
			{
				long currenciesV=currenciesT[currenciesI];
				writer.writeTabs();
				writer.sb.append(currenciesI);
				writer.sb.append(':');
				writer.sb.append(currenciesV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currenciesMax");
		writer.sb.append(':');
		writer.sb.append("Array<long>");
		if(this.currenciesMax!=null)
		{
			long[] currenciesMaxT=this.currenciesMax;
			int currenciesMaxLen=currenciesMaxT.length;
			writer.sb.append('(');
			writer.sb.append(currenciesMaxLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int currenciesMaxI=0;currenciesMaxI<currenciesMaxLen;++currenciesMaxI)
			{
				long currenciesMaxV=currenciesMaxT[currenciesMaxI];
				writer.writeTabs();
				writer.sb.append(currenciesMaxI);
				writer.sb.append(':');
				writer.sb.append(currenciesMaxV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("totalAddCurrencies");
		writer.sb.append(':');
		writer.sb.append("Array<long>");
		if(this.totalAddCurrencies!=null)
		{
			long[] totalAddCurrenciesT=this.totalAddCurrencies;
			int totalAddCurrenciesLen=totalAddCurrenciesT.length;
			writer.sb.append('(');
			writer.sb.append(totalAddCurrenciesLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int totalAddCurrenciesI=0;totalAddCurrenciesI<totalAddCurrenciesLen;++totalAddCurrenciesI)
			{
				long totalAddCurrenciesV=totalAddCurrenciesT[totalAddCurrenciesI];
				writer.writeTabs();
				writer.sb.append(totalAddCurrenciesI);
				writer.sb.append(':');
				writer.sb.append(totalAddCurrenciesV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("fightForce");
		writer.sb.append(':');
		writer.sb.append(this.fightForce);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.currencies=new long[0];
		this.currenciesMax=new long[0];
		this.totalAddCurrencies=new long[0];
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.playerID=0L;
		this.name="";
		this.userID=0L;
		this.uid="";
		this.createAreaID=0;
		this.platform="";
		this.isAdult=false;
		this.sex=0;
		this.vocation=0;
		this.level=0;
		this.exp=0L;
		this.currencies=null;
		this.currenciesMax=null;
		this.totalAddCurrencies=null;
		this.fightForce=0L;
	}
	
}
