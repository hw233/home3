package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 客户端登录数据(可以有继承)(generated by shine) */
public class ClientLoginData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ClientLogin;
	
	/** uid */
	public String uid="";
	
	/** 国家ID */
	public int countryID=-1;
	
	/** 客户端设备平台类型 */
	public int clientPlatformType;
	
	/** 设备唯一标识 */
	public String deviceUniqueIdentifier="";
	
	/** 设备类型 */
	public String deviceType="";
	
	/** 携带的游客uid(用来做登陆时直接绑定游客) */
	public String visitorUID="";
	
	/** 当前资源版本 */
	public int resourceVersion;
	
	/** 当前App版本 */
	public int appVersion;
	
	/** 平台类型 */
	public String platform="";
	
	public ClientLoginData()
	{
		_dataID=BaseDataType.ClientLogin;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ClientLoginData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.uid=stream.readUTF();
		
		this.platform=stream.readUTF();
		
		this.countryID=stream.readInt();
		
		this.clientPlatformType=stream.readInt();
		
		this.deviceType=stream.readUTF();
		
		this.deviceUniqueIdentifier=stream.readUTF();
		
		this.visitorUID=stream.readUTF();
		
		this.appVersion=stream.readInt();
		
		this.resourceVersion=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeUTF(this.uid);
		
		stream.writeUTF(this.platform);
		
		stream.writeInt(this.countryID);
		
		stream.writeInt(this.clientPlatformType);
		
		stream.writeUTF(this.deviceType);
		
		stream.writeUTF(this.deviceUniqueIdentifier);
		
		stream.writeUTF(this.visitorUID);
		
		stream.writeInt(this.appVersion);
		
		stream.writeInt(this.resourceVersion);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.uid=stream.readUTF();
		
		this.platform=stream.readUTF();
		
		this.countryID=stream.readInt();
		
		this.clientPlatformType=stream.readInt();
		
		this.deviceType=stream.readUTF();
		
		this.deviceUniqueIdentifier=stream.readUTF();
		
		this.visitorUID=stream.readUTF();
		
		this.appVersion=stream.readInt();
		
		this.resourceVersion=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeUTF(this.uid);
		
		stream.writeUTF(this.platform);
		
		stream.writeInt(this.countryID);
		
		stream.writeInt(this.clientPlatformType);
		
		stream.writeUTF(this.deviceType);
		
		stream.writeUTF(this.deviceUniqueIdentifier);
		
		stream.writeUTF(this.visitorUID);
		
		stream.writeInt(this.appVersion);
		
		stream.writeInt(this.resourceVersion);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ClientLoginData))
			return;
		
		ClientLoginData mData=(ClientLoginData)data;
		
		this.uid=mData.uid;
		this.platform=mData.platform;
		this.countryID=mData.countryID;
		this.clientPlatformType=mData.clientPlatformType;
		this.deviceType=mData.deviceType;
		this.deviceUniqueIdentifier=mData.deviceUniqueIdentifier;
		this.visitorUID=mData.visitorUID;
		this.appVersion=mData.appVersion;
		this.resourceVersion=mData.resourceVersion;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ClientLoginData))
			return;
		
		ClientLoginData mData=(ClientLoginData)data;
		
		this.uid=mData.uid;
		
		this.platform=mData.platform;
		
		this.countryID=mData.countryID;
		
		this.clientPlatformType=mData.clientPlatformType;
		
		this.deviceType=mData.deviceType;
		
		this.deviceUniqueIdentifier=mData.deviceUniqueIdentifier;
		
		this.visitorUID=mData.visitorUID;
		
		this.appVersion=mData.appVersion;
		
		this.resourceVersion=mData.resourceVersion;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ClientLoginData mData=(ClientLoginData)data;
		if(!this.uid.equals(mData.uid))
			return false;
		
		if(!this.platform.equals(mData.platform))
			return false;
		
		if(this.countryID!=mData.countryID)
			return false;
		
		if(this.clientPlatformType!=mData.clientPlatformType)
			return false;
		
		if(!this.deviceType.equals(mData.deviceType))
			return false;
		
		if(!this.deviceUniqueIdentifier.equals(mData.deviceUniqueIdentifier))
			return false;
		
		if(!this.visitorUID.equals(mData.visitorUID))
			return false;
		
		if(this.appVersion!=mData.appVersion)
			return false;
		
		if(this.resourceVersion!=mData.resourceVersion)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("uid");
		writer.sb.append(':');
		writer.sb.append(this.uid);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("platform");
		writer.sb.append(':');
		writer.sb.append(this.platform);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("countryID");
		writer.sb.append(':');
		writer.sb.append(this.countryID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientPlatformType");
		writer.sb.append(':');
		writer.sb.append(this.clientPlatformType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("deviceType");
		writer.sb.append(':');
		writer.sb.append(this.deviceType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("deviceUniqueIdentifier");
		writer.sb.append(':');
		writer.sb.append(this.deviceUniqueIdentifier);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("visitorUID");
		writer.sb.append(':');
		writer.sb.append(this.visitorUID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("appVersion");
		writer.sb.append(':');
		writer.sb.append(this.appVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("resourceVersion");
		writer.sb.append(':');
		writer.sb.append(this.resourceVersion);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.uid="";
		this.platform="";
		this.countryID=0;
		this.clientPlatformType=0;
		this.deviceType="";
		this.deviceUniqueIdentifier="";
		this.visitorUID="";
		this.appVersion=0;
		this.resourceVersion=0;
	}
	
}
