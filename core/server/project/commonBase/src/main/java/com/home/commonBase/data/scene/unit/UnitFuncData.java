package com.home.commonBase.data.scene.unit;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.item.ItemDicContainerData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 单位功能数据(generated by shine) */
public class UnitFuncData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.UnitFunc;
	
	/** 物品包数据 */
	public ItemDicContainerData itemDic;
	
	public UnitFuncData()
	{
		_dataID=BaseDataType.UnitFunc;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UnitFuncData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			BaseData itemDicT=stream.readDataFullNotNull();
			if(itemDicT!=null)
			{
				if(itemDicT instanceof ItemDicContainerData)
				{
					this.itemDic=(ItemDicContainerData)itemDicT;
				}
				else
				{
					this.itemDic=new ItemDicContainerData();
					if(!(itemDicT.getClass().isAssignableFrom(ItemDicContainerData.class)))
					{
						stream.throwTypeReadError(ItemDicContainerData.class,itemDicT.getClass());
					}
					this.itemDic.shadowCopy(itemDicT);
				}
			}
			else
			{
				this.itemDic=null;
			}
		}
		else
		{
			this.itemDic=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.itemDic!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.itemDic);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		if(stream.readBoolean())
		{
			this.itemDic=(ItemDicContainerData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.itemDic=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.itemDic!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.itemDic);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof UnitFuncData))
			return;
		
		UnitFuncData mData=(UnitFuncData)data;
		
		this.itemDic=mData.itemDic;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof UnitFuncData))
			return;
		
		UnitFuncData mData=(UnitFuncData)data;
		
		if(mData.itemDic!=null)
		{
			this.itemDic=(ItemDicContainerData)mData.itemDic.clone();
		}
		else
		{
			this.itemDic=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		UnitFuncData mData=(UnitFuncData)data;
		if(mData.itemDic!=null)
		{
			if(this.itemDic==null)
				return false;
			if(!this.itemDic.dataEquals(mData.itemDic))
				return false;
		}
		else
		{
			if(this.itemDic!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("itemDic");
		writer.sb.append(':');
		if(this.itemDic!=null)
		{
			this.itemDic.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ItemDicContainerData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.itemDic=null;
	}
	
}
