package com.home.commonBase.data.scene.fight;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 帧同步指令数据(generated by shine) */
public class FrameSyncCommandData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.FrameSyncCommand;
	
	/** 序号 */
	public int index;
	
	/** 指令 */
	public int type;
	
	/** 整形参数组 */
	public int[] ints;
	
	/** float参数组 */
	public float[] floats;
	
	public FrameSyncCommandData()
	{
		_dataID=BaseDataType.FrameSyncCommand;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FrameSyncCommandData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		this.type=stream.readInt();
		
		int intsLen=stream.readLen();
		if(this.ints==null || this.ints.length!=intsLen)
		{
			this.ints=new int[intsLen];
		}
		int[] intsT=this.ints;
		for(int intsI=0;intsI<intsLen;++intsI)
		{
			int intsV;
			intsV=stream.readInt();
			
			intsT[intsI]=intsV;
		}
		
		int floatsLen=stream.readLen();
		if(this.floats==null || this.floats.length!=floatsLen)
		{
			this.floats=new float[floatsLen];
		}
		float[] floatsT=this.floats;
		for(int floatsI=0;floatsI<floatsLen;++floatsI)
		{
			float floatsV;
			floatsV=stream.readFloat();
			
			floatsT[floatsI]=floatsV;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.index);
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			stream.writeLen(intsT.length);
			for(int intsVI=0,intsVLen=intsT.length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			nullObjError("ints");
		}
		
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.length);
			for(int floatsVI=0,floatsVLen=floatsT.length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			nullObjError("floats");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.index=stream.readInt();
		
		this.type=stream.readInt();
		
		int intsLen=stream.readLen();
		if(this.ints==null || this.ints.length!=intsLen)
		{
			this.ints=new int[intsLen];
		}
		int[] intsT=this.ints;
		for(int intsI=0;intsI<intsLen;++intsI)
		{
			int intsV;
			intsV=stream.readInt();
			
			intsT[intsI]=intsV;
		}
		
		int floatsLen=stream.readLen();
		if(this.floats==null || this.floats.length!=floatsLen)
		{
			this.floats=new float[floatsLen];
		}
		float[] floatsT=this.floats;
		for(int floatsI=0;floatsI<floatsLen;++floatsI)
		{
			float floatsV;
			floatsV=stream.readFloat();
			
			floatsT[floatsI]=floatsV;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.index);
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			stream.writeLen(intsT.length);
			for(int intsVI=0,intsVLen=intsT.length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			nullObjError("ints");
		}
		
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.length);
			for(int floatsVI=0,floatsVLen=floatsT.length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			nullObjError("floats");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof FrameSyncCommandData))
			return;
		
		FrameSyncCommandData mData=(FrameSyncCommandData)data;
		
		this.index=mData.index;
		this.type=mData.type;
		this.ints=mData.ints;
		this.floats=mData.floats;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof FrameSyncCommandData))
			return;
		
		FrameSyncCommandData mData=(FrameSyncCommandData)data;
		
		this.index=mData.index;
		
		this.type=mData.type;
		
		if(mData.ints!=null)
		{
			int[] intsR=mData.ints;
			int intsLen=intsR.length;
			if(this.ints==null || this.ints.length!=intsLen)
			{
				this.ints=new int[intsLen];
			}
			BytesControl.arrayCopy(mData.ints,this.ints,intsLen);
		}
		else
		{
			this.ints=null;
			nullObjError("ints");
		}
		
		if(mData.floats!=null)
		{
			float[] floatsR=mData.floats;
			int floatsLen=floatsR.length;
			if(this.floats==null || this.floats.length!=floatsLen)
			{
				this.floats=new float[floatsLen];
			}
			BytesControl.arrayCopy(mData.floats,this.floats,floatsLen);
		}
		else
		{
			this.floats=null;
			nullObjError("floats");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		FrameSyncCommandData mData=(FrameSyncCommandData)data;
		if(this.index!=mData.index)
			return false;
		
		if(this.type!=mData.type)
			return false;
		
		if(mData.ints!=null)
		{
			if(this.ints==null)
				return false;
			if(this.ints.length!=mData.ints.length)
				return false;
			int[] intsT=this.ints;
			int[] intsR=mData.ints;
			int intsLen=intsT.length;
			for(int intsI=0;intsI<intsLen;++intsI)
			{
				int intsU=intsT[intsI];
				int intsV=intsR[intsI];
				if(intsU!=intsV)
					return false;
				
			}
		}
		else
		{
			if(this.ints!=null)
				return false;
		}
		
		if(mData.floats!=null)
		{
			if(this.floats==null)
				return false;
			if(this.floats.length!=mData.floats.length)
				return false;
			float[] floatsT=this.floats;
			float[] floatsR=mData.floats;
			int floatsLen=floatsT.length;
			for(int floatsI=0;floatsI<floatsLen;++floatsI)
			{
				float floatsU=floatsT[floatsI];
				float floatsV=floatsR[floatsI];
				if(floatsU!=floatsV)
					return false;
				
			}
		}
		else
		{
			if(this.floats!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("index");
		writer.sb.append(':');
		writer.sb.append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("ints");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			int intsLen=intsT.length;
			writer.sb.append('(');
			writer.sb.append(intsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int intsI=0;intsI<intsLen;++intsI)
			{
				int intsV=intsT[intsI];
				writer.writeTabs();
				writer.sb.append(intsI);
				writer.sb.append(':');
				writer.sb.append(intsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("floats");
		writer.sb.append(':');
		writer.sb.append("Array<float>");
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			int floatsLen=floatsT.length;
			writer.sb.append('(');
			writer.sb.append(floatsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int floatsI=0;floatsI<floatsLen;++floatsI)
			{
				float floatsV=floatsT[floatsI];
				writer.writeTabs();
				writer.sb.append(floatsI);
				writer.sb.append(':');
				writer.sb.append(floatsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.ints=new int[0];
		this.floats=new float[0];
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.index=0;
		this.type=0;
		this.ints=null;
		this.floats=null;
	}
	
}
