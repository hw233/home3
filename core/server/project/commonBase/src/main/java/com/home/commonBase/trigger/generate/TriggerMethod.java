package com.home.commonBase.trigger.generate;
import com.home.commonBase.config.game.ScenePlaceElementConfig;
import com.home.commonBase.constlist.trigger.CompareType;
import com.home.commonBase.data.scene.base.DirData;
import com.home.commonBase.data.scene.base.PosData;
import com.home.commonBase.scene.base.Unit;
import com.home.commonBase.trigger.SceneTriggerEvent;
import com.home.commonBase.trigger.SceneTriggerExecutor;
import com.home.commonBase.trigger.TriggerActionRunner;
import com.home.commonBase.trigger.TriggerArg;
import com.home.commonBase.trigger.TriggerExecutor;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.SMap;
import com.home.shine.support.collection.SSet;
import com.home.shine.utils.MathUtils;
import com.home.shine.utils.ObjectUtils;
import com.home.shine.utils.StringUtils;
import java.util.Objects;

/** (generated by shine) */
public class TriggerMethod
{
	/** 如果 */
	public void func_If(TriggerExecutor e,TriggerArg a,boolean arg1,Object arg2,Object arg3)
	{
		Ctrl.warnLog("function func_If,need implement");
	}
	
	/** while循环 */
	public void func_While(TriggerExecutor e,TriggerArg a,boolean arg1,Object arg2)
	{
		Ctrl.warnLog("function func_While,need implement");
	}
	
	/** 获取字符串key自定义对象 */
	public Object func_GetSVar(TriggerExecutor e,TriggerArg a,String key)
	{
		return e.sVarDic.get(key);
	}
	
	/** 获取局部字符串key自定义对象 */
	public Object func_GetLocalVar(TriggerExecutor e,TriggerArg a,String key)
	{
		return a.runner.getLocalVar(key);
	}
	
	/** 非 */
	public boolean func_Not(TriggerExecutor e,TriggerArg a,boolean arg)
	{
		return !arg;
	}
	
	/** 并且 */
	public boolean func_And(TriggerExecutor e,TriggerArg a,boolean arg1,boolean arg2)
	{
		return arg1 && arg2;
	}
	
	/** 并且2 */
	public boolean func_And2(TriggerExecutor e,TriggerArg a,boolean arg1,boolean arg2,boolean arg3)
	{
		return arg1 && arg2 && arg3;
	}
	
	/** 或者 */
	public boolean func_Or(TriggerExecutor e,TriggerArg a,boolean arg1,boolean arg2)
	{
		return arg1 || arg2;
	}
	
	/** 或者2(3元) */
	public boolean func_Or2(TriggerExecutor e,TriggerArg a,boolean arg1,boolean arg2,boolean arg3)
	{
		return arg1 || arg2 || arg3;
	}
	
	/** 判断相等 */
	public boolean func_Equals(TriggerExecutor e,TriggerArg a,Object arg1,Object arg2)
	{
		return Objects.equals(arg1,arg2);
	}
	
	/** 判断int相等 */
	public boolean func_EqualsInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1==arg2;
	}
	
	/** 判断float相等 */
	public boolean func_EqualsFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return MathUtils.floatEquals(arg1,arg2);
	}
	
	/** 判断long相等 */
	public boolean func_EqualsLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1==arg2;
	}
	
	/** 判断string相等 */
	public boolean func_EqualsString(TriggerExecutor e,TriggerArg a,String arg1,String arg2)
	{
		return arg1!=null && arg1.equals(arg2);
	}
	
	/** 比较int,type:CompareType */
	public boolean func_CompareInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2,int type)
	{
		switch(type)
		{
			case CompareType.Equal:
				return arg1==arg2;
			case CompareType.NotEqual:
				return arg1!=arg2;
			case CompareType.GreaterThan:
				return arg1>arg2;
			case CompareType.GreaterThanOrEqual:
				return arg1>=arg2;
			case CompareType.LessThan:
				return arg1<arg2;
			case CompareType.LessThanOrEqual:
				return arg1<=arg2;
		}
		
		return false;
	}
	
	/** 比较Float,type:CompareType */
	public boolean func_CompareFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2,int type)
	{
		switch(type)
		{
			case CompareType.Equal:
				return MathUtils.floatEquals(arg1,arg2);
			case CompareType.NotEqual:
				return !MathUtils.floatEquals(arg1,arg2);
			case CompareType.GreaterThan:
				return arg1>arg2;
			case CompareType.GreaterThanOrEqual:
				return arg1>=arg2;
			case CompareType.LessThan:
				return arg1<arg2;
			case CompareType.LessThanOrEqual:
				return arg1<=arg2;
		}
		
		return false;
	}
	
	/** 比较long,type:CompareType */
	public boolean func_CompareLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2,int type)
	{
		switch(type)
		{
			case CompareType.Equal:
				return arg1==arg2;
			case CompareType.NotEqual:
				return arg1!=arg2;
			case CompareType.GreaterThan:
				return arg1>arg2;
			case CompareType.GreaterThanOrEqual:
				return arg1>=arg2;
			case CompareType.LessThan:
				return arg1<arg2;
			case CompareType.LessThanOrEqual:
				return arg1<=arg2;
		}
		
		return false;
	}
	
	/** 大于int */
	public boolean func_GreaterThanInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1>arg2;
	}
	
	/** 大于等于int */
	public boolean func_GreaterThanOrEqualInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1>=arg2;
	}
	
	/** 小于int */
	public boolean func_LessThanInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1<arg2;
	}
	
	/** 小于等于int */
	public boolean func_LessThanOrEqualInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1<=arg2;
	}
	
	/** 大于float */
	public boolean func_GreaterThanFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1>arg2;
	}
	
	/** 大于等于float */
	public boolean func_GreaterThanOrEqualFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1>=arg2;
	}
	
	/** 小于float */
	public boolean func_LessThanFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1<arg2;
	}
	
	/** 小于等于float */
	public boolean func_LessThanOrEqualFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1<=arg2;
	}
	
	/** 大于long */
	public boolean func_GreaterThanLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1>arg2;
	}
	
	/** 大于等于long */
	public boolean func_GreaterThanOrEqualLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1>=arg2;
	}
	
	/** 小于long */
	public boolean func_LessThanLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1<arg2;
	}
	
	/** 小于等于long */
	public boolean func_LessThanOrEqualLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1<=arg2;
	}
	
	/** 获取字符串key boolean */
	public boolean func_GetSBoolean(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=e.sVarDic.get(key);
		return obj!=null ? (boolean)obj : false;
	}
	
	/** random一个bool值 */
	public boolean func_RandomBoolean(TriggerExecutor e,TriggerArg a)
	{
		return MathUtils.randomBoolean();
	}
	
	/** int加法 */
	public int func_AddInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1+arg2;
	}
	
	/** int减法 */
	public int func_SubInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1-arg2;
	}
	
	/** int乘法 */
	public int func_MulInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1*arg2;
	}
	
	/** int除法 */
	public int func_DivInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1/arg2;
	}
	
	/** int取反 */
	public int func_InvertInt(TriggerExecutor e,TriggerArg a,int arg)
	{
		return -arg;
	}
	
	/** int求余 */
	public int func_RestInt(TriggerExecutor e,TriggerArg a,int arg1,int arg2)
	{
		return arg1%arg2;
	}
	
	/** int绝对值 */
	public int func_AbsInt(TriggerExecutor e,TriggerArg a,int arg)
	{
		return Math.abs(arg);
	}
	
	/** int自增 */
	public int func_Add1Int(TriggerExecutor e,TriggerArg a,int arg)
	{
		return arg+1;
	}
	
	/** int自减 */
	public int func_Sub1Int(TriggerExecutor e,TriggerArg a,int arg)
	{
		return arg-1;
	}
	
	/** float转int */
	public int func_ConvertFloat2Int(TriggerExecutor e,TriggerArg a,float arg)
	{
		return (int)arg;
	}
	
	/** long转int */
	public int func_ConvertLong2Int(TriggerExecutor e,TriggerArg a,long arg)
	{
		return (int)arg;
	}
	
	/** 获取字符串key int */
	public int func_GetSInt(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=e.sVarDic.get(key);
		return obj!=null ? (int)obj : 0;
	}
	
	/** 获取全局变量int */
	public int func_GetCurrentLoopIndex(TriggerExecutor e,TriggerArg a)
	{
		TriggerActionRunner p;
		if((p=a.runner.parent)!=null)
			return p.loop;
		else
			return 0;
	}
	
	/** 获取当前list遍历元素 */
	public Object func_GetCurrentListElement(TriggerExecutor e,TriggerArg a)
	{
		TriggerActionRunner p;
		if((p=a.runner.parent)!=null)
			return p.foreachList.get(p.loop);
		else
			return null;
	}
	
	/** 随一整形(0<=value<range) */
	public int func_RandomInt(TriggerExecutor e,TriggerArg a,int range)
	{
		return MathUtils.randomInt(range);
	}
	
	/** 随一整形(start<=value<end) */
	public int func_RandomRange(TriggerExecutor e,TriggerArg a,int start,int end)
	{
		return MathUtils.randomRange(start,end);
	}
	
	/** 获取triggerGM指令str变量 */
	public int func_GetTriggerGMCommandIntArg(TriggerExecutor e,TriggerArg a,int key)
	{
		return (int)a.evt.args[key];
	}
	
	/** float加法 */
	public float func_AddFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1+arg2;
	}
	
	/** float减法 */
	public float func_SubFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1-arg2;
	}
	
	/** float乘法 */
	public float func_MulFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1*arg2;
	}
	
	/** float除法 */
	public float func_DivFloat(TriggerExecutor e,TriggerArg a,float arg1,float arg2)
	{
		return arg1/arg2;
	}
	
	/** float取反 */
	public float func_InvertFloat(TriggerExecutor e,TriggerArg a,float arg)
	{
		return -arg;
	}
	
	/** float绝对值 */
	public float func_AbsFloat(TriggerExecutor e,TriggerArg a,int arg)
	{
		return Math.abs(arg);
	}
	
	/** 获取字符串key变量float */
	public float func_GetSFloat(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=e.sVarDic.get(key);
		return obj!=null ? (float)obj : 0f;
	}
	
	/** long转float */
	public float func_ConvertInt2Float(TriggerExecutor e,TriggerArg a,int arg)
	{
		return (float)arg;
	}
	
	/** float转float */
	public float func_ConvertLong2Float(TriggerExecutor e,TriggerArg a,long arg)
	{
		return (float)arg;
	}
	
	/** long加法 */
	public long func_AddLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1+arg2;
	}
	
	/** long减法 */
	public long func_SubLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1-arg2;
	}
	
	/** long乘法 */
	public long func_MulLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1*arg2;
	}
	
	/** long除法 */
	public long func_DivLong(TriggerExecutor e,TriggerArg a,long arg1,long arg2)
	{
		return arg1/arg2;
	}
	
	/** long取反 */
	public long func_InvertLong(TriggerExecutor e,TriggerArg a,long arg)
	{
		return -arg;
	}
	
	/** long绝对值 */
	public long func_AbsLong(TriggerExecutor e,TriggerArg a,long arg)
	{
		return Math.abs(arg);
	}
	
	/** int转long */
	public long func_ConvertInt2Long(TriggerExecutor e,TriggerArg a,int arg)
	{
		return (long)arg;
	}
	
	/** float转long */
	public long func_ConvertFloat2Long(TriggerExecutor e,TriggerArg a,float arg)
	{
		return (long)arg;
	}
	
	/** 获取字符串key变量long */
	public long func_GetSLong(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=e.sVarDic.get(key);
		return obj!=null ? (long)obj : 0L;
	}
	
	/** 获取当前时间戳 */
	public long func_GetTimeMillis(TriggerExecutor e,TriggerArg a)
	{
		return e.getTimeMillis();
	}
	
	/** string相加 */
	public String func_AddStr(TriggerExecutor e,TriggerArg a,String arg1,String arg2)
	{
		return arg1+arg2;
	}
	
	/** int转string */
	public String func_ConvertInt2Str(TriggerExecutor e,TriggerArg a,int arg)
	{
		return String.valueOf(arg);
	}
	
	/** float转string */
	public String func_ConvertFloat2Str(TriggerExecutor e,TriggerArg a,float arg)
	{
		return String.valueOf(arg);
	}
	
	/** long转string */
	public String func_ConvertLong2Str(TriggerExecutor e,TriggerArg a,long arg)
	{
		return String.valueOf(arg);
	}
	
	/** bool转string */
	public String func_ConvertBool2Str(TriggerExecutor e,TriggerArg a,boolean arg)
	{
		return String.valueOf(arg);
	}
	
	/** 获取字符串key变量string */
	public String func_GetSString(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=e.sVarDic.get(key);
		return obj!=null ? (String)obj : "";
	}
	
	/** 等待(ms) */
	public void func_Wait(TriggerExecutor e,TriggerArg a,int delay)
	{
		Ctrl.warnLog("function func_Wait,need implement");
	}
	
	/** 等待某条件成立(checkDelay:检查间隔(ms)) */
	public void func_WaitUtil(TriggerExecutor e,TriggerArg a,boolean condition,int checkDelay)
	{
		Ctrl.warnLog("function func_WaitUtil,need implement");
	}
	
	/** 输出字符串 */
	public void func_Print(TriggerExecutor e,TriggerArg a,String str)
	{
		e.print(str);
	}
	
	/** 循环loop次(i从0到loop-1) */
	public void func_ForLoop(TriggerExecutor e,TriggerArg a,int loop,Object func)
	{
		Ctrl.warnLog("function func_ForLoop,need implement");
	}
	
	/** 结束当前trigger执行动作 */
	public void func_BreakTrigger(TriggerExecutor e,TriggerArg a)
	{
		Ctrl.warnLog("function func_BreakTrigger,need implement");
	}
	
	/** 结束当前循环(对while有效) */
	public void func_BreakLoop(TriggerExecutor e,TriggerArg a)
	{
		Ctrl.warnLog("function func_BreakLoop,need implement");
	}
	
	/** 跳过剩余脚本，继续执行循环(对while有效) */
	public void func_ContinueLoop(TriggerExecutor e,TriggerArg a)
	{
		Ctrl.warnLog("function func_ContinueLoop,need implement");
	}
	
	/** 设置自定义字符串key变量 */
	public void func_SetSVar(TriggerExecutor e,TriggerArg a,String key,Object value)
	{
		e.sVarDic.put(key,value);
	}
	
	/** 设置局部字符串key变量 */
	public void func_SetLocalVar(TriggerExecutor e,TriggerArg a,String key,Object value)
	{
		a.runner.setLocalVar(key,value);
	}
	
	/** 获取event int参数 */
	public int func_GetEventIntArgs(TriggerExecutor e,TriggerArg a,int index)
	{
		return (int)a.evt.args[index];
	}
	
	/** 获取event bool参数 */
	public boolean func_GetEventBoolArgs(TriggerExecutor e,TriggerArg a,int index)
	{
		return (boolean)a.evt.args[index];
	}
	
	/** 获取event string参数 */
	public String func_GetEventStringArgs(TriggerExecutor e,TriggerArg a,int index)
	{
		return (String)a.evt.args[index];
	}
	
	/** 获取list长度 */
	public int func_GetListSize(TriggerExecutor e,TriggerArg a,SList<Object> list)
	{
		return list.size();
	}
	
	/** list添加 */
	public void func_ListAdd(TriggerExecutor e,TriggerArg a,SList<Object> list,Object value)
	{
		list.add(value);
	}
	
	/** list删除 */
	public void func_ListRemove(TriggerExecutor e,TriggerArg a,SList<Object> list,int index)
	{
		list.remove(index);
	}
	
	/** list删除元素 */
	public boolean func_ListRemoveObj(TriggerExecutor e,TriggerArg a,SList<Object> list,Object value)
	{
		return list.removeObj(value);
	}
	
	/** list清空 */
	public void func_ListClear(TriggerExecutor e,TriggerArg a,SList<Object> list)
	{
		list.clear();
	}
	
	/** list查询 */
	public int func_ListIndexOf(TriggerExecutor e,TriggerArg a,SList<Object> list,Object value)
	{
		return list.indexOf(value);
	}
	
	/** list查询 */
	public boolean func_ListContains(TriggerExecutor e,TriggerArg a,SList<Object> list,Object value)
	{
		return list.indexOf(value)!=-1;
	}
	
	/** 遍历list */
	public void func_ForeachList(TriggerExecutor e,TriggerArg a,SList<Object> list,Object func)
	{
		Ctrl.warnLog("function func_ForeachList,need implement");
	}
	
	/** list是否为空 */
	public boolean func_ListIsEmpty(TriggerExecutor e,TriggerArg a,SList<Object> list)
	{
		return list.isEmpty();
	}
	
	/** 获取Map长度 */
	public int func_GetMapSize(TriggerExecutor e,TriggerArg a,SMap<Object,Object> map)
	{
		return map.size();
	}
	
	/** map添加 */
	public void func_MapPut(TriggerExecutor e,TriggerArg a,SMap<Object,Object> map,Object key,Object value)
	{
		map.put(key,value);
	}
	
	/** Map删除 */
	public boolean func_MapRemove(TriggerExecutor e,TriggerArg a,SMap<Object,Object> map,Object key)
	{
		return map.remove(key)!=null;
	}
	
	/** Map清空 */
	public void func_MapClear(TriggerExecutor e,TriggerArg a,SMap<Object,Object> map)
	{
		map.clear();
	}
	
	/** Map包含 */
	public boolean func_MapContains(TriggerExecutor e,TriggerArg a,SMap<Object,Object> map,Object key)
	{
		return map.contains(key);
	}
	
	/** map是否为空 */
	public boolean func_MapIsEmpty(TriggerExecutor e,TriggerArg a,SMap<Object,Object> map)
	{
		return map.isEmpty();
	}
	
	/** 获取Set长度 */
	public int func_GetSetSize(TriggerExecutor e,TriggerArg a,SSet<Object> value)
	{
		return value.size();
	}
	
	/** Set添加 */
	public void func_SetAdd(TriggerExecutor e,TriggerArg a,SSet<Object> map,Object key)
	{
		map.add(key);
	}
	
	/** Set删除 */
	public boolean func_SetRemove(TriggerExecutor e,TriggerArg a,SSet<Object> map,Object key)
	{
		return map.remove(key);
	}
	
	/** Set清空 */
	public void func_SetClear(TriggerExecutor e,TriggerArg a,SSet<Object> map)
	{
		map.clear();
	}
	
	/** Set包含 */
	public boolean func_SetContains(TriggerExecutor e,TriggerArg a,SSet<Object> map,Object key)
	{
		return map.contains(key);
	}
	
	/** Set是否为空 */
	public boolean func_SetIsEmpty(TriggerExecutor e,TriggerArg a,SSet<Object> map)
	{
		return map.isEmpty();
	}
	
	/** 当做List */
	public SList<Object> func_AsList(TriggerExecutor e,TriggerArg a,Object obj)
	{
		return (SList<Object>)obj;
	}
	
	/** 创建空List */
	public SList<Object> func_CreateList(TriggerExecutor e,TriggerArg a)
	{
		return new SList<>();
	}
	
	/** 当做Map */
	public SMap<Object,Object> func_AsMap(TriggerExecutor e,TriggerArg a,Object obj)
	{
		return (SMap<Object,Object>)obj;
	}
	
	/** 创建空Map */
	public SMap<Object,Object> func_CreateMap(TriggerExecutor e,TriggerArg a)
	{
		return new SMap<>();
	}
	
	/** 当做Set */
	public SSet<Object> func_AsSet(TriggerExecutor e,TriggerArg a,Object obj)
	{
		return (SSet<Object>)obj;
	}
	
	/** 创建空Set */
	public SSet<Object> func_CreateSet(TriggerExecutor e,TriggerArg a)
	{
		return new SSet<>();
	}
	
	/** 开启trigger */
	public void func_OpenTrigger(TriggerExecutor e,TriggerArg a,int cls)
	{
		e.openTrigger(cls);
	}
	
	/** 关闭trigger */
	public void func_CloseTrigger(TriggerExecutor e,TriggerArg a,int cls)
	{
		e.closeTrigger(cls);
	}
	
	/** 执行trigger(需要检查环境) */
	public void func_RunTrigger(TriggerExecutor e,TriggerArg a,int cls)
	{
		Ctrl.warnLog("function func_RunTrigger,need implement");
	}
	
	/** 执行trigger(不检查环境) */
	public void func_RunTriggerAbs(TriggerExecutor e,TriggerArg a,int cls)
	{
		Ctrl.warnLog("function func_RunTriggerAbs,need implement");
	}
	
	/** 获取局部字符串key boolean */
	public boolean func_GetLocalBoolean(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=a.runner.getLocalVar(key);
		return obj!=null ? (boolean)obj : false;
	}
	
	/** 获取局部字符串key int */
	public int func_GetLocalInt(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=a.runner.getLocalVar(key);
		return obj!=null ? (int)obj : 0;
	}
	
	/** 获取局部字符串key变量float */
	public float func_GetLocalFloat(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=a.runner.getLocalVar(key);
		return obj!=null ? (float)obj : 0f;
	}
	
	/** 获取局部字符串key变量long */
	public long func_GetLocalLong(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=a.runner.getLocalVar(key);
		return obj!=null ? (long)obj : 0L;
	}
	
	/** 获取局部字符串key变量string */
	public String func_GetLocalString(TriggerExecutor e,TriggerArg a,String key)
	{
		Object obj=a.runner.getLocalVar(key);
		return obj!=null ? (String)obj : "";
	}
	
	/** 是否为空 */
	public boolean func_IsNull(TriggerExecutor e,TriggerArg a,Object arg1)
	{
		return arg1==null;
	}
	
	/** 是否不为空 */
	public boolean func_NotNull(TriggerExecutor e,TriggerArg a,Object arg1)
	{
		return arg1!=null;
	}
	
	/** 该毫秒值是否为过去时间 */
	public boolean func_IsTimeMillisPass(TriggerExecutor e,TriggerArg a,long time)
	{
		return time<e.getTimeMillis();
	}
	
	/** 删除自定义字符串key变量 */
	public void func_RemoveSVar(TriggerExecutor e,TriggerArg a,String key)
	{
		e.sVarDic.remove(key);
	}
	
	/** c单位是否存活 */
	public boolean func_UnitIsAlive(SceneTriggerExecutor e,TriggerArg a,Unit unit)
	{
		return unit.fight.isAlive();
	}
	
	/** 对于某单位来说，点是否可走 */
	public boolean func_IsPosEnabled(SceneTriggerExecutor e,TriggerArg a,Unit unit,PosData pos)
	{
		Ctrl.warnLog("function func_IsPosEnabled,need implement");
		return false;
	}
	
	/** 当前触发单位 */
	public Unit func_TriggerUnit(SceneTriggerExecutor e,TriggerArg a)
	{
		return ((SceneTriggerEvent)a.evt).triggerUnit;
	}
	
	/** 计算点距离 */
	public float func_PosDistance(SceneTriggerExecutor e,TriggerArg a,PosData pos0,PosData pos1)
	{
		return e.getScene().pos.calculatePosDistance2D(pos0,pos1);
	}
	
	/** 获取单位的战斗单位id */
	public int func_GetUnitFightUnitID(SceneTriggerExecutor e,TriggerArg a,Unit unit)
	{
		return unit.fight.getFightUnitConfig().id;
	}
	
	/** 通过实例id获取单位 */
	public Unit func_GetUnit(SceneTriggerExecutor e,TriggerArg a,int instanceID)
	{
		return e.getScene().getUnit(instanceID);
	}
	
	/** 强制类型转化为单位 */
	public Unit func_AsUnit(SceneTriggerExecutor e,TriggerArg a,Object obj)
	{
		return (Unit)obj;
	}
	
	/** 创建并添加傀儡 */
	public Unit func_CreateAddPuppet(SceneTriggerExecutor e,TriggerArg a,int id,int level,PosData pos,Unit master,int lastTime)
	{
		return e.getScene().unitFactory.createAddPuppet(id,level,pos,master,lastTime);
	}
	
	/** 强制类型转化为点 */
	public PosData func_AsPos(SceneTriggerExecutor e,TriggerArg a,Object obj)
	{
		return (PosData)obj;
	}
	
	/** 获取单位位置 */
	public PosData func_GetUnitPos(SceneTriggerExecutor e,TriggerArg a,Unit unit)
	{
		return unit.pos.getPos();
	}
	
	/** 获取场景排放配置位置 */
	public PosData func_GetScenePlacePos(SceneTriggerExecutor e,TriggerArg a,int instanceID)
	{
		ScenePlaceElementConfig eConfig=e.getScene().getPlaceConfig().getElement(instanceID);
		
		if(eConfig==null)
		{
			Ctrl.errorLog("未找到场景摆放配置",instanceID);
			return null;
		}
		PosData re=new PosData();
		re.setByFArr(eConfig.pos);
		
		return re;
	}
	
	/** 极坐标取点 */
	public PosData func_PosPolar(SceneTriggerExecutor e,TriggerArg a,PosData pos,float distance,DirData dir)
	{
		PosData re=new PosData();
		e.getScene().pos.polar2D(re,distance,dir);
		e.getScene().pos.addPos(re,pos);
		return re;
	}
	
	/** 点相加 */
	public PosData func_AddPos(SceneTriggerExecutor e,TriggerArg a,PosData pos0,PosData pos1)
	{
		PosData re=new PosData();
		re.copyPos(pos0);
		e.getScene().pos.addPos(re,pos1);
		return re;
	}
	
	/** 强制类型转化为朝向 */
	public DirData func_AsDir(SceneTriggerExecutor e,TriggerArg a,Object obj)
	{
		return (DirData)obj;
	}
	
	/** 获取单位朝向 */
	public DirData func_GetUnitDir(SceneTriggerExecutor e,TriggerArg a,Unit unit)
	{
		return unit.pos.getDir();
	}
	
	/** 朝向 相加 */
	public DirData func_AddDir(SceneTriggerExecutor e,TriggerArg a,DirData dir,DirData value)
	{
		DirData re=new DirData();
		re.copyDir(dir);
		re.direction=MathUtils.directionCut(re.direction+value.direction);
		//re.directionX+=dir2.directionX;
		return re;
	}
	
	/** 朝向 相加 */
	public DirData func_AddDirFloat(SceneTriggerExecutor e,TriggerArg a,DirData dir,float value)
	{
		DirData re=new DirData();
		re.copyDir(dir);
		re.direction=MathUtils.directionCut(re.direction+value);
		return re;
	}
	
	/** 强制击杀单位 */
	public void func_KillUnit(SceneTriggerExecutor e,TriggerArg a,Unit unit)
	{
		e.getScene().fight.killUnit(unit);
	}
	
	/** 移除单位 */
	public void func_RemoveUnit(SceneTriggerExecutor e,TriggerArg a,Unit unit)
	{
		unit.removeLater();
	}
	
	/** 移动到目标单位 */
	public void func_MoveToUnit(SceneTriggerExecutor e,TriggerArg a,Unit unit,Unit target,float radius)
	{
		unit.aiCommand.moveTo(target,radius,null);
	}
	
	/** 单位添加属性 */
	public void func_UnitAddAttribute(SceneTriggerExecutor e,TriggerArg a,Unit unit,int type,int value)
	{
		unit.fight.getAttributeLogic().addOneAttribute(type,value);
	}
	
	/** 单位治疗生命千分比 */
	public void func_UnitAddHpPercent(SceneTriggerExecutor e,TriggerArg a,Unit unit,int percent)
	{
		unit.fight.getAttributeLogic().addHPPercent(percent);
	}
	
	
	
}
