package com.home.commonBase.part.player.data;
import com.home.commonBase.constlist.generate.PlayerPartDataType;
import com.home.commonBase.data.quest.QuestCompleteData;
import com.home.commonBase.data.quest.QuestData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.IntSet;
import com.home.shine.support.pool.DataPool;

/** 任务数据(generated by shine) */
public class QuestPartData extends BaseData
{
	/** 服务器目标实例ID序号 */
	public int taskInstanceIDIndex;
	
	/** 客户端目标实例ID序号 */
	public int clientTaskInstanceIDIndex;
	
	/** 完成任务组(周期组) */
	public IntObjectMap<QuestCompleteData> completeQuestsDic;
	
	/** 完成任务id组 */
	public IntSet completeIDs;
	
	/** 已接任务组 */
	public IntObjectMap<QuestData> accepts;
	
	/** 完成任务线组(key:lineID,value:questID) */
	public IntIntMap completeLines;
	
	/** 任务配置变更版本号 */
	public int questConfigChangeVersion;
	
	/** 数据类型ID */
	public static final int dataID=PlayerPartDataType.Quest;
	
	public QuestPartData()
	{
		_dataID=PlayerPartDataType.Quest;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "QuestPartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.taskInstanceIDIndex=stream.readInt();
		
		this.clientTaskInstanceIDIndex=stream.readInt();
		
		int acceptsLen=stream.readLen();
		if(this.accepts!=null)
		{
			this.accepts.clear();
			this.accepts.ensureCapacity(acceptsLen);
		}
		else
		{
			this.accepts=new IntObjectMap<QuestData>(QuestData[]::new,acceptsLen);
		}
		
		IntObjectMap<QuestData> acceptsT=this.accepts;
		for(int acceptsI=acceptsLen-1;acceptsI>=0;--acceptsI)
		{
			QuestData acceptsV;
			BaseData acceptsVT=stream.readDataFullNotNull();
			if(acceptsVT!=null)
			{
				if(acceptsVT instanceof QuestData)
				{
					acceptsV=(QuestData)acceptsVT;
				}
				else
				{
					acceptsV=new QuestData();
					if(!(acceptsVT.getClass().isAssignableFrom(QuestData.class)))
					{
						stream.throwTypeReadError(QuestData.class,acceptsVT.getClass());
					}
					acceptsV.shadowCopy(acceptsVT);
				}
			}
			else
			{
				acceptsV=null;
			}
			
			acceptsT.put(acceptsV.id,acceptsV);
		}
		
		int completeLinesLen=stream.readLen();
		if(this.completeLines!=null)
		{
			this.completeLines.clear();
			this.completeLines.ensureCapacity(completeLinesLen);
		}
		else
		{
			this.completeLines=new IntIntMap(completeLinesLen);
		}
		
		IntIntMap completeLinesT=this.completeLines;
		for(int completeLinesI=completeLinesLen-1;completeLinesI>=0;--completeLinesI)
		{
			int completeLinesK;
			int completeLinesV;
			completeLinesK=stream.readInt();
			
			completeLinesV=stream.readInt();
			
			completeLinesT.put(completeLinesK,completeLinesV);
		}
		
		int completeIDsLen=stream.readLen();
		if(this.completeIDs!=null)
		{
			this.completeIDs.clear();
			this.completeIDs.ensureCapacity(completeIDsLen);
		}
		else
		{
			this.completeIDs=new IntSet(completeIDsLen);
		}
		
		IntSet completeIDsT=this.completeIDs;
		for(int completeIDsI=completeIDsLen-1;completeIDsI>=0;--completeIDsI)
		{
			int completeIDsV;
			completeIDsV=stream.readInt();
			
			completeIDsT.add(completeIDsV);
		}
		
		int completeQuestsDicLen=stream.readLen();
		if(this.completeQuestsDic!=null)
		{
			this.completeQuestsDic.clear();
			this.completeQuestsDic.ensureCapacity(completeQuestsDicLen);
		}
		else
		{
			this.completeQuestsDic=new IntObjectMap<QuestCompleteData>(QuestCompleteData[]::new,completeQuestsDicLen);
		}
		
		IntObjectMap<QuestCompleteData> completeQuestsDicT=this.completeQuestsDic;
		for(int completeQuestsDicI=completeQuestsDicLen-1;completeQuestsDicI>=0;--completeQuestsDicI)
		{
			QuestCompleteData completeQuestsDicV;
			BaseData completeQuestsDicVT=stream.readDataFullNotNull();
			if(completeQuestsDicVT!=null)
			{
				if(completeQuestsDicVT instanceof QuestCompleteData)
				{
					completeQuestsDicV=(QuestCompleteData)completeQuestsDicVT;
				}
				else
				{
					completeQuestsDicV=new QuestCompleteData();
					if(!(completeQuestsDicVT.getClass().isAssignableFrom(QuestCompleteData.class)))
					{
						stream.throwTypeReadError(QuestCompleteData.class,completeQuestsDicVT.getClass());
					}
					completeQuestsDicV.shadowCopy(completeQuestsDicVT);
				}
			}
			else
			{
				completeQuestsDicV=null;
			}
			
			completeQuestsDicT.put(completeQuestsDicV.id,completeQuestsDicV);
		}
		
		this.questConfigChangeVersion=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.taskInstanceIDIndex);
		
		stream.writeInt(this.clientTaskInstanceIDIndex);
		
		if(this.accepts!=null)
		{
			stream.writeLen(this.accepts.size());
			if(!this.accepts.isEmpty())
			{
				Object[] acceptsVValues=this.accepts.getValues();
				for(int acceptsVI=acceptsVValues.length-1;acceptsVI>=0;--acceptsVI)
				{
					if(acceptsVValues[acceptsVI]!=null)
					{
						QuestData acceptsV=(QuestData)acceptsVValues[acceptsVI];
						if(acceptsV!=null)
						{
							stream.writeDataFullNotNull(acceptsV);
						}
						else
						{
							nullObjError("acceptsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("accepts");
		}
		
		if(this.completeLines!=null)
		{
			stream.writeLen(this.completeLines.size());
			if(!this.completeLines.isEmpty())
			{
				int completeLinesKFreeValue=this.completeLines.getFreeValue();
				long[] completeLinesKTable=this.completeLines.getTable();
				long completeLinesKEntry;
				for(int completeLinesKI=completeLinesKTable.length-1;completeLinesKI>=0;--completeLinesKI)
				{
					completeLinesKEntry=completeLinesKTable[completeLinesKI];
					int completeLinesK=(int)completeLinesKEntry;
					if(completeLinesK!=completeLinesKFreeValue)
					{
						int completeLinesV=(int)(completeLinesKEntry>>>32);
						stream.writeInt(completeLinesK);
						
						stream.writeInt(completeLinesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeLines");
		}
		
		if(this.completeIDs!=null)
		{
			stream.writeLen(this.completeIDs.size());
			if(!this.completeIDs.isEmpty())
			{
				int completeIDsVFreeValue=this.completeIDs.getFreeValue();
				int[] completeIDsVKeys=this.completeIDs.getKeys();
				for(int completeIDsVI=completeIDsVKeys.length-1;completeIDsVI>=0;--completeIDsVI)
				{
					int completeIDsV=completeIDsVKeys[completeIDsVI];
					if(completeIDsV!=completeIDsVFreeValue)
					{
						stream.writeInt(completeIDsV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeIDs");
		}
		
		if(this.completeQuestsDic!=null)
		{
			stream.writeLen(this.completeQuestsDic.size());
			if(!this.completeQuestsDic.isEmpty())
			{
				Object[] completeQuestsDicVValues=this.completeQuestsDic.getValues();
				for(int completeQuestsDicVI=completeQuestsDicVValues.length-1;completeQuestsDicVI>=0;--completeQuestsDicVI)
				{
					if(completeQuestsDicVValues[completeQuestsDicVI]!=null)
					{
						QuestCompleteData completeQuestsDicV=(QuestCompleteData)completeQuestsDicVValues[completeQuestsDicVI];
						if(completeQuestsDicV!=null)
						{
							stream.writeDataFullNotNull(completeQuestsDicV);
						}
						else
						{
							nullObjError("completeQuestsDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeQuestsDic");
		}
		
		stream.writeInt(this.questConfigChangeVersion);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.taskInstanceIDIndex=stream.readInt();
		
		this.clientTaskInstanceIDIndex=stream.readInt();
		
		int acceptsLen=stream.readLen();
		if(this.accepts!=null)
		{
			this.accepts.clear();
			this.accepts.ensureCapacity(acceptsLen);
		}
		else
		{
			this.accepts=new IntObjectMap<QuestData>(QuestData[]::new,acceptsLen);
		}
		
		IntObjectMap<QuestData> acceptsT=this.accepts;
		for(int acceptsI=acceptsLen-1;acceptsI>=0;--acceptsI)
		{
			QuestData acceptsV;
			acceptsV=(QuestData)stream.readDataSimpleNotNull();
			
			acceptsT.put(acceptsV.id,acceptsV);
		}
		
		int completeLinesLen=stream.readLen();
		if(this.completeLines!=null)
		{
			this.completeLines.clear();
			this.completeLines.ensureCapacity(completeLinesLen);
		}
		else
		{
			this.completeLines=new IntIntMap(completeLinesLen);
		}
		
		IntIntMap completeLinesT=this.completeLines;
		for(int completeLinesI=completeLinesLen-1;completeLinesI>=0;--completeLinesI)
		{
			int completeLinesK;
			int completeLinesV;
			completeLinesK=stream.readInt();
			
			completeLinesV=stream.readInt();
			
			completeLinesT.put(completeLinesK,completeLinesV);
		}
		
		int completeIDsLen=stream.readLen();
		if(this.completeIDs!=null)
		{
			this.completeIDs.clear();
			this.completeIDs.ensureCapacity(completeIDsLen);
		}
		else
		{
			this.completeIDs=new IntSet(completeIDsLen);
		}
		
		IntSet completeIDsT=this.completeIDs;
		for(int completeIDsI=completeIDsLen-1;completeIDsI>=0;--completeIDsI)
		{
			int completeIDsV;
			completeIDsV=stream.readInt();
			
			completeIDsT.add(completeIDsV);
		}
		
		int completeQuestsDicLen=stream.readLen();
		if(this.completeQuestsDic!=null)
		{
			this.completeQuestsDic.clear();
			this.completeQuestsDic.ensureCapacity(completeQuestsDicLen);
		}
		else
		{
			this.completeQuestsDic=new IntObjectMap<QuestCompleteData>(QuestCompleteData[]::new,completeQuestsDicLen);
		}
		
		IntObjectMap<QuestCompleteData> completeQuestsDicT=this.completeQuestsDic;
		for(int completeQuestsDicI=completeQuestsDicLen-1;completeQuestsDicI>=0;--completeQuestsDicI)
		{
			QuestCompleteData completeQuestsDicV;
			completeQuestsDicV=(QuestCompleteData)stream.readDataSimpleNotNull();
			
			completeQuestsDicT.put(completeQuestsDicV.id,completeQuestsDicV);
		}
		
		this.questConfigChangeVersion=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.taskInstanceIDIndex);
		
		stream.writeInt(this.clientTaskInstanceIDIndex);
		
		if(this.accepts!=null)
		{
			stream.writeLen(this.accepts.size());
			if(!this.accepts.isEmpty())
			{
				Object[] acceptsVValues=this.accepts.getValues();
				for(int acceptsVI=acceptsVValues.length-1;acceptsVI>=0;--acceptsVI)
				{
					if(acceptsVValues[acceptsVI]!=null)
					{
						QuestData acceptsV=(QuestData)acceptsVValues[acceptsVI];
						if(acceptsV!=null)
						{
							stream.writeDataSimpleNotNull(acceptsV);
						}
						else
						{
							nullObjError("acceptsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("accepts");
		}
		
		if(this.completeLines!=null)
		{
			stream.writeLen(this.completeLines.size());
			if(!this.completeLines.isEmpty())
			{
				int completeLinesKFreeValue=this.completeLines.getFreeValue();
				long[] completeLinesKTable=this.completeLines.getTable();
				long completeLinesKEntry;
				for(int completeLinesKI=completeLinesKTable.length-1;completeLinesKI>=0;--completeLinesKI)
				{
					completeLinesKEntry=completeLinesKTable[completeLinesKI];
					int completeLinesK=(int)completeLinesKEntry;
					if(completeLinesK!=completeLinesKFreeValue)
					{
						int completeLinesV=(int)(completeLinesKEntry>>>32);
						stream.writeInt(completeLinesK);
						
						stream.writeInt(completeLinesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeLines");
		}
		
		if(this.completeIDs!=null)
		{
			stream.writeLen(this.completeIDs.size());
			if(!this.completeIDs.isEmpty())
			{
				int completeIDsVFreeValue=this.completeIDs.getFreeValue();
				int[] completeIDsVKeys=this.completeIDs.getKeys();
				for(int completeIDsVI=completeIDsVKeys.length-1;completeIDsVI>=0;--completeIDsVI)
				{
					int completeIDsV=completeIDsVKeys[completeIDsVI];
					if(completeIDsV!=completeIDsVFreeValue)
					{
						stream.writeInt(completeIDsV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeIDs");
		}
		
		if(this.completeQuestsDic!=null)
		{
			stream.writeLen(this.completeQuestsDic.size());
			if(!this.completeQuestsDic.isEmpty())
			{
				Object[] completeQuestsDicVValues=this.completeQuestsDic.getValues();
				for(int completeQuestsDicVI=completeQuestsDicVValues.length-1;completeQuestsDicVI>=0;--completeQuestsDicVI)
				{
					if(completeQuestsDicVValues[completeQuestsDicVI]!=null)
					{
						QuestCompleteData completeQuestsDicV=(QuestCompleteData)completeQuestsDicVValues[completeQuestsDicVI];
						if(completeQuestsDicV!=null)
						{
							stream.writeDataSimpleNotNull(completeQuestsDicV);
						}
						else
						{
							nullObjError("completeQuestsDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeQuestsDic");
		}
		
		stream.writeInt(this.questConfigChangeVersion);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof QuestPartData))
			return;
		
		QuestPartData mData=(QuestPartData)data;
		
		this.taskInstanceIDIndex=mData.taskInstanceIDIndex;
		this.clientTaskInstanceIDIndex=mData.clientTaskInstanceIDIndex;
		this.accepts=mData.accepts;
		this.completeLines=mData.completeLines;
		this.completeIDs=mData.completeIDs;
		this.completeQuestsDic=mData.completeQuestsDic;
		this.questConfigChangeVersion=mData.questConfigChangeVersion;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof QuestPartData))
			return;
		
		QuestPartData mData=(QuestPartData)data;
		
		this.taskInstanceIDIndex=mData.taskInstanceIDIndex;
		
		this.clientTaskInstanceIDIndex=mData.clientTaskInstanceIDIndex;
		
		if(mData.accepts!=null)
		{
			if(this.accepts!=null)
			{
				this.accepts.clear();
				this.accepts.ensureCapacity(mData.accepts.size());
			}
			else
			{
				this.accepts=new IntObjectMap<QuestData>(QuestData[]::new,mData.accepts.size());
			}
			
			IntObjectMap<QuestData> acceptsT=this.accepts;
			if(!mData.accepts.isEmpty())
			{
				Object[] acceptsVValues=mData.accepts.getValues();
				for(int acceptsVI=acceptsVValues.length-1;acceptsVI>=0;--acceptsVI)
				{
					if(acceptsVValues[acceptsVI]!=null)
					{
						QuestData acceptsV=(QuestData)acceptsVValues[acceptsVI];
						QuestData acceptsU;
						if(acceptsV!=null)
						{
							acceptsU=(QuestData)acceptsV.clone();
						}
						else
						{
							acceptsU=null;
							nullObjError("acceptsU");
						}
						
						acceptsT.put(acceptsU.id,acceptsU);
					}
				}
			}
		}
		else
		{
			this.accepts=null;
			nullObjError("accepts");
		}
		
		if(mData.completeLines!=null)
		{
			if(this.completeLines!=null)
			{
				this.completeLines.clear();
				this.completeLines.ensureCapacity(mData.completeLines.size());
			}
			else
			{
				this.completeLines=new IntIntMap(mData.completeLines.size());
			}
			
			IntIntMap completeLinesT=this.completeLines;
			if(!mData.completeLines.isEmpty())
			{
				int completeLinesKFreeValue=mData.completeLines.getFreeValue();
				long[] completeLinesKTable=mData.completeLines.getTable();
				long completeLinesKEntry;
				for(int completeLinesKI=completeLinesKTable.length-1;completeLinesKI>=0;--completeLinesKI)
				{
					completeLinesKEntry=completeLinesKTable[completeLinesKI];
					int completeLinesK=(int)completeLinesKEntry;
					if(completeLinesK!=completeLinesKFreeValue)
					{
						int completeLinesV=(int)(completeLinesKEntry>>>32);
						int completeLinesW;
						int completeLinesU;
						completeLinesW=completeLinesK;
						
						completeLinesU=completeLinesV;
						
						completeLinesT.put(completeLinesW,completeLinesU);
					}
				}
			}
		}
		else
		{
			this.completeLines=null;
			nullObjError("completeLines");
		}
		
		if(mData.completeIDs!=null)
		{
			if(this.completeIDs!=null)
			{
				this.completeIDs.clear();
				this.completeIDs.ensureCapacity(mData.completeIDs.size());
			}
			else
			{
				this.completeIDs=new IntSet(mData.completeIDs.size());
			}
			
			IntSet completeIDsT=this.completeIDs;
			if(!mData.completeIDs.isEmpty())
			{
				int completeIDsVFreeValue=mData.completeIDs.getFreeValue();
				int[] completeIDsVKeys=mData.completeIDs.getKeys();
				for(int completeIDsVI=completeIDsVKeys.length-1;completeIDsVI>=0;--completeIDsVI)
				{
					int completeIDsV=completeIDsVKeys[completeIDsVI];
					if(completeIDsV!=completeIDsVFreeValue)
					{
						int completeIDsU;
						completeIDsU=completeIDsV;
						
						completeIDsT.add(completeIDsU);
					}
				}
			}
		}
		else
		{
			this.completeIDs=null;
			nullObjError("completeIDs");
		}
		
		if(mData.completeQuestsDic!=null)
		{
			if(this.completeQuestsDic!=null)
			{
				this.completeQuestsDic.clear();
				this.completeQuestsDic.ensureCapacity(mData.completeQuestsDic.size());
			}
			else
			{
				this.completeQuestsDic=new IntObjectMap<QuestCompleteData>(QuestCompleteData[]::new,mData.completeQuestsDic.size());
			}
			
			IntObjectMap<QuestCompleteData> completeQuestsDicT=this.completeQuestsDic;
			if(!mData.completeQuestsDic.isEmpty())
			{
				Object[] completeQuestsDicVValues=mData.completeQuestsDic.getValues();
				for(int completeQuestsDicVI=completeQuestsDicVValues.length-1;completeQuestsDicVI>=0;--completeQuestsDicVI)
				{
					if(completeQuestsDicVValues[completeQuestsDicVI]!=null)
					{
						QuestCompleteData completeQuestsDicV=(QuestCompleteData)completeQuestsDicVValues[completeQuestsDicVI];
						QuestCompleteData completeQuestsDicU;
						if(completeQuestsDicV!=null)
						{
							completeQuestsDicU=(QuestCompleteData)completeQuestsDicV.clone();
						}
						else
						{
							completeQuestsDicU=null;
							nullObjError("completeQuestsDicU");
						}
						
						completeQuestsDicT.put(completeQuestsDicU.id,completeQuestsDicU);
					}
				}
			}
		}
		else
		{
			this.completeQuestsDic=null;
			nullObjError("completeQuestsDic");
		}
		
		this.questConfigChangeVersion=mData.questConfigChangeVersion;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		QuestPartData mData=(QuestPartData)data;
		if(this.taskInstanceIDIndex!=mData.taskInstanceIDIndex)
			return false;
		
		if(this.clientTaskInstanceIDIndex!=mData.clientTaskInstanceIDIndex)
			return false;
		
		if(mData.accepts!=null)
		{
			if(this.accepts==null)
				return false;
			if(this.accepts.size()!=mData.accepts.size())
				return false;
			IntObjectMap<QuestData> acceptsR=mData.accepts;
			if(!this.accepts.isEmpty())
			{
				int acceptsKFreeValue=this.accepts.getFreeValue();
				int[] acceptsKKeys=this.accepts.getKeys();
				Object[] acceptsVValues=this.accepts.getValues();
				for(int acceptsKI=acceptsKKeys.length-1;acceptsKI>=0;--acceptsKI)
				{
					int acceptsK=acceptsKKeys[acceptsKI];
					if(acceptsK!=acceptsKFreeValue)
					{
						QuestData acceptsV=(QuestData)acceptsVValues[acceptsKI];
						QuestData acceptsU=acceptsR.get(acceptsK);
						if(acceptsU!=null)
						{
							if(acceptsV==null)
								return false;
							if(!acceptsV.dataEquals(acceptsU))
								return false;
						}
						else
						{
							if(acceptsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.accepts!=null)
				return false;
		}
		
		if(mData.completeLines!=null)
		{
			if(this.completeLines==null)
				return false;
			if(this.completeLines.size()!=mData.completeLines.size())
				return false;
			IntIntMap completeLinesR=mData.completeLines;
			if(!this.completeLines.isEmpty())
			{
				int completeLinesKFreeValue=this.completeLines.getFreeValue();
				long[] completeLinesKTable=this.completeLines.getTable();
				long completeLinesKEntry;
				for(int completeLinesKI=completeLinesKTable.length-1;completeLinesKI>=0;--completeLinesKI)
				{
					completeLinesKEntry=completeLinesKTable[completeLinesKI];
					int completeLinesK=(int)completeLinesKEntry;
					if(completeLinesK!=completeLinesKFreeValue)
					{
						int completeLinesV=(int)(completeLinesKEntry>>>32);
						int completeLinesU=completeLinesR.get(completeLinesK);
						if(completeLinesV!=completeLinesU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.completeLines!=null)
				return false;
		}
		
		if(mData.completeIDs!=null)
		{
			if(this.completeIDs==null)
				return false;
			if(this.completeIDs.size()!=mData.completeIDs.size())
				return false;
			IntSet completeIDsR=mData.completeIDs;
			if(!this.completeIDs.isEmpty())
			{
				int completeIDsVFreeValue=this.completeIDs.getFreeValue();
				int[] completeIDsVKeys=this.completeIDs.getKeys();
				for(int completeIDsVI=completeIDsVKeys.length-1;completeIDsVI>=0;--completeIDsVI)
				{
					int completeIDsV=completeIDsVKeys[completeIDsVI];
					if(completeIDsV!=completeIDsVFreeValue)
					{
						if(!completeIDsR.contains(completeIDsV))
							return false;
					}
				}
			}
		}
		else
		{
			if(this.completeIDs!=null)
				return false;
		}
		
		if(mData.completeQuestsDic!=null)
		{
			if(this.completeQuestsDic==null)
				return false;
			if(this.completeQuestsDic.size()!=mData.completeQuestsDic.size())
				return false;
			IntObjectMap<QuestCompleteData> completeQuestsDicR=mData.completeQuestsDic;
			if(!this.completeQuestsDic.isEmpty())
			{
				int completeQuestsDicKFreeValue=this.completeQuestsDic.getFreeValue();
				int[] completeQuestsDicKKeys=this.completeQuestsDic.getKeys();
				Object[] completeQuestsDicVValues=this.completeQuestsDic.getValues();
				for(int completeQuestsDicKI=completeQuestsDicKKeys.length-1;completeQuestsDicKI>=0;--completeQuestsDicKI)
				{
					int completeQuestsDicK=completeQuestsDicKKeys[completeQuestsDicKI];
					if(completeQuestsDicK!=completeQuestsDicKFreeValue)
					{
						QuestCompleteData completeQuestsDicV=(QuestCompleteData)completeQuestsDicVValues[completeQuestsDicKI];
						QuestCompleteData completeQuestsDicU=completeQuestsDicR.get(completeQuestsDicK);
						if(completeQuestsDicU!=null)
						{
							if(completeQuestsDicV==null)
								return false;
							if(!completeQuestsDicV.dataEquals(completeQuestsDicU))
								return false;
						}
						else
						{
							if(completeQuestsDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.completeQuestsDic!=null)
				return false;
		}
		
		if(this.questConfigChangeVersion!=mData.questConfigChangeVersion)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("taskInstanceIDIndex");
		writer.sb.append(':');
		writer.sb.append(this.taskInstanceIDIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientTaskInstanceIDIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientTaskInstanceIDIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("accepts");
		writer.sb.append(':');
		writer.sb.append("Map<int,QuestData>");
		if(this.accepts!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.accepts.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.accepts.isEmpty())
			{
				int acceptsKFreeValue=this.accepts.getFreeValue();
				int[] acceptsKKeys=this.accepts.getKeys();
				Object[] acceptsVValues=this.accepts.getValues();
				for(int acceptsKI=acceptsKKeys.length-1;acceptsKI>=0;--acceptsKI)
				{
					int acceptsK=acceptsKKeys[acceptsKI];
					if(acceptsK!=acceptsKFreeValue)
					{
						QuestData acceptsV=(QuestData)acceptsVValues[acceptsKI];
						writer.writeTabs();
						writer.sb.append(acceptsK);
						
						writer.sb.append(':');
						if(acceptsV!=null)
						{
							acceptsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("QuestData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("completeLines");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.completeLines!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.completeLines.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.completeLines.isEmpty())
			{
				int completeLinesKFreeValue=this.completeLines.getFreeValue();
				long[] completeLinesKTable=this.completeLines.getTable();
				long completeLinesKEntry;
				for(int completeLinesKI=completeLinesKTable.length-1;completeLinesKI>=0;--completeLinesKI)
				{
					completeLinesKEntry=completeLinesKTable[completeLinesKI];
					int completeLinesK=(int)completeLinesKEntry;
					if(completeLinesK!=completeLinesKFreeValue)
					{
						int completeLinesV=(int)(completeLinesKEntry>>>32);
						writer.writeTabs();
						writer.sb.append(completeLinesK);
						
						writer.sb.append(':');
						writer.sb.append(completeLinesV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("completeIDs");
		writer.sb.append(':');
		writer.sb.append("Set<int>");
		if(this.completeIDs!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.completeIDs.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.completeIDs.isEmpty())
			{
				int completeIDsVFreeValue=this.completeIDs.getFreeValue();
				int[] completeIDsVKeys=this.completeIDs.getKeys();
				for(int completeIDsVI=completeIDsVKeys.length-1;completeIDsVI>=0;--completeIDsVI)
				{
					int completeIDsV=completeIDsVKeys[completeIDsVI];
					if(completeIDsV!=completeIDsVFreeValue)
					{
						writer.writeTabs();
						writer.sb.append(completeIDsV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("completeQuestsDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,QuestCompleteData>");
		if(this.completeQuestsDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.completeQuestsDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.completeQuestsDic.isEmpty())
			{
				int completeQuestsDicKFreeValue=this.completeQuestsDic.getFreeValue();
				int[] completeQuestsDicKKeys=this.completeQuestsDic.getKeys();
				Object[] completeQuestsDicVValues=this.completeQuestsDic.getValues();
				for(int completeQuestsDicKI=completeQuestsDicKKeys.length-1;completeQuestsDicKI>=0;--completeQuestsDicKI)
				{
					int completeQuestsDicK=completeQuestsDicKKeys[completeQuestsDicKI];
					if(completeQuestsDicK!=completeQuestsDicKFreeValue)
					{
						QuestCompleteData completeQuestsDicV=(QuestCompleteData)completeQuestsDicVValues[completeQuestsDicKI];
						writer.writeTabs();
						writer.sb.append(completeQuestsDicK);
						
						writer.sb.append(':');
						if(completeQuestsDicV!=null)
						{
							completeQuestsDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("QuestCompleteData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("questConfigChangeVersion");
		writer.sb.append(':');
		writer.sb.append(this.questConfigChangeVersion);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.accepts=new IntObjectMap<QuestData>(QuestData[]::new);
		this.completeLines=new IntIntMap();
		this.completeIDs=new IntSet();
		this.completeQuestsDic=new IntObjectMap<QuestCompleteData>(QuestCompleteData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.taskInstanceIDIndex=0;
		this.clientTaskInstanceIDIndex=0;
		this.accepts=null;
		this.completeLines=null;
		this.completeIDs=null;
		this.completeQuestsDic=null;
		this.questConfigChangeVersion=0;
	}
	
}
