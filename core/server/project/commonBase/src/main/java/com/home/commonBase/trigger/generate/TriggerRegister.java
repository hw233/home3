package com.home.commonBase.trigger.generate;
import com.home.commonBase.constlist.generate.TriggerFunctionType;
import com.home.commonBase.data.scene.base.DirData;
import com.home.commonBase.data.scene.base.PosData;
import com.home.commonBase.scene.base.Unit;
import com.home.commonBase.support.func.TriggerFuncEntry;
import com.home.commonBase.tool.TriggerFuncMaker;
import com.home.commonBase.trigger.SceneTriggerExecutor;
import com.home.commonBase.trigger.TriggerArg;
import com.home.commonBase.trigger.TriggerExecutor;
import com.home.commonBase.trigger.generate.TriggerMethod;
import com.home.shine.data.trigger.TriggerFuncData;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.SMap;
import com.home.shine.support.collection.SSet;

/** (generated by shine) */
public class TriggerRegister extends TriggerFuncMaker
{
	/** 方法组 */
	private TriggerMethod _m=new TriggerMethod();
	
	public TriggerRegister()
	{
		offSet=TriggerFunctionType.off;
		list=new TriggerFuncEntry[TriggerFunctionType.count-offSet];
		list[TriggerFunctionType.If-offSet]=TriggerFuncEntry.createVoid(this::delegate_If);
		list[TriggerFunctionType.While-offSet]=TriggerFuncEntry.createVoid(this::delegate_While);
		list[TriggerFunctionType.GetSVar-offSet]=TriggerFuncEntry.createObject(this::delegate_GetSVar);
		list[TriggerFunctionType.GetLocalVar-offSet]=TriggerFuncEntry.createObject(this::delegate_GetLocalVar);
		list[TriggerFunctionType.Not-offSet]=TriggerFuncEntry.createBoolean(this::delegate_Not);
		list[TriggerFunctionType.And-offSet]=TriggerFuncEntry.createBoolean(this::delegate_And);
		list[TriggerFunctionType.And2-offSet]=TriggerFuncEntry.createBoolean(this::delegate_And2);
		list[TriggerFunctionType.Or-offSet]=TriggerFuncEntry.createBoolean(this::delegate_Or);
		list[TriggerFunctionType.Or2-offSet]=TriggerFuncEntry.createBoolean(this::delegate_Or2);
		list[TriggerFunctionType.Equals-offSet]=TriggerFuncEntry.createBoolean(this::delegate_Equals);
		list[TriggerFunctionType.EqualsInt-offSet]=TriggerFuncEntry.createBoolean(this::delegate_EqualsInt);
		list[TriggerFunctionType.EqualsFloat-offSet]=TriggerFuncEntry.createBoolean(this::delegate_EqualsFloat);
		list[TriggerFunctionType.EqualsLong-offSet]=TriggerFuncEntry.createBoolean(this::delegate_EqualsLong);
		list[TriggerFunctionType.EqualsString-offSet]=TriggerFuncEntry.createBoolean(this::delegate_EqualsString);
		list[TriggerFunctionType.IsNull-offSet]=TriggerFuncEntry.createBoolean(this::delegate_IsNull);
		list[TriggerFunctionType.NotNull-offSet]=TriggerFuncEntry.createBoolean(this::delegate_NotNull);
		list[TriggerFunctionType.CompareInt-offSet]=TriggerFuncEntry.createBoolean(this::delegate_CompareInt);
		list[TriggerFunctionType.CompareFloat-offSet]=TriggerFuncEntry.createBoolean(this::delegate_CompareFloat);
		list[TriggerFunctionType.CompareLong-offSet]=TriggerFuncEntry.createBoolean(this::delegate_CompareLong);
		list[TriggerFunctionType.GreaterThanInt-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GreaterThanInt);
		list[TriggerFunctionType.GreaterThanOrEqualInt-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GreaterThanOrEqualInt);
		list[TriggerFunctionType.LessThanInt-offSet]=TriggerFuncEntry.createBoolean(this::delegate_LessThanInt);
		list[TriggerFunctionType.LessThanOrEqualInt-offSet]=TriggerFuncEntry.createBoolean(this::delegate_LessThanOrEqualInt);
		list[TriggerFunctionType.GreaterThanFloat-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GreaterThanFloat);
		list[TriggerFunctionType.GreaterThanOrEqualFloat-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GreaterThanOrEqualFloat);
		list[TriggerFunctionType.LessThanFloat-offSet]=TriggerFuncEntry.createBoolean(this::delegate_LessThanFloat);
		list[TriggerFunctionType.LessThanOrEqualFloat-offSet]=TriggerFuncEntry.createBoolean(this::delegate_LessThanOrEqualFloat);
		list[TriggerFunctionType.GreaterThanLong-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GreaterThanLong);
		list[TriggerFunctionType.GreaterThanOrEqualLong-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GreaterThanOrEqualLong);
		list[TriggerFunctionType.LessThanLong-offSet]=TriggerFuncEntry.createBoolean(this::delegate_LessThanLong);
		list[TriggerFunctionType.LessThanOrEqualLong-offSet]=TriggerFuncEntry.createBoolean(this::delegate_LessThanOrEqualLong);
		list[TriggerFunctionType.GetSBoolean-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GetSBoolean);
		list[TriggerFunctionType.GetLocalBoolean-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GetLocalBoolean);
		list[TriggerFunctionType.RandomBoolean-offSet]=TriggerFuncEntry.createBoolean(this::delegate_RandomBoolean);
		list[TriggerFunctionType.IsTimeMillisPass-offSet]=TriggerFuncEntry.createBoolean(this::delegate_IsTimeMillisPass);
		list[TriggerFunctionType.AddInt-offSet]=TriggerFuncEntry.createInt(this::delegate_AddInt);
		list[TriggerFunctionType.SubInt-offSet]=TriggerFuncEntry.createInt(this::delegate_SubInt);
		list[TriggerFunctionType.MulInt-offSet]=TriggerFuncEntry.createInt(this::delegate_MulInt);
		list[TriggerFunctionType.DivInt-offSet]=TriggerFuncEntry.createInt(this::delegate_DivInt);
		list[TriggerFunctionType.InvertInt-offSet]=TriggerFuncEntry.createInt(this::delegate_InvertInt);
		list[TriggerFunctionType.RestInt-offSet]=TriggerFuncEntry.createInt(this::delegate_RestInt);
		list[TriggerFunctionType.AbsInt-offSet]=TriggerFuncEntry.createInt(this::delegate_AbsInt);
		list[TriggerFunctionType.Add1Int-offSet]=TriggerFuncEntry.createInt(this::delegate_Add1Int);
		list[TriggerFunctionType.Sub1Int-offSet]=TriggerFuncEntry.createInt(this::delegate_Sub1Int);
		list[TriggerFunctionType.ConvertFloat2Int-offSet]=TriggerFuncEntry.createInt(this::delegate_ConvertFloat2Int);
		list[TriggerFunctionType.ConvertLong2Int-offSet]=TriggerFuncEntry.createInt(this::delegate_ConvertLong2Int);
		list[TriggerFunctionType.GetSInt-offSet]=TriggerFuncEntry.createInt(this::delegate_GetSInt);
		list[TriggerFunctionType.GetLocalInt-offSet]=TriggerFuncEntry.createInt(this::delegate_GetLocalInt);
		list[TriggerFunctionType.GetCurrentLoopIndex-offSet]=TriggerFuncEntry.createInt(this::delegate_GetCurrentLoopIndex);
		list[TriggerFunctionType.GetCurrentListElement-offSet]=TriggerFuncEntry.createObject(this::delegate_GetCurrentListElement);
		list[TriggerFunctionType.RandomInt-offSet]=TriggerFuncEntry.createInt(this::delegate_RandomInt);
		list[TriggerFunctionType.RandomRange-offSet]=TriggerFuncEntry.createInt(this::delegate_RandomRange);
		list[TriggerFunctionType.GetTriggerGMCommandIntArg-offSet]=TriggerFuncEntry.createInt(this::delegate_GetTriggerGMCommandIntArg);
		list[TriggerFunctionType.AddFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_AddFloat);
		list[TriggerFunctionType.SubFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_SubFloat);
		list[TriggerFunctionType.MulFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_MulFloat);
		list[TriggerFunctionType.DivFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_DivFloat);
		list[TriggerFunctionType.InvertFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_InvertFloat);
		list[TriggerFunctionType.AbsFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_AbsFloat);
		list[TriggerFunctionType.GetSFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_GetSFloat);
		list[TriggerFunctionType.GetLocalFloat-offSet]=TriggerFuncEntry.createFloat(this::delegate_GetLocalFloat);
		list[TriggerFunctionType.ConvertInt2Float-offSet]=TriggerFuncEntry.createFloat(this::delegate_ConvertInt2Float);
		list[TriggerFunctionType.ConvertLong2Float-offSet]=TriggerFuncEntry.createFloat(this::delegate_ConvertLong2Float);
		list[TriggerFunctionType.AddLong-offSet]=TriggerFuncEntry.createLong(this::delegate_AddLong);
		list[TriggerFunctionType.SubLong-offSet]=TriggerFuncEntry.createLong(this::delegate_SubLong);
		list[TriggerFunctionType.MulLong-offSet]=TriggerFuncEntry.createLong(this::delegate_MulLong);
		list[TriggerFunctionType.DivLong-offSet]=TriggerFuncEntry.createLong(this::delegate_DivLong);
		list[TriggerFunctionType.InvertLong-offSet]=TriggerFuncEntry.createLong(this::delegate_InvertLong);
		list[TriggerFunctionType.AbsLong-offSet]=TriggerFuncEntry.createLong(this::delegate_AbsLong);
		list[TriggerFunctionType.ConvertInt2Long-offSet]=TriggerFuncEntry.createLong(this::delegate_ConvertInt2Long);
		list[TriggerFunctionType.ConvertFloat2Long-offSet]=TriggerFuncEntry.createLong(this::delegate_ConvertFloat2Long);
		list[TriggerFunctionType.GetSLong-offSet]=TriggerFuncEntry.createLong(this::delegate_GetSLong);
		list[TriggerFunctionType.GetLocalLong-offSet]=TriggerFuncEntry.createLong(this::delegate_GetLocalLong);
		list[TriggerFunctionType.GetTimeMillis-offSet]=TriggerFuncEntry.createLong(this::delegate_GetTimeMillis);
		list[TriggerFunctionType.AddStr-offSet]=TriggerFuncEntry.createString(this::delegate_AddStr);
		list[TriggerFunctionType.ConvertInt2Str-offSet]=TriggerFuncEntry.createString(this::delegate_ConvertInt2Str);
		list[TriggerFunctionType.ConvertFloat2Str-offSet]=TriggerFuncEntry.createString(this::delegate_ConvertFloat2Str);
		list[TriggerFunctionType.ConvertLong2Str-offSet]=TriggerFuncEntry.createString(this::delegate_ConvertLong2Str);
		list[TriggerFunctionType.ConvertBool2Str-offSet]=TriggerFuncEntry.createString(this::delegate_ConvertBool2Str);
		list[TriggerFunctionType.GetSString-offSet]=TriggerFuncEntry.createString(this::delegate_GetSString);
		list[TriggerFunctionType.GetLocalString-offSet]=TriggerFuncEntry.createString(this::delegate_GetLocalString);
		list[TriggerFunctionType.AsList-offSet]=TriggerFuncEntry.createObject(this::delegate_AsList);
		list[TriggerFunctionType.CreateList-offSet]=TriggerFuncEntry.createObject(this::delegate_CreateList);
		list[TriggerFunctionType.GetListSize-offSet]=TriggerFuncEntry.createInt(this::delegate_GetListSize);
		list[TriggerFunctionType.ListAdd-offSet]=TriggerFuncEntry.createVoid(this::delegate_ListAdd);
		list[TriggerFunctionType.ListRemove-offSet]=TriggerFuncEntry.createVoid(this::delegate_ListRemove);
		list[TriggerFunctionType.ListRemoveObj-offSet]=TriggerFuncEntry.createBoolean(this::delegate_ListRemoveObj);
		list[TriggerFunctionType.ListClear-offSet]=TriggerFuncEntry.createVoid(this::delegate_ListClear);
		list[TriggerFunctionType.ListIndexOf-offSet]=TriggerFuncEntry.createInt(this::delegate_ListIndexOf);
		list[TriggerFunctionType.ListContains-offSet]=TriggerFuncEntry.createBoolean(this::delegate_ListContains);
		list[TriggerFunctionType.ForeachList-offSet]=TriggerFuncEntry.createVoid(this::delegate_ForeachList);
		list[TriggerFunctionType.ListIsEmpty-offSet]=TriggerFuncEntry.createBoolean(this::delegate_ListIsEmpty);
		list[TriggerFunctionType.AsMap-offSet]=TriggerFuncEntry.createObject(this::delegate_AsMap);
		list[TriggerFunctionType.CreateMap-offSet]=TriggerFuncEntry.createObject(this::delegate_CreateMap);
		list[TriggerFunctionType.GetMapSize-offSet]=TriggerFuncEntry.createInt(this::delegate_GetMapSize);
		list[TriggerFunctionType.MapPut-offSet]=TriggerFuncEntry.createVoid(this::delegate_MapPut);
		list[TriggerFunctionType.MapRemove-offSet]=TriggerFuncEntry.createBoolean(this::delegate_MapRemove);
		list[TriggerFunctionType.MapClear-offSet]=TriggerFuncEntry.createVoid(this::delegate_MapClear);
		list[TriggerFunctionType.MapContains-offSet]=TriggerFuncEntry.createBoolean(this::delegate_MapContains);
		list[TriggerFunctionType.MapIsEmpty-offSet]=TriggerFuncEntry.createBoolean(this::delegate_MapIsEmpty);
		list[TriggerFunctionType.AsSet-offSet]=TriggerFuncEntry.createObject(this::delegate_AsSet);
		list[TriggerFunctionType.CreateSet-offSet]=TriggerFuncEntry.createObject(this::delegate_CreateSet);
		list[TriggerFunctionType.GetSetSize-offSet]=TriggerFuncEntry.createInt(this::delegate_GetSetSize);
		list[TriggerFunctionType.SetAdd-offSet]=TriggerFuncEntry.createVoid(this::delegate_SetAdd);
		list[TriggerFunctionType.SetRemove-offSet]=TriggerFuncEntry.createBoolean(this::delegate_SetRemove);
		list[TriggerFunctionType.SetClear-offSet]=TriggerFuncEntry.createVoid(this::delegate_SetClear);
		list[TriggerFunctionType.SetContains-offSet]=TriggerFuncEntry.createBoolean(this::delegate_SetContains);
		list[TriggerFunctionType.SetIsEmpty-offSet]=TriggerFuncEntry.createBoolean(this::delegate_SetIsEmpty);
		list[TriggerFunctionType.OpenTrigger-offSet]=TriggerFuncEntry.createVoid(this::delegate_OpenTrigger);
		list[TriggerFunctionType.CloseTrigger-offSet]=TriggerFuncEntry.createVoid(this::delegate_CloseTrigger);
		list[TriggerFunctionType.RunTrigger-offSet]=TriggerFuncEntry.createVoid(this::delegate_RunTrigger);
		list[TriggerFunctionType.RunTriggerAbs-offSet]=TriggerFuncEntry.createVoid(this::delegate_RunTriggerAbs);
		list[TriggerFunctionType.Wait-offSet]=TriggerFuncEntry.createVoid(this::delegate_Wait);
		list[TriggerFunctionType.WaitUtil-offSet]=TriggerFuncEntry.createVoid(this::delegate_WaitUtil);
		list[TriggerFunctionType.Print-offSet]=TriggerFuncEntry.createVoid(this::delegate_Print);
		list[TriggerFunctionType.ForLoop-offSet]=TriggerFuncEntry.createVoid(this::delegate_ForLoop);
		list[TriggerFunctionType.BreakTrigger-offSet]=TriggerFuncEntry.createVoid(this::delegate_BreakTrigger);
		list[TriggerFunctionType.BreakLoop-offSet]=TriggerFuncEntry.createVoid(this::delegate_BreakLoop);
		list[TriggerFunctionType.ContinueLoop-offSet]=TriggerFuncEntry.createVoid(this::delegate_ContinueLoop);
		list[TriggerFunctionType.SetSVar-offSet]=TriggerFuncEntry.createVoid(this::delegate_SetSVar);
		list[TriggerFunctionType.RemoveSVar-offSet]=TriggerFuncEntry.createVoid(this::delegate_RemoveSVar);
		list[TriggerFunctionType.SetLocalVar-offSet]=TriggerFuncEntry.createVoid(this::delegate_SetLocalVar);
		list[TriggerFunctionType.GetEventIntArgs-offSet]=TriggerFuncEntry.createInt(this::delegate_GetEventIntArgs);
		list[TriggerFunctionType.GetEventBoolArgs-offSet]=TriggerFuncEntry.createBoolean(this::delegate_GetEventBoolArgs);
		list[TriggerFunctionType.GetEventStringArgs-offSet]=TriggerFuncEntry.createString(this::delegate_GetEventStringArgs);
		list[TriggerFunctionType.UnitIsAlive-offSet]=TriggerFuncEntry.createBoolean(this::delegate_UnitIsAlive);
		list[TriggerFunctionType.IsPosEnabled-offSet]=TriggerFuncEntry.createBoolean(this::delegate_IsPosEnabled);
		list[TriggerFunctionType.TriggerUnit-offSet]=TriggerFuncEntry.createObject(this::delegate_TriggerUnit);
		list[TriggerFunctionType.PosDistance-offSet]=TriggerFuncEntry.createFloat(this::delegate_PosDistance);
		list[TriggerFunctionType.GetUnitFightUnitID-offSet]=TriggerFuncEntry.createInt(this::delegate_GetUnitFightUnitID);
		list[TriggerFunctionType.GetUnit-offSet]=TriggerFuncEntry.createObject(this::delegate_GetUnit);
		list[TriggerFunctionType.AsUnit-offSet]=TriggerFuncEntry.createObject(this::delegate_AsUnit);
		list[TriggerFunctionType.CreateAddPuppet-offSet]=TriggerFuncEntry.createObject(this::delegate_CreateAddPuppet);
		list[TriggerFunctionType.AsPos-offSet]=TriggerFuncEntry.createObject(this::delegate_AsPos);
		list[TriggerFunctionType.GetUnitPos-offSet]=TriggerFuncEntry.createObject(this::delegate_GetUnitPos);
		list[TriggerFunctionType.GetScenePlacePos-offSet]=TriggerFuncEntry.createObject(this::delegate_GetScenePlacePos);
		list[TriggerFunctionType.PosPolar-offSet]=TriggerFuncEntry.createObject(this::delegate_PosPolar);
		list[TriggerFunctionType.AddPos-offSet]=TriggerFuncEntry.createObject(this::delegate_AddPos);
		list[TriggerFunctionType.AsDir-offSet]=TriggerFuncEntry.createObject(this::delegate_AsDir);
		list[TriggerFunctionType.GetUnitDir-offSet]=TriggerFuncEntry.createObject(this::delegate_GetUnitDir);
		list[TriggerFunctionType.AddDir-offSet]=TriggerFuncEntry.createObject(this::delegate_AddDir);
		list[TriggerFunctionType.AddDirFloat-offSet]=TriggerFuncEntry.createObject(this::delegate_AddDirFloat);
		list[TriggerFunctionType.KillUnit-offSet]=TriggerFuncEntry.createVoid(this::delegate_KillUnit);
		list[TriggerFunctionType.RemoveUnit-offSet]=TriggerFuncEntry.createVoid(this::delegate_RemoveUnit);
		list[TriggerFunctionType.MoveToUnit-offSet]=TriggerFuncEntry.createVoid(this::delegate_MoveToUnit);
		list[TriggerFunctionType.UnitAddAttribute-offSet]=TriggerFuncEntry.createVoid(this::delegate_UnitAddAttribute);
		list[TriggerFunctionType.UnitAddHpPercent-offSet]=TriggerFuncEntry.createVoid(this::delegate_UnitAddHpPercent);
	}
	
	private void delegate_If(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_If(e,arg,e.getBoolean(func.args[0],arg),e.getObj(func.args[1],arg),e.getObj(func.args[2],arg));
	}
	
	private void delegate_While(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_While(e,arg,e.getBoolean(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private Object delegate_GetSVar(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSVar(e,arg,e.getString(func.args[0],arg));
	}
	
	private Object delegate_GetLocalVar(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetLocalVar(e,arg,e.getString(func.args[0],arg));
	}
	
	private boolean delegate_Not(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_Not(e,arg,e.getBoolean(func.args[0],arg));
	}
	
	private boolean delegate_And(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_And(e,arg,e.getBoolean(func.args[0],arg),e.getBoolean(func.args[1],arg));
	}
	
	private boolean delegate_And2(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_And2(e,arg,e.getBoolean(func.args[0],arg),e.getBoolean(func.args[1],arg),e.getBoolean(func.args[2],arg));
	}
	
	private boolean delegate_Or(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_Or(e,arg,e.getBoolean(func.args[0],arg),e.getBoolean(func.args[1],arg));
	}
	
	private boolean delegate_Or2(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_Or2(e,arg,e.getBoolean(func.args[0],arg),e.getBoolean(func.args[1],arg),e.getBoolean(func.args[2],arg));
	}
	
	private boolean delegate_Equals(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_Equals(e,arg,e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private boolean delegate_EqualsInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_EqualsInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private boolean delegate_EqualsFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_EqualsFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private boolean delegate_EqualsLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_EqualsLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private boolean delegate_EqualsString(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_EqualsString(e,arg,e.getString(func.args[0],arg),e.getString(func.args[1],arg));
	}
	
	private boolean delegate_IsNull(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_IsNull(e,arg,e.getObj(func.args[0],arg));
	}
	
	private boolean delegate_NotNull(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_NotNull(e,arg,e.getObj(func.args[0],arg));
	}
	
	private boolean delegate_CompareInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CompareInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg),e.getInt(func.args[2],arg));
	}
	
	private boolean delegate_CompareFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CompareFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg),e.getInt(func.args[2],arg));
	}
	
	private boolean delegate_CompareLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CompareLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg),e.getInt(func.args[2],arg));
	}
	
	private boolean delegate_GreaterThanInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GreaterThanInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private boolean delegate_GreaterThanOrEqualInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GreaterThanOrEqualInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private boolean delegate_LessThanInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_LessThanInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private boolean delegate_LessThanOrEqualInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_LessThanOrEqualInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private boolean delegate_GreaterThanFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GreaterThanFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private boolean delegate_GreaterThanOrEqualFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GreaterThanOrEqualFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private boolean delegate_LessThanFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_LessThanFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private boolean delegate_LessThanOrEqualFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_LessThanOrEqualFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private boolean delegate_GreaterThanLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GreaterThanLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private boolean delegate_GreaterThanOrEqualLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GreaterThanOrEqualLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private boolean delegate_LessThanLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_LessThanLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private boolean delegate_LessThanOrEqualLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_LessThanOrEqualLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private boolean delegate_GetSBoolean(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSBoolean(e,arg,e.getString(func.args[0],arg));
	}
	
	private boolean delegate_GetLocalBoolean(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetLocalBoolean(e,arg,e.getString(func.args[0],arg));
	}
	
	private boolean delegate_RandomBoolean(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_RandomBoolean(e,arg);
	}
	
	private boolean delegate_IsTimeMillisPass(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_IsTimeMillisPass(e,arg,e.getLong(func.args[0],arg));
	}
	
	private int delegate_AddInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private int delegate_SubInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_SubInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private int delegate_MulInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_MulInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private int delegate_DivInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_DivInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private int delegate_InvertInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_InvertInt(e,arg,e.getInt(func.args[0],arg));
	}
	
	private int delegate_RestInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_RestInt(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private int delegate_AbsInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AbsInt(e,arg,e.getInt(func.args[0],arg));
	}
	
	private int delegate_Add1Int(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_Add1Int(e,arg,e.getInt(func.args[0],arg));
	}
	
	private int delegate_Sub1Int(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_Sub1Int(e,arg,e.getInt(func.args[0],arg));
	}
	
	private int delegate_ConvertFloat2Int(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertFloat2Int(e,arg,e.getFloat(func.args[0],arg));
	}
	
	private int delegate_ConvertLong2Int(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertLong2Int(e,arg,e.getLong(func.args[0],arg));
	}
	
	private int delegate_GetSInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSInt(e,arg,e.getString(func.args[0],arg));
	}
	
	private int delegate_GetLocalInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetLocalInt(e,arg,e.getString(func.args[0],arg));
	}
	
	private int delegate_GetCurrentLoopIndex(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetCurrentLoopIndex(e,arg);
	}
	
	private Object delegate_GetCurrentListElement(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetCurrentListElement(e,arg);
	}
	
	private int delegate_RandomInt(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_RandomInt(e,arg,e.getInt(func.args[0],arg));
	}
	
	private int delegate_RandomRange(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_RandomRange(e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private int delegate_GetTriggerGMCommandIntArg(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetTriggerGMCommandIntArg(e,arg,e.getInt(func.args[0],arg));
	}
	
	private float delegate_AddFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private float delegate_SubFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_SubFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private float delegate_MulFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_MulFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private float delegate_DivFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_DivFloat(e,arg,e.getFloat(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private float delegate_InvertFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_InvertFloat(e,arg,e.getFloat(func.args[0],arg));
	}
	
	private float delegate_AbsFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AbsFloat(e,arg,e.getInt(func.args[0],arg));
	}
	
	private float delegate_GetSFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSFloat(e,arg,e.getString(func.args[0],arg));
	}
	
	private float delegate_GetLocalFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetLocalFloat(e,arg,e.getString(func.args[0],arg));
	}
	
	private float delegate_ConvertInt2Float(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertInt2Float(e,arg,e.getInt(func.args[0],arg));
	}
	
	private float delegate_ConvertLong2Float(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertLong2Float(e,arg,e.getLong(func.args[0],arg));
	}
	
	private long delegate_AddLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private long delegate_SubLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_SubLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private long delegate_MulLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_MulLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private long delegate_DivLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_DivLong(e,arg,e.getLong(func.args[0],arg),e.getLong(func.args[1],arg));
	}
	
	private long delegate_InvertLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_InvertLong(e,arg,e.getLong(func.args[0],arg));
	}
	
	private long delegate_AbsLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AbsLong(e,arg,e.getLong(func.args[0],arg));
	}
	
	private long delegate_ConvertInt2Long(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertInt2Long(e,arg,e.getInt(func.args[0],arg));
	}
	
	private long delegate_ConvertFloat2Long(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertFloat2Long(e,arg,e.getFloat(func.args[0],arg));
	}
	
	private long delegate_GetSLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSLong(e,arg,e.getString(func.args[0],arg));
	}
	
	private long delegate_GetLocalLong(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetLocalLong(e,arg,e.getString(func.args[0],arg));
	}
	
	private long delegate_GetTimeMillis(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetTimeMillis(e,arg);
	}
	
	private String delegate_AddStr(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddStr(e,arg,e.getString(func.args[0],arg),e.getString(func.args[1],arg));
	}
	
	private String delegate_ConvertInt2Str(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertInt2Str(e,arg,e.getInt(func.args[0],arg));
	}
	
	private String delegate_ConvertFloat2Str(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertFloat2Str(e,arg,e.getFloat(func.args[0],arg));
	}
	
	private String delegate_ConvertLong2Str(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertLong2Str(e,arg,e.getLong(func.args[0],arg));
	}
	
	private String delegate_ConvertBool2Str(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ConvertBool2Str(e,arg,e.getBoolean(func.args[0],arg));
	}
	
	private String delegate_GetSString(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSString(e,arg,e.getString(func.args[0],arg));
	}
	
	private String delegate_GetLocalString(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetLocalString(e,arg,e.getString(func.args[0],arg));
	}
	
	private Object delegate_AsList(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AsList(e,arg,e.getObj(func.args[0],arg));
	}
	
	private Object delegate_CreateList(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CreateList(e,arg);
	}
	
	private int delegate_GetListSize(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetListSize(e,arg,(SList<Object>)e.getObj(func.args[0],arg));
	}
	
	private void delegate_ListAdd(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_ListAdd(e,arg,(SList<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_ListRemove(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_ListRemove(e,arg,(SList<Object>)e.getObj(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private boolean delegate_ListRemoveObj(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ListRemoveObj(e,arg,(SList<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_ListClear(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_ListClear(e,arg,(SList<Object>)e.getObj(func.args[0],arg));
	}
	
	private int delegate_ListIndexOf(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ListIndexOf(e,arg,(SList<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private boolean delegate_ListContains(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ListContains(e,arg,(SList<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_ForeachList(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_ForeachList(e,arg,(SList<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private boolean delegate_ListIsEmpty(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_ListIsEmpty(e,arg,(SList<Object>)e.getObj(func.args[0],arg));
	}
	
	private Object delegate_AsMap(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AsMap(e,arg,e.getObj(func.args[0],arg));
	}
	
	private Object delegate_CreateMap(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CreateMap(e,arg);
	}
	
	private int delegate_GetMapSize(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetMapSize(e,arg,(SMap<Object,Object>)e.getObj(func.args[0],arg));
	}
	
	private void delegate_MapPut(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_MapPut(e,arg,(SMap<Object,Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg),e.getObj(func.args[2],arg));
	}
	
	private boolean delegate_MapRemove(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_MapRemove(e,arg,(SMap<Object,Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_MapClear(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_MapClear(e,arg,(SMap<Object,Object>)e.getObj(func.args[0],arg));
	}
	
	private boolean delegate_MapContains(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_MapContains(e,arg,(SMap<Object,Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private boolean delegate_MapIsEmpty(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_MapIsEmpty(e,arg,(SMap<Object,Object>)e.getObj(func.args[0],arg));
	}
	
	private Object delegate_AsSet(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AsSet(e,arg,e.getObj(func.args[0],arg));
	}
	
	private Object delegate_CreateSet(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CreateSet(e,arg);
	}
	
	private int delegate_GetSetSize(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetSetSize(e,arg,(SSet<Object>)e.getObj(func.args[0],arg));
	}
	
	private void delegate_SetAdd(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_SetAdd(e,arg,(SSet<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private boolean delegate_SetRemove(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_SetRemove(e,arg,(SSet<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_SetClear(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_SetClear(e,arg,(SSet<Object>)e.getObj(func.args[0],arg));
	}
	
	private boolean delegate_SetContains(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_SetContains(e,arg,(SSet<Object>)e.getObj(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private boolean delegate_SetIsEmpty(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_SetIsEmpty(e,arg,(SSet<Object>)e.getObj(func.args[0],arg));
	}
	
	private void delegate_OpenTrigger(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_OpenTrigger(e,arg,e.getInt(func.args[0],arg));
	}
	
	private void delegate_CloseTrigger(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_CloseTrigger(e,arg,e.getInt(func.args[0],arg));
	}
	
	private void delegate_RunTrigger(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_RunTrigger(e,arg,e.getInt(func.args[0],arg));
	}
	
	private void delegate_RunTriggerAbs(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_RunTriggerAbs(e,arg,e.getInt(func.args[0],arg));
	}
	
	private void delegate_Wait(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_Wait(e,arg,e.getInt(func.args[0],arg));
	}
	
	private void delegate_WaitUtil(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_WaitUtil(e,arg,e.getBoolean(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
	private void delegate_Print(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_Print(e,arg,e.getString(func.args[0],arg));
	}
	
	private void delegate_ForLoop(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_ForLoop(e,arg,e.getInt(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_BreakTrigger(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_BreakTrigger(e,arg);
	}
	
	private void delegate_BreakLoop(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_BreakLoop(e,arg);
	}
	
	private void delegate_ContinueLoop(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_ContinueLoop(e,arg);
	}
	
	private void delegate_SetSVar(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_SetSVar(e,arg,e.getString(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private void delegate_RemoveSVar(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_RemoveSVar(e,arg,e.getString(func.args[0],arg));
	}
	
	private void delegate_SetLocalVar(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_SetLocalVar(e,arg,e.getString(func.args[0],arg),e.getObj(func.args[1],arg));
	}
	
	private int delegate_GetEventIntArgs(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetEventIntArgs(e,arg,e.getInt(func.args[0],arg));
	}
	
	private boolean delegate_GetEventBoolArgs(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetEventBoolArgs(e,arg,e.getInt(func.args[0],arg));
	}
	
	private String delegate_GetEventStringArgs(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetEventStringArgs(e,arg,e.getInt(func.args[0],arg));
	}
	
	private boolean delegate_UnitIsAlive(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_UnitIsAlive((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg));
	}
	
	private boolean delegate_IsPosEnabled(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_IsPosEnabled((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg),(PosData)e.getObj(func.args[1],arg));
	}
	
	private Object delegate_TriggerUnit(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_TriggerUnit((SceneTriggerExecutor)e,arg);
	}
	
	private float delegate_PosDistance(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_PosDistance((SceneTriggerExecutor)e,arg,(PosData)e.getObj(func.args[0],arg),(PosData)e.getObj(func.args[1],arg));
	}
	
	private int delegate_GetUnitFightUnitID(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetUnitFightUnitID((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg));
	}
	
	private Object delegate_GetUnit(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetUnit((SceneTriggerExecutor)e,arg,e.getInt(func.args[0],arg));
	}
	
	private Object delegate_AsUnit(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AsUnit((SceneTriggerExecutor)e,arg,e.getObj(func.args[0],arg));
	}
	
	private Object delegate_CreateAddPuppet(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_CreateAddPuppet((SceneTriggerExecutor)e,arg,e.getInt(func.args[0],arg),e.getInt(func.args[1],arg),(PosData)e.getObj(func.args[2],arg),(Unit)e.getObj(func.args[3],arg),e.getInt(func.args[4],arg));
	}
	
	private Object delegate_AsPos(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AsPos((SceneTriggerExecutor)e,arg,e.getObj(func.args[0],arg));
	}
	
	private Object delegate_GetUnitPos(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetUnitPos((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg));
	}
	
	private Object delegate_GetScenePlacePos(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetScenePlacePos((SceneTriggerExecutor)e,arg,e.getInt(func.args[0],arg));
	}
	
	private Object delegate_PosPolar(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_PosPolar((SceneTriggerExecutor)e,arg,(PosData)e.getObj(func.args[0],arg),e.getFloat(func.args[1],arg),(DirData)e.getObj(func.args[2],arg));
	}
	
	private Object delegate_AddPos(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddPos((SceneTriggerExecutor)e,arg,(PosData)e.getObj(func.args[0],arg),(PosData)e.getObj(func.args[1],arg));
	}
	
	private Object delegate_AsDir(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AsDir((SceneTriggerExecutor)e,arg,e.getObj(func.args[0],arg));
	}
	
	private Object delegate_GetUnitDir(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_GetUnitDir((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg));
	}
	
	private Object delegate_AddDir(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddDir((SceneTriggerExecutor)e,arg,(DirData)e.getObj(func.args[0],arg),(DirData)e.getObj(func.args[1],arg));
	}
	
	private Object delegate_AddDirFloat(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		return _m.func_AddDirFloat((SceneTriggerExecutor)e,arg,(DirData)e.getObj(func.args[0],arg),e.getFloat(func.args[1],arg));
	}
	
	private void delegate_KillUnit(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_KillUnit((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg));
	}
	
	private void delegate_RemoveUnit(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_RemoveUnit((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg));
	}
	
	private void delegate_MoveToUnit(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_MoveToUnit((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg),(Unit)e.getObj(func.args[1],arg),e.getFloat(func.args[2],arg));
	}
	
	private void delegate_UnitAddAttribute(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_UnitAddAttribute((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg),e.getInt(func.args[1],arg),e.getInt(func.args[2],arg));
	}
	
	private void delegate_UnitAddHpPercent(TriggerExecutor e,TriggerFuncData func,TriggerArg arg)
	{
		_m.func_UnitAddHpPercent((SceneTriggerExecutor)e,arg,(Unit)e.getObj(func.args[0],arg),e.getInt(func.args[1],arg));
	}
	
}
