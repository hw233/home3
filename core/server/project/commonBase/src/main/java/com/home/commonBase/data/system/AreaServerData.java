package com.home.commonBase.data.system;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 区服服务器数据(generated by shine) */
public class AreaServerData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.AreaServer;
	
	/** 区服ID */
	public int areaID;
	
	/** 负载值 */
	public int load;
	
	/** 是否限制注册 */
	public boolean isLimitRegist;
	
	/** 实际服ID(补充) */
	public int gameID;
	
	/** 区服名 */
	public String name="";
	
	public AreaServerData()
	{
		_dataID=BaseDataType.AreaServer;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AreaServerData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.areaID=stream.readInt();
		
		this.load=stream.readInt();
		
		this.isLimitRegist=stream.readBoolean();
		
		this.name=stream.readUTF();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.areaID);
		
		stream.writeInt(this.load);
		
		stream.writeBoolean(this.isLimitRegist);
		
		stream.writeUTF(this.name);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.areaID=stream.readInt();
		
		this.load=stream.readInt();
		
		this.isLimitRegist=stream.readBoolean();
		
		this.name=stream.readUTF();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.areaID);
		
		stream.writeInt(this.load);
		
		stream.writeBoolean(this.isLimitRegist);
		
		stream.writeUTF(this.name);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof AreaServerData))
			return;
		
		AreaServerData mData=(AreaServerData)data;
		
		this.areaID=mData.areaID;
		this.load=mData.load;
		this.isLimitRegist=mData.isLimitRegist;
		this.name=mData.name;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof AreaServerData))
			return;
		
		AreaServerData mData=(AreaServerData)data;
		
		this.areaID=mData.areaID;
		
		this.load=mData.load;
		
		this.isLimitRegist=mData.isLimitRegist;
		
		this.name=mData.name;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		AreaServerData mData=(AreaServerData)data;
		if(this.areaID!=mData.areaID)
			return false;
		
		if(this.load!=mData.load)
			return false;
		
		if(this.isLimitRegist!=mData.isLimitRegist)
			return false;
		
		if(!this.name.equals(mData.name))
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("areaID");
		writer.sb.append(':');
		writer.sb.append(this.areaID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("load");
		writer.sb.append(':');
		writer.sb.append(this.load);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isLimitRegist");
		writer.sb.append(':');
		writer.sb.append(this.isLimitRegist);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("name");
		writer.sb.append(':');
		writer.sb.append(this.name);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.areaID=0;
		this.load=0;
		this.isLimitRegist=false;
		this.name="";
	}
	
}
