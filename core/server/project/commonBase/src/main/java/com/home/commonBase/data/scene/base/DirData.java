package com.home.commonBase.data.scene.base;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.global.Global;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;
import com.home.shine.utils.MathUtils;

/** 朝向数据(generated by shine) */
public class DirData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Dir;
	
	/** 俯仰轴朝向传输(弧度)(yz平面)(x轴) */
	public int idirectionX;
	
	/** 平面朝向传输(弧度)(xz平面)(y轴)(0为x轴正向,计算用) */
	public int idirection;
	
	/** 朝向(弧度) */
	public float direction;
	
	/** 朝向X(弧度) */
	public float directionX;
	
	public DirData()
	{
		_dataID=BaseDataType.Dir;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "DirData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.idirection=stream.readInt();
		
		this.idirectionX=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.idirection);
		
		stream.writeInt(this.idirectionX);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.idirection=stream.readInt();
		
		this.idirectionX=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.idirection);
		
		stream.writeInt(this.idirectionX);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof DirData))
			return;
		
		DirData mData=(DirData)data;
		
		this.idirection=mData.idirection;
		this.idirectionX=mData.idirectionX;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof DirData))
			return;
		
		DirData mData=(DirData)data;
		
		this.idirection=mData.idirection;
		
		this.idirectionX=mData.idirectionX;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		DirData mData=(DirData)data;
		if(this.idirection!=mData.idirection)
			return false;
		
		if(this.idirectionX!=mData.idirectionX)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("idirection");
		writer.sb.append(':');
		writer.sb.append(this.idirection);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("idirectionX");
		writer.sb.append(':');
		writer.sb.append(this.idirectionX);
		
		writer.writeEnter();
	}
	
	@Override
	protected void beforeWrite()
	{
		super.beforeWrite();
		
		float scale;
		idirection=Math.round(direction*(scale=Global.directionSendScale));
		idirectionX=Math.round(directionX * scale);
	}
	
	@Override
	protected void afterRead()
	{
		super.afterRead();
		
		float scale;
		direction=idirection/(scale=Global.directionSendScale);
		directionX=idirectionX/scale;
	}
	
	/** 是否相等 */
	public boolean isEquals(DirData dir)
	{
		return MathUtils.floatEquals(direction,dir.direction) && MathUtils.floatEquals(directionX,dir.directionX);
	}
	
	/** 拷贝位置 */
	public void copyDir(DirData dir)
	{
		this.direction=dir.direction;
		this.directionX=dir.directionX;
	}
	
	@Override
	public void clear()
	{
		this.direction=0f;
		this.directionX=0f;
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.idirection=0;
		this.idirectionX=0;
	}
	
}
