package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.SMap;

/** 技能步骤等级表(generated by shine) */
public class SkillStepLevelConfig extends BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<SkillStepLevelConfig> _dic;
	
	/** 技能id */
	public int id;
	
	/** 步骤 */
	public int step;
	
	/** 等级 */
	public int level;
	
	/** 帧动作组 */
	public int[][] frameActions;
	
	/** 获取 */
	public static SkillStepLevelConfig get(int id,int step,int level)
	{
		return _dic.get((long)id << 24 | (long)step << 16 | (long)level);
	}
	
	/** 设置字典 */
	public static void setDic(LongObjectMap<SkillStepLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static LongObjectMap<SkillStepLevelConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.step=stream.readByte();
		
		this.level=stream.readShort();
		
		int frameActionsLen=stream.readLen();
		if(this.frameActions==null || this.frameActions.length!=frameActionsLen)
		{
			this.frameActions=new int[frameActionsLen][];
		}
		int[][] frameActionsT=this.frameActions;
		for(int frameActionsI=0;frameActionsI<frameActionsLen;++frameActionsI)
		{
			int[] frameActionsV;
			int frameActionsVLen=stream.readLen();
			frameActionsV=new int[frameActionsVLen];
			int[] frameActionsVT=frameActionsV;
			for(int frameActionsVI=0;frameActionsVI<frameActionsVLen;++frameActionsVI)
			{
				int frameActionsVV;
				frameActionsVV=stream.readInt();
				
				frameActionsVT[frameActionsVI]=frameActionsVV;
			}
			
			frameActionsT[frameActionsI]=frameActionsV;
		}
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeByte(this.step);
		
		stream.writeShort(this.level);
		
		if(this.frameActions!=null)
		{
			int[][] frameActionsT=this.frameActions;
			stream.writeLen(frameActionsT.length);
			for(int frameActionsVI=0,frameActionsVLen=frameActionsT.length;frameActionsVI<frameActionsVLen;++frameActionsVI)
			{
				int[] frameActionsV=frameActionsT[frameActionsVI];
				if(frameActionsV!=null)
				{
					int[] frameActionsVT=frameActionsV;
					stream.writeLen(frameActionsVT.length);
					for(int frameActionsVVI=0,frameActionsVVLen=frameActionsVT.length;frameActionsVVI<frameActionsVVLen;++frameActionsVVI)
					{
						int frameActionsVV=frameActionsVT[frameActionsVVI];
						stream.writeInt(frameActionsVV);
						
					}
				}
				else
				{
					nullObjError("frameActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("frameActions");
		}
		
	}
	
}
