package com.home.commonBase.data.social;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.system.PlayerWorkData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 查询角色abs事务(generated by shine) */
public class QueryPlayerAWData extends PlayerWorkData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.QueryPlayerAW;
	
	/** 发起者角色ID */
	public long sendPlayerID;
	
	/** 查询参数组 */
	public int[] args;
	
	/** 查询类型 */
	public int type;
	
	public QueryPlayerAWData()
	{
		_dataID=BaseDataType.QueryPlayerAW;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "QueryPlayerAWData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.sendPlayerID=stream.readLong();
		
		this.type=stream.readInt();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.length!=argsLen)
			{
				this.args=new int[argsLen];
			}
			int[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV;
				argsV=stream.readInt();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeLong(this.sendPlayerID);
		
		stream.writeInt(this.type);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			int[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				int argsV=argsT[argsVI];
				stream.writeInt(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.sendPlayerID=stream.readLong();
		
		this.type=stream.readInt();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.length!=argsLen)
			{
				this.args=new int[argsLen];
			}
			int[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV;
				argsV=stream.readInt();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeLong(this.sendPlayerID);
		
		stream.writeInt(this.type);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			int[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				int argsV=argsT[argsVI];
				stream.writeInt(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof QueryPlayerAWData))
			return;
		
		QueryPlayerAWData mData=(QueryPlayerAWData)data;
		
		this.sendPlayerID=mData.sendPlayerID;
		this.type=mData.type;
		this.args=mData.args;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof QueryPlayerAWData))
			return;
		
		QueryPlayerAWData mData=(QueryPlayerAWData)data;
		
		this.sendPlayerID=mData.sendPlayerID;
		
		this.type=mData.type;
		
		if(mData.args!=null)
		{
			int[] argsR=mData.args;
			int argsLen=argsR.length;
			if(this.args==null || this.args.length!=argsLen)
			{
				this.args=new int[argsLen];
			}
			BytesControl.arrayCopy(mData.args,this.args,argsLen);
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		QueryPlayerAWData mData=(QueryPlayerAWData)data;
		if(this.sendPlayerID!=mData.sendPlayerID)
			return false;
		
		if(this.type!=mData.type)
			return false;
		
		if(mData.args!=null)
		{
			if(this.args==null)
				return false;
			if(this.args.length!=mData.args.length)
				return false;
			int[] argsT=this.args;
			int[] argsR=mData.args;
			int argsLen=argsT.length;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsU=argsT[argsI];
				int argsV=argsR[argsI];
				if(argsU!=argsV)
					return false;
				
			}
		}
		else
		{
			if(this.args!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("sendPlayerID");
		writer.sb.append(':');
		writer.sb.append(this.sendPlayerID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("args");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.args!=null)
		{
			int[] argsT=this.args;
			int argsLen=argsT.length;
			writer.sb.append('(');
			writer.sb.append(argsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.append(argsI);
				writer.sb.append(':');
				writer.sb.append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.sendPlayerID=0L;
		this.type=0;
		this.args=null;
	}
	
}
