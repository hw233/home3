package com.home.commonBase.part.gameGlobal.data;
import com.home.commonBase.constlist.generate.GameGlobalPartDataType;
import com.home.commonBase.data.system.GameGlobalWorkData;
import com.home.commonBase.data.system.SaveVersionData;
import com.home.commonBase.data.system.WorkReceiverData;
import com.home.commonBase.data.system.WorkSenderData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongIntMap;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 系统数据(generated by shine) */
public class GameSystemPartData extends BaseData
{
	/** 版本数据 */
	public SaveVersionData version;
	
	/** 数据类型ID */
	public static final int dataID=GameGlobalPartDataType.GameSystem;
	
	/** playerID自增序号组(key:createAreaID原区ID) */
	public IntIntMap playerIndexDic;
	
	/** 开服时间 */
	public long serverStartTime;
	
	/** 下一个0点时刻 */
	public long nextDailyTime;
	
	/** 事务发起者数据 */
	public WorkSenderData workSenderData;
	
	/** 全服离线事务组(废弃) */
	public SList<GameGlobalWorkData> offlineWorks;
	
	/** 临时角色记录(为了debug) */
	public LongIntMap tempPlayerRecord;
	
	/** 事务接收者数据 */
	public WorkReceiverData workReceiverData;
	
	/** 服务器运行序号(每次起服+1) */
	public int serverRunIndex;
	
	public GameSystemPartData()
	{
		_dataID=GameGlobalPartDataType.GameSystem;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData versionT=stream.readDataFullNotNull();
		if(versionT!=null)
		{
			if(versionT instanceof SaveVersionData)
			{
				this.version=(SaveVersionData)versionT;
			}
			else
			{
				this.version=new SaveVersionData();
				if(!(versionT.getClass().isAssignableFrom(SaveVersionData.class)))
				{
					stream.throwTypeReadError(SaveVersionData.class,versionT.getClass());
				}
				this.version.shadowCopy(versionT);
			}
		}
		else
		{
			this.version=null;
		}
		
		int playerIndexDicLen=stream.readLen();
		if(this.playerIndexDic!=null)
		{
			this.playerIndexDic.clear();
			this.playerIndexDic.ensureCapacity(playerIndexDicLen);
		}
		else
		{
			this.playerIndexDic=new IntIntMap(playerIndexDicLen);
		}
		
		IntIntMap playerIndexDicT=this.playerIndexDic;
		for(int playerIndexDicI=playerIndexDicLen-1;playerIndexDicI>=0;--playerIndexDicI)
		{
			int playerIndexDicK;
			int playerIndexDicV;
			playerIndexDicK=stream.readInt();
			
			playerIndexDicV=stream.readInt();
			
			playerIndexDicT.put(playerIndexDicK,playerIndexDicV);
		}
		
		this.serverStartTime=stream.readLong();
		
		this.nextDailyTime=stream.readLong();
		
		this.serverRunIndex=stream.readInt();
		
		this.workSenderData=new WorkSenderData();
		this.workSenderData.readBytesFull(stream);
		
		int offlineWorksLen=stream.readLen();
		if(this.offlineWorks!=null)
		{
			this.offlineWorks.clear();
			this.offlineWorks.ensureCapacity(offlineWorksLen);
		}
		else
		{
			this.offlineWorks=new SList<GameGlobalWorkData>(GameGlobalWorkData[]::new,offlineWorksLen);
		}
		
		SList<GameGlobalWorkData> offlineWorksT=this.offlineWorks;
		for(int offlineWorksI=offlineWorksLen-1;offlineWorksI>=0;--offlineWorksI)
		{
			GameGlobalWorkData offlineWorksV;
			BaseData offlineWorksVT=stream.readDataFullNotNull();
			if(offlineWorksVT!=null)
			{
				if(offlineWorksVT instanceof GameGlobalWorkData)
				{
					offlineWorksV=(GameGlobalWorkData)offlineWorksVT;
				}
				else
				{
					offlineWorksV=new GameGlobalWorkData();
					if(!(offlineWorksVT.getClass().isAssignableFrom(GameGlobalWorkData.class)))
					{
						stream.throwTypeReadError(GameGlobalWorkData.class,offlineWorksVT.getClass());
					}
					offlineWorksV.shadowCopy(offlineWorksVT);
				}
			}
			else
			{
				offlineWorksV=null;
			}
			
			offlineWorksT.add(offlineWorksV);
		}
		
		int tempPlayerRecordLen=stream.readLen();
		if(this.tempPlayerRecord!=null)
		{
			this.tempPlayerRecord.clear();
			this.tempPlayerRecord.ensureCapacity(tempPlayerRecordLen);
		}
		else
		{
			this.tempPlayerRecord=new LongIntMap(tempPlayerRecordLen);
		}
		
		LongIntMap tempPlayerRecordT=this.tempPlayerRecord;
		for(int tempPlayerRecordI=tempPlayerRecordLen-1;tempPlayerRecordI>=0;--tempPlayerRecordI)
		{
			long tempPlayerRecordK;
			int tempPlayerRecordV;
			tempPlayerRecordK=stream.readLong();
			
			tempPlayerRecordV=stream.readInt();
			
			tempPlayerRecordT.put(tempPlayerRecordK,tempPlayerRecordV);
		}
		
		this.workReceiverData=new WorkReceiverData();
		this.workReceiverData.readBytesFull(stream);
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.version!=null)
		{
			stream.writeDataFullNotNull(this.version);
		}
		else
		{
			nullObjError("version");
		}
		
		if(this.playerIndexDic!=null)
		{
			stream.writeLen(this.playerIndexDic.size());
			if(!this.playerIndexDic.isEmpty())
			{
				int playerIndexDicKFreeValue=this.playerIndexDic.getFreeValue();
				int[] playerIndexDicKTable=this.playerIndexDic.getTable();
				for(int playerIndexDicKI=playerIndexDicKTable.length-2;playerIndexDicKI>=0;playerIndexDicKI-=2)
				{
					if(playerIndexDicKTable[playerIndexDicKI]!=playerIndexDicKFreeValue)
					{
						int playerIndexDicK=playerIndexDicKTable[playerIndexDicKI];
						int playerIndexDicV=playerIndexDicKTable[playerIndexDicKI+1];
						stream.writeInt(playerIndexDicK);
						
						stream.writeInt(playerIndexDicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("playerIndexDic");
		}
		
		stream.writeLong(this.serverStartTime);
		
		stream.writeLong(this.nextDailyTime);
		
		stream.writeInt(this.serverRunIndex);
		
		if(this.workSenderData!=null)
		{
			this.workSenderData.writeBytesFull(stream);
		}
		else
		{
			nullObjError("workSenderData");
		}
		
		if(this.offlineWorks!=null)
		{
			stream.writeLen(this.offlineWorks.size());
			if(!this.offlineWorks.isEmpty())
			{
				Object[] offlineWorksVValues=this.offlineWorks.getValues();
				for(int offlineWorksVI=0,offlineWorksVLen=this.offlineWorks.length();offlineWorksVI<offlineWorksVLen;++offlineWorksVI)
				{
					GameGlobalWorkData offlineWorksV=(GameGlobalWorkData)offlineWorksVValues[offlineWorksVI];
					if(offlineWorksV!=null)
					{
						stream.writeDataFullNotNull(offlineWorksV);
					}
					else
					{
						nullObjError("offlineWorksV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("offlineWorks");
		}
		
		if(this.tempPlayerRecord!=null)
		{
			stream.writeLen(this.tempPlayerRecord.size());
			if(!this.tempPlayerRecord.isEmpty())
			{
				long tempPlayerRecordKFreeValue=this.tempPlayerRecord.getFreeValue();
				long[] tempPlayerRecordKKeys=this.tempPlayerRecord.getKeys();
				int[] tempPlayerRecordVValues=this.tempPlayerRecord.getValues();
				for(int tempPlayerRecordKI=tempPlayerRecordKKeys.length-1;tempPlayerRecordKI>=0;--tempPlayerRecordKI)
				{
					long tempPlayerRecordK=tempPlayerRecordKKeys[tempPlayerRecordKI];
					if(tempPlayerRecordK!=tempPlayerRecordKFreeValue)
					{
						int tempPlayerRecordV=tempPlayerRecordVValues[tempPlayerRecordKI];
						stream.writeLong(tempPlayerRecordK);
						
						stream.writeInt(tempPlayerRecordV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("tempPlayerRecord");
		}
		
		if(this.workReceiverData!=null)
		{
			this.workReceiverData.writeBytesFull(stream);
		}
		else
		{
			nullObjError("workReceiverData");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.version=(SaveVersionData)stream.readDataSimpleNotNull();
		
		int playerIndexDicLen=stream.readLen();
		if(this.playerIndexDic!=null)
		{
			this.playerIndexDic.clear();
			this.playerIndexDic.ensureCapacity(playerIndexDicLen);
		}
		else
		{
			this.playerIndexDic=new IntIntMap(playerIndexDicLen);
		}
		
		IntIntMap playerIndexDicT=this.playerIndexDic;
		for(int playerIndexDicI=playerIndexDicLen-1;playerIndexDicI>=0;--playerIndexDicI)
		{
			int playerIndexDicK;
			int playerIndexDicV;
			playerIndexDicK=stream.readInt();
			
			playerIndexDicV=stream.readInt();
			
			playerIndexDicT.put(playerIndexDicK,playerIndexDicV);
		}
		
		this.serverStartTime=stream.readLong();
		
		this.nextDailyTime=stream.readLong();
		
		this.serverRunIndex=stream.readInt();
		
		this.workSenderData=new WorkSenderData();
		this.workSenderData.readBytesSimple(stream);
		
		int offlineWorksLen=stream.readLen();
		if(this.offlineWorks!=null)
		{
			this.offlineWorks.clear();
			this.offlineWorks.ensureCapacity(offlineWorksLen);
		}
		else
		{
			this.offlineWorks=new SList<GameGlobalWorkData>(GameGlobalWorkData[]::new,offlineWorksLen);
		}
		
		SList<GameGlobalWorkData> offlineWorksT=this.offlineWorks;
		for(int offlineWorksI=offlineWorksLen-1;offlineWorksI>=0;--offlineWorksI)
		{
			GameGlobalWorkData offlineWorksV;
			offlineWorksV=(GameGlobalWorkData)stream.readDataSimpleNotNull();
			
			offlineWorksT.add(offlineWorksV);
		}
		
		int tempPlayerRecordLen=stream.readLen();
		if(this.tempPlayerRecord!=null)
		{
			this.tempPlayerRecord.clear();
			this.tempPlayerRecord.ensureCapacity(tempPlayerRecordLen);
		}
		else
		{
			this.tempPlayerRecord=new LongIntMap(tempPlayerRecordLen);
		}
		
		LongIntMap tempPlayerRecordT=this.tempPlayerRecord;
		for(int tempPlayerRecordI=tempPlayerRecordLen-1;tempPlayerRecordI>=0;--tempPlayerRecordI)
		{
			long tempPlayerRecordK;
			int tempPlayerRecordV;
			tempPlayerRecordK=stream.readLong();
			
			tempPlayerRecordV=stream.readInt();
			
			tempPlayerRecordT.put(tempPlayerRecordK,tempPlayerRecordV);
		}
		
		this.workReceiverData=new WorkReceiverData();
		this.workReceiverData.readBytesSimple(stream);
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.version!=null)
		{
			stream.writeDataSimpleNotNull(this.version);
		}
		else
		{
			nullObjError("version");
		}
		
		if(this.playerIndexDic!=null)
		{
			stream.writeLen(this.playerIndexDic.size());
			if(!this.playerIndexDic.isEmpty())
			{
				int playerIndexDicKFreeValue=this.playerIndexDic.getFreeValue();
				int[] playerIndexDicKTable=this.playerIndexDic.getTable();
				for(int playerIndexDicKI=playerIndexDicKTable.length-2;playerIndexDicKI>=0;playerIndexDicKI-=2)
				{
					if(playerIndexDicKTable[playerIndexDicKI]!=playerIndexDicKFreeValue)
					{
						int playerIndexDicK=playerIndexDicKTable[playerIndexDicKI];
						int playerIndexDicV=playerIndexDicKTable[playerIndexDicKI+1];
						stream.writeInt(playerIndexDicK);
						
						stream.writeInt(playerIndexDicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("playerIndexDic");
		}
		
		stream.writeLong(this.serverStartTime);
		
		stream.writeLong(this.nextDailyTime);
		
		stream.writeInt(this.serverRunIndex);
		
		if(this.workSenderData!=null)
		{
			this.workSenderData.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("workSenderData");
		}
		
		if(this.offlineWorks!=null)
		{
			stream.writeLen(this.offlineWorks.size());
			if(!this.offlineWorks.isEmpty())
			{
				Object[] offlineWorksVValues=this.offlineWorks.getValues();
				for(int offlineWorksVI=0,offlineWorksVLen=this.offlineWorks.length();offlineWorksVI<offlineWorksVLen;++offlineWorksVI)
				{
					GameGlobalWorkData offlineWorksV=(GameGlobalWorkData)offlineWorksVValues[offlineWorksVI];
					if(offlineWorksV!=null)
					{
						stream.writeDataSimpleNotNull(offlineWorksV);
					}
					else
					{
						nullObjError("offlineWorksV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("offlineWorks");
		}
		
		if(this.tempPlayerRecord!=null)
		{
			stream.writeLen(this.tempPlayerRecord.size());
			if(!this.tempPlayerRecord.isEmpty())
			{
				long tempPlayerRecordKFreeValue=this.tempPlayerRecord.getFreeValue();
				long[] tempPlayerRecordKKeys=this.tempPlayerRecord.getKeys();
				int[] tempPlayerRecordVValues=this.tempPlayerRecord.getValues();
				for(int tempPlayerRecordKI=tempPlayerRecordKKeys.length-1;tempPlayerRecordKI>=0;--tempPlayerRecordKI)
				{
					long tempPlayerRecordK=tempPlayerRecordKKeys[tempPlayerRecordKI];
					if(tempPlayerRecordK!=tempPlayerRecordKFreeValue)
					{
						int tempPlayerRecordV=tempPlayerRecordVValues[tempPlayerRecordKI];
						stream.writeLong(tempPlayerRecordK);
						
						stream.writeInt(tempPlayerRecordV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("tempPlayerRecord");
		}
		
		if(this.workReceiverData!=null)
		{
			this.workReceiverData.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("workReceiverData");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof GameSystemPartData))
			return;
		
		GameSystemPartData mData=(GameSystemPartData)data;
		
		this.version=mData.version;
		this.playerIndexDic=mData.playerIndexDic;
		this.serverStartTime=mData.serverStartTime;
		this.nextDailyTime=mData.nextDailyTime;
		this.serverRunIndex=mData.serverRunIndex;
		this.workSenderData=mData.workSenderData;
		this.offlineWorks=mData.offlineWorks;
		this.tempPlayerRecord=mData.tempPlayerRecord;
		this.workReceiverData=mData.workReceiverData;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof GameSystemPartData))
			return;
		
		GameSystemPartData mData=(GameSystemPartData)data;
		
		if(mData.version!=null)
		{
			this.version=(SaveVersionData)mData.version.clone();
		}
		else
		{
			this.version=null;
			nullObjError("version");
		}
		
		if(mData.playerIndexDic!=null)
		{
			if(this.playerIndexDic!=null)
			{
				this.playerIndexDic.clear();
				this.playerIndexDic.ensureCapacity(mData.playerIndexDic.size());
			}
			else
			{
				this.playerIndexDic=new IntIntMap(mData.playerIndexDic.size());
			}
			
			IntIntMap playerIndexDicT=this.playerIndexDic;
			if(!mData.playerIndexDic.isEmpty())
			{
				int playerIndexDicKFreeValue=mData.playerIndexDic.getFreeValue();
				int[] playerIndexDicKTable=mData.playerIndexDic.getTable();
				for(int playerIndexDicKI=playerIndexDicKTable.length-2;playerIndexDicKI>=0;playerIndexDicKI-=2)
				{
					if(playerIndexDicKTable[playerIndexDicKI]!=playerIndexDicKFreeValue)
					{
						int playerIndexDicK=playerIndexDicKTable[playerIndexDicKI];
						int playerIndexDicV=playerIndexDicKTable[playerIndexDicKI+1];
						int playerIndexDicW;
						int playerIndexDicU;
						playerIndexDicW=playerIndexDicK;
						
						playerIndexDicU=playerIndexDicV;
						
						playerIndexDicT.put(playerIndexDicW,playerIndexDicU);
					}
				}
			}
		}
		else
		{
			this.playerIndexDic=null;
			nullObjError("playerIndexDic");
		}
		
		this.serverStartTime=mData.serverStartTime;
		
		this.nextDailyTime=mData.nextDailyTime;
		
		this.serverRunIndex=mData.serverRunIndex;
		
		if(mData.workSenderData!=null)
		{
			this.workSenderData=new WorkSenderData();
			this.workSenderData.copy(mData.workSenderData);
		}
		else
		{
			this.workSenderData=null;
			nullObjError("workSenderData");
		}
		
		if(mData.offlineWorks!=null)
		{
			if(this.offlineWorks!=null)
			{
				this.offlineWorks.clear();
				this.offlineWorks.ensureCapacity(mData.offlineWorks.size());
			}
			else
			{
				this.offlineWorks=new SList<GameGlobalWorkData>(GameGlobalWorkData[]::new,mData.offlineWorks.size());
			}
			
			SList<GameGlobalWorkData> offlineWorksT=this.offlineWorks;
			if(!mData.offlineWorks.isEmpty())
			{
				Object[] offlineWorksVValues=mData.offlineWorks.getValues();
				for(int offlineWorksVI=0,offlineWorksVLen=mData.offlineWorks.length();offlineWorksVI<offlineWorksVLen;++offlineWorksVI)
				{
					GameGlobalWorkData offlineWorksV=(GameGlobalWorkData)offlineWorksVValues[offlineWorksVI];
					GameGlobalWorkData offlineWorksU;
					if(offlineWorksV!=null)
					{
						offlineWorksU=(GameGlobalWorkData)offlineWorksV.clone();
					}
					else
					{
						offlineWorksU=null;
						nullObjError("offlineWorksU");
					}
					
					offlineWorksT.add(offlineWorksU);
				}
			}
		}
		else
		{
			this.offlineWorks=null;
			nullObjError("offlineWorks");
		}
		
		if(mData.tempPlayerRecord!=null)
		{
			if(this.tempPlayerRecord!=null)
			{
				this.tempPlayerRecord.clear();
				this.tempPlayerRecord.ensureCapacity(mData.tempPlayerRecord.size());
			}
			else
			{
				this.tempPlayerRecord=new LongIntMap(mData.tempPlayerRecord.size());
			}
			
			LongIntMap tempPlayerRecordT=this.tempPlayerRecord;
			if(!mData.tempPlayerRecord.isEmpty())
			{
				long tempPlayerRecordKFreeValue=mData.tempPlayerRecord.getFreeValue();
				long[] tempPlayerRecordKKeys=mData.tempPlayerRecord.getKeys();
				int[] tempPlayerRecordVValues=mData.tempPlayerRecord.getValues();
				for(int tempPlayerRecordKI=tempPlayerRecordKKeys.length-1;tempPlayerRecordKI>=0;--tempPlayerRecordKI)
				{
					long tempPlayerRecordK=tempPlayerRecordKKeys[tempPlayerRecordKI];
					if(tempPlayerRecordK!=tempPlayerRecordKFreeValue)
					{
						int tempPlayerRecordV=tempPlayerRecordVValues[tempPlayerRecordKI];
						long tempPlayerRecordW;
						int tempPlayerRecordU;
						tempPlayerRecordW=tempPlayerRecordK;
						
						tempPlayerRecordU=tempPlayerRecordV;
						
						tempPlayerRecordT.put(tempPlayerRecordW,tempPlayerRecordU);
					}
				}
			}
		}
		else
		{
			this.tempPlayerRecord=null;
			nullObjError("tempPlayerRecord");
		}
		
		if(mData.workReceiverData!=null)
		{
			this.workReceiverData=new WorkReceiverData();
			this.workReceiverData.copy(mData.workReceiverData);
		}
		else
		{
			this.workReceiverData=null;
			nullObjError("workReceiverData");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		GameSystemPartData mData=(GameSystemPartData)data;
		if(mData.version!=null)
		{
			if(this.version==null)
				return false;
			if(!this.version.dataEquals(mData.version))
				return false;
		}
		else
		{
			if(this.version!=null)
				return false;
		}
		
		if(mData.playerIndexDic!=null)
		{
			if(this.playerIndexDic==null)
				return false;
			if(this.playerIndexDic.size()!=mData.playerIndexDic.size())
				return false;
			IntIntMap playerIndexDicR=mData.playerIndexDic;
			if(!this.playerIndexDic.isEmpty())
			{
				int playerIndexDicKFreeValue=this.playerIndexDic.getFreeValue();
				int[] playerIndexDicKTable=this.playerIndexDic.getTable();
				for(int playerIndexDicKI=playerIndexDicKTable.length-2;playerIndexDicKI>=0;playerIndexDicKI-=2)
				{
					if(playerIndexDicKTable[playerIndexDicKI]!=playerIndexDicKFreeValue)
					{
						int playerIndexDicK=playerIndexDicKTable[playerIndexDicKI];
						int playerIndexDicV=playerIndexDicKTable[playerIndexDicKI+1];
						int playerIndexDicU=playerIndexDicR.get(playerIndexDicK);
						if(playerIndexDicV!=playerIndexDicU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.playerIndexDic!=null)
				return false;
		}
		
		if(this.serverStartTime!=mData.serverStartTime)
			return false;
		
		if(this.nextDailyTime!=mData.nextDailyTime)
			return false;
		
		if(this.serverRunIndex!=mData.serverRunIndex)
			return false;
		
		if(mData.workSenderData!=null)
		{
			if(this.workSenderData==null)
				return false;
			if(!this.workSenderData.dataEquals(mData.workSenderData))
				return false;
		}
		else
		{
			if(this.workSenderData!=null)
				return false;
		}
		
		if(mData.offlineWorks!=null)
		{
			if(this.offlineWorks==null)
				return false;
			if(this.offlineWorks.size()!=mData.offlineWorks.size())
				return false;
			SList<GameGlobalWorkData> offlineWorksT=this.offlineWorks;
			SList<GameGlobalWorkData> offlineWorksR=mData.offlineWorks;
			int offlineWorksLen=offlineWorksT.size();
			for(int offlineWorksI=0;offlineWorksI<offlineWorksLen;++offlineWorksI)
			{
				GameGlobalWorkData offlineWorksU=offlineWorksT.get(offlineWorksI);
				GameGlobalWorkData offlineWorksV=offlineWorksR.get(offlineWorksI);
				if(offlineWorksV!=null)
				{
					if(offlineWorksU==null)
						return false;
					if(!offlineWorksU.dataEquals(offlineWorksV))
						return false;
				}
				else
				{
					if(offlineWorksU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.offlineWorks!=null)
				return false;
		}
		
		if(mData.tempPlayerRecord!=null)
		{
			if(this.tempPlayerRecord==null)
				return false;
			if(this.tempPlayerRecord.size()!=mData.tempPlayerRecord.size())
				return false;
			LongIntMap tempPlayerRecordR=mData.tempPlayerRecord;
			if(!this.tempPlayerRecord.isEmpty())
			{
				long tempPlayerRecordKFreeValue=this.tempPlayerRecord.getFreeValue();
				long[] tempPlayerRecordKKeys=this.tempPlayerRecord.getKeys();
				int[] tempPlayerRecordVValues=this.tempPlayerRecord.getValues();
				for(int tempPlayerRecordKI=tempPlayerRecordKKeys.length-1;tempPlayerRecordKI>=0;--tempPlayerRecordKI)
				{
					long tempPlayerRecordK=tempPlayerRecordKKeys[tempPlayerRecordKI];
					if(tempPlayerRecordK!=tempPlayerRecordKFreeValue)
					{
						int tempPlayerRecordV=tempPlayerRecordVValues[tempPlayerRecordKI];
						int tempPlayerRecordU=tempPlayerRecordR.get(tempPlayerRecordK);
						if(tempPlayerRecordV!=tempPlayerRecordU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.tempPlayerRecord!=null)
				return false;
		}
		
		if(mData.workReceiverData!=null)
		{
			if(this.workReceiverData==null)
				return false;
			if(!this.workReceiverData.dataEquals(mData.workReceiverData))
				return false;
		}
		else
		{
			if(this.workReceiverData!=null)
				return false;
		}
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "GameSystemPartData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("version");
		writer.sb.append(':');
		if(this.version!=null)
		{
			this.version.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SaveVersionData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("playerIndexDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.playerIndexDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.playerIndexDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.playerIndexDic.isEmpty())
			{
				int playerIndexDicKFreeValue=this.playerIndexDic.getFreeValue();
				int[] playerIndexDicKTable=this.playerIndexDic.getTable();
				for(int playerIndexDicKI=playerIndexDicKTable.length-2;playerIndexDicKI>=0;playerIndexDicKI-=2)
				{
					if(playerIndexDicKTable[playerIndexDicKI]!=playerIndexDicKFreeValue)
					{
						int playerIndexDicK=playerIndexDicKTable[playerIndexDicKI];
						int playerIndexDicV=playerIndexDicKTable[playerIndexDicKI+1];
						writer.writeTabs();
						writer.sb.append(playerIndexDicK);
						
						writer.sb.append(':');
						writer.sb.append(playerIndexDicV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("serverStartTime");
		writer.sb.append(':');
		writer.sb.append(this.serverStartTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("nextDailyTime");
		writer.sb.append(':');
		writer.sb.append(this.nextDailyTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("serverRunIndex");
		writer.sb.append(':');
		writer.sb.append(this.serverRunIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("workSenderData");
		writer.sb.append(':');
		if(this.workSenderData!=null)
		{
			this.workSenderData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("WorkSenderData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("offlineWorks");
		writer.sb.append(':');
		writer.sb.append("List<GameGlobalWorkData>");
		if(this.offlineWorks!=null)
		{
			SList<GameGlobalWorkData> offlineWorksT=this.offlineWorks;
			int offlineWorksLen=offlineWorksT.size();
			writer.sb.append('(');
			writer.sb.append(offlineWorksLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int offlineWorksI=0;offlineWorksI<offlineWorksLen;++offlineWorksI)
			{
				GameGlobalWorkData offlineWorksV=offlineWorksT.get(offlineWorksI);
				writer.writeTabs();
				writer.sb.append(offlineWorksI);
				writer.sb.append(':');
				if(offlineWorksV!=null)
				{
					offlineWorksV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("GameGlobalWorkData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("tempPlayerRecord");
		writer.sb.append(':');
		writer.sb.append("Map<long,int>");
		if(this.tempPlayerRecord!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.tempPlayerRecord.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.tempPlayerRecord.isEmpty())
			{
				long tempPlayerRecordKFreeValue=this.tempPlayerRecord.getFreeValue();
				long[] tempPlayerRecordKKeys=this.tempPlayerRecord.getKeys();
				int[] tempPlayerRecordVValues=this.tempPlayerRecord.getValues();
				for(int tempPlayerRecordKI=tempPlayerRecordKKeys.length-1;tempPlayerRecordKI>=0;--tempPlayerRecordKI)
				{
					long tempPlayerRecordK=tempPlayerRecordKKeys[tempPlayerRecordKI];
					if(tempPlayerRecordK!=tempPlayerRecordKFreeValue)
					{
						int tempPlayerRecordV=tempPlayerRecordVValues[tempPlayerRecordKI];
						writer.writeTabs();
						writer.sb.append(tempPlayerRecordK);
						
						writer.sb.append(':');
						writer.sb.append(tempPlayerRecordV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("workReceiverData");
		writer.sb.append(':');
		if(this.workReceiverData!=null)
		{
			this.workReceiverData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("WorkReceiverData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.version=new SaveVersionData();
		this.version.initDefault();
		this.playerIndexDic=new IntIntMap();
		this.workSenderData=new WorkSenderData();
		this.workSenderData.initDefault();
		this.offlineWorks=new SList<GameGlobalWorkData>(GameGlobalWorkData[]::new);
		this.tempPlayerRecord=new LongIntMap();
		this.workReceiverData=new WorkReceiverData();
		this.workReceiverData.initDefault();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.version=null;
		this.playerIndexDic=null;
		this.serverStartTime=0L;
		this.nextDailyTime=0L;
		this.serverRunIndex=0;
		this.workSenderData=null;
		this.offlineWorks=null;
		this.tempPlayerRecord=null;
		this.workReceiverData=null;
	}
	
}
