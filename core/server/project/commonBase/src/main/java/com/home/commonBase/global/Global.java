package com.home.commonBase.global;
import com.home.commonBase.config.other.RecastSettingConfig;
import com.home.commonBase.global.GlobalReadData;
import com.home.shine.ctrl.Ctrl;

/** 全局配置表(generated by shine) */
public class Global
{
	/** 每个账号一个区服可拥有的角色数目(合服不影响每个被合区服的拥有角色数目) */
	public static int ownPlayerNum;
	
	/** 每个game服最大承载人数(在线) */
	public static int gameMaxBearNum;
	
	/** 每个game服设计承载人数(在线) */
	public static int gameDesignBearNum;
	
	/** 每个区最大注册人数 */
	public static int areaMaxRegistNum;
	
	/** 每个区服设计注册人数 */
	public static int areaDesignRegistNum;
	
	/** 角色名字上限数目(机器字) */
	public static int playerNameLength;
	
	/** 角色名字是否使用区服ID作为前缀,如(s1.张三) */
	public static boolean isNameUseAreaIDAsFront;
	
	/** 角色名字是否可以重名 */
	public static boolean canPlayerNameRepeat;
	
	/** 客户端离线事务，每日可修改时间的次数 */
	public static int clientOfflineWorkTimeChangeDailyNum;
	
	/** 显示网络延迟圈圈最大超时时间(ms) */
	public static int showNetDelayMaxTime;
	
	/** 显示网络延迟圈圈最小间隔(ms) */
	public static int showNetDelayMinTime;
	
	/** 激活码长度 */
	public static int activationCodeLength;
	
	/** 激活码是否使用批次(每批次每个玩家只能用一次) */
	public static boolean activationCodeUseBatch;
	
	/** 游戏信息日志保留时间(玩家自身)(day) */
	public static int infoLogKeepTime;
	
	/** 游戏信息日志保留数目(玩家自身) */
	public static int infoLogKeepNum;
	
	/** 好友功能启用双向好友(否则单向) */
	public static boolean useOvonicFriend;
	
	/** 大Float数字每段位数(3为千,4为万) */
	public static int bigFloatWei;
	
	/** 翻页显示插件每页CD(s) */
	public static int pageToolShowCD;
	
	/** 朝向推送缩放比率 */
	public static float directionSendScale;
	
	/** 坐标推送缩放比率 */
	public static float posSendScale;
	
	/** 保持当前属性百分比在上限改变前(否则就是保持当前值不变) */
	public static boolean keepCurrentPercentAtMaxChange;
	
	/** 单位移动XY和的最大允许误差(超过此值即拉回) */
	public static float unitMovePosMaxDeviation;
	
	/** 距离验证允许误差 */
	public static float distanceCheckDeviation;
	
	/** 移动速度最大值 */
	public static int moveSpeedMax;
	
	/** 移动速度最小值 */
	public static int moveSpeedMin;
	
	/** 施法速度最大值 */
	public static int castSpeedMax;
	
	/** 施法速度最小值 */
	public static int castSpeedMin;
	
	/** 攻击速度最大值 */
	public static int attackSpeedMax;
	
	/** 攻击速度最小值 */
	public static int attackSpeedMin;
	
	/** 使用移动速度比率(使用值=数值*比率)(每秒多少米) */
	public static float useMoveSpeedRatio;
	
	/** 命中公式参数0(基础命中率) */
	public static float hitRateArg0;
	
	/** 暴击公式参数0(基础暴击率) */
	public static float critArg0;
	
	/** 暴击默认伤害比率 */
	public static float critDamageBaseRatio;
	
	/** 子弹最长保留时间(s) */
	public static int bulletMaxLastTime;
	
	/** 场景保留时间(s) */
	public static int sceneKeepTime;
	
	/** 攻击范围背向延伸距离(米) */
	public static float attackScopeBackLength;
	
	/** 攻击范围默认攻击高度(米) */
	public static float attackScopeDefaultHeight;
	
	/** 帧同步缓存帧数 */
	public static int frameSyncCacheFrames;
	
	/** 徘徊等待时间最大值(s) */
	public static int wanderWaitTimeMax;
	
	/** 徘徊等待时间最小值(s) */
	public static int wanderWaitTimeMin;
	
	/** 徘徊移动半径(米) */
	public static float wanderMoveRadius;
	
	/** 匹配成功后最长等待确认时间(s) */
	public static int matchWaitTime;
	
	/** 阻止网络延迟时间(ms) */
	public static int preventNetDelayTime;
	
	/** 客户端移动消息发送最短间隔(ms) */
	public static int clientMoveSendMinDelay;
	
	/** 朝向移动预测最短距离(米) */
	public static float moveDirForecastMinDistance;
	
	/** 朝向移动预测时间(ms) */
	public static int moveDirForecastTime;
	
	/** 朝向移动最小间隔弧度 */
	public static float moveDirMinAngleT;
	
	/** 地图阻挡尺寸(米) */
	public static float mapBlockSize;
	
	/** 地图阻挡尺寸(米) */
	public static float mapBlockSizeN;
	
	/** 怪物退回时每秒回血千分比 */
	public static int monsterBackAddHPPercent;
	
	/** 地图SamplePosition半径(米) */
	public static float mapSamplePositionRadius;
	
	/** 光环buff更新时间(ms) */
	public static int ringLightBuffRefreshTime;
	
	/** 光环buff单次持续时间(ms) */
	public static int ringLightBuffLastTime;
	
	/** 唤醒同伴间隔时间(ms) */
	public static int wakeUpCompanionDelayTime;
	
	/** 战斗状态单次持续时间(ms) */
	public static int fightStateOnceLastTime;
	
	/** 地图阻挡尺寸一半(米) */
	public static float mapBlockSizeHalf;
	
	/** 场景分线角色限制数目(当此值大于0时,视为启用按人数分线策略,并且sceenLineNum值无效) */
	public static int sceneLinePlayerLimitNum;
	
	/** 单位AI受击判定最短间隔(ms) */
	public static int unitBeAttackDelay;
	
	/** 单位切换基础成本 */
	public static float unitSwitchFixedCost;
	
	/** 单位切换基础距离 */
	public static float unitSwitchBaseDistance;
	
	/** 单位切换距离成本系数 */
	public static float unitSwitchDistanceCost;
	
	/** 单位切换仇恨成本系数 */
	public static float unitSwitchHateCost;
	
	/** 单位仇恨伤害千分比系数 */
	public static float unitHateDamagePercentRatio;
	
	/** 朝向移动预测发送消息间隔(ms) */
	public static int moveDirSendDelay;
	
	/** 场景分线数目(仅在sceneLinePlayerLimitNum为0时有意义) */
	public static int sceneLineNum;
	
	/** 出生主城ID */
	public static int bornTownID;
	
	/** 出生主城位置ID */
	public static int bornTownPosID;
	
	/** 场景AOI灯塔尺寸 */
	public static int aoiTowerSize;
	
	/** aoi可视单位上限 */
	public static int aoiSeeMax;
	
	/** 自动分线场景，单场景容量 */
	public static int autoLinedSceneCapacity;
	
	/** 自动分线场景，预备超时时间(s) */
	public static int autoLinedScenePreTimeOut;
	
	/** 拾取范围半径(米) */
	public static float pickUpRadius;
	
	/** 自增属性计算间隔(ms) */
	public static int increaseAttributeDelay;
	
	/** 拾取范围半径平方(米) */
	public static float pickUpRadiusSq;
	
	/** 拾取范围检测半径平方(米) */
	public static float pickUpRadiusCheckSq;
	
	/** 等级上限 */
	public static int levelMax;
	
	/** 摄像机触摸缩放速度 */
	public static float cameraScaleSpeed;
	
	/** 摄像机Y轴旋转速度 */
	public static float cameraRotateSpeedY;
	
	/** 摄像机X轴旋转速度 */
	public static float cameraRotateSpeedX;
	
	/** 摄像机默认距离 */
	public static float cameraDefaultDistance;
	
	/** 摄像机鼠标滚轮缩放速度 */
	public static float cameraWheelSpeed;
	
	/** 摄像机缓动时间(s) */
	public static float cameraTweenTime;
	
	/** 摄像机大小视角(角度) */
	public static float cameraMaxAxisXAngle;
	
	/** 摄像机最小视角(角度) */
	public static float cameraMinAxisXAngle;
	
	/** 摄像机2.5D视角(角度) */
	public static float camera25DAngle;
	
	/** 摄像机最长距离(与目标距离) */
	public static float cameraMaxDistance;
	
	/** 摄像机最近距离(与目标距离) */
	public static float cameraMinDistance;
	
	/** 单位转身XY和最小值(小于此值不转身) */
	public static float unitTurnXYSumMin;
	
	/** 主背包格子数(初始) */
	public static int mainBagGridNum;
	
	/** 邮件每页显示数目 */
	public static int mailPageEachShowNum;
	
	/** 邮件最长保存时间(天) */
	public static int mailSaveMaxTime;
	
	/** 任务配置变更版本号 */
	public static int questConfigChangeVersion;
	
	/** 邮件最长保存时间(ms) */
	public static long mailSaveMaxTimeT;
	
	/** 玩家发送的邮件ID */
	public static int playerMailID;
	
	/** 任务可视等级差 */
	public static int questCanSeeLevelD;
	
	/** 工会的玩家群id(<=0则为无工会) */
	public static int unionRoleGroupID;
	
	/** 组队的玩家群id(<=0则为无组队功能) */
	public static int teamRoleGroupID;
	
	/** 组队共享半径(米)(0为无限) */
	public static float teamShareRadius;
	
	/** 客户端随机种子数目 */
	public static int clientRandomSeedNum;
	
	/** 组队共享半径(米)(0为无限) */
	public static float teamShareRadiusT;
	
	/** 好友黑名单上限数目(0为无上限) */
	public static int friendBlackListMaxNum;
	
	/** 好友上限数目(0为无上限) */
	public static int friendMaxNum;
	
	/** 申请添加好友上限数目(0为无上限) */
	public static int applyAddFriendMaxNum;
	
	/** 好友申请最长保存时间(天) */
	public static int friendApplySaveMaxTime;
	
	/** 好友申请最长保存时间(ms) */
	public static long friendApplySaveMaxTimeT;
	
	/** 邮件最多保存数目 */
	public static int mailSaveMaxNum;
	
	/** 大float位值 */
	public static double bigFloatWeiValue;
	
	/** 大float剩余位值 */
	public static double bigFloatWeiLastValue;
	
	/** 大float最大rank差值 */
	public static int bigFloatRankMaxD;
	
	/** recast配置 */
	public static RecastSettingConfig recastConfig;
	
	/** 伤害值是否使用实际伤害值 */
	public static boolean damageValueUseRealDamage;
	
	/** 宠物同一id是否唯一 */
	public static boolean isPetUnique;
	
	/** 宠物是否需要装备功能 */
	public static boolean isPetNeedEquip;
	
	/** 从流读取 */
	public static void readFromData(GlobalReadData data)
	{
		ownPlayerNum=data.ownPlayerNum;
		gameDesignBearNum=data.gameDesignBearNum;
		gameMaxBearNum=data.gameMaxBearNum;
		areaDesignRegistNum=data.areaDesignRegistNum;
		areaMaxRegistNum=data.areaMaxRegistNum;
		playerNameLength=data.playerNameLength;
		isNameUseAreaIDAsFront=data.isNameUseAreaIDAsFront;
		canPlayerNameRepeat=data.canPlayerNameRepeat;
		clientOfflineWorkTimeChangeDailyNum=data.clientOfflineWorkTimeChangeDailyNum;
		showNetDelayMinTime=data.showNetDelayMinTime;
		showNetDelayMaxTime=data.showNetDelayMaxTime;
		activationCodeLength=data.activationCodeLength;
		activationCodeUseBatch=data.activationCodeUseBatch;
		infoLogKeepTime=data.infoLogKeepTime;
		infoLogKeepNum=data.infoLogKeepNum;
		clientRandomSeedNum=data.clientRandomSeedNum;
		pageToolShowCD=data.pageToolShowCD;
		bigFloatWei=data.bigFloatWei;
		posSendScale=data.posSendScale;
		directionSendScale=data.directionSendScale;
		keepCurrentPercentAtMaxChange=data.keepCurrentPercentAtMaxChange;
		unitTurnXYSumMin=data.unitTurnXYSumMin;
		unitMovePosMaxDeviation=data.unitMovePosMaxDeviation;
		distanceCheckDeviation=data.distanceCheckDeviation;
		moveSpeedMin=data.moveSpeedMin;
		moveSpeedMax=data.moveSpeedMax;
		attackSpeedMin=data.attackSpeedMin;
		attackSpeedMax=data.attackSpeedMax;
		castSpeedMin=data.castSpeedMin;
		castSpeedMax=data.castSpeedMax;
		useMoveSpeedRatio=data.useMoveSpeedRatio;
		hitRateArg0=data.hitRateArg0;
		critArg0=data.critArg0;
		critDamageBaseRatio=data.critDamageBaseRatio;
		bulletMaxLastTime=data.bulletMaxLastTime;
		sceneKeepTime=data.sceneKeepTime;
		attackScopeBackLength=data.attackScopeBackLength;
		attackScopeDefaultHeight=data.attackScopeDefaultHeight;
		frameSyncCacheFrames=data.frameSyncCacheFrames;
		wanderWaitTimeMin=data.wanderWaitTimeMin;
		wanderWaitTimeMax=data.wanderWaitTimeMax;
		wanderMoveRadius=data.wanderMoveRadius;
		preventNetDelayTime=data.preventNetDelayTime;
		increaseAttributeDelay=data.increaseAttributeDelay;
		clientMoveSendMinDelay=data.clientMoveSendMinDelay;
		moveDirSendDelay=data.moveDirSendDelay;
		moveDirForecastTime=data.moveDirForecastTime;
		moveDirForecastMinDistance=data.moveDirForecastMinDistance;
		mapBlockSize=data.mapBlockSize;
		mapSamplePositionRadius=data.mapSamplePositionRadius;
		monsterBackAddHPPercent=data.monsterBackAddHPPercent;
		ringLightBuffRefreshTime=data.ringLightBuffRefreshTime;
		ringLightBuffLastTime=data.ringLightBuffLastTime;
		fightStateOnceLastTime=data.fightStateOnceLastTime;
		wakeUpCompanionDelayTime=data.wakeUpCompanionDelayTime;
		damageValueUseRealDamage=data.damageValueUseRealDamage;
		unitBeAttackDelay=data.unitBeAttackDelay;
		unitHateDamagePercentRatio=data.unitHateDamagePercentRatio;
		unitSwitchHateCost=data.unitSwitchHateCost;
		unitSwitchDistanceCost=data.unitSwitchDistanceCost;
		unitSwitchBaseDistance=data.unitSwitchBaseDistance;
		unitSwitchFixedCost=data.unitSwitchFixedCost;
		sceneLineNum=data.sceneLineNum;
		sceneLinePlayerLimitNum=data.sceneLinePlayerLimitNum;
		bornTownID=data.bornTownID;
		bornTownPosID=data.bornTownPosID;
		matchWaitTime=data.matchWaitTime;
		aoiTowerSize=data.aoiTowerSize;
		aoiSeeMax=data.aoiSeeMax;
		pickUpRadius=data.pickUpRadius;
		autoLinedSceneCapacity=data.autoLinedSceneCapacity;
		autoLinedScenePreTimeOut=data.autoLinedScenePreTimeOut;
		cameraMinDistance=data.cameraMinDistance;
		cameraMaxDistance=data.cameraMaxDistance;
		camera25DAngle=data.camera25DAngle;
		cameraMinAxisXAngle=data.cameraMinAxisXAngle;
		cameraMaxAxisXAngle=data.cameraMaxAxisXAngle;
		cameraTweenTime=data.cameraTweenTime;
		cameraWheelSpeed=data.cameraWheelSpeed;
		cameraDefaultDistance=data.cameraDefaultDistance;
		cameraRotateSpeedX=data.cameraRotateSpeedX;
		cameraRotateSpeedY=data.cameraRotateSpeedY;
		cameraScaleSpeed=data.cameraScaleSpeed;
		levelMax=data.levelMax;
		mainBagGridNum=data.mainBagGridNum;
		mailPageEachShowNum=data.mailPageEachShowNum;
		mailSaveMaxNum=data.mailSaveMaxNum;
		mailSaveMaxTime=data.mailSaveMaxTime;
		playerMailID=data.playerMailID;
		questCanSeeLevelD=data.questCanSeeLevelD;
		questConfigChangeVersion=data.questConfigChangeVersion;
		useOvonicFriend=data.useOvonicFriend;
		friendMaxNum=data.friendMaxNum;
		friendBlackListMaxNum=data.friendBlackListMaxNum;
		applyAddFriendMaxNum=data.applyAddFriendMaxNum;
		friendApplySaveMaxTime=data.friendApplySaveMaxTime;
		unionRoleGroupID=data.unionRoleGroupID;
		teamRoleGroupID=data.teamRoleGroupID;
		teamShareRadius=data.teamShareRadius;
		isPetUnique=data.isPetUnique;
		isPetNeedEquip=data.isPetNeedEquip;
	}
	
	/** 读取数据后 */
	public static void afterReadConfig()
	{
		mailSaveMaxTimeT=(long)mailSaveMaxTime*24*60*60*1000;
		friendApplySaveMaxTimeT=(long)friendApplySaveMaxTime * 24 * 60 * 60 * 1000;
		
		bigFloatWeiValue=Math.pow(10,bigFloatWei);
		bigFloatWeiLastValue=Math.pow(10,9-bigFloatWei);//1个int
		bigFloatRankMaxD=300/bigFloatWei;//不用按308算
		
		pickUpRadiusSq=pickUpRadius*pickUpRadius;
		pickUpRadiusCheckSq=pickUpRadius+distanceCheckDeviation;
		pickUpRadiusCheckSq*=pickUpRadiusCheckSq;
		
		mapBlockSizeN=1/mapBlockSize;
		mapBlockSizeHalf=mapBlockSize/2;
		
		teamShareRadiusT=teamShareRadius*teamShareRadius;
	}
	
	/** 全部读取后 */
	public static void afterReadConfigAll()
	{
		if (Global.clientRandomSeedNum == 0)
		{
			Ctrl.throwError("Global.clientRandomSeedNum不能为0");
		}
	}
	
}
