package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.SMap;

/** 技能等级表(generated by shine) */
public class SkillLevelConfig extends BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<SkillLevelConfig> _dic;
	
	/** 技能id */
	public int id;
	
	/** 产生冷却ID */
	public int[] bringCDs;
	
	/** 等级 */
	public int level;
	
	/** 技能消耗 */
	public DIntData[] cost;
	
	/** 施法距离附加变量ID */
	public int useDistanceVar;
	
	/** 吟唱读条id */
	public int singBarID;
	
	/** 引导/持续时间 */
	public int lastTime;
	
	/** 施法距离 */
	public float useDistance;
	
	/** 获取 */
	public static SkillLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/** 设置字典 */
	public static void setDic(LongObjectMap<SkillLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static LongObjectMap<SkillLevelConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		int bringCDsLen=stream.readLen();
		if(this.bringCDs==null || this.bringCDs.length!=bringCDsLen)
		{
			this.bringCDs=new int[bringCDsLen];
		}
		int[] bringCDsT=this.bringCDs;
		for(int bringCDsI=0;bringCDsI<bringCDsLen;++bringCDsI)
		{
			int bringCDsV;
			bringCDsV=stream.readInt();
			
			bringCDsT[bringCDsI]=bringCDsV;
		}
		
		int costLen=stream.readLen();
		if(this.cost==null || this.cost.length!=costLen)
		{
			this.cost=new DIntData[costLen];
		}
		DIntData[] costT=this.cost;
		for(int costI=0;costI<costLen;++costI)
		{
			DIntData costV;
			costV=new DIntData();
			costV.readBytesSimple(stream);
			
			costT[costI]=costV;
		}
		
		this.useDistance=stream.readFloat();
		
		this.useDistanceVar=stream.readInt();
		
		this.singBarID=stream.readInt();
		
		this.lastTime=stream.readInt();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
	
	}
	
	/** 获取 */
	public static SkillLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		if(this.bringCDs!=null)
		{
			int[] bringCDsT=this.bringCDs;
			stream.writeLen(bringCDsT.length);
			for(int bringCDsVI=0,bringCDsVLen=bringCDsT.length;bringCDsVI<bringCDsVLen;++bringCDsVI)
			{
				int bringCDsV=bringCDsT[bringCDsVI];
				stream.writeInt(bringCDsV);
				
			}
		}
		else
		{
			nullObjError("bringCDs");
		}
		
		if(this.cost!=null)
		{
			DIntData[] costT=this.cost;
			stream.writeLen(costT.length);
			for(int costVI=0,costVLen=costT.length;costVI<costVLen;++costVI)
			{
				DIntData costV=costT[costVI];
				if(costV!=null)
				{
					costV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("costV");
				}
				
			}
		}
		else
		{
			nullObjError("cost");
		}
		
		stream.writeFloat(this.useDistance);
		
		stream.writeInt(this.useDistanceVar);
		
		stream.writeInt(this.singBarID);
		
		stream.writeInt(this.lastTime);
		
	}
	
}
