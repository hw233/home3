package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 任务目标表(generated by shine) */
public class TaskConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<TaskConfig> _dic;
	
	/** 类型(就是arg[0]) */
	public int type;
	
	/** 类型及参数 */
	public int[] args;
	
	/** 初始化完成数(默认为0) */
	public int initNum;
	
	/** 限制条件 */
	public int[][] conditions;
	
	/** 需要完成数 */
	public int needNum;
	
	/** id */
	public int id;
	
	/** 获取 */
	public static TaskConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<TaskConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<TaskConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.length!=argsLen)
		{
			this.args=new int[argsLen];
		}
		int[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			int argsV;
			argsV=stream.readInt();
			
			argsT[argsI]=argsV;
		}
		
		this.needNum=stream.readInt();
		
		this.initNum=stream.readInt();
		
		int conditionsLen=stream.readLen();
		if(this.conditions==null || this.conditions.length!=conditionsLen)
		{
			this.conditions=new int[conditionsLen][];
		}
		int[][] conditionsT=this.conditions;
		for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
		{
			int[] conditionsV;
			int conditionsVLen=stream.readLen();
			conditionsV=new int[conditionsVLen];
			int[] conditionsVT=conditionsV;
			for(int conditionsVI=0;conditionsVI<conditionsVLen;++conditionsVI)
			{
				int conditionsVV;
				conditionsVV=stream.readInt();
				
				conditionsVT[conditionsVI]=conditionsVV;
			}
			
			conditionsT[conditionsI]=conditionsV;
		}
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		type=args[0];
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.args!=null)
		{
			int[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				int argsV=argsT[argsVI];
				stream.writeInt(argsV);
				
			}
		}
		else
		{
			nullObjError("args");
		}
		
		stream.writeInt(this.needNum);
		
		stream.writeInt(this.initNum);
		
		if(this.conditions!=null)
		{
			int[][] conditionsT=this.conditions;
			stream.writeLen(conditionsT.length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				int[] conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					int[] conditionsVT=conditionsV;
					stream.writeLen(conditionsVT.length);
					for(int conditionsVVI=0,conditionsVVLen=conditionsVT.length;conditionsVVI<conditionsVVLen;++conditionsVVI)
					{
						int conditionsVV=conditionsVT[conditionsVVI];
						stream.writeInt(conditionsVV);
						
					}
				}
				else
				{
					nullObjError("conditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("conditions");
		}
		
	}
	
}
