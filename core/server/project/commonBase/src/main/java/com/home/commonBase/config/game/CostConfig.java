package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.IntObjectMap;

/** 消耗表(generated by shine) */
public class CostConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<CostConfig> _dic;
	
	/** id */
	public int id;
	
	/** 消耗货币组(固定) */
	public DIntData[] currency;
	
	/** 消耗物品组(固定) */
	public DIntData[] items;
	
	/** 获取 */
	public static CostConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<CostConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<CostConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int currencyLen=stream.readLen();
		if(this.currency==null || this.currency.length!=currencyLen)
		{
			this.currency=new DIntData[currencyLen];
		}
		DIntData[] currencyT=this.currency;
		for(int currencyI=0;currencyI<currencyLen;++currencyI)
		{
			DIntData currencyV;
			currencyV=new DIntData();
			currencyV.readBytesSimple(stream);
			
			currencyT[currencyI]=currencyV;
		}
		
		int itemsLen=stream.readLen();
		if(this.items==null || this.items.length!=itemsLen)
		{
			this.items=new DIntData[itemsLen];
		}
		DIntData[] itemsT=this.items;
		for(int itemsI=0;itemsI<itemsLen;++itemsI)
		{
			DIntData itemsV;
			itemsV=new DIntData();
			itemsV.readBytesSimple(stream);
			
			itemsT[itemsI]=itemsV;
		}
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.currency!=null)
		{
			DIntData[] currencyT=this.currency;
			stream.writeLen(currencyT.length);
			for(int currencyVI=0,currencyVLen=currencyT.length;currencyVI<currencyVLen;++currencyVI)
			{
				DIntData currencyV=currencyT[currencyVI];
				if(currencyV!=null)
				{
					currencyV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("currencyV");
				}
				
			}
		}
		else
		{
			nullObjError("currency");
		}
		
		if(this.items!=null)
		{
			DIntData[] itemsT=this.items;
			stream.writeLen(itemsT.length);
			for(int itemsVI=0,itemsVLen=itemsT.length;itemsVI<itemsVLen;++itemsVI)
			{
				DIntData itemsV=itemsT[itemsVI];
				if(itemsV!=null)
				{
					itemsV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("itemsV");
				}
				
			}
		}
		else
		{
			nullObjError("items");
		}
		
	}
	
}
