package com.home.commonBase.part.gameGlobal.data;
import com.home.commonBase.constlist.generate.GameGlobalPartDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 通用功能数据组(generated by shine) */
public class GameFuncPartData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=GameGlobalPartDataType.GameFunc;
	
	/** roleGroupID自增序号组(key:createAreaID原区ID) */
	public IntIntMap roleGroupIndexDic;
	
	/** 插件数据组(key1:funcToolType,key2:funcID) */
	public IntObjectMap<IntObjectMap<FuncToolData>> funcTools;
	
	public GameFuncPartData()
	{
		_dataID=GameGlobalPartDataType.GameFunc;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "GameFuncPartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			int funcToolsLen=stream.readLen();
			if(this.funcTools!=null)
			{
				this.funcTools.clear();
				this.funcTools.ensureCapacity(funcToolsLen);
			}
			else
			{
				this.funcTools=new IntObjectMap<IntObjectMap<FuncToolData>>(IntObjectMap[]::new,funcToolsLen);
			}
			
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsT=this.funcTools;
			for(int funcToolsI=funcToolsLen-1;funcToolsI>=0;--funcToolsI)
			{
				int funcToolsK;
				IntObjectMap<FuncToolData> funcToolsV;
				funcToolsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					int funcToolsVLen=stream.readLen();
					funcToolsV=new IntObjectMap<FuncToolData>(FuncToolData[]::new,funcToolsVLen);
					IntObjectMap<FuncToolData> funcToolsVT=funcToolsV;
					for(int funcToolsVI=funcToolsVLen-1;funcToolsVI>=0;--funcToolsVI)
					{
						int funcToolsVK;
						FuncToolData funcToolsVV;
						funcToolsVK=stream.readInt();
						
						if(stream.readBoolean())
						{
							BaseData funcToolsVVT=stream.readDataFullNotNull();
							if(funcToolsVVT!=null)
							{
								if(funcToolsVVT instanceof FuncToolData)
								{
									funcToolsVV=(FuncToolData)funcToolsVVT;
								}
								else
								{
									funcToolsVV=new FuncToolData();
									if(!(funcToolsVVT.getClass().isAssignableFrom(FuncToolData.class)))
									{
										stream.throwTypeReadError(FuncToolData.class,funcToolsVVT.getClass());
									}
									funcToolsVV.shadowCopy(funcToolsVVT);
								}
							}
							else
							{
								funcToolsVV=null;
							}
						}
						else
						{
							funcToolsVV=null;
						}
						
						funcToolsVT.put(funcToolsVK,funcToolsVV);
					}
				}
				else
				{
					funcToolsV=null;
				}
				
				funcToolsT.put(funcToolsK,funcToolsV);
			}
		}
		else
		{
			this.funcTools=null;
		}
		
		int roleGroupIndexDicLen=stream.readLen();
		if(this.roleGroupIndexDic!=null)
		{
			this.roleGroupIndexDic.clear();
			this.roleGroupIndexDic.ensureCapacity(roleGroupIndexDicLen);
		}
		else
		{
			this.roleGroupIndexDic=new IntIntMap(roleGroupIndexDicLen);
		}
		
		IntIntMap roleGroupIndexDicT=this.roleGroupIndexDic;
		for(int roleGroupIndexDicI=roleGroupIndexDicLen-1;roleGroupIndexDicI>=0;--roleGroupIndexDicI)
		{
			int roleGroupIndexDicK;
			int roleGroupIndexDicV;
			roleGroupIndexDicK=stream.readInt();
			
			roleGroupIndexDicV=stream.readInt();
			
			roleGroupIndexDicT.put(roleGroupIndexDicK,roleGroupIndexDicV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.funcTools!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.funcTools.size());
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				Object[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=(IntObjectMap<FuncToolData>)funcToolsVValues[funcToolsKI];
						stream.writeInt(funcToolsK);
						
						if(funcToolsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeLen(funcToolsV.size());
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								Object[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=(FuncToolData)funcToolsVVValues[funcToolsVKI];
										stream.writeInt(funcToolsVK);
										
										if(funcToolsVV!=null)
										{
											stream.writeBoolean(true);
											stream.writeDataFullNotNull(funcToolsVV);
										}
										else
										{
											stream.writeBoolean(false);
										}
										
									}
								}
							}
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.roleGroupIndexDic!=null)
		{
			stream.writeLen(this.roleGroupIndexDic.size());
			if(!this.roleGroupIndexDic.isEmpty())
			{
				int roleGroupIndexDicKFreeValue=this.roleGroupIndexDic.getFreeValue();
				int[] roleGroupIndexDicKTable=this.roleGroupIndexDic.getTable();
				for(int roleGroupIndexDicKI=roleGroupIndexDicKTable.length-2;roleGroupIndexDicKI>=0;roleGroupIndexDicKI-=2)
				{
					if(roleGroupIndexDicKTable[roleGroupIndexDicKI]!=roleGroupIndexDicKFreeValue)
					{
						int roleGroupIndexDicK=roleGroupIndexDicKTable[roleGroupIndexDicKI];
						int roleGroupIndexDicV=roleGroupIndexDicKTable[roleGroupIndexDicKI+1];
						stream.writeInt(roleGroupIndexDicK);
						
						stream.writeInt(roleGroupIndexDicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("roleGroupIndexDic");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		if(stream.readBoolean())
		{
			int funcToolsLen=stream.readLen();
			if(this.funcTools!=null)
			{
				this.funcTools.clear();
				this.funcTools.ensureCapacity(funcToolsLen);
			}
			else
			{
				this.funcTools=new IntObjectMap<IntObjectMap<FuncToolData>>(IntObjectMap[]::new,funcToolsLen);
			}
			
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsT=this.funcTools;
			for(int funcToolsI=funcToolsLen-1;funcToolsI>=0;--funcToolsI)
			{
				int funcToolsK;
				IntObjectMap<FuncToolData> funcToolsV;
				funcToolsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					int funcToolsVLen=stream.readLen();
					funcToolsV=new IntObjectMap<FuncToolData>(FuncToolData[]::new,funcToolsVLen);
					IntObjectMap<FuncToolData> funcToolsVT=funcToolsV;
					for(int funcToolsVI=funcToolsVLen-1;funcToolsVI>=0;--funcToolsVI)
					{
						int funcToolsVK;
						FuncToolData funcToolsVV;
						funcToolsVK=stream.readInt();
						
						if(stream.readBoolean())
						{
							funcToolsVV=(FuncToolData)stream.readDataSimpleNotNull();
						}
						else
						{
							funcToolsVV=null;
						}
						
						funcToolsVT.put(funcToolsVK,funcToolsVV);
					}
				}
				else
				{
					funcToolsV=null;
				}
				
				funcToolsT.put(funcToolsK,funcToolsV);
			}
		}
		else
		{
			this.funcTools=null;
		}
		
		int roleGroupIndexDicLen=stream.readLen();
		if(this.roleGroupIndexDic!=null)
		{
			this.roleGroupIndexDic.clear();
			this.roleGroupIndexDic.ensureCapacity(roleGroupIndexDicLen);
		}
		else
		{
			this.roleGroupIndexDic=new IntIntMap(roleGroupIndexDicLen);
		}
		
		IntIntMap roleGroupIndexDicT=this.roleGroupIndexDic;
		for(int roleGroupIndexDicI=roleGroupIndexDicLen-1;roleGroupIndexDicI>=0;--roleGroupIndexDicI)
		{
			int roleGroupIndexDicK;
			int roleGroupIndexDicV;
			roleGroupIndexDicK=stream.readInt();
			
			roleGroupIndexDicV=stream.readInt();
			
			roleGroupIndexDicT.put(roleGroupIndexDicK,roleGroupIndexDicV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.funcTools!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.funcTools.size());
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				Object[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=(IntObjectMap<FuncToolData>)funcToolsVValues[funcToolsKI];
						stream.writeInt(funcToolsK);
						
						if(funcToolsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeLen(funcToolsV.size());
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								Object[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=(FuncToolData)funcToolsVVValues[funcToolsVKI];
										stream.writeInt(funcToolsVK);
										
										if(funcToolsVV!=null)
										{
											stream.writeBoolean(true);
											stream.writeDataSimpleNotNull(funcToolsVV);
										}
										else
										{
											stream.writeBoolean(false);
										}
										
									}
								}
							}
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.roleGroupIndexDic!=null)
		{
			stream.writeLen(this.roleGroupIndexDic.size());
			if(!this.roleGroupIndexDic.isEmpty())
			{
				int roleGroupIndexDicKFreeValue=this.roleGroupIndexDic.getFreeValue();
				int[] roleGroupIndexDicKTable=this.roleGroupIndexDic.getTable();
				for(int roleGroupIndexDicKI=roleGroupIndexDicKTable.length-2;roleGroupIndexDicKI>=0;roleGroupIndexDicKI-=2)
				{
					if(roleGroupIndexDicKTable[roleGroupIndexDicKI]!=roleGroupIndexDicKFreeValue)
					{
						int roleGroupIndexDicK=roleGroupIndexDicKTable[roleGroupIndexDicKI];
						int roleGroupIndexDicV=roleGroupIndexDicKTable[roleGroupIndexDicKI+1];
						stream.writeInt(roleGroupIndexDicK);
						
						stream.writeInt(roleGroupIndexDicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("roleGroupIndexDic");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof GameFuncPartData))
			return;
		
		GameFuncPartData mData=(GameFuncPartData)data;
		
		this.funcTools=mData.funcTools;
		this.roleGroupIndexDic=mData.roleGroupIndexDic;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof GameFuncPartData))
			return;
		
		GameFuncPartData mData=(GameFuncPartData)data;
		
		if(mData.funcTools!=null)
		{
			if(this.funcTools!=null)
			{
				this.funcTools.clear();
				this.funcTools.ensureCapacity(mData.funcTools.size());
			}
			else
			{
				this.funcTools=new IntObjectMap<IntObjectMap<FuncToolData>>(IntObjectMap[]::new,mData.funcTools.size());
			}
			
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsT=this.funcTools;
			if(!mData.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=mData.funcTools.getFreeValue();
				int[] funcToolsKKeys=mData.funcTools.getKeys();
				Object[] funcToolsVValues=mData.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=(IntObjectMap<FuncToolData>)funcToolsVValues[funcToolsKI];
						int funcToolsW;
						IntObjectMap<FuncToolData> funcToolsU;
						funcToolsW=funcToolsK;
						
						if(funcToolsV!=null)
						{
							funcToolsU=new IntObjectMap<FuncToolData>(FuncToolData[]::new,funcToolsV.size());
							IntObjectMap<FuncToolData> funcToolsUT=funcToolsU;
							if(!funcToolsV.isEmpty())
							{
								int funcToolsUKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsUKKeys=funcToolsV.getKeys();
								Object[] funcToolsUVValues=funcToolsV.getValues();
								for(int funcToolsUKI=funcToolsUKKeys.length-1;funcToolsUKI>=0;--funcToolsUKI)
								{
									int funcToolsUK=funcToolsUKKeys[funcToolsUKI];
									if(funcToolsUK!=funcToolsUKFreeValue)
									{
										FuncToolData funcToolsUV=(FuncToolData)funcToolsUVValues[funcToolsUKI];
										int funcToolsUW;
										FuncToolData funcToolsUU;
										funcToolsUW=funcToolsUK;
										
										if(funcToolsUV!=null)
										{
											funcToolsUU=(FuncToolData)funcToolsUV.clone();
										}
										else
										{
											funcToolsUU=null;
										}
										
										funcToolsUT.put(funcToolsUW,funcToolsUU);
									}
								}
							}
						}
						else
						{
							funcToolsU=null;
						}
						
						funcToolsT.put(funcToolsW,funcToolsU);
					}
				}
			}
		}
		else
		{
			this.funcTools=null;
		}
		
		if(mData.roleGroupIndexDic!=null)
		{
			if(this.roleGroupIndexDic!=null)
			{
				this.roleGroupIndexDic.clear();
				this.roleGroupIndexDic.ensureCapacity(mData.roleGroupIndexDic.size());
			}
			else
			{
				this.roleGroupIndexDic=new IntIntMap(mData.roleGroupIndexDic.size());
			}
			
			IntIntMap roleGroupIndexDicT=this.roleGroupIndexDic;
			if(!mData.roleGroupIndexDic.isEmpty())
			{
				int roleGroupIndexDicKFreeValue=mData.roleGroupIndexDic.getFreeValue();
				int[] roleGroupIndexDicKTable=mData.roleGroupIndexDic.getTable();
				for(int roleGroupIndexDicKI=roleGroupIndexDicKTable.length-2;roleGroupIndexDicKI>=0;roleGroupIndexDicKI-=2)
				{
					if(roleGroupIndexDicKTable[roleGroupIndexDicKI]!=roleGroupIndexDicKFreeValue)
					{
						int roleGroupIndexDicK=roleGroupIndexDicKTable[roleGroupIndexDicKI];
						int roleGroupIndexDicV=roleGroupIndexDicKTable[roleGroupIndexDicKI+1];
						int roleGroupIndexDicW;
						int roleGroupIndexDicU;
						roleGroupIndexDicW=roleGroupIndexDicK;
						
						roleGroupIndexDicU=roleGroupIndexDicV;
						
						roleGroupIndexDicT.put(roleGroupIndexDicW,roleGroupIndexDicU);
					}
				}
			}
		}
		else
		{
			this.roleGroupIndexDic=null;
			nullObjError("roleGroupIndexDic");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		GameFuncPartData mData=(GameFuncPartData)data;
		if(mData.funcTools!=null)
		{
			if(this.funcTools==null)
				return false;
			if(this.funcTools.size()!=mData.funcTools.size())
				return false;
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsR=mData.funcTools;
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				Object[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=(IntObjectMap<FuncToolData>)funcToolsVValues[funcToolsKI];
						IntObjectMap<FuncToolData> funcToolsU=funcToolsR.get(funcToolsK);
						if(funcToolsU!=null)
						{
							if(funcToolsV==null)
								return false;
							if(funcToolsV.size()!=funcToolsU.size())
								return false;
							IntObjectMap<FuncToolData> funcToolsVR=funcToolsU;
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								Object[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=(FuncToolData)funcToolsVVValues[funcToolsVKI];
										FuncToolData funcToolsVU=funcToolsVR.get(funcToolsVK);
										if(funcToolsVU!=null)
										{
											if(funcToolsVV==null)
												return false;
											if(!funcToolsVV.dataEquals(funcToolsVU))
												return false;
										}
										else
										{
											if(funcToolsVV!=null)
												return false;
										}
										
									}
								}
							}
						}
						else
						{
							if(funcToolsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.funcTools!=null)
				return false;
		}
		
		if(mData.roleGroupIndexDic!=null)
		{
			if(this.roleGroupIndexDic==null)
				return false;
			if(this.roleGroupIndexDic.size()!=mData.roleGroupIndexDic.size())
				return false;
			IntIntMap roleGroupIndexDicR=mData.roleGroupIndexDic;
			if(!this.roleGroupIndexDic.isEmpty())
			{
				int roleGroupIndexDicKFreeValue=this.roleGroupIndexDic.getFreeValue();
				int[] roleGroupIndexDicKTable=this.roleGroupIndexDic.getTable();
				for(int roleGroupIndexDicKI=roleGroupIndexDicKTable.length-2;roleGroupIndexDicKI>=0;roleGroupIndexDicKI-=2)
				{
					if(roleGroupIndexDicKTable[roleGroupIndexDicKI]!=roleGroupIndexDicKFreeValue)
					{
						int roleGroupIndexDicK=roleGroupIndexDicKTable[roleGroupIndexDicKI];
						int roleGroupIndexDicV=roleGroupIndexDicKTable[roleGroupIndexDicKI+1];
						int roleGroupIndexDicU=roleGroupIndexDicR.get(roleGroupIndexDicK);
						if(roleGroupIndexDicV!=roleGroupIndexDicU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.roleGroupIndexDic!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("funcTools");
		writer.sb.append(':');
		writer.sb.append("Map<int,IntObjectMap<FuncToolData>>");
		if(this.funcTools!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.funcTools.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				Object[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=(IntObjectMap<FuncToolData>)funcToolsVValues[funcToolsKI];
						writer.writeTabs();
						writer.sb.append(funcToolsK);
						
						writer.sb.append(':');
						writer.sb.append("Map<int,FuncToolData>");
						if(funcToolsV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(funcToolsV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								Object[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=(FuncToolData)funcToolsVVValues[funcToolsVKI];
										writer.writeTabs();
										writer.sb.append(funcToolsVK);
										
										writer.sb.append(':');
										if(funcToolsVV!=null)
										{
											funcToolsVV.writeDataString(writer);
										}
										else
										{
											writer.sb.append("FuncToolData=null");
										}
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("roleGroupIndexDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.roleGroupIndexDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.roleGroupIndexDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.roleGroupIndexDic.isEmpty())
			{
				int roleGroupIndexDicKFreeValue=this.roleGroupIndexDic.getFreeValue();
				int[] roleGroupIndexDicKTable=this.roleGroupIndexDic.getTable();
				for(int roleGroupIndexDicKI=roleGroupIndexDicKTable.length-2;roleGroupIndexDicKI>=0;roleGroupIndexDicKI-=2)
				{
					if(roleGroupIndexDicKTable[roleGroupIndexDicKI]!=roleGroupIndexDicKFreeValue)
					{
						int roleGroupIndexDicK=roleGroupIndexDicKTable[roleGroupIndexDicKI];
						int roleGroupIndexDicV=roleGroupIndexDicKTable[roleGroupIndexDicKI+1];
						writer.writeTabs();
						writer.sb.append(roleGroupIndexDicK);
						
						writer.sb.append(':');
						writer.sb.append(roleGroupIndexDicV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.roleGroupIndexDic=new IntIntMap();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.funcTools=null;
		this.roleGroupIndexDic=null;
	}
	
}
