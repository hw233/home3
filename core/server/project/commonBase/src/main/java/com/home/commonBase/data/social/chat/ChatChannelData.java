package com.home.commonBase.data.social.chat;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.social.chat.RoleChatData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.SQueue;
import com.home.shine.support.pool.DataPool;

/** 聊天频道数据(generated by shine) */
public class ChatChannelData extends BaseData
{
	public SQueue<RoleChatData> queue;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ChatChannel;
	
	/** 上次聊天时间 */
	public long lastChatTime;
	
	public ChatChannelData()
	{
		_dataID=BaseDataType.ChatChannel;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ChatChannelData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int queueLen=stream.readLen();
		if(this.queue!=null)
		{
			this.queue.clear();
			this.queue.ensureCapacity(queueLen);
		}
		else
		{
			this.queue=new SQueue<RoleChatData>(RoleChatData[]::new,queueLen);
		}
		
		SQueue<RoleChatData> queueT=this.queue;
		for(int queueI=queueLen-1;queueI>=0;--queueI)
		{
			RoleChatData queueV;
			BaseData queueVT=stream.readDataFullNotNull();
			if(queueVT!=null)
			{
				if(queueVT instanceof RoleChatData)
				{
					queueV=(RoleChatData)queueVT;
				}
				else
				{
					queueV=new RoleChatData();
					if(!(queueVT.getClass().isAssignableFrom(RoleChatData.class)))
					{
						stream.throwTypeReadError(RoleChatData.class,queueVT.getClass());
					}
					queueV.shadowCopy(queueVT);
				}
			}
			else
			{
				queueV=null;
			}
			
			queueT.offer(queueV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.queue!=null)
		{
			stream.writeLen(this.queue.size());
			if(!this.queue.isEmpty())
			{
				Object[] queueVValues=this.queue.getValues();
				int queueVMark=this.queue.getMark();
				int queueVStart=this.queue.getStart();
				for(int queueVI=0,queueVLen=this.queue.length();queueVI<queueVLen;++queueVI)
				{
					RoleChatData queueV=(RoleChatData)queueVValues[(queueVI+queueVStart)&queueVMark];
					if(queueV!=null)
					{
						stream.writeDataFullNotNull(queueV);
					}
					else
					{
						nullObjError("queueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("queue");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		int queueLen=stream.readLen();
		if(this.queue!=null)
		{
			this.queue.clear();
			this.queue.ensureCapacity(queueLen);
		}
		else
		{
			this.queue=new SQueue<RoleChatData>(RoleChatData[]::new,queueLen);
		}
		
		SQueue<RoleChatData> queueT=this.queue;
		for(int queueI=queueLen-1;queueI>=0;--queueI)
		{
			RoleChatData queueV;
			queueV=(RoleChatData)stream.readDataSimpleNotNull();
			
			queueT.offer(queueV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.queue!=null)
		{
			stream.writeLen(this.queue.size());
			if(!this.queue.isEmpty())
			{
				Object[] queueVValues=this.queue.getValues();
				int queueVMark=this.queue.getMark();
				int queueVStart=this.queue.getStart();
				for(int queueVI=0,queueVLen=this.queue.length();queueVI<queueVLen;++queueVI)
				{
					RoleChatData queueV=(RoleChatData)queueVValues[(queueVI+queueVStart)&queueVMark];
					if(queueV!=null)
					{
						stream.writeDataSimpleNotNull(queueV);
					}
					else
					{
						nullObjError("queueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("queue");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ChatChannelData))
			return;
		
		ChatChannelData mData=(ChatChannelData)data;
		
		this.queue=mData.queue;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ChatChannelData))
			return;
		
		ChatChannelData mData=(ChatChannelData)data;
		
		if(mData.queue!=null)
		{
			if(this.queue!=null)
			{
				this.queue.clear();
				this.queue.ensureCapacity(mData.queue.size());
			}
			else
			{
				this.queue=new SQueue<RoleChatData>(RoleChatData[]::new,mData.queue.size());
			}
			
			SQueue<RoleChatData> queueT=this.queue;
			if(!mData.queue.isEmpty())
			{
				Object[] queueVValues=mData.queue.getValues();
				int queueVMark=mData.queue.getMark();
				int queueVStart=mData.queue.getStart();
				for(int queueVI=0,queueVLen=mData.queue.length();queueVI<queueVLen;++queueVI)
				{
					RoleChatData queueV=(RoleChatData)queueVValues[(queueVI+queueVStart)&queueVMark];
					RoleChatData queueU;
					if(queueV!=null)
					{
						queueU=(RoleChatData)queueV.clone();
					}
					else
					{
						queueU=null;
						nullObjError("queueU");
					}
					
					queueT.offer(queueU);
				}
			}
		}
		else
		{
			this.queue=null;
			nullObjError("queue");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ChatChannelData mData=(ChatChannelData)data;
		if(mData.queue!=null)
		{
			if(this.queue==null)
				return false;
			if(this.queue.size()!=mData.queue.size())
				return false;
			SQueue<RoleChatData> queueT=this.queue;
			SQueue<RoleChatData> queueR=mData.queue;
			int queueLen=queueT.size();
			for(int queueI=0;queueI<queueLen;++queueI)
			{
				RoleChatData queueU=queueT.get(queueI);
				RoleChatData queueV=queueR.get(queueI);
				if(queueV!=null)
				{
					if(queueU==null)
						return false;
					if(!queueU.dataEquals(queueV))
						return false;
				}
				else
				{
					if(queueU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.queue!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("queue");
		writer.sb.append(':');
		writer.sb.append("Queue<RoleChatData>");
		if(this.queue!=null)
		{
			SQueue<RoleChatData> queueT=this.queue;
			int queueLen=queueT.size();
			writer.sb.append('(');
			writer.sb.append(queueLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int queueI=0;queueI<queueLen;++queueI)
			{
				RoleChatData queueV=queueT.get(queueI);
				writer.writeTabs();
				writer.sb.append(queueI);
				writer.sb.append(':');
				if(queueV!=null)
				{
					queueV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("RoleChatData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.queue=new SQueue<RoleChatData>(RoleChatData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.queue=null;
	}
	
}
