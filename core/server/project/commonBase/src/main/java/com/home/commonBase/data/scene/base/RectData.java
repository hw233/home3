package com.home.commonBase.data.scene.base;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.global.Global;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;
import com.home.shine.utils.MathUtils;
import com.home.shine.utils.StringUtils;

/** 矩形数据(generated by shine) */
public class RectData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Rect;
	
	/** x传输 */
	public int ix;
	
	/** y传输 */
	public int iy;
	
	/** width传输 */
	public int iWidth;
	
	/** height传输 */
	public int iHeight;
	
	/** x坐标 */
	public float x;
	
	/** y坐标 */
	public float y;
	
	/** width传输 */
	public float width;
	
	/** height传输 */
	public float height;
	
	public RectData()
	{
		_dataID=BaseDataType.Rect;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RectData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iWidth=stream.readInt();
		
		this.iHeight=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iWidth);
		
		stream.writeInt(this.iHeight);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iWidth=stream.readInt();
		
		this.iHeight=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iWidth);
		
		stream.writeInt(this.iHeight);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof RectData))
			return;
		
		RectData mData=(RectData)data;
		
		this.ix=mData.ix;
		this.iy=mData.iy;
		this.iWidth=mData.iWidth;
		this.iHeight=mData.iHeight;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof RectData))
			return;
		
		RectData mData=(RectData)data;
		
		this.ix=mData.ix;
		
		this.iy=mData.iy;
		
		this.iWidth=mData.iWidth;
		
		this.iHeight=mData.iHeight;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		RectData mData=(RectData)data;
		if(this.ix!=mData.ix)
			return false;
		
		if(this.iy!=mData.iy)
			return false;
		
		if(this.iWidth!=mData.iWidth)
			return false;
		
		if(this.iHeight!=mData.iHeight)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("ix");
		writer.sb.append(':');
		writer.sb.append(this.ix);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("iy");
		writer.sb.append(':');
		writer.sb.append(this.iy);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("iWidth");
		writer.sb.append(':');
		writer.sb.append(this.iWidth);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("iHeight");
		writer.sb.append(':');
		writer.sb.append(this.iHeight);
		
		writer.writeEnter();
	}
	
	@Override
	protected void beforeWrite()
	{
		float scale;
		ix=(int)(x*(scale=Global.posSendScale));
		iy=(int)(y*scale);
		iWidth=(int)(width*scale);
		iHeight=(int)(height*scale);
	}
	
	@Override
	protected void afterRead()
	{
		float scale;
		x=ix/(scale=Global.posSendScale);
		y=iy/scale;
		width=iWidth/scale;
		height=iHeight/scale;
	}
	
	@Override
	public String toString()
	{
		return "{x:"+ StringUtils.roundStrF2(x)+",y:"+StringUtils.roundStrF2(y)+",width:"+StringUtils.roundStrF2(width)+",height:"+StringUtils.roundStrF2(height)+"}";
	}
	
	/** 拷贝位置 */
	public void copyPos(RectData rect)
	{
		this.x=rect.x;
		this.y=rect.y;
		this.width=rect.width;
		this.height=rect.height;
	}
	
	@Override
	public void clear()
	{
		this.x=0f;
		this.y=0f;
		this.width=0f;
		this.height=0f;
	}
	
	public boolean isEquals(RectData rect)
	{
		return MathUtils.floatEquals(x,rect.x) && MathUtils.floatEquals(y,rect.y) && MathUtils.floatEquals(width,rect.width) && MathUtils.floatEquals(height,rect.height);
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 是否为空 */
	public boolean isEmpty()
	{
		return width<=0f || height<=0f;
	}
	
	/** 获取右 */
	public float getRight()
	{
		return x+width;
	}
	
	/** 获取下 */
	public float getBottom()
	{
		return y+height;
	}
	
	/** 是否包含点 */
	public boolean containPos(PosData pos)
	{
		if(isEmpty())
			return false;
		
		if(CommonSetting.is3D && !CommonSetting.isZHeight)
			return pos.x>=x && pos.x<=getRight() && pos.z>=y && pos.z<=getBottom();
		else
			return pos.x>=x && pos.x<=getRight() && pos.y>=y && pos.y<=getBottom();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.ix=0;
		this.iy=0;
		this.iWidth=0;
		this.iHeight=0;
	}
	
}
