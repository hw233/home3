package com.home.commonBase.data.scene.unit.identity;
import com.home.commonBase.config.game.CharacterConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.role.RoleShowData;
import com.home.commonBase.data.scene.unit.identity.FightUnitIdentityData;
import com.home.commonBase.data.scene.unit.identity.MUnitIdentityData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 角色身份数据基类(generated by shine) */
public class CharacterIdentityData extends MUnitIdentityData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.CharacterIdentity;
	
	/** 玩家显示数据 */
	public RoleShowData roleShowData;
	
	/** 序号(帧同步使用) */
	public int syncIndex;
	
	public CharacterIdentityData()
	{
		_dataID=BaseDataType.CharacterIdentity;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.syncIndex=stream.readInt();
		
		BaseData roleShowDataT=stream.readDataFullNotNull();
		if(roleShowDataT!=null)
		{
			if(roleShowDataT instanceof RoleShowData)
			{
				this.roleShowData=(RoleShowData)roleShowDataT;
			}
			else
			{
				this.roleShowData=new RoleShowData();
				if(!(roleShowDataT.getClass().isAssignableFrom(RoleShowData.class)))
				{
					stream.throwTypeReadError(RoleShowData.class,roleShowDataT.getClass());
				}
				this.roleShowData.shadowCopy(roleShowDataT);
			}
		}
		else
		{
			this.roleShowData=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.syncIndex);
		
		if(this.roleShowData!=null)
		{
			stream.writeDataFullNotNull(this.roleShowData);
		}
		else
		{
			nullObjError("roleShowData");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.syncIndex=stream.readInt();
		
		this.roleShowData=(RoleShowData)stream.readDataSimpleNotNull();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.syncIndex);
		
		if(this.roleShowData!=null)
		{
			stream.writeDataSimpleNotNull(this.roleShowData);
		}
		else
		{
			nullObjError("roleShowData");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof CharacterIdentityData))
			return;
		
		CharacterIdentityData mData=(CharacterIdentityData)data;
		
		this.syncIndex=mData.syncIndex;
		this.roleShowData=mData.roleShowData;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof CharacterIdentityData))
			return;
		
		CharacterIdentityData mData=(CharacterIdentityData)data;
		
		this.syncIndex=mData.syncIndex;
		
		if(mData.roleShowData!=null)
		{
			this.roleShowData=(RoleShowData)mData.roleShowData.clone();
		}
		else
		{
			this.roleShowData=null;
			nullObjError("roleShowData");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		CharacterIdentityData mData=(CharacterIdentityData)data;
		if(this.syncIndex!=mData.syncIndex)
			return false;
		
		if(mData.roleShowData!=null)
		{
			if(this.roleShowData==null)
				return false;
			if(!this.roleShowData.dataEquals(mData.roleShowData))
				return false;
		}
		else
		{
			if(this.roleShowData!=null)
				return false;
		}
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "CharacterIdentityData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("syncIndex");
		writer.sb.append(':');
		writer.sb.append(this.syncIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("roleShowData");
		writer.sb.append(':');
		if(this.roleShowData!=null)
		{
			this.roleShowData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("RoleShowData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.roleShowData=new RoleShowData();
		this.roleShowData.initDefault();
	}
	
	@Override
	public int getFightUnitID()
	{
		return CharacterConfig.get(id).fightUnitID;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.syncIndex=0;
		this.roleShowData=null;
	}
	
}
