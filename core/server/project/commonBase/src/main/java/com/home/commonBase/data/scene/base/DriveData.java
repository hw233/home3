package com.home.commonBase.data.scene.base;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 驾驶数据(generated by shine) */
public class DriveData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Drive;
	
	/** 驾驶 前进/后退(退:-1,停:0,进:1) */
	public int forward;
	
	/** 驾驶 转向(左:-1,中:0,右:1) */
	public int turn;
	
	/** 当前速度值 */
	public int currentSpeed;
	
	public DriveData()
	{
		_dataID=BaseDataType.Drive;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "DriveData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.forward=stream.readInt();
		
		this.turn=stream.readInt();
		
		this.currentSpeed=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.forward);
		
		stream.writeInt(this.turn);
		
		stream.writeInt(this.currentSpeed);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.forward=stream.readInt();
		
		this.turn=stream.readInt();
		
		this.currentSpeed=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.forward);
		
		stream.writeInt(this.turn);
		
		stream.writeInt(this.currentSpeed);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof DriveData))
			return;
		
		DriveData mData=(DriveData)data;
		
		this.forward=mData.forward;
		this.turn=mData.turn;
		this.currentSpeed=mData.currentSpeed;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof DriveData))
			return;
		
		DriveData mData=(DriveData)data;
		
		this.forward=mData.forward;
		
		this.turn=mData.turn;
		
		this.currentSpeed=mData.currentSpeed;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		DriveData mData=(DriveData)data;
		if(this.forward!=mData.forward)
			return false;
		
		if(this.turn!=mData.turn)
			return false;
		
		if(this.currentSpeed!=mData.currentSpeed)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("forward");
		writer.sb.append(':');
		writer.sb.append(this.forward);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("turn");
		writer.sb.append(':');
		writer.sb.append(this.turn);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentSpeed");
		writer.sb.append(':');
		writer.sb.append(this.currentSpeed);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	public void copyDrive(DriveData data)
	{
		forward=data.forward;
		turn=data.turn;
		currentSpeed=data.currentSpeed;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.forward=0;
		this.turn=0;
		this.currentSpeed=0;
	}
	
}
