package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.config.game.LanguageConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 怪物表(generated by shine) */
public class MonsterConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<MonsterConfig> _dic;
	
	/** 战斗单位ID */
	public int fightUnitID;
	
	/** 名字 */
	public String name="";
	
	/** 掉落方式 */
	public int dropType;
	
	/** 掉落判定方式 */
	public int dropDecideType;
	
	/** 掉落范围方式 */
	public int dropScopeType;
	
	/** 是否退回原点时回血 */
	public boolean needRecoverAtBack;
	
	/** 是否关闭AOI激活策略 */
	public boolean notUseAOIActive;
	
	/** id */
	public int id;
	
	/** 名字原值 */
	private String _name;
	
	/** 获取 */
	public static MonsterConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<MonsterConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<MonsterConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.fightUnitID=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.dropType=stream.readInt();
		
		this.dropDecideType=stream.readInt();
		
		this.dropScopeType=stream.readInt();
		
		this.needRecoverAtBack=stream.readBoolean();
		
		this.notUseAOIActive=stream.readBoolean();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.fightUnitID);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.dropType);
		
		stream.writeInt(this.dropDecideType);
		
		stream.writeInt(this.dropScopeType);
		
		stream.writeBoolean(this.needRecoverAtBack);
		
		stream.writeBoolean(this.notUseAOIActive);
		
	}
	
	/** 生成刷新配置 */
	@Override
	protected void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
	}
	
}
