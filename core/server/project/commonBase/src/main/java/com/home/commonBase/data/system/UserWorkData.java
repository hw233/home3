package com.home.commonBase.data.system;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.system.WorkData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 用户事务(login服执行,要求事务本身幂等，因为login上目前没做事务序号存储)(generated by shine) */
public class UserWorkData extends WorkData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.UserWork;
	
	/** uid */
	public String uid="";
	
	/** userID */
	public long userID;
	
	public UserWorkData()
	{
		_dataID=BaseDataType.UserWork;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UserWorkData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.uid=stream.readUTF();
		
		this.userID=stream.readLong();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeUTF(this.uid);
		
		stream.writeLong(this.userID);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.uid=stream.readUTF();
		
		this.userID=stream.readLong();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeUTF(this.uid);
		
		stream.writeLong(this.userID);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof UserWorkData))
			return;
		
		UserWorkData mData=(UserWorkData)data;
		
		this.uid=mData.uid;
		this.userID=mData.userID;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof UserWorkData))
			return;
		
		UserWorkData mData=(UserWorkData)data;
		
		this.uid=mData.uid;
		
		this.userID=mData.userID;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		UserWorkData mData=(UserWorkData)data;
		if(!this.uid.equals(mData.uid))
			return false;
		
		if(this.userID!=mData.userID)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("uid");
		writer.sb.append(':');
		writer.sb.append(this.uid);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("userID");
		writer.sb.append(':');
		writer.sb.append(this.userID);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.uid="";
		this.userID=0L;
	}
	
}
