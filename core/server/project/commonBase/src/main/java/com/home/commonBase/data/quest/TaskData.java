package com.home.commonBase.data.quest;
import com.home.commonBase.config.game.TaskConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 任务目标数据(extends)(generated by shine) */
public class TaskData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Task;
	
	/** 实例ID */
	public int instanceID;
	
	/** 目标id */
	public int id;
	
	/** 完成数 */
	public int num;
	
	/** 配置 */
	public TaskConfig config;
	
	/** 功能ID */
	public int funcID;
	
	/** 主ID */
	public int mainID;
	
	public TaskData()
	{
		_dataID=BaseDataType.Task;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "TaskData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.instanceID=stream.readInt();
		
		this.id=stream.readInt();
		
		this.num=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.num);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.instanceID=stream.readInt();
		
		this.id=stream.readInt();
		
		this.num=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.num);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof TaskData))
			return;
		
		TaskData mData=(TaskData)data;
		
		this.instanceID=mData.instanceID;
		this.id=mData.id;
		this.num=mData.num;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof TaskData))
			return;
		
		TaskData mData=(TaskData)data;
		
		this.instanceID=mData.instanceID;
		
		this.id=mData.id;
		
		this.num=mData.num;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		TaskData mData=(TaskData)data;
		if(this.instanceID!=mData.instanceID)
			return false;
		
		if(this.id!=mData.id)
			return false;
		
		if(this.num!=mData.num)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("instanceID");
		writer.sb.append(':');
		writer.sb.append(this.instanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("num");
		writer.sb.append(':');
		writer.sb.append(this.num);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	public void reloadConfig()
	{
		config=TaskConfig.get(id);
	}
	
	public boolean isComplete()
	{
		return num>=config.needNum;
	}
	
	@Override
	public void clear()
	{
		num=0;
		config=null;
		funcID=0;
		mainID=0;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.instanceID=0;
		this.id=0;
		this.num=0;
	}
	
}
