package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 奖励表(generated by shine) */
public class RewardConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<RewardConfig> _dic;
	
	/** id */
	public int id;
	
	/** 奖励货币组等级公式 */
	public int[][] currencyLevelFormula;
	
	/** 奖励货币组(固定) */
	public DIntData[] currency;
	
	/** 随机物品组 */
	public int randomListID;
	
	/** 奖励角色经验 */
	public long roleExp;
	
	/** 奖励角色经验等级公式 */
	public int[] roleExpLevelFormula;
	
	/** 奖励物品组(固定) */
	public DIntData[] items;
	
	/** 是否需要等级适配 */
	public boolean needLevelAdapter;
	
	/** 需要格子数(如果不填，则有程序计算长度) */
	public int needGrid;
	
	/** 获取 */
	public static RewardConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<RewardConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<RewardConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int currencyLen=stream.readLen();
		if(this.currency==null || this.currency.length!=currencyLen)
		{
			this.currency=new DIntData[currencyLen];
		}
		DIntData[] currencyT=this.currency;
		for(int currencyI=0;currencyI<currencyLen;++currencyI)
		{
			DIntData currencyV;
			currencyV=new DIntData();
			currencyV.readBytesSimple(stream);
			
			currencyT[currencyI]=currencyV;
		}
		
		int currencyLevelFormulaLen=stream.readLen();
		if(this.currencyLevelFormula==null || this.currencyLevelFormula.length!=currencyLevelFormulaLen)
		{
			this.currencyLevelFormula=new int[currencyLevelFormulaLen][];
		}
		int[][] currencyLevelFormulaT=this.currencyLevelFormula;
		for(int currencyLevelFormulaI=0;currencyLevelFormulaI<currencyLevelFormulaLen;++currencyLevelFormulaI)
		{
			int[] currencyLevelFormulaV;
			int currencyLevelFormulaVLen=stream.readLen();
			currencyLevelFormulaV=new int[currencyLevelFormulaVLen];
			int[] currencyLevelFormulaVT=currencyLevelFormulaV;
			for(int currencyLevelFormulaVI=0;currencyLevelFormulaVI<currencyLevelFormulaVLen;++currencyLevelFormulaVI)
			{
				int currencyLevelFormulaVV;
				currencyLevelFormulaVV=stream.readInt();
				
				currencyLevelFormulaVT[currencyLevelFormulaVI]=currencyLevelFormulaVV;
			}
			
			currencyLevelFormulaT[currencyLevelFormulaI]=currencyLevelFormulaV;
		}
		
		int itemsLen=stream.readLen();
		if(this.items==null || this.items.length!=itemsLen)
		{
			this.items=new DIntData[itemsLen];
		}
		DIntData[] itemsT=this.items;
		for(int itemsI=0;itemsI<itemsLen;++itemsI)
		{
			DIntData itemsV;
			itemsV=new DIntData();
			itemsV.readBytesSimple(stream);
			
			itemsT[itemsI]=itemsV;
		}
		
		this.randomListID=stream.readInt();
		
		this.roleExp=stream.readLong();
		
		int roleExpLevelFormulaLen=stream.readLen();
		if(this.roleExpLevelFormula==null || this.roleExpLevelFormula.length!=roleExpLevelFormulaLen)
		{
			this.roleExpLevelFormula=new int[roleExpLevelFormulaLen];
		}
		int[] roleExpLevelFormulaT=this.roleExpLevelFormula;
		for(int roleExpLevelFormulaI=0;roleExpLevelFormulaI<roleExpLevelFormulaLen;++roleExpLevelFormulaI)
		{
			int roleExpLevelFormulaV;
			roleExpLevelFormulaV=stream.readInt();
			
			roleExpLevelFormulaT[roleExpLevelFormulaI]=roleExpLevelFormulaV;
		}
		
		this.needGrid=stream.readInt();
		
		this.needLevelAdapter=stream.readBoolean();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;
		
		RewardConfig[] values;
		RewardConfig v;
		
		for(int i=(values=_dic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				if(v.needGrid>0)
				{
					continue;
				}
				
				v.needGrid=v.items.length;
				
				if(v.randomListID>0)
				{
					v.needGrid+=RandomItemListConfig.get(v.randomListID).getNeedGridNum();
				}
			}
		}
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.currency!=null)
		{
			DIntData[] currencyT=this.currency;
			stream.writeLen(currencyT.length);
			for(int currencyVI=0,currencyVLen=currencyT.length;currencyVI<currencyVLen;++currencyVI)
			{
				DIntData currencyV=currencyT[currencyVI];
				if(currencyV!=null)
				{
					currencyV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("currencyV");
				}
				
			}
		}
		else
		{
			nullObjError("currency");
		}
		
		if(this.currencyLevelFormula!=null)
		{
			int[][] currencyLevelFormulaT=this.currencyLevelFormula;
			stream.writeLen(currencyLevelFormulaT.length);
			for(int currencyLevelFormulaVI=0,currencyLevelFormulaVLen=currencyLevelFormulaT.length;currencyLevelFormulaVI<currencyLevelFormulaVLen;++currencyLevelFormulaVI)
			{
				int[] currencyLevelFormulaV=currencyLevelFormulaT[currencyLevelFormulaVI];
				if(currencyLevelFormulaV!=null)
				{
					int[] currencyLevelFormulaVT=currencyLevelFormulaV;
					stream.writeLen(currencyLevelFormulaVT.length);
					for(int currencyLevelFormulaVVI=0,currencyLevelFormulaVVLen=currencyLevelFormulaVT.length;currencyLevelFormulaVVI<currencyLevelFormulaVVLen;++currencyLevelFormulaVVI)
					{
						int currencyLevelFormulaVV=currencyLevelFormulaVT[currencyLevelFormulaVVI];
						stream.writeInt(currencyLevelFormulaVV);
						
					}
				}
				else
				{
					nullObjError("currencyLevelFormulaV");
				}
				
			}
		}
		else
		{
			nullObjError("currencyLevelFormula");
		}
		
		if(this.items!=null)
		{
			DIntData[] itemsT=this.items;
			stream.writeLen(itemsT.length);
			for(int itemsVI=0,itemsVLen=itemsT.length;itemsVI<itemsVLen;++itemsVI)
			{
				DIntData itemsV=itemsT[itemsVI];
				if(itemsV!=null)
				{
					itemsV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("itemsV");
				}
				
			}
		}
		else
		{
			nullObjError("items");
		}
		
		stream.writeInt(this.randomListID);
		
		stream.writeLong(this.roleExp);
		
		if(this.roleExpLevelFormula!=null)
		{
			int[] roleExpLevelFormulaT=this.roleExpLevelFormula;
			stream.writeLen(roleExpLevelFormulaT.length);
			for(int roleExpLevelFormulaVI=0,roleExpLevelFormulaVLen=roleExpLevelFormulaT.length;roleExpLevelFormulaVI<roleExpLevelFormulaVLen;++roleExpLevelFormulaVI)
			{
				int roleExpLevelFormulaV=roleExpLevelFormulaT[roleExpLevelFormulaVI];
				stream.writeInt(roleExpLevelFormulaV);
				
			}
		}
		else
		{
			nullObjError("roleExpLevelFormula");
		}
		
		stream.writeInt(this.needGrid);
		
		stream.writeBoolean(this.needLevelAdapter);
		
	}
	
}
