package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.login.ClientVersionData;
import com.home.commonBase.data.system.GameServerInfoData;
import com.home.commonBase.data.system.GameServerSimpleInfoData;
import com.home.commonBase.data.system.ServerSimpleInfoData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SSet;
import com.home.shine.support.pool.DataPool;

/** 逻辑服初始化服务器数据(generated by shine) */
public class GameInitServerData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.GameInitServer;
	
	/** 服务器信息(中心服) */
	public ServerSimpleInfoData centerInfo;
	
	/** 服务器信息(自身) */
	public GameServerInfoData info;
	
	/** 全部场景服简版信息 */
	public IntObjectMap<ServerSimpleInfoData> sceneServerDic;
	
	/** 全部游戏服简版信息 */
	public IntObjectMap<GameServerSimpleInfoData> gameServerDic;
	
	/** 登陆服id组 */
	public int[] loginList;
	
	/** 是否正式版本(无gm) */
	public boolean isOfficial;
	
	/** 客户端版本 */
	public IntObjectMap<ClientVersionData> clientVersion;
	
	public GameInitServerData()
	{
		_dataID=BaseDataType.GameInitServer;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "GameInitServerData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData infoT=stream.readDataFullNotNull();
		if(infoT!=null)
		{
			if(infoT instanceof GameServerInfoData)
			{
				this.info=(GameServerInfoData)infoT;
			}
			else
			{
				this.info=new GameServerInfoData();
				if(!(infoT.getClass().isAssignableFrom(GameServerInfoData.class)))
				{
					stream.throwTypeReadError(GameServerInfoData.class,infoT.getClass());
				}
				this.info.shadowCopy(infoT);
			}
		}
		else
		{
			this.info=null;
		}
		
		BaseData centerInfoT=stream.readDataFullNotNull();
		if(centerInfoT!=null)
		{
			if(centerInfoT instanceof ServerSimpleInfoData)
			{
				this.centerInfo=(ServerSimpleInfoData)centerInfoT;
			}
			else
			{
				this.centerInfo=new ServerSimpleInfoData();
				if(!(centerInfoT.getClass().isAssignableFrom(ServerSimpleInfoData.class)))
				{
					stream.throwTypeReadError(ServerSimpleInfoData.class,centerInfoT.getClass());
				}
				this.centerInfo.shadowCopy(centerInfoT);
			}
		}
		else
		{
			this.centerInfo=null;
		}
		
		int gameServerDicLen=stream.readLen();
		if(this.gameServerDic!=null)
		{
			this.gameServerDic.clear();
			this.gameServerDic.ensureCapacity(gameServerDicLen);
		}
		else
		{
			this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new,gameServerDicLen);
		}
		
		IntObjectMap<GameServerSimpleInfoData> gameServerDicT=this.gameServerDic;
		for(int gameServerDicI=gameServerDicLen-1;gameServerDicI>=0;--gameServerDicI)
		{
			GameServerSimpleInfoData gameServerDicV;
			BaseData gameServerDicVT=stream.readDataFullNotNull();
			if(gameServerDicVT!=null)
			{
				if(gameServerDicVT instanceof GameServerSimpleInfoData)
				{
					gameServerDicV=(GameServerSimpleInfoData)gameServerDicVT;
				}
				else
				{
					gameServerDicV=new GameServerSimpleInfoData();
					if(!(gameServerDicVT.getClass().isAssignableFrom(GameServerSimpleInfoData.class)))
					{
						stream.throwTypeReadError(GameServerSimpleInfoData.class,gameServerDicVT.getClass());
					}
					gameServerDicV.shadowCopy(gameServerDicVT);
				}
			}
			else
			{
				gameServerDicV=null;
			}
			
			gameServerDicT.put(gameServerDicV.id,gameServerDicV);
		}
		
		int sceneServerDicLen=stream.readLen();
		if(this.sceneServerDic!=null)
		{
			this.sceneServerDic.clear();
			this.sceneServerDic.ensureCapacity(sceneServerDicLen);
		}
		else
		{
			this.sceneServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new,sceneServerDicLen);
		}
		
		IntObjectMap<ServerSimpleInfoData> sceneServerDicT=this.sceneServerDic;
		for(int sceneServerDicI=sceneServerDicLen-1;sceneServerDicI>=0;--sceneServerDicI)
		{
			ServerSimpleInfoData sceneServerDicV;
			BaseData sceneServerDicVT=stream.readDataFullNotNull();
			if(sceneServerDicVT!=null)
			{
				if(sceneServerDicVT instanceof ServerSimpleInfoData)
				{
					sceneServerDicV=(ServerSimpleInfoData)sceneServerDicVT;
				}
				else
				{
					sceneServerDicV=new ServerSimpleInfoData();
					if(!(sceneServerDicVT.getClass().isAssignableFrom(ServerSimpleInfoData.class)))
					{
						stream.throwTypeReadError(ServerSimpleInfoData.class,sceneServerDicVT.getClass());
					}
					sceneServerDicV.shadowCopy(sceneServerDicVT);
				}
			}
			else
			{
				sceneServerDicV=null;
			}
			
			sceneServerDicT.put(sceneServerDicV.id,sceneServerDicV);
		}
		
		int loginListLen=stream.readLen();
		if(this.loginList==null || this.loginList.length!=loginListLen)
		{
			this.loginList=new int[loginListLen];
		}
		int[] loginListT=this.loginList;
		for(int loginListI=0;loginListI<loginListLen;++loginListI)
		{
			int loginListV;
			loginListV=stream.readInt();
			
			loginListT[loginListI]=loginListV;
		}
		
		int clientVersionLen=stream.readLen();
		if(this.clientVersion!=null)
		{
			this.clientVersion.clear();
			this.clientVersion.ensureCapacity(clientVersionLen);
		}
		else
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionLen);
		}
		
		IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
		for(int clientVersionI=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
		{
			ClientVersionData clientVersionV;
			clientVersionV=new ClientVersionData();
			clientVersionV.readBytesFull(stream);
			
			clientVersionT.put(clientVersionV.type,clientVersionV);
		}
		
		this.isOfficial=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.info!=null)
		{
			stream.writeDataFullNotNull(this.info);
		}
		else
		{
			nullObjError("info");
		}
		
		if(this.centerInfo!=null)
		{
			stream.writeDataFullNotNull(this.centerInfo);
		}
		else
		{
			nullObjError("centerInfo");
		}
		
		if(this.gameServerDic!=null)
		{
			stream.writeLen(this.gameServerDic.size());
			if(!this.gameServerDic.isEmpty())
			{
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicVI=gameServerDicVValues.length-1;gameServerDicVI>=0;--gameServerDicVI)
				{
					if(gameServerDicVValues[gameServerDicVI]!=null)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicVI];
						if(gameServerDicV!=null)
						{
							stream.writeDataFullNotNull(gameServerDicV);
						}
						else
						{
							nullObjError("gameServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("gameServerDic");
		}
		
		if(this.sceneServerDic!=null)
		{
			stream.writeLen(this.sceneServerDic.size());
			if(!this.sceneServerDic.isEmpty())
			{
				Object[] sceneServerDicVValues=this.sceneServerDic.getValues();
				for(int sceneServerDicVI=sceneServerDicVValues.length-1;sceneServerDicVI>=0;--sceneServerDicVI)
				{
					if(sceneServerDicVValues[sceneServerDicVI]!=null)
					{
						ServerSimpleInfoData sceneServerDicV=(ServerSimpleInfoData)sceneServerDicVValues[sceneServerDicVI];
						if(sceneServerDicV!=null)
						{
							stream.writeDataFullNotNull(sceneServerDicV);
						}
						else
						{
							nullObjError("sceneServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("sceneServerDic");
		}
		
		if(this.loginList!=null)
		{
			int[] loginListT=this.loginList;
			stream.writeLen(loginListT.length);
			for(int loginListVI=0,loginListVLen=loginListT.length;loginListVI<loginListVLen;++loginListVI)
			{
				int loginListV=loginListT[loginListVI];
				stream.writeInt(loginListV);
				
			}
		}
		else
		{
			nullObjError("loginList");
		}
		
		if(this.clientVersion!=null)
		{
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						if(clientVersionV!=null)
						{
							clientVersionV.writeBytesFull(stream);
						}
						else
						{
							nullObjError("clientVersionV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("clientVersion");
		}
		
		stream.writeBoolean(this.isOfficial);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.info=(GameServerInfoData)stream.readDataSimpleNotNull();
		
		this.centerInfo=(ServerSimpleInfoData)stream.readDataSimpleNotNull();
		
		int gameServerDicLen=stream.readLen();
		if(this.gameServerDic!=null)
		{
			this.gameServerDic.clear();
			this.gameServerDic.ensureCapacity(gameServerDicLen);
		}
		else
		{
			this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new,gameServerDicLen);
		}
		
		IntObjectMap<GameServerSimpleInfoData> gameServerDicT=this.gameServerDic;
		for(int gameServerDicI=gameServerDicLen-1;gameServerDicI>=0;--gameServerDicI)
		{
			GameServerSimpleInfoData gameServerDicV;
			gameServerDicV=(GameServerSimpleInfoData)stream.readDataSimpleNotNull();
			
			gameServerDicT.put(gameServerDicV.id,gameServerDicV);
		}
		
		int sceneServerDicLen=stream.readLen();
		if(this.sceneServerDic!=null)
		{
			this.sceneServerDic.clear();
			this.sceneServerDic.ensureCapacity(sceneServerDicLen);
		}
		else
		{
			this.sceneServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new,sceneServerDicLen);
		}
		
		IntObjectMap<ServerSimpleInfoData> sceneServerDicT=this.sceneServerDic;
		for(int sceneServerDicI=sceneServerDicLen-1;sceneServerDicI>=0;--sceneServerDicI)
		{
			ServerSimpleInfoData sceneServerDicV;
			sceneServerDicV=(ServerSimpleInfoData)stream.readDataSimpleNotNull();
			
			sceneServerDicT.put(sceneServerDicV.id,sceneServerDicV);
		}
		
		int loginListLen=stream.readLen();
		if(this.loginList==null || this.loginList.length!=loginListLen)
		{
			this.loginList=new int[loginListLen];
		}
		int[] loginListT=this.loginList;
		for(int loginListI=0;loginListI<loginListLen;++loginListI)
		{
			int loginListV;
			loginListV=stream.readInt();
			
			loginListT[loginListI]=loginListV;
		}
		
		int clientVersionLen=stream.readLen();
		if(this.clientVersion!=null)
		{
			this.clientVersion.clear();
			this.clientVersion.ensureCapacity(clientVersionLen);
		}
		else
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionLen);
		}
		
		IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
		for(int clientVersionI=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
		{
			ClientVersionData clientVersionV;
			clientVersionV=new ClientVersionData();
			clientVersionV.readBytesSimple(stream);
			
			clientVersionT.put(clientVersionV.type,clientVersionV);
		}
		
		this.isOfficial=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.info!=null)
		{
			stream.writeDataSimpleNotNull(this.info);
		}
		else
		{
			nullObjError("info");
		}
		
		if(this.centerInfo!=null)
		{
			stream.writeDataSimpleNotNull(this.centerInfo);
		}
		else
		{
			nullObjError("centerInfo");
		}
		
		if(this.gameServerDic!=null)
		{
			stream.writeLen(this.gameServerDic.size());
			if(!this.gameServerDic.isEmpty())
			{
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicVI=gameServerDicVValues.length-1;gameServerDicVI>=0;--gameServerDicVI)
				{
					if(gameServerDicVValues[gameServerDicVI]!=null)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicVI];
						if(gameServerDicV!=null)
						{
							stream.writeDataSimpleNotNull(gameServerDicV);
						}
						else
						{
							nullObjError("gameServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("gameServerDic");
		}
		
		if(this.sceneServerDic!=null)
		{
			stream.writeLen(this.sceneServerDic.size());
			if(!this.sceneServerDic.isEmpty())
			{
				Object[] sceneServerDicVValues=this.sceneServerDic.getValues();
				for(int sceneServerDicVI=sceneServerDicVValues.length-1;sceneServerDicVI>=0;--sceneServerDicVI)
				{
					if(sceneServerDicVValues[sceneServerDicVI]!=null)
					{
						ServerSimpleInfoData sceneServerDicV=(ServerSimpleInfoData)sceneServerDicVValues[sceneServerDicVI];
						if(sceneServerDicV!=null)
						{
							stream.writeDataSimpleNotNull(sceneServerDicV);
						}
						else
						{
							nullObjError("sceneServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("sceneServerDic");
		}
		
		if(this.loginList!=null)
		{
			int[] loginListT=this.loginList;
			stream.writeLen(loginListT.length);
			for(int loginListVI=0,loginListVLen=loginListT.length;loginListVI<loginListVLen;++loginListVI)
			{
				int loginListV=loginListT[loginListVI];
				stream.writeInt(loginListV);
				
			}
		}
		else
		{
			nullObjError("loginList");
		}
		
		if(this.clientVersion!=null)
		{
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						if(clientVersionV!=null)
						{
							clientVersionV.writeBytesSimple(stream);
						}
						else
						{
							nullObjError("clientVersionV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("clientVersion");
		}
		
		stream.writeBoolean(this.isOfficial);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof GameInitServerData))
			return;
		
		GameInitServerData mData=(GameInitServerData)data;
		
		this.info=mData.info;
		this.centerInfo=mData.centerInfo;
		this.gameServerDic=mData.gameServerDic;
		this.sceneServerDic=mData.sceneServerDic;
		this.loginList=mData.loginList;
		this.clientVersion=mData.clientVersion;
		this.isOfficial=mData.isOfficial;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof GameInitServerData))
			return;
		
		GameInitServerData mData=(GameInitServerData)data;
		
		if(mData.info!=null)
		{
			this.info=(GameServerInfoData)mData.info.clone();
		}
		else
		{
			this.info=null;
			nullObjError("info");
		}
		
		if(mData.centerInfo!=null)
		{
			this.centerInfo=(ServerSimpleInfoData)mData.centerInfo.clone();
		}
		else
		{
			this.centerInfo=null;
			nullObjError("centerInfo");
		}
		
		if(mData.gameServerDic!=null)
		{
			if(this.gameServerDic!=null)
			{
				this.gameServerDic.clear();
				this.gameServerDic.ensureCapacity(mData.gameServerDic.size());
			}
			else
			{
				this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new,mData.gameServerDic.size());
			}
			
			IntObjectMap<GameServerSimpleInfoData> gameServerDicT=this.gameServerDic;
			if(!mData.gameServerDic.isEmpty())
			{
				Object[] gameServerDicVValues=mData.gameServerDic.getValues();
				for(int gameServerDicVI=gameServerDicVValues.length-1;gameServerDicVI>=0;--gameServerDicVI)
				{
					if(gameServerDicVValues[gameServerDicVI]!=null)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicVI];
						GameServerSimpleInfoData gameServerDicU;
						if(gameServerDicV!=null)
						{
							gameServerDicU=(GameServerSimpleInfoData)gameServerDicV.clone();
						}
						else
						{
							gameServerDicU=null;
							nullObjError("gameServerDicU");
						}
						
						gameServerDicT.put(gameServerDicU.id,gameServerDicU);
					}
				}
			}
		}
		else
		{
			this.gameServerDic=null;
			nullObjError("gameServerDic");
		}
		
		if(mData.sceneServerDic!=null)
		{
			if(this.sceneServerDic!=null)
			{
				this.sceneServerDic.clear();
				this.sceneServerDic.ensureCapacity(mData.sceneServerDic.size());
			}
			else
			{
				this.sceneServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new,mData.sceneServerDic.size());
			}
			
			IntObjectMap<ServerSimpleInfoData> sceneServerDicT=this.sceneServerDic;
			if(!mData.sceneServerDic.isEmpty())
			{
				Object[] sceneServerDicVValues=mData.sceneServerDic.getValues();
				for(int sceneServerDicVI=sceneServerDicVValues.length-1;sceneServerDicVI>=0;--sceneServerDicVI)
				{
					if(sceneServerDicVValues[sceneServerDicVI]!=null)
					{
						ServerSimpleInfoData sceneServerDicV=(ServerSimpleInfoData)sceneServerDicVValues[sceneServerDicVI];
						ServerSimpleInfoData sceneServerDicU;
						if(sceneServerDicV!=null)
						{
							sceneServerDicU=(ServerSimpleInfoData)sceneServerDicV.clone();
						}
						else
						{
							sceneServerDicU=null;
							nullObjError("sceneServerDicU");
						}
						
						sceneServerDicT.put(sceneServerDicU.id,sceneServerDicU);
					}
				}
			}
		}
		else
		{
			this.sceneServerDic=null;
			nullObjError("sceneServerDic");
		}
		
		if(mData.loginList!=null)
		{
			int[] loginListR=mData.loginList;
			int loginListLen=loginListR.length;
			if(this.loginList==null || this.loginList.length!=loginListLen)
			{
				this.loginList=new int[loginListLen];
			}
			BytesControl.arrayCopy(mData.loginList,this.loginList,loginListLen);
		}
		else
		{
			this.loginList=null;
			nullObjError("loginList");
		}
		
		if(mData.clientVersion!=null)
		{
			if(this.clientVersion!=null)
			{
				this.clientVersion.clear();
				this.clientVersion.ensureCapacity(mData.clientVersion.size());
			}
			else
			{
				this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,mData.clientVersion.size());
			}
			
			IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
			if(!mData.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=mData.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						ClientVersionData clientVersionU;
						if(clientVersionV!=null)
						{
							clientVersionU=new ClientVersionData();
							clientVersionU.copy(clientVersionV);
						}
						else
						{
							clientVersionU=null;
							nullObjError("clientVersionU");
						}
						
						clientVersionT.put(clientVersionU.type,clientVersionU);
					}
				}
			}
		}
		else
		{
			this.clientVersion=null;
			nullObjError("clientVersion");
		}
		
		this.isOfficial=mData.isOfficial;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		GameInitServerData mData=(GameInitServerData)data;
		if(mData.info!=null)
		{
			if(this.info==null)
				return false;
			if(!this.info.dataEquals(mData.info))
				return false;
		}
		else
		{
			if(this.info!=null)
				return false;
		}
		
		if(mData.centerInfo!=null)
		{
			if(this.centerInfo==null)
				return false;
			if(!this.centerInfo.dataEquals(mData.centerInfo))
				return false;
		}
		else
		{
			if(this.centerInfo!=null)
				return false;
		}
		
		if(mData.gameServerDic!=null)
		{
			if(this.gameServerDic==null)
				return false;
			if(this.gameServerDic.size()!=mData.gameServerDic.size())
				return false;
			IntObjectMap<GameServerSimpleInfoData> gameServerDicR=mData.gameServerDic;
			if(!this.gameServerDic.isEmpty())
			{
				int gameServerDicKFreeValue=this.gameServerDic.getFreeValue();
				int[] gameServerDicKKeys=this.gameServerDic.getKeys();
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicKI=gameServerDicKKeys.length-1;gameServerDicKI>=0;--gameServerDicKI)
				{
					int gameServerDicK=gameServerDicKKeys[gameServerDicKI];
					if(gameServerDicK!=gameServerDicKFreeValue)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicKI];
						GameServerSimpleInfoData gameServerDicU=gameServerDicR.get(gameServerDicK);
						if(gameServerDicU!=null)
						{
							if(gameServerDicV==null)
								return false;
							if(!gameServerDicV.dataEquals(gameServerDicU))
								return false;
						}
						else
						{
							if(gameServerDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.gameServerDic!=null)
				return false;
		}
		
		if(mData.sceneServerDic!=null)
		{
			if(this.sceneServerDic==null)
				return false;
			if(this.sceneServerDic.size()!=mData.sceneServerDic.size())
				return false;
			IntObjectMap<ServerSimpleInfoData> sceneServerDicR=mData.sceneServerDic;
			if(!this.sceneServerDic.isEmpty())
			{
				int sceneServerDicKFreeValue=this.sceneServerDic.getFreeValue();
				int[] sceneServerDicKKeys=this.sceneServerDic.getKeys();
				Object[] sceneServerDicVValues=this.sceneServerDic.getValues();
				for(int sceneServerDicKI=sceneServerDicKKeys.length-1;sceneServerDicKI>=0;--sceneServerDicKI)
				{
					int sceneServerDicK=sceneServerDicKKeys[sceneServerDicKI];
					if(sceneServerDicK!=sceneServerDicKFreeValue)
					{
						ServerSimpleInfoData sceneServerDicV=(ServerSimpleInfoData)sceneServerDicVValues[sceneServerDicKI];
						ServerSimpleInfoData sceneServerDicU=sceneServerDicR.get(sceneServerDicK);
						if(sceneServerDicU!=null)
						{
							if(sceneServerDicV==null)
								return false;
							if(!sceneServerDicV.dataEquals(sceneServerDicU))
								return false;
						}
						else
						{
							if(sceneServerDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.sceneServerDic!=null)
				return false;
		}
		
		if(mData.loginList!=null)
		{
			if(this.loginList==null)
				return false;
			if(this.loginList.length!=mData.loginList.length)
				return false;
			int[] loginListT=this.loginList;
			int[] loginListR=mData.loginList;
			int loginListLen=loginListT.length;
			for(int loginListI=0;loginListI<loginListLen;++loginListI)
			{
				int loginListU=loginListT[loginListI];
				int loginListV=loginListR[loginListI];
				if(loginListU!=loginListV)
					return false;
				
			}
		}
		else
		{
			if(this.loginList!=null)
				return false;
		}
		
		if(mData.clientVersion!=null)
		{
			if(this.clientVersion==null)
				return false;
			if(this.clientVersion.size()!=mData.clientVersion.size())
				return false;
			IntObjectMap<ClientVersionData> clientVersionR=mData.clientVersion;
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						ClientVersionData clientVersionU=clientVersionR.get(clientVersionK);
						if(clientVersionU!=null)
						{
							if(clientVersionV==null)
								return false;
							if(!clientVersionV.dataEquals(clientVersionU))
								return false;
						}
						else
						{
							if(clientVersionV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.clientVersion!=null)
				return false;
		}
		
		if(this.isOfficial!=mData.isOfficial)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("info");
		writer.sb.append(':');
		if(this.info!=null)
		{
			this.info.writeDataString(writer);
		}
		else
		{
			writer.sb.append("GameServerInfoData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("centerInfo");
		writer.sb.append(':');
		if(this.centerInfo!=null)
		{
			this.centerInfo.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ServerSimpleInfoData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gameServerDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,GameServerSimpleInfoData>");
		if(this.gameServerDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.gameServerDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.gameServerDic.isEmpty())
			{
				int gameServerDicKFreeValue=this.gameServerDic.getFreeValue();
				int[] gameServerDicKKeys=this.gameServerDic.getKeys();
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicKI=gameServerDicKKeys.length-1;gameServerDicKI>=0;--gameServerDicKI)
				{
					int gameServerDicK=gameServerDicKKeys[gameServerDicKI];
					if(gameServerDicK!=gameServerDicKFreeValue)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicKI];
						writer.writeTabs();
						writer.sb.append(gameServerDicK);
						
						writer.sb.append(':');
						if(gameServerDicV!=null)
						{
							gameServerDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("GameServerSimpleInfoData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("sceneServerDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,ServerSimpleInfoData>");
		if(this.sceneServerDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.sceneServerDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.sceneServerDic.isEmpty())
			{
				int sceneServerDicKFreeValue=this.sceneServerDic.getFreeValue();
				int[] sceneServerDicKKeys=this.sceneServerDic.getKeys();
				Object[] sceneServerDicVValues=this.sceneServerDic.getValues();
				for(int sceneServerDicKI=sceneServerDicKKeys.length-1;sceneServerDicKI>=0;--sceneServerDicKI)
				{
					int sceneServerDicK=sceneServerDicKKeys[sceneServerDicKI];
					if(sceneServerDicK!=sceneServerDicKFreeValue)
					{
						ServerSimpleInfoData sceneServerDicV=(ServerSimpleInfoData)sceneServerDicVValues[sceneServerDicKI];
						writer.writeTabs();
						writer.sb.append(sceneServerDicK);
						
						writer.sb.append(':');
						if(sceneServerDicV!=null)
						{
							sceneServerDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ServerSimpleInfoData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("loginList");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.loginList!=null)
		{
			int[] loginListT=this.loginList;
			int loginListLen=loginListT.length;
			writer.sb.append('(');
			writer.sb.append(loginListLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int loginListI=0;loginListI<loginListLen;++loginListI)
			{
				int loginListV=loginListT[loginListI];
				writer.writeTabs();
				writer.sb.append(loginListI);
				writer.sb.append(':');
				writer.sb.append(loginListV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientVersion");
		writer.sb.append(':');
		writer.sb.append("Map<int,ClientVersionData>");
		if(this.clientVersion!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.clientVersion.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						writer.writeTabs();
						writer.sb.append(clientVersionK);
						
						writer.sb.append(':');
						if(clientVersionV!=null)
						{
							clientVersionV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ClientVersionData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isOfficial");
		writer.sb.append(':');
		writer.sb.append(this.isOfficial);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.info=new GameServerInfoData();
		this.info.initDefault();
		this.centerInfo=new ServerSimpleInfoData();
		this.centerInfo.initDefault();
		this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new);
		this.sceneServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new);
		this.loginList=new int[0];
		this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.info=null;
		this.centerInfo=null;
		this.gameServerDic=null;
		this.sceneServerDic=null;
		this.loginList=null;
		this.clientVersion=null;
		this.isOfficial=false;
	}
	
}
