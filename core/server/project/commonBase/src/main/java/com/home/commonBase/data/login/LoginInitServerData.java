package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.login.ClientVersionData;
import com.home.commonBase.data.system.GameServerClientSimpleData;
import com.home.commonBase.data.system.GameServerSimpleInfoData;
import com.home.commonBase.data.system.ServerInfoData;
import com.home.commonBase.data.system.ServerSimpleInfoData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 登陆服初始化服务器数据(generated by shine) */
public class LoginInitServerData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.LoginInitServer;
	
	/** 本登录服信息 */
	public ServerInfoData info;
	
	/** 全部登陆服简版信息 */
	public IntObjectMap<ServerSimpleInfoData> loginServerDic;
	
	/** 全部游戏服简版信息 */
	public IntObjectMap<GameServerSimpleInfoData> gameServerDic;
	
	/** 游戏服组(客户端信息) */
	public IntObjectMap<GameServerClientSimpleData> games;
	
	/** 客户端版本 */
	public IntObjectMap<ClientVersionData> clientVersion;
	
	/** url重定向组 */
	public IntObjectMap<IntObjectMap<String>> redirectURLDic;
	
	/** 当前是否开放 */
	public boolean isOpen;
	
	public LoginInitServerData()
	{
		_dataID=BaseDataType.LoginInitServer;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "LoginInitServerData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData infoT=stream.readDataFullNotNull();
		if(infoT!=null)
		{
			if(infoT instanceof ServerInfoData)
			{
				this.info=(ServerInfoData)infoT;
			}
			else
			{
				this.info=new ServerInfoData();
				if(!(infoT.getClass().isAssignableFrom(ServerInfoData.class)))
				{
					stream.throwTypeReadError(ServerInfoData.class,infoT.getClass());
				}
				this.info.shadowCopy(infoT);
			}
		}
		else
		{
			this.info=null;
		}
		
		int loginServerDicLen=stream.readLen();
		if(this.loginServerDic!=null)
		{
			this.loginServerDic.clear();
			this.loginServerDic.ensureCapacity(loginServerDicLen);
		}
		else
		{
			this.loginServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new,loginServerDicLen);
		}
		
		IntObjectMap<ServerSimpleInfoData> loginServerDicT=this.loginServerDic;
		for(int loginServerDicI=loginServerDicLen-1;loginServerDicI>=0;--loginServerDicI)
		{
			ServerSimpleInfoData loginServerDicV;
			BaseData loginServerDicVT=stream.readDataFullNotNull();
			if(loginServerDicVT!=null)
			{
				if(loginServerDicVT instanceof ServerSimpleInfoData)
				{
					loginServerDicV=(ServerSimpleInfoData)loginServerDicVT;
				}
				else
				{
					loginServerDicV=new ServerSimpleInfoData();
					if(!(loginServerDicVT.getClass().isAssignableFrom(ServerSimpleInfoData.class)))
					{
						stream.throwTypeReadError(ServerSimpleInfoData.class,loginServerDicVT.getClass());
					}
					loginServerDicV.shadowCopy(loginServerDicVT);
				}
			}
			else
			{
				loginServerDicV=null;
			}
			
			loginServerDicT.put(loginServerDicV.id,loginServerDicV);
		}
		
		int gameServerDicLen=stream.readLen();
		if(this.gameServerDic!=null)
		{
			this.gameServerDic.clear();
			this.gameServerDic.ensureCapacity(gameServerDicLen);
		}
		else
		{
			this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new,gameServerDicLen);
		}
		
		IntObjectMap<GameServerSimpleInfoData> gameServerDicT=this.gameServerDic;
		for(int gameServerDicI=gameServerDicLen-1;gameServerDicI>=0;--gameServerDicI)
		{
			GameServerSimpleInfoData gameServerDicV;
			BaseData gameServerDicVT=stream.readDataFullNotNull();
			if(gameServerDicVT!=null)
			{
				if(gameServerDicVT instanceof GameServerSimpleInfoData)
				{
					gameServerDicV=(GameServerSimpleInfoData)gameServerDicVT;
				}
				else
				{
					gameServerDicV=new GameServerSimpleInfoData();
					if(!(gameServerDicVT.getClass().isAssignableFrom(GameServerSimpleInfoData.class)))
					{
						stream.throwTypeReadError(GameServerSimpleInfoData.class,gameServerDicVT.getClass());
					}
					gameServerDicV.shadowCopy(gameServerDicVT);
				}
			}
			else
			{
				gameServerDicV=null;
			}
			
			gameServerDicT.put(gameServerDicV.id,gameServerDicV);
		}
		
		int gamesLen=stream.readLen();
		if(this.games!=null)
		{
			this.games.clear();
			this.games.ensureCapacity(gamesLen);
		}
		else
		{
			this.games=new IntObjectMap<GameServerClientSimpleData>(GameServerClientSimpleData[]::new,gamesLen);
		}
		
		IntObjectMap<GameServerClientSimpleData> gamesT=this.games;
		for(int gamesI=gamesLen-1;gamesI>=0;--gamesI)
		{
			GameServerClientSimpleData gamesV;
			BaseData gamesVT=stream.readDataFullNotNull();
			if(gamesVT!=null)
			{
				if(gamesVT instanceof GameServerClientSimpleData)
				{
					gamesV=(GameServerClientSimpleData)gamesVT;
				}
				else
				{
					gamesV=new GameServerClientSimpleData();
					if(!(gamesVT.getClass().isAssignableFrom(GameServerClientSimpleData.class)))
					{
						stream.throwTypeReadError(GameServerClientSimpleData.class,gamesVT.getClass());
					}
					gamesV.shadowCopy(gamesVT);
				}
			}
			else
			{
				gamesV=null;
			}
			
			gamesT.put(gamesV.id,gamesV);
		}
		
		int clientVersionLen=stream.readLen();
		if(this.clientVersion!=null)
		{
			this.clientVersion.clear();
			this.clientVersion.ensureCapacity(clientVersionLen);
		}
		else
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionLen);
		}
		
		IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
		for(int clientVersionI=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
		{
			ClientVersionData clientVersionV;
			clientVersionV=new ClientVersionData();
			clientVersionV.readBytesFull(stream);
			
			clientVersionT.put(clientVersionV.type,clientVersionV);
		}
		
		int redirectURLDicLen=stream.readLen();
		if(this.redirectURLDic!=null)
		{
			this.redirectURLDic.clear();
			this.redirectURLDic.ensureCapacity(redirectURLDicLen);
		}
		else
		{
			this.redirectURLDic=new IntObjectMap<IntObjectMap<String>>(IntObjectMap[]::new,redirectURLDicLen);
		}
		
		IntObjectMap<IntObjectMap<String>> redirectURLDicT=this.redirectURLDic;
		for(int redirectURLDicI=redirectURLDicLen-1;redirectURLDicI>=0;--redirectURLDicI)
		{
			int redirectURLDicK;
			IntObjectMap<String> redirectURLDicV;
			redirectURLDicK=stream.readInt();
			
			int redirectURLDicVLen=stream.readLen();
			redirectURLDicV=new IntObjectMap<String>(String[]::new,redirectURLDicVLen);
			IntObjectMap<String> redirectURLDicVT=redirectURLDicV;
			for(int redirectURLDicVI=redirectURLDicVLen-1;redirectURLDicVI>=0;--redirectURLDicVI)
			{
				int redirectURLDicVK;
				String redirectURLDicVV;
				redirectURLDicVK=stream.readInt();
				
				redirectURLDicVV=stream.readUTF();
				
				redirectURLDicVT.put(redirectURLDicVK,redirectURLDicVV);
			}
			
			redirectURLDicT.put(redirectURLDicK,redirectURLDicV);
		}
		
		this.isOpen=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.info!=null)
		{
			stream.writeDataFullNotNull(this.info);
		}
		else
		{
			nullObjError("info");
		}
		
		if(this.loginServerDic!=null)
		{
			stream.writeLen(this.loginServerDic.size());
			if(!this.loginServerDic.isEmpty())
			{
				Object[] loginServerDicVValues=this.loginServerDic.getValues();
				for(int loginServerDicVI=loginServerDicVValues.length-1;loginServerDicVI>=0;--loginServerDicVI)
				{
					if(loginServerDicVValues[loginServerDicVI]!=null)
					{
						ServerSimpleInfoData loginServerDicV=(ServerSimpleInfoData)loginServerDicVValues[loginServerDicVI];
						if(loginServerDicV!=null)
						{
							stream.writeDataFullNotNull(loginServerDicV);
						}
						else
						{
							nullObjError("loginServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("loginServerDic");
		}
		
		if(this.gameServerDic!=null)
		{
			stream.writeLen(this.gameServerDic.size());
			if(!this.gameServerDic.isEmpty())
			{
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicVI=gameServerDicVValues.length-1;gameServerDicVI>=0;--gameServerDicVI)
				{
					if(gameServerDicVValues[gameServerDicVI]!=null)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicVI];
						if(gameServerDicV!=null)
						{
							stream.writeDataFullNotNull(gameServerDicV);
						}
						else
						{
							nullObjError("gameServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("gameServerDic");
		}
		
		if(this.games!=null)
		{
			stream.writeLen(this.games.size());
			if(!this.games.isEmpty())
			{
				Object[] gamesVValues=this.games.getValues();
				for(int gamesVI=gamesVValues.length-1;gamesVI>=0;--gamesVI)
				{
					if(gamesVValues[gamesVI]!=null)
					{
						GameServerClientSimpleData gamesV=(GameServerClientSimpleData)gamesVValues[gamesVI];
						if(gamesV!=null)
						{
							stream.writeDataFullNotNull(gamesV);
						}
						else
						{
							nullObjError("gamesV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("games");
		}
		
		if(this.clientVersion!=null)
		{
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						if(clientVersionV!=null)
						{
							clientVersionV.writeBytesFull(stream);
						}
						else
						{
							nullObjError("clientVersionV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("clientVersion");
		}
		
		if(this.redirectURLDic!=null)
		{
			stream.writeLen(this.redirectURLDic.size());
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						stream.writeInt(redirectURLDicK);
						
						if(redirectURLDicV!=null)
						{
							stream.writeLen(redirectURLDicV.size());
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										stream.writeInt(redirectURLDicVK);
										
										stream.writeUTF(redirectURLDicVV);
										
									}
								}
							}
						}
						else
						{
							nullObjError("redirectURLDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("redirectURLDic");
		}
		
		stream.writeBoolean(this.isOpen);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.info=(ServerInfoData)stream.readDataSimpleNotNull();
		
		int loginServerDicLen=stream.readLen();
		if(this.loginServerDic!=null)
		{
			this.loginServerDic.clear();
			this.loginServerDic.ensureCapacity(loginServerDicLen);
		}
		else
		{
			this.loginServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new,loginServerDicLen);
		}
		
		IntObjectMap<ServerSimpleInfoData> loginServerDicT=this.loginServerDic;
		for(int loginServerDicI=loginServerDicLen-1;loginServerDicI>=0;--loginServerDicI)
		{
			ServerSimpleInfoData loginServerDicV;
			loginServerDicV=(ServerSimpleInfoData)stream.readDataSimpleNotNull();
			
			loginServerDicT.put(loginServerDicV.id,loginServerDicV);
		}
		
		int gameServerDicLen=stream.readLen();
		if(this.gameServerDic!=null)
		{
			this.gameServerDic.clear();
			this.gameServerDic.ensureCapacity(gameServerDicLen);
		}
		else
		{
			this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new,gameServerDicLen);
		}
		
		IntObjectMap<GameServerSimpleInfoData> gameServerDicT=this.gameServerDic;
		for(int gameServerDicI=gameServerDicLen-1;gameServerDicI>=0;--gameServerDicI)
		{
			GameServerSimpleInfoData gameServerDicV;
			gameServerDicV=(GameServerSimpleInfoData)stream.readDataSimpleNotNull();
			
			gameServerDicT.put(gameServerDicV.id,gameServerDicV);
		}
		
		int gamesLen=stream.readLen();
		if(this.games!=null)
		{
			this.games.clear();
			this.games.ensureCapacity(gamesLen);
		}
		else
		{
			this.games=new IntObjectMap<GameServerClientSimpleData>(GameServerClientSimpleData[]::new,gamesLen);
		}
		
		IntObjectMap<GameServerClientSimpleData> gamesT=this.games;
		for(int gamesI=gamesLen-1;gamesI>=0;--gamesI)
		{
			GameServerClientSimpleData gamesV;
			gamesV=(GameServerClientSimpleData)stream.readDataSimpleNotNull();
			
			gamesT.put(gamesV.id,gamesV);
		}
		
		int clientVersionLen=stream.readLen();
		if(this.clientVersion!=null)
		{
			this.clientVersion.clear();
			this.clientVersion.ensureCapacity(clientVersionLen);
		}
		else
		{
			this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,clientVersionLen);
		}
		
		IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
		for(int clientVersionI=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
		{
			ClientVersionData clientVersionV;
			clientVersionV=new ClientVersionData();
			clientVersionV.readBytesSimple(stream);
			
			clientVersionT.put(clientVersionV.type,clientVersionV);
		}
		
		int redirectURLDicLen=stream.readLen();
		if(this.redirectURLDic!=null)
		{
			this.redirectURLDic.clear();
			this.redirectURLDic.ensureCapacity(redirectURLDicLen);
		}
		else
		{
			this.redirectURLDic=new IntObjectMap<IntObjectMap<String>>(IntObjectMap[]::new,redirectURLDicLen);
		}
		
		IntObjectMap<IntObjectMap<String>> redirectURLDicT=this.redirectURLDic;
		for(int redirectURLDicI=redirectURLDicLen-1;redirectURLDicI>=0;--redirectURLDicI)
		{
			int redirectURLDicK;
			IntObjectMap<String> redirectURLDicV;
			redirectURLDicK=stream.readInt();
			
			int redirectURLDicVLen=stream.readLen();
			redirectURLDicV=new IntObjectMap<String>(String[]::new,redirectURLDicVLen);
			IntObjectMap<String> redirectURLDicVT=redirectURLDicV;
			for(int redirectURLDicVI=redirectURLDicVLen-1;redirectURLDicVI>=0;--redirectURLDicVI)
			{
				int redirectURLDicVK;
				String redirectURLDicVV;
				redirectURLDicVK=stream.readInt();
				
				redirectURLDicVV=stream.readUTF();
				
				redirectURLDicVT.put(redirectURLDicVK,redirectURLDicVV);
			}
			
			redirectURLDicT.put(redirectURLDicK,redirectURLDicV);
		}
		
		this.isOpen=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.info!=null)
		{
			stream.writeDataSimpleNotNull(this.info);
		}
		else
		{
			nullObjError("info");
		}
		
		if(this.loginServerDic!=null)
		{
			stream.writeLen(this.loginServerDic.size());
			if(!this.loginServerDic.isEmpty())
			{
				Object[] loginServerDicVValues=this.loginServerDic.getValues();
				for(int loginServerDicVI=loginServerDicVValues.length-1;loginServerDicVI>=0;--loginServerDicVI)
				{
					if(loginServerDicVValues[loginServerDicVI]!=null)
					{
						ServerSimpleInfoData loginServerDicV=(ServerSimpleInfoData)loginServerDicVValues[loginServerDicVI];
						if(loginServerDicV!=null)
						{
							stream.writeDataSimpleNotNull(loginServerDicV);
						}
						else
						{
							nullObjError("loginServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("loginServerDic");
		}
		
		if(this.gameServerDic!=null)
		{
			stream.writeLen(this.gameServerDic.size());
			if(!this.gameServerDic.isEmpty())
			{
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicVI=gameServerDicVValues.length-1;gameServerDicVI>=0;--gameServerDicVI)
				{
					if(gameServerDicVValues[gameServerDicVI]!=null)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicVI];
						if(gameServerDicV!=null)
						{
							stream.writeDataSimpleNotNull(gameServerDicV);
						}
						else
						{
							nullObjError("gameServerDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("gameServerDic");
		}
		
		if(this.games!=null)
		{
			stream.writeLen(this.games.size());
			if(!this.games.isEmpty())
			{
				Object[] gamesVValues=this.games.getValues();
				for(int gamesVI=gamesVValues.length-1;gamesVI>=0;--gamesVI)
				{
					if(gamesVValues[gamesVI]!=null)
					{
						GameServerClientSimpleData gamesV=(GameServerClientSimpleData)gamesVValues[gamesVI];
						if(gamesV!=null)
						{
							stream.writeDataSimpleNotNull(gamesV);
						}
						else
						{
							nullObjError("gamesV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("games");
		}
		
		if(this.clientVersion!=null)
		{
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						if(clientVersionV!=null)
						{
							clientVersionV.writeBytesSimple(stream);
						}
						else
						{
							nullObjError("clientVersionV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("clientVersion");
		}
		
		if(this.redirectURLDic!=null)
		{
			stream.writeLen(this.redirectURLDic.size());
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						stream.writeInt(redirectURLDicK);
						
						if(redirectURLDicV!=null)
						{
							stream.writeLen(redirectURLDicV.size());
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										stream.writeInt(redirectURLDicVK);
										
										stream.writeUTF(redirectURLDicVV);
										
									}
								}
							}
						}
						else
						{
							nullObjError("redirectURLDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("redirectURLDic");
		}
		
		stream.writeBoolean(this.isOpen);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof LoginInitServerData))
			return;
		
		LoginInitServerData mData=(LoginInitServerData)data;
		
		this.info=mData.info;
		this.loginServerDic=mData.loginServerDic;
		this.gameServerDic=mData.gameServerDic;
		this.games=mData.games;
		this.clientVersion=mData.clientVersion;
		this.redirectURLDic=mData.redirectURLDic;
		this.isOpen=mData.isOpen;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof LoginInitServerData))
			return;
		
		LoginInitServerData mData=(LoginInitServerData)data;
		
		if(mData.info!=null)
		{
			this.info=(ServerInfoData)mData.info.clone();
		}
		else
		{
			this.info=null;
			nullObjError("info");
		}
		
		if(mData.loginServerDic!=null)
		{
			if(this.loginServerDic!=null)
			{
				this.loginServerDic.clear();
				this.loginServerDic.ensureCapacity(mData.loginServerDic.size());
			}
			else
			{
				this.loginServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new,mData.loginServerDic.size());
			}
			
			IntObjectMap<ServerSimpleInfoData> loginServerDicT=this.loginServerDic;
			if(!mData.loginServerDic.isEmpty())
			{
				Object[] loginServerDicVValues=mData.loginServerDic.getValues();
				for(int loginServerDicVI=loginServerDicVValues.length-1;loginServerDicVI>=0;--loginServerDicVI)
				{
					if(loginServerDicVValues[loginServerDicVI]!=null)
					{
						ServerSimpleInfoData loginServerDicV=(ServerSimpleInfoData)loginServerDicVValues[loginServerDicVI];
						ServerSimpleInfoData loginServerDicU;
						if(loginServerDicV!=null)
						{
							loginServerDicU=(ServerSimpleInfoData)loginServerDicV.clone();
						}
						else
						{
							loginServerDicU=null;
							nullObjError("loginServerDicU");
						}
						
						loginServerDicT.put(loginServerDicU.id,loginServerDicU);
					}
				}
			}
		}
		else
		{
			this.loginServerDic=null;
			nullObjError("loginServerDic");
		}
		
		if(mData.gameServerDic!=null)
		{
			if(this.gameServerDic!=null)
			{
				this.gameServerDic.clear();
				this.gameServerDic.ensureCapacity(mData.gameServerDic.size());
			}
			else
			{
				this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new,mData.gameServerDic.size());
			}
			
			IntObjectMap<GameServerSimpleInfoData> gameServerDicT=this.gameServerDic;
			if(!mData.gameServerDic.isEmpty())
			{
				Object[] gameServerDicVValues=mData.gameServerDic.getValues();
				for(int gameServerDicVI=gameServerDicVValues.length-1;gameServerDicVI>=0;--gameServerDicVI)
				{
					if(gameServerDicVValues[gameServerDicVI]!=null)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicVI];
						GameServerSimpleInfoData gameServerDicU;
						if(gameServerDicV!=null)
						{
							gameServerDicU=(GameServerSimpleInfoData)gameServerDicV.clone();
						}
						else
						{
							gameServerDicU=null;
							nullObjError("gameServerDicU");
						}
						
						gameServerDicT.put(gameServerDicU.id,gameServerDicU);
					}
				}
			}
		}
		else
		{
			this.gameServerDic=null;
			nullObjError("gameServerDic");
		}
		
		if(mData.games!=null)
		{
			if(this.games!=null)
			{
				this.games.clear();
				this.games.ensureCapacity(mData.games.size());
			}
			else
			{
				this.games=new IntObjectMap<GameServerClientSimpleData>(GameServerClientSimpleData[]::new,mData.games.size());
			}
			
			IntObjectMap<GameServerClientSimpleData> gamesT=this.games;
			if(!mData.games.isEmpty())
			{
				Object[] gamesVValues=mData.games.getValues();
				for(int gamesVI=gamesVValues.length-1;gamesVI>=0;--gamesVI)
				{
					if(gamesVValues[gamesVI]!=null)
					{
						GameServerClientSimpleData gamesV=(GameServerClientSimpleData)gamesVValues[gamesVI];
						GameServerClientSimpleData gamesU;
						if(gamesV!=null)
						{
							gamesU=(GameServerClientSimpleData)gamesV.clone();
						}
						else
						{
							gamesU=null;
							nullObjError("gamesU");
						}
						
						gamesT.put(gamesU.id,gamesU);
					}
				}
			}
		}
		else
		{
			this.games=null;
			nullObjError("games");
		}
		
		if(mData.clientVersion!=null)
		{
			if(this.clientVersion!=null)
			{
				this.clientVersion.clear();
				this.clientVersion.ensureCapacity(mData.clientVersion.size());
			}
			else
			{
				this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new,mData.clientVersion.size());
			}
			
			IntObjectMap<ClientVersionData> clientVersionT=this.clientVersion;
			if(!mData.clientVersion.isEmpty())
			{
				Object[] clientVersionVValues=mData.clientVersion.getValues();
				for(int clientVersionVI=clientVersionVValues.length-1;clientVersionVI>=0;--clientVersionVI)
				{
					if(clientVersionVValues[clientVersionVI]!=null)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionVI];
						ClientVersionData clientVersionU;
						if(clientVersionV!=null)
						{
							clientVersionU=new ClientVersionData();
							clientVersionU.copy(clientVersionV);
						}
						else
						{
							clientVersionU=null;
							nullObjError("clientVersionU");
						}
						
						clientVersionT.put(clientVersionU.type,clientVersionU);
					}
				}
			}
		}
		else
		{
			this.clientVersion=null;
			nullObjError("clientVersion");
		}
		
		if(mData.redirectURLDic!=null)
		{
			if(this.redirectURLDic!=null)
			{
				this.redirectURLDic.clear();
				this.redirectURLDic.ensureCapacity(mData.redirectURLDic.size());
			}
			else
			{
				this.redirectURLDic=new IntObjectMap<IntObjectMap<String>>(IntObjectMap[]::new,mData.redirectURLDic.size());
			}
			
			IntObjectMap<IntObjectMap<String>> redirectURLDicT=this.redirectURLDic;
			if(!mData.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=mData.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=mData.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=mData.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						int redirectURLDicW;
						IntObjectMap<String> redirectURLDicU;
						redirectURLDicW=redirectURLDicK;
						
						if(redirectURLDicV!=null)
						{
							redirectURLDicU=new IntObjectMap<String>(String[]::new,redirectURLDicV.size());
							IntObjectMap<String> redirectURLDicUT=redirectURLDicU;
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicUKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicUKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicUVValues=redirectURLDicV.getValues();
								for(int redirectURLDicUKI=redirectURLDicUKKeys.length-1;redirectURLDicUKI>=0;--redirectURLDicUKI)
								{
									int redirectURLDicUK=redirectURLDicUKKeys[redirectURLDicUKI];
									if(redirectURLDicUK!=redirectURLDicUKFreeValue)
									{
										String redirectURLDicUV=(String)redirectURLDicUVValues[redirectURLDicUKI];
										int redirectURLDicUW;
										String redirectURLDicUU;
										redirectURLDicUW=redirectURLDicUK;
										
										redirectURLDicUU=redirectURLDicUV;
										
										redirectURLDicUT.put(redirectURLDicUW,redirectURLDicUU);
									}
								}
							}
						}
						else
						{
							redirectURLDicU=null;
							nullObjError("redirectURLDicU");
						}
						
						redirectURLDicT.put(redirectURLDicW,redirectURLDicU);
					}
				}
			}
		}
		else
		{
			this.redirectURLDic=null;
			nullObjError("redirectURLDic");
		}
		
		this.isOpen=mData.isOpen;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		LoginInitServerData mData=(LoginInitServerData)data;
		if(mData.info!=null)
		{
			if(this.info==null)
				return false;
			if(!this.info.dataEquals(mData.info))
				return false;
		}
		else
		{
			if(this.info!=null)
				return false;
		}
		
		if(mData.loginServerDic!=null)
		{
			if(this.loginServerDic==null)
				return false;
			if(this.loginServerDic.size()!=mData.loginServerDic.size())
				return false;
			IntObjectMap<ServerSimpleInfoData> loginServerDicR=mData.loginServerDic;
			if(!this.loginServerDic.isEmpty())
			{
				int loginServerDicKFreeValue=this.loginServerDic.getFreeValue();
				int[] loginServerDicKKeys=this.loginServerDic.getKeys();
				Object[] loginServerDicVValues=this.loginServerDic.getValues();
				for(int loginServerDicKI=loginServerDicKKeys.length-1;loginServerDicKI>=0;--loginServerDicKI)
				{
					int loginServerDicK=loginServerDicKKeys[loginServerDicKI];
					if(loginServerDicK!=loginServerDicKFreeValue)
					{
						ServerSimpleInfoData loginServerDicV=(ServerSimpleInfoData)loginServerDicVValues[loginServerDicKI];
						ServerSimpleInfoData loginServerDicU=loginServerDicR.get(loginServerDicK);
						if(loginServerDicU!=null)
						{
							if(loginServerDicV==null)
								return false;
							if(!loginServerDicV.dataEquals(loginServerDicU))
								return false;
						}
						else
						{
							if(loginServerDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.loginServerDic!=null)
				return false;
		}
		
		if(mData.gameServerDic!=null)
		{
			if(this.gameServerDic==null)
				return false;
			if(this.gameServerDic.size()!=mData.gameServerDic.size())
				return false;
			IntObjectMap<GameServerSimpleInfoData> gameServerDicR=mData.gameServerDic;
			if(!this.gameServerDic.isEmpty())
			{
				int gameServerDicKFreeValue=this.gameServerDic.getFreeValue();
				int[] gameServerDicKKeys=this.gameServerDic.getKeys();
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicKI=gameServerDicKKeys.length-1;gameServerDicKI>=0;--gameServerDicKI)
				{
					int gameServerDicK=gameServerDicKKeys[gameServerDicKI];
					if(gameServerDicK!=gameServerDicKFreeValue)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicKI];
						GameServerSimpleInfoData gameServerDicU=gameServerDicR.get(gameServerDicK);
						if(gameServerDicU!=null)
						{
							if(gameServerDicV==null)
								return false;
							if(!gameServerDicV.dataEquals(gameServerDicU))
								return false;
						}
						else
						{
							if(gameServerDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.gameServerDic!=null)
				return false;
		}
		
		if(mData.games!=null)
		{
			if(this.games==null)
				return false;
			if(this.games.size()!=mData.games.size())
				return false;
			IntObjectMap<GameServerClientSimpleData> gamesR=mData.games;
			if(!this.games.isEmpty())
			{
				int gamesKFreeValue=this.games.getFreeValue();
				int[] gamesKKeys=this.games.getKeys();
				Object[] gamesVValues=this.games.getValues();
				for(int gamesKI=gamesKKeys.length-1;gamesKI>=0;--gamesKI)
				{
					int gamesK=gamesKKeys[gamesKI];
					if(gamesK!=gamesKFreeValue)
					{
						GameServerClientSimpleData gamesV=(GameServerClientSimpleData)gamesVValues[gamesKI];
						GameServerClientSimpleData gamesU=gamesR.get(gamesK);
						if(gamesU!=null)
						{
							if(gamesV==null)
								return false;
							if(!gamesV.dataEquals(gamesU))
								return false;
						}
						else
						{
							if(gamesV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.games!=null)
				return false;
		}
		
		if(mData.clientVersion!=null)
		{
			if(this.clientVersion==null)
				return false;
			if(this.clientVersion.size()!=mData.clientVersion.size())
				return false;
			IntObjectMap<ClientVersionData> clientVersionR=mData.clientVersion;
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						ClientVersionData clientVersionU=clientVersionR.get(clientVersionK);
						if(clientVersionU!=null)
						{
							if(clientVersionV==null)
								return false;
							if(!clientVersionV.dataEquals(clientVersionU))
								return false;
						}
						else
						{
							if(clientVersionV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.clientVersion!=null)
				return false;
		}
		
		if(mData.redirectURLDic!=null)
		{
			if(this.redirectURLDic==null)
				return false;
			if(this.redirectURLDic.size()!=mData.redirectURLDic.size())
				return false;
			IntObjectMap<IntObjectMap<String>> redirectURLDicR=mData.redirectURLDic;
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						IntObjectMap<String> redirectURLDicU=redirectURLDicR.get(redirectURLDicK);
						if(redirectURLDicU!=null)
						{
							if(redirectURLDicV==null)
								return false;
							if(redirectURLDicV.size()!=redirectURLDicU.size())
								return false;
							IntObjectMap<String> redirectURLDicVR=redirectURLDicU;
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										String redirectURLDicVU=redirectURLDicVR.get(redirectURLDicVK);
										if(!redirectURLDicVV.equals(redirectURLDicVU))
											return false;
										
									}
								}
							}
						}
						else
						{
							if(redirectURLDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.redirectURLDic!=null)
				return false;
		}
		
		if(this.isOpen!=mData.isOpen)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("info");
		writer.sb.append(':');
		if(this.info!=null)
		{
			this.info.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ServerInfoData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("loginServerDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,ServerSimpleInfoData>");
		if(this.loginServerDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.loginServerDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.loginServerDic.isEmpty())
			{
				int loginServerDicKFreeValue=this.loginServerDic.getFreeValue();
				int[] loginServerDicKKeys=this.loginServerDic.getKeys();
				Object[] loginServerDicVValues=this.loginServerDic.getValues();
				for(int loginServerDicKI=loginServerDicKKeys.length-1;loginServerDicKI>=0;--loginServerDicKI)
				{
					int loginServerDicK=loginServerDicKKeys[loginServerDicKI];
					if(loginServerDicK!=loginServerDicKFreeValue)
					{
						ServerSimpleInfoData loginServerDicV=(ServerSimpleInfoData)loginServerDicVValues[loginServerDicKI];
						writer.writeTabs();
						writer.sb.append(loginServerDicK);
						
						writer.sb.append(':');
						if(loginServerDicV!=null)
						{
							loginServerDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ServerSimpleInfoData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gameServerDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,GameServerSimpleInfoData>");
		if(this.gameServerDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.gameServerDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.gameServerDic.isEmpty())
			{
				int gameServerDicKFreeValue=this.gameServerDic.getFreeValue();
				int[] gameServerDicKKeys=this.gameServerDic.getKeys();
				Object[] gameServerDicVValues=this.gameServerDic.getValues();
				for(int gameServerDicKI=gameServerDicKKeys.length-1;gameServerDicKI>=0;--gameServerDicKI)
				{
					int gameServerDicK=gameServerDicKKeys[gameServerDicKI];
					if(gameServerDicK!=gameServerDicKFreeValue)
					{
						GameServerSimpleInfoData gameServerDicV=(GameServerSimpleInfoData)gameServerDicVValues[gameServerDicKI];
						writer.writeTabs();
						writer.sb.append(gameServerDicK);
						
						writer.sb.append(':');
						if(gameServerDicV!=null)
						{
							gameServerDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("GameServerSimpleInfoData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("games");
		writer.sb.append(':');
		writer.sb.append("Map<int,GameServerClientSimpleData>");
		if(this.games!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.games.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.games.isEmpty())
			{
				int gamesKFreeValue=this.games.getFreeValue();
				int[] gamesKKeys=this.games.getKeys();
				Object[] gamesVValues=this.games.getValues();
				for(int gamesKI=gamesKKeys.length-1;gamesKI>=0;--gamesKI)
				{
					int gamesK=gamesKKeys[gamesKI];
					if(gamesK!=gamesKFreeValue)
					{
						GameServerClientSimpleData gamesV=(GameServerClientSimpleData)gamesVValues[gamesKI];
						writer.writeTabs();
						writer.sb.append(gamesK);
						
						writer.sb.append(':');
						if(gamesV!=null)
						{
							gamesV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("GameServerClientSimpleData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientVersion");
		writer.sb.append(':');
		writer.sb.append("Map<int,ClientVersionData>");
		if(this.clientVersion!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.clientVersion.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.clientVersion.isEmpty())
			{
				int clientVersionKFreeValue=this.clientVersion.getFreeValue();
				int[] clientVersionKKeys=this.clientVersion.getKeys();
				Object[] clientVersionVValues=this.clientVersion.getValues();
				for(int clientVersionKI=clientVersionKKeys.length-1;clientVersionKI>=0;--clientVersionKI)
				{
					int clientVersionK=clientVersionKKeys[clientVersionKI];
					if(clientVersionK!=clientVersionKFreeValue)
					{
						ClientVersionData clientVersionV=(ClientVersionData)clientVersionVValues[clientVersionKI];
						writer.writeTabs();
						writer.sb.append(clientVersionK);
						
						writer.sb.append(':');
						if(clientVersionV!=null)
						{
							clientVersionV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ClientVersionData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("redirectURLDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,IntObjectMap<String>>");
		if(this.redirectURLDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.redirectURLDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.redirectURLDic.isEmpty())
			{
				int redirectURLDicKFreeValue=this.redirectURLDic.getFreeValue();
				int[] redirectURLDicKKeys=this.redirectURLDic.getKeys();
				Object[] redirectURLDicVValues=this.redirectURLDic.getValues();
				for(int redirectURLDicKI=redirectURLDicKKeys.length-1;redirectURLDicKI>=0;--redirectURLDicKI)
				{
					int redirectURLDicK=redirectURLDicKKeys[redirectURLDicKI];
					if(redirectURLDicK!=redirectURLDicKFreeValue)
					{
						IntObjectMap<String> redirectURLDicV=(IntObjectMap<String>)redirectURLDicVValues[redirectURLDicKI];
						writer.writeTabs();
						writer.sb.append(redirectURLDicK);
						
						writer.sb.append(':');
						writer.sb.append("Map<int,String>");
						if(redirectURLDicV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(redirectURLDicV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!redirectURLDicV.isEmpty())
							{
								int redirectURLDicVKFreeValue=redirectURLDicV.getFreeValue();
								int[] redirectURLDicVKKeys=redirectURLDicV.getKeys();
								Object[] redirectURLDicVVValues=redirectURLDicV.getValues();
								for(int redirectURLDicVKI=redirectURLDicVKKeys.length-1;redirectURLDicVKI>=0;--redirectURLDicVKI)
								{
									int redirectURLDicVK=redirectURLDicVKKeys[redirectURLDicVKI];
									if(redirectURLDicVK!=redirectURLDicVKFreeValue)
									{
										String redirectURLDicVV=(String)redirectURLDicVVValues[redirectURLDicVKI];
										writer.writeTabs();
										writer.sb.append(redirectURLDicVK);
										
										writer.sb.append(':');
										writer.sb.append(redirectURLDicVV);
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isOpen");
		writer.sb.append(':');
		writer.sb.append(this.isOpen);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.info=new ServerInfoData();
		this.info.initDefault();
		this.loginServerDic=new IntObjectMap<ServerSimpleInfoData>(ServerSimpleInfoData[]::new);
		this.gameServerDic=new IntObjectMap<GameServerSimpleInfoData>(GameServerSimpleInfoData[]::new);
		this.games=new IntObjectMap<GameServerClientSimpleData>(GameServerClientSimpleData[]::new);
		this.clientVersion=new IntObjectMap<ClientVersionData>(ClientVersionData[]::new);
		this.redirectURLDic=new IntObjectMap<IntObjectMap<String>>(IntObjectMap[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.info=null;
		this.loginServerDic=null;
		this.gameServerDic=null;
		this.games=null;
		this.clientVersion=null;
		this.redirectURLDic=null;
		this.isOpen=false;
	}
	
}
