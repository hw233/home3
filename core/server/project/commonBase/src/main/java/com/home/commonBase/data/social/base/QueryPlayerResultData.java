package com.home.commonBase.data.social.base;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 查询角色结果数据(generated by shine) */
public class QueryPlayerResultData extends BaseData
{
	/** 查询参数组 */
	public int[] queryArgs;
	
	/** 查询类型 */
	public int queryType;
	
	/** 被查询角色ID */
	public long queryPlayerID;
	
	/** 是否有该角色 */
	public boolean isSuccess;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.QueryPlayerResult;
	
	public QueryPlayerResultData()
	{
		_dataID=BaseDataType.QueryPlayerResult;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "QueryPlayerResultData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.queryPlayerID=stream.readLong();
		
		this.queryType=stream.readInt();
		
		if(stream.readBoolean())
		{
			int queryArgsLen=stream.readLen();
			if(this.queryArgs==null || this.queryArgs.length!=queryArgsLen)
			{
				this.queryArgs=new int[queryArgsLen];
			}
			int[] queryArgsT=this.queryArgs;
			for(int queryArgsI=0;queryArgsI<queryArgsLen;++queryArgsI)
			{
				int queryArgsV;
				queryArgsV=stream.readInt();
				
				queryArgsT[queryArgsI]=queryArgsV;
			}
		}
		else
		{
			this.queryArgs=null;
		}
		
		this.isSuccess=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.queryPlayerID);
		
		stream.writeInt(this.queryType);
		
		if(this.queryArgs!=null)
		{
			stream.writeBoolean(true);
			int[] queryArgsT=this.queryArgs;
			stream.writeLen(queryArgsT.length);
			for(int queryArgsVI=0,queryArgsVLen=queryArgsT.length;queryArgsVI<queryArgsVLen;++queryArgsVI)
			{
				int queryArgsV=queryArgsT[queryArgsVI];
				stream.writeInt(queryArgsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeBoolean(this.isSuccess);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.queryPlayerID=stream.readLong();
		
		this.queryType=stream.readInt();
		
		if(stream.readBoolean())
		{
			int queryArgsLen=stream.readLen();
			if(this.queryArgs==null || this.queryArgs.length!=queryArgsLen)
			{
				this.queryArgs=new int[queryArgsLen];
			}
			int[] queryArgsT=this.queryArgs;
			for(int queryArgsI=0;queryArgsI<queryArgsLen;++queryArgsI)
			{
				int queryArgsV;
				queryArgsV=stream.readInt();
				
				queryArgsT[queryArgsI]=queryArgsV;
			}
		}
		else
		{
			this.queryArgs=null;
		}
		
		this.isSuccess=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.queryPlayerID);
		
		stream.writeInt(this.queryType);
		
		if(this.queryArgs!=null)
		{
			stream.writeBoolean(true);
			int[] queryArgsT=this.queryArgs;
			stream.writeLen(queryArgsT.length);
			for(int queryArgsVI=0,queryArgsVLen=queryArgsT.length;queryArgsVI<queryArgsVLen;++queryArgsVI)
			{
				int queryArgsV=queryArgsT[queryArgsVI];
				stream.writeInt(queryArgsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeBoolean(this.isSuccess);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof QueryPlayerResultData))
			return;
		
		QueryPlayerResultData mData=(QueryPlayerResultData)data;
		
		this.queryPlayerID=mData.queryPlayerID;
		this.queryType=mData.queryType;
		this.queryArgs=mData.queryArgs;
		this.isSuccess=mData.isSuccess;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof QueryPlayerResultData))
			return;
		
		QueryPlayerResultData mData=(QueryPlayerResultData)data;
		
		this.queryPlayerID=mData.queryPlayerID;
		
		this.queryType=mData.queryType;
		
		if(mData.queryArgs!=null)
		{
			int[] queryArgsR=mData.queryArgs;
			int queryArgsLen=queryArgsR.length;
			if(this.queryArgs==null || this.queryArgs.length!=queryArgsLen)
			{
				this.queryArgs=new int[queryArgsLen];
			}
			BytesControl.arrayCopy(mData.queryArgs,this.queryArgs,queryArgsLen);
		}
		else
		{
			this.queryArgs=null;
		}
		
		this.isSuccess=mData.isSuccess;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		QueryPlayerResultData mData=(QueryPlayerResultData)data;
		if(this.queryPlayerID!=mData.queryPlayerID)
			return false;
		
		if(this.queryType!=mData.queryType)
			return false;
		
		if(mData.queryArgs!=null)
		{
			if(this.queryArgs==null)
				return false;
			if(this.queryArgs.length!=mData.queryArgs.length)
				return false;
			int[] queryArgsT=this.queryArgs;
			int[] queryArgsR=mData.queryArgs;
			int queryArgsLen=queryArgsT.length;
			for(int queryArgsI=0;queryArgsI<queryArgsLen;++queryArgsI)
			{
				int queryArgsU=queryArgsT[queryArgsI];
				int queryArgsV=queryArgsR[queryArgsI];
				if(queryArgsU!=queryArgsV)
					return false;
				
			}
		}
		else
		{
			if(this.queryArgs!=null)
				return false;
		}
		
		if(this.isSuccess!=mData.isSuccess)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("queryPlayerID");
		writer.sb.append(':');
		writer.sb.append(this.queryPlayerID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("queryType");
		writer.sb.append(':');
		writer.sb.append(this.queryType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("queryArgs");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.queryArgs!=null)
		{
			int[] queryArgsT=this.queryArgs;
			int queryArgsLen=queryArgsT.length;
			writer.sb.append('(');
			writer.sb.append(queryArgsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int queryArgsI=0;queryArgsI<queryArgsLen;++queryArgsI)
			{
				int queryArgsV=queryArgsT[queryArgsI];
				writer.writeTabs();
				writer.sb.append(queryArgsI);
				writer.sb.append(':');
				writer.sb.append(queryArgsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isSuccess");
		writer.sb.append(':');
		writer.sb.append(this.isSuccess);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.queryPlayerID=0L;
		this.queryType=0;
		this.queryArgs=null;
		this.isSuccess=false;
	}
	
}
