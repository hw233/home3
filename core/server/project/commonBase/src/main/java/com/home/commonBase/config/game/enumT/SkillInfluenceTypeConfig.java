package com.home.commonBase.config.game.enumT;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.constlist.generate.SkillInfluenceType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.SMap;
import com.home.shine.support.pool.StringBuilderPool;

/** 技能影响类型(generated by shine) */
public class SkillInfluenceTypeConfig extends BaseConfig
{
	/** 存储集合 */
	private static SkillInfluenceTypeConfig[] _dic;
	
	/** id */
	public int id;
	
	/** 默认值 */
	public boolean defaultValue;
	
	/** 样本 */
	private static boolean[] _sample;
	
	/** 结果组 */
	private static SMap<String,boolean[]> _resultDic=new SMap<>();
	
	/** 获取 */
	public static SkillInfluenceTypeConfig get(int id)
	{
		return id>=0 && id<_dic.length ? _dic[id] : null;
	}
	
	/** 设置字典 */
	public static void setDic(SkillInfluenceTypeConfig[] dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static SkillInfluenceTypeConfig[] getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.defaultValue=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeBoolean(this.defaultValue);
		
	}
	
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		if(_sample==null)
		{
			_sample=new boolean[SkillInfluenceType.size];
		}
		
		//赋值
		_sample[id]=defaultValue;
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		SkillInfluenceType.enemyE=getInfluenceSet(new int[]{SkillInfluenceType.Enemy});
		SkillInfluenceType.friendE=getInfluenceSet(new int[]{SkillInfluenceType.Friend});
	}
	
	/** 获取影响组 */
	public static boolean[] getInfluenceSet(int[] arr)
	{
		String key=countKey(arr);
		
		boolean[] re;
		if((re=_resultDic.get(key))==null)
		{
			re=new boolean[SkillInfluenceType.size];
			System.arraycopy(_sample,0,re,0,re.length);
			
			for(int v:arr)
			{
				if(v>0)
				{
					re[v]=true;
				}
				else
				{
					re[-v]=false;
				}
			}
			
			_resultDic.put(key,re);
		}
		
		return re;
	}
	
	private static String countKey(int[] arr)
	{
		StringBuilder sb=StringBuilderPool.create();
		
		for(int v:arr)
		{
			sb.append(v);
		}
		
		return StringBuilderPool.releaseStr(sb);
	}
	
}
