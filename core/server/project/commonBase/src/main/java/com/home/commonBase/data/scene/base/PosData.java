package com.home.commonBase.data.scene.base;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.global.Global;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.dataEx.ExternBuf;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;
import com.home.shine.utils.MathUtils;
import com.home.shine.utils.StringUtils;

/** 位置数据(generated by shine) */
public class PosData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Pos;
	
	/** y传输 */
	public int iy;
	
	/** x传输 */
	public int ix;
	
	/** z传输 */
	public int iz;
	
	/** x坐标 */
	public float x;
	
	/** y坐标 */
	public float y;
	
	/** z坐标 */
	public float z;
	
	public PosData()
	{
		_dataID=BaseDataType.Pos;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iz=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iz);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iz=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iz);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof PosData))
			return;
		
		PosData mData=(PosData)data;
		
		this.ix=mData.ix;
		this.iy=mData.iy;
		this.iz=mData.iz;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof PosData))
			return;
		
		PosData mData=(PosData)data;
		
		this.ix=mData.ix;
		
		this.iy=mData.iy;
		
		this.iz=mData.iz;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		PosData mData=(PosData)data;
		if(this.ix!=mData.ix)
			return false;
		
		if(this.iy!=mData.iy)
			return false;
		
		if(this.iz!=mData.iz)
			return false;
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PosData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("ix");
		writer.sb.append(':');
		writer.sb.append(this.ix);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("iy");
		writer.sb.append(':');
		writer.sb.append(this.iy);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("iz");
		writer.sb.append(':');
		writer.sb.append(this.iz);
		
		writer.writeEnter();
	}
	
	@Override
	protected void beforeWrite()
	{
		float scale;
		ix=(int)(x*(scale=Global.posSendScale));
		iy=(int)(y*scale);
		iz=(int)(z*scale);
	}
	
	@Override
	protected void afterRead()
	{
		float scale;
		x=ix/(scale=Global.posSendScale);
		y=iy/scale;
		z=iz/scale;
	}
	
	@Override
	public String toString()
	{
		return "{x:"+ StringUtils.roundStrF2(x)+",y:"+StringUtils.roundStrF2(y)+",z:"+StringUtils.roundStrF2(z)+"}";
	}
	
	/** 通过float[]设置坐标 */
	public void setByFArr(float[] arr)
	{
		if(CommonSetting.is3D)
		{
			if(arr.length<2)
			{
				x=0f;
				y=0f;
				z=0f;
				
				return;
			}
			
			if(arr.length==2)
			{
				if(CommonSetting.isZHeight)
				{
					x=arr[0];
					y=arr[1];
					z=0f;
				}
				else
				{
					x=arr[0];
					y=0f;
					z=arr[1];
				}
			}
			else
			{
				x=arr[0];
				y=arr[1];
				z=arr[2];
			}
		}
		else
		{
			if(arr.length<2)
			{
				x=0f;
				y=0f;
				return;
			}
			
			x=arr[0];
			y=arr[1];
		}
	}
	
	/** int[]设置坐标 */
	public void setByIArr(int[] arr)
	{
		if(CommonSetting.is3D)
		{
			if(arr.length<2)
			{
				x=0f;
				y=0f;
				z=0f;
				
				return;
			}
			
			if(arr.length==2)
			{
				if(CommonSetting.isZHeight)
				{
					x=arr[0];
					y=arr[1];
					z=0f;
				}
				else
				{
					x=arr[0];
					y=0f;
					z=arr[1];
				}
			}
			else
			{
				x=arr[0];
				y=arr[1];
				z=arr[2];
			}
		}
		else
		{
			if(arr.length<2)
			{
				x=0f;
				y=0f;
				return;
			}
			
			x=arr[0];
			y=arr[1];
		}
	}
	
	/** 拷贝位置 */
	public void copyPos(PosData pos)
	{
		this.x=pos.x;
		this.y=pos.y;
		this.z=pos.z;
	}
	
	@Override
	public void clear()
	{
		this.x=0f;
		this.y=0f;
		this.z=0f;
	}
	
	public boolean isEquals(PosData pos)
	{
		return MathUtils.floatEquals(x,pos.x) && MathUtils.floatEquals(y,pos.y) && MathUtils.floatEquals(z,pos.z);
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	public void readExternBuf(ExternBuf buf)
	{
		this.x=buf.readFloat();
		this.y=buf.readFloat();
		this.z=buf.readFloat();
	}
	
	public void writeExternBuf(ExternBuf buf)
	{
		buf.writeFloat(x);
		buf.writeFloat(y);
		buf.writeFloat(z);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.ix=0;
		this.iy=0;
		this.iz=0;
	}
	
}
