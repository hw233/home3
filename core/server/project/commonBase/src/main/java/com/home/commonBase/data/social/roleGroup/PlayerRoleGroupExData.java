package com.home.commonBase.data.social.roleGroup;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.social.roleGroup.PlayerRoleGroupMemberData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.pool.DataPool;

/** 玩家群补充数据(不实时推送的部分)(generated by shine) */
public class PlayerRoleGroupExData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.PlayerRoleGroupEx;
	
	/** 群id */
	public long groupID;
	
	/** 经验值 */
	public long exp;
	
	/** 成员组 */
	public LongObjectMap<PlayerRoleGroupMemberData> members;
	
	public PlayerRoleGroupExData()
	{
		_dataID=BaseDataType.PlayerRoleGroupEx;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PlayerRoleGroupExData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.groupID=stream.readLong();
		
		this.exp=stream.readLong();
		
		int membersLen=stream.readLen();
		if(this.members!=null)
		{
			this.members.clear();
			this.members.ensureCapacity(membersLen);
		}
		else
		{
			this.members=new LongObjectMap<PlayerRoleGroupMemberData>(PlayerRoleGroupMemberData[]::new,membersLen);
		}
		
		LongObjectMap<PlayerRoleGroupMemberData> membersT=this.members;
		for(int membersI=membersLen-1;membersI>=0;--membersI)
		{
			PlayerRoleGroupMemberData membersV;
			BaseData membersVT=stream.readDataFullNotNull();
			if(membersVT!=null)
			{
				if(membersVT instanceof PlayerRoleGroupMemberData)
				{
					membersV=(PlayerRoleGroupMemberData)membersVT;
				}
				else
				{
					membersV=new PlayerRoleGroupMemberData();
					if(!(membersVT.getClass().isAssignableFrom(PlayerRoleGroupMemberData.class)))
					{
						stream.throwTypeReadError(PlayerRoleGroupMemberData.class,membersVT.getClass());
					}
					membersV.shadowCopy(membersVT);
				}
			}
			else
			{
				membersV=null;
			}
			
			membersT.put(membersV.playerID,membersV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.groupID);
		
		stream.writeLong(this.exp);
		
		if(this.members!=null)
		{
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				Object[] membersVValues=this.members.getValues();
				for(int membersVI=membersVValues.length-1;membersVI>=0;--membersVI)
				{
					if(membersVValues[membersVI]!=null)
					{
						PlayerRoleGroupMemberData membersV=(PlayerRoleGroupMemberData)membersVValues[membersVI];
						if(membersV!=null)
						{
							stream.writeDataFullNotNull(membersV);
						}
						else
						{
							nullObjError("membersV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("members");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.groupID=stream.readLong();
		
		this.exp=stream.readLong();
		
		int membersLen=stream.readLen();
		if(this.members!=null)
		{
			this.members.clear();
			this.members.ensureCapacity(membersLen);
		}
		else
		{
			this.members=new LongObjectMap<PlayerRoleGroupMemberData>(PlayerRoleGroupMemberData[]::new,membersLen);
		}
		
		LongObjectMap<PlayerRoleGroupMemberData> membersT=this.members;
		for(int membersI=membersLen-1;membersI>=0;--membersI)
		{
			PlayerRoleGroupMemberData membersV;
			membersV=(PlayerRoleGroupMemberData)stream.readDataSimpleNotNull();
			
			membersT.put(membersV.playerID,membersV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.groupID);
		
		stream.writeLong(this.exp);
		
		if(this.members!=null)
		{
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				Object[] membersVValues=this.members.getValues();
				for(int membersVI=membersVValues.length-1;membersVI>=0;--membersVI)
				{
					if(membersVValues[membersVI]!=null)
					{
						PlayerRoleGroupMemberData membersV=(PlayerRoleGroupMemberData)membersVValues[membersVI];
						if(membersV!=null)
						{
							stream.writeDataSimpleNotNull(membersV);
						}
						else
						{
							nullObjError("membersV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("members");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof PlayerRoleGroupExData))
			return;
		
		PlayerRoleGroupExData mData=(PlayerRoleGroupExData)data;
		
		this.groupID=mData.groupID;
		this.exp=mData.exp;
		this.members=mData.members;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof PlayerRoleGroupExData))
			return;
		
		PlayerRoleGroupExData mData=(PlayerRoleGroupExData)data;
		
		this.groupID=mData.groupID;
		
		this.exp=mData.exp;
		
		if(mData.members!=null)
		{
			if(this.members!=null)
			{
				this.members.clear();
				this.members.ensureCapacity(mData.members.size());
			}
			else
			{
				this.members=new LongObjectMap<PlayerRoleGroupMemberData>(PlayerRoleGroupMemberData[]::new,mData.members.size());
			}
			
			LongObjectMap<PlayerRoleGroupMemberData> membersT=this.members;
			if(!mData.members.isEmpty())
			{
				Object[] membersVValues=mData.members.getValues();
				for(int membersVI=membersVValues.length-1;membersVI>=0;--membersVI)
				{
					if(membersVValues[membersVI]!=null)
					{
						PlayerRoleGroupMemberData membersV=(PlayerRoleGroupMemberData)membersVValues[membersVI];
						PlayerRoleGroupMemberData membersU;
						if(membersV!=null)
						{
							membersU=(PlayerRoleGroupMemberData)membersV.clone();
						}
						else
						{
							membersU=null;
							nullObjError("membersU");
						}
						
						membersT.put(membersU.playerID,membersU);
					}
				}
			}
		}
		else
		{
			this.members=null;
			nullObjError("members");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		PlayerRoleGroupExData mData=(PlayerRoleGroupExData)data;
		if(this.groupID!=mData.groupID)
			return false;
		
		if(this.exp!=mData.exp)
			return false;
		
		if(mData.members!=null)
		{
			if(this.members==null)
				return false;
			if(this.members.size()!=mData.members.size())
				return false;
			LongObjectMap<PlayerRoleGroupMemberData> membersR=mData.members;
			if(!this.members.isEmpty())
			{
				long membersKFreeValue=this.members.getFreeValue();
				long[] membersKKeys=this.members.getKeys();
				Object[] membersVValues=this.members.getValues();
				for(int membersKI=membersKKeys.length-1;membersKI>=0;--membersKI)
				{
					long membersK=membersKKeys[membersKI];
					if(membersK!=membersKFreeValue)
					{
						PlayerRoleGroupMemberData membersV=(PlayerRoleGroupMemberData)membersVValues[membersKI];
						PlayerRoleGroupMemberData membersU=membersR.get(membersK);
						if(membersU!=null)
						{
							if(membersV==null)
								return false;
							if(!membersV.dataEquals(membersU))
								return false;
						}
						else
						{
							if(membersV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.members!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("groupID");
		writer.sb.append(':');
		writer.sb.append(this.groupID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("exp");
		writer.sb.append(':');
		writer.sb.append(this.exp);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("members");
		writer.sb.append(':');
		writer.sb.append("Map<long,PlayerRoleGroupMemberData>");
		if(this.members!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.members.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.members.isEmpty())
			{
				long membersKFreeValue=this.members.getFreeValue();
				long[] membersKKeys=this.members.getKeys();
				Object[] membersVValues=this.members.getValues();
				for(int membersKI=membersKKeys.length-1;membersKI>=0;--membersKI)
				{
					long membersK=membersKKeys[membersKI];
					if(membersK!=membersKFreeValue)
					{
						PlayerRoleGroupMemberData membersV=(PlayerRoleGroupMemberData)membersVValues[membersKI];
						writer.writeTabs();
						writer.sb.append(membersK);
						
						writer.sb.append(':');
						if(membersV!=null)
						{
							membersV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("PlayerRoleGroupMemberData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.members=new LongObjectMap<PlayerRoleGroupMemberData>(PlayerRoleGroupMemberData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.groupID=0L;
		this.exp=0L;
		this.members=null;
	}
	
}
