package com.home.commonBase.data.item;
import com.home.commonBase.config.game.ItemConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.control.BaseLogicControl;
import com.home.commonBase.data.item.ItemIdentityData;
import com.home.commonBase.global.BaseC;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 物品数据(generated by shine) */
public class ItemData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Item;
	
	/** 物品ID */
	public int id;
	
	/** 物品数目 */
	public int num;
	
	/** 失效时间(-1为失效或过期) */
	public long disableTime=-1L;
	
	/** 是否绑定 */
	public boolean isBind;
	
	/** 是否有红点 */
	public boolean hasRedPoint;
	
	/** 身份数据 */
	public ItemIdentityData identity;
	
	/** 物品配置 */
	public ItemConfig config;
	
	/** 回收标记 */
	public boolean canRelease;
	
	/** 所在序号 */
	public int index=-1;
	
	public ItemData()
	{
		_dataID=BaseDataType.Item;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ItemData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.num=stream.readInt();
		
		this.isBind=stream.readBoolean();
		
		this.disableTime=stream.readLong();
		
		if(stream.readBoolean())
		{
			BaseData identityT=stream.readDataFullNotNull();
			if(identityT!=null)
			{
				if(identityT instanceof ItemIdentityData)
				{
					this.identity=(ItemIdentityData)identityT;
				}
				else
				{
					this.identity=new ItemIdentityData();
					if(!(identityT.getClass().isAssignableFrom(ItemIdentityData.class)))
					{
						stream.throwTypeReadError(ItemIdentityData.class,identityT.getClass());
					}
					this.identity.shadowCopy(identityT);
				}
			}
			else
			{
				this.identity=null;
			}
		}
		else
		{
			this.identity=null;
		}
		
		this.hasRedPoint=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.num);
		
		stream.writeBoolean(this.isBind);
		
		stream.writeLong(this.disableTime);
		
		if(this.identity!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.identity);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeBoolean(this.hasRedPoint);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.num=stream.readInt();
		
		this.isBind=stream.readBoolean();
		
		this.disableTime=stream.readLong();
		
		if(stream.readBoolean())
		{
			this.identity=(ItemIdentityData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.identity=null;
		}
		
		this.hasRedPoint=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeInt(this.num);
		
		stream.writeBoolean(this.isBind);
		
		stream.writeLong(this.disableTime);
		
		if(this.identity!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.identity);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeBoolean(this.hasRedPoint);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ItemData))
			return;
		
		ItemData mData=(ItemData)data;
		
		this.id=mData.id;
		this.num=mData.num;
		this.isBind=mData.isBind;
		this.disableTime=mData.disableTime;
		this.identity=mData.identity;
		this.hasRedPoint=mData.hasRedPoint;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ItemData))
			return;
		
		ItemData mData=(ItemData)data;
		
		this.id=mData.id;
		
		this.num=mData.num;
		
		this.isBind=mData.isBind;
		
		this.disableTime=mData.disableTime;
		
		if(mData.identity!=null)
		{
			this.identity=(ItemIdentityData)mData.identity.clone();
		}
		else
		{
			this.identity=null;
		}
		
		this.hasRedPoint=mData.hasRedPoint;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ItemData mData=(ItemData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.num!=mData.num)
			return false;
		
		if(this.isBind!=mData.isBind)
			return false;
		
		if(this.disableTime!=mData.disableTime)
			return false;
		
		if(mData.identity!=null)
		{
			if(this.identity==null)
				return false;
			if(!this.identity.dataEquals(mData.identity))
				return false;
		}
		else
		{
			if(this.identity!=null)
				return false;
		}
		
		if(this.hasRedPoint!=mData.hasRedPoint)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("num");
		writer.sb.append(':');
		writer.sb.append(this.num);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isBind");
		writer.sb.append(':');
		writer.sb.append(this.isBind);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("disableTime");
		writer.sb.append(':');
		writer.sb.append(this.disableTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("identity");
		writer.sb.append(':');
		if(this.identity!=null)
		{
			this.identity.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ItemIdentityData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("hasRedPoint");
		writer.sb.append(':');
		writer.sb.append(this.hasRedPoint);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	@Override
	public void clear()
	{
		isBind=false;
		identity.clear();
		config=null;
		canRelease=false;
		index=-1;
		hasRedPoint=false;
	}
	
	/** 获取装备身份数据 */
	public ItemEquipData getEquipIdentity()
	{
		return (ItemEquipData)identity;
	}
	
	public void initIdentityByType(int type)
	{
		identity=BaseC.logic.createItemIdentityByType(type);
		identity.type=type;//设置type
	}
	
	/** 初始化身份 */
	public void makeConfig()
	{
		if(config==null)
		{
			config=ItemConfig.get(id);
		}
	}
	
	/** 重载配置 */
	public void reloadConfig()
	{
		config=ItemConfig.get(id);
	}
	
	/** 从目标物品身上拷贝 */
	public void copyItem(ItemData data)
	{
		//数据拷贝
		this.copy(data);
		config=null;
		makeConfig();
	}
	
	/** 是否达到单个数目上限 */
	public boolean isSingleNumMax()
	{
		return config.singlePlusMax>0 && num>=config.singlePlusMax;
	}
	
	/** 获取单个叠加空数(-1为无限) */
	public int getPlusLast()
	{
		if(config.singlePlusMax<=0)
			return -1;
		
		if(num>=config.singlePlusMax)
			return 0;
		
		return config.singlePlusMax-num;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.id=0;
		this.num=0;
		this.isBind=false;
		this.disableTime=0L;
		this.identity=null;
		this.hasRedPoint=false;
	}
	
}
