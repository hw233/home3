package com.home.commonBase.data.scene.match;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.scene.SceneLocationData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 匹配后的场景信息(generated by shine) */
public class MatchSceneData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.MatchScene;
	
	/** 功能id */
	public int funcID;
	
	/** 匹配成功时刻 */
	public long matchTime;
	
	/** 匹配后的场景数据 */
	public SceneLocationData location;
	
	public MatchSceneData()
	{
		_dataID=BaseDataType.MatchScene;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "MatchSceneData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.funcID=stream.readInt();
		
		this.matchTime=stream.readLong();
		
		BaseData locationT=stream.readDataFullNotNull();
		if(locationT!=null)
		{
			if(locationT instanceof SceneLocationData)
			{
				this.location=(SceneLocationData)locationT;
			}
			else
			{
				this.location=new SceneLocationData();
				if(!(locationT.getClass().isAssignableFrom(SceneLocationData.class)))
				{
					stream.throwTypeReadError(SceneLocationData.class,locationT.getClass());
				}
				this.location.shadowCopy(locationT);
			}
		}
		else
		{
			this.location=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.funcID);
		
		stream.writeLong(this.matchTime);
		
		if(this.location!=null)
		{
			stream.writeDataFullNotNull(this.location);
		}
		else
		{
			nullObjError("location");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.funcID=stream.readInt();
		
		this.matchTime=stream.readLong();
		
		this.location=(SceneLocationData)stream.readDataSimpleNotNull();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.funcID);
		
		stream.writeLong(this.matchTime);
		
		if(this.location!=null)
		{
			stream.writeDataSimpleNotNull(this.location);
		}
		else
		{
			nullObjError("location");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof MatchSceneData))
			return;
		
		MatchSceneData mData=(MatchSceneData)data;
		
		this.funcID=mData.funcID;
		this.matchTime=mData.matchTime;
		this.location=mData.location;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof MatchSceneData))
			return;
		
		MatchSceneData mData=(MatchSceneData)data;
		
		this.funcID=mData.funcID;
		
		this.matchTime=mData.matchTime;
		
		if(mData.location!=null)
		{
			this.location=(SceneLocationData)mData.location.clone();
		}
		else
		{
			this.location=null;
			nullObjError("location");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		MatchSceneData mData=(MatchSceneData)data;
		if(this.funcID!=mData.funcID)
			return false;
		
		if(this.matchTime!=mData.matchTime)
			return false;
		
		if(mData.location!=null)
		{
			if(this.location==null)
				return false;
			if(!this.location.dataEquals(mData.location))
				return false;
		}
		else
		{
			if(this.location!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("funcID");
		writer.sb.append(':');
		writer.sb.append(this.funcID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("matchTime");
		writer.sb.append(':');
		writer.sb.append(this.matchTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("location");
		writer.sb.append(':');
		if(this.location!=null)
		{
			this.location.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SceneLocationData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.location=new SceneLocationData();
		this.location.initDefault();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.funcID=0;
		this.matchTime=0L;
		this.location=null;
	}
	
}
