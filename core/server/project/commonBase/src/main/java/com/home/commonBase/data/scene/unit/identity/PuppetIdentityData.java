package com.home.commonBase.data.scene.unit.identity;
import com.home.commonBase.config.game.PuppetConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.unit.UnitIdentityData;
import com.home.commonBase.data.scene.unit.identity.FightUnitIdentityData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 傀儡单位身份数据(generated by shine) */
public class PuppetIdentityData extends FightUnitIdentityData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.PuppetIdentity;
	
	/** 控制者实例ID */
	public int masterInstanceID;
	
	/** 剩余时间 */
	public int lastTime;
	
	public PuppetIdentityData()
	{
		_dataID=BaseDataType.PuppetIdentity;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PuppetIdentityData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.masterInstanceID=stream.readInt();
		
		this.lastTime=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.masterInstanceID);
		
		stream.writeInt(this.lastTime);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.masterInstanceID=stream.readInt();
		
		this.lastTime=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.masterInstanceID);
		
		stream.writeInt(this.lastTime);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof PuppetIdentityData))
			return;
		
		PuppetIdentityData mData=(PuppetIdentityData)data;
		
		this.masterInstanceID=mData.masterInstanceID;
		this.lastTime=mData.lastTime;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof PuppetIdentityData))
			return;
		
		PuppetIdentityData mData=(PuppetIdentityData)data;
		
		this.masterInstanceID=mData.masterInstanceID;
		
		this.lastTime=mData.lastTime;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		PuppetIdentityData mData=(PuppetIdentityData)data;
		if(this.masterInstanceID!=mData.masterInstanceID)
			return false;
		
		if(this.lastTime!=mData.lastTime)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("masterInstanceID");
		writer.sb.append(':');
		writer.sb.append(this.masterInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastTime");
		writer.sb.append(':');
		writer.sb.append(this.lastTime);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
	}
	
	@Override
	public int getFightUnitID()
	{
		return PuppetConfig.get(id).fightUnitID;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.masterInstanceID=0;
		this.lastTime=0;
	}
	
}
