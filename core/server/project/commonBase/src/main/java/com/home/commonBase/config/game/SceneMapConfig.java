package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;

/** 场景地图表(generated by shine) */
public class SceneMapConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<SceneMapConfig> _dic;
	
	/** id */
	public int id;
	
	/** 原点 */
	public int[] origin;
	
	/** 尺寸 */
	public int[] size;
	
	/** 获取 */
	public static SceneMapConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<SceneMapConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<SceneMapConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int originLen=stream.readLen();
		if(this.origin==null || this.origin.length!=originLen)
		{
			this.origin=new int[originLen];
		}
		int[] originT=this.origin;
		for(int originI=0;originI<originLen;++originI)
		{
			int originV;
			originV=stream.readInt();
			
			originT[originI]=originV;
		}
		
		int sizeLen=stream.readLen();
		if(this.size==null || this.size.length!=sizeLen)
		{
			this.size=new int[sizeLen];
		}
		int[] sizeT=this.size;
		for(int sizeI=0;sizeI<sizeLen;++sizeI)
		{
			int sizeV;
			sizeV=stream.readInt();
			
			sizeT[sizeI]=sizeV;
		}
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.origin!=null)
		{
			int[] originT=this.origin;
			stream.writeLen(originT.length);
			for(int originVI=0,originVLen=originT.length;originVI<originVLen;++originVI)
			{
				int originV=originT[originVI];
				stream.writeInt(originV);
				
			}
		}
		else
		{
			nullObjError("origin");
		}
		
		if(this.size!=null)
		{
			int[] sizeT=this.size;
			stream.writeLen(sizeT.length);
			for(int sizeVI=0,sizeVLen=sizeT.length;sizeVI<sizeVLen;++sizeVI)
			{
				int sizeV=sizeT[sizeVI];
				stream.writeInt(sizeV);
				
			}
		}
		else
		{
			nullObjError("size");
		}
		
	}
	
}
