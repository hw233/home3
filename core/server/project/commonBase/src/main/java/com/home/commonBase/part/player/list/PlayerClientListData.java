package com.home.commonBase.part.player.list;
import com.home.commonBase.constlist.generate.PlayerListClientDataType;
import com.home.commonBase.part.player.clientData.AchievementClientPartData;
import com.home.commonBase.part.player.clientData.ActivityClientPartData;
import com.home.commonBase.part.player.clientData.BagClientPartData;
import com.home.commonBase.part.player.clientData.CharacterClientPartData;
import com.home.commonBase.part.player.clientData.EquipClientPartData;
import com.home.commonBase.part.player.clientData.FriendClientPartData;
import com.home.commonBase.part.player.clientData.FuncClientPartData;
import com.home.commonBase.part.player.clientData.GuideClientPartData;
import com.home.commonBase.part.player.clientData.MailClientPartData;
import com.home.commonBase.part.player.clientData.PetClientPartData;
import com.home.commonBase.part.player.clientData.QuestClientPartData;
import com.home.commonBase.part.player.clientData.RoleClientPartData;
import com.home.commonBase.part.player.clientData.SceneClientPartData;
import com.home.commonBase.part.player.clientData.SocialClientPartData;
import com.home.commonBase.part.player.clientData.SystemClientPartData;
import com.home.commonBase.part.player.clientData.TeamClientPartData;
import com.home.commonBase.part.player.clientData.UnionClientPartData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 玩家数据主体(generated by shine) */
public class PlayerClientListData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=PlayerListClientDataType.Player;
	
	/** 系统 */
	public SystemClientPartData system;
	
	/** 通用功能 */
	public FuncClientPartData func;
	
	/** 活动 */
	public ActivityClientPartData activity;
	
	/** 玩家 */
	public RoleClientPartData role;
	
	/** 场景 */
	public SceneClientPartData scene;
	
	/** 角色 */
	public CharacterClientPartData character;
	
	/** 社交 */
	public SocialClientPartData social;
	
	/** 背包 */
	public BagClientPartData bag;
	
	/** 邮件 */
	public MailClientPartData mail;
	
	/** 引导 */
	public GuideClientPartData guide;
	
	/** 任务 */
	public QuestClientPartData quest;
	
	/** 装备 */
	public EquipClientPartData equip;
	
	/** 好友 */
	public FriendClientPartData friend;
	
	/** 工会 */
	public UnionClientPartData union;
	
	/** 组队 */
	public TeamClientPartData team;
	
	/** 成就 */
	public AchievementClientPartData achievement;
	
	/** 宠物 */
	public PetClientPartData pet;
	
	public PlayerClientListData()
	{
		_dataID=PlayerListClientDataType.Player;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PlayerClientListData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData systemT=stream.readDataFullNotNull();
		if(systemT!=null)
		{
			if(systemT instanceof SystemClientPartData)
			{
				this.system=(SystemClientPartData)systemT;
			}
			else
			{
				this.system=new SystemClientPartData();
				if(!(systemT.getClass().isAssignableFrom(SystemClientPartData.class)))
				{
					stream.throwTypeReadError(SystemClientPartData.class,systemT.getClass());
				}
				this.system.shadowCopy(systemT);
			}
		}
		else
		{
			this.system=null;
		}
		
		BaseData funcT=stream.readDataFullNotNull();
		if(funcT!=null)
		{
			if(funcT instanceof FuncClientPartData)
			{
				this.func=(FuncClientPartData)funcT;
			}
			else
			{
				this.func=new FuncClientPartData();
				if(!(funcT.getClass().isAssignableFrom(FuncClientPartData.class)))
				{
					stream.throwTypeReadError(FuncClientPartData.class,funcT.getClass());
				}
				this.func.shadowCopy(funcT);
			}
		}
		else
		{
			this.func=null;
		}
		
		BaseData activityT=stream.readDataFullNotNull();
		if(activityT!=null)
		{
			if(activityT instanceof ActivityClientPartData)
			{
				this.activity=(ActivityClientPartData)activityT;
			}
			else
			{
				this.activity=new ActivityClientPartData();
				if(!(activityT.getClass().isAssignableFrom(ActivityClientPartData.class)))
				{
					stream.throwTypeReadError(ActivityClientPartData.class,activityT.getClass());
				}
				this.activity.shadowCopy(activityT);
			}
		}
		else
		{
			this.activity=null;
		}
		
		BaseData roleT=stream.readDataFullNotNull();
		if(roleT!=null)
		{
			if(roleT instanceof RoleClientPartData)
			{
				this.role=(RoleClientPartData)roleT;
			}
			else
			{
				this.role=new RoleClientPartData();
				if(!(roleT.getClass().isAssignableFrom(RoleClientPartData.class)))
				{
					stream.throwTypeReadError(RoleClientPartData.class,roleT.getClass());
				}
				this.role.shadowCopy(roleT);
			}
		}
		else
		{
			this.role=null;
		}
		
		BaseData sceneT=stream.readDataFullNotNull();
		if(sceneT!=null)
		{
			if(sceneT instanceof SceneClientPartData)
			{
				this.scene=(SceneClientPartData)sceneT;
			}
			else
			{
				this.scene=new SceneClientPartData();
				if(!(sceneT.getClass().isAssignableFrom(SceneClientPartData.class)))
				{
					stream.throwTypeReadError(SceneClientPartData.class,sceneT.getClass());
				}
				this.scene.shadowCopy(sceneT);
			}
		}
		else
		{
			this.scene=null;
		}
		
		BaseData characterT=stream.readDataFullNotNull();
		if(characterT!=null)
		{
			if(characterT instanceof CharacterClientPartData)
			{
				this.character=(CharacterClientPartData)characterT;
			}
			else
			{
				this.character=new CharacterClientPartData();
				if(!(characterT.getClass().isAssignableFrom(CharacterClientPartData.class)))
				{
					stream.throwTypeReadError(CharacterClientPartData.class,characterT.getClass());
				}
				this.character.shadowCopy(characterT);
			}
		}
		else
		{
			this.character=null;
		}
		
		BaseData socialT=stream.readDataFullNotNull();
		if(socialT!=null)
		{
			if(socialT instanceof SocialClientPartData)
			{
				this.social=(SocialClientPartData)socialT;
			}
			else
			{
				this.social=new SocialClientPartData();
				if(!(socialT.getClass().isAssignableFrom(SocialClientPartData.class)))
				{
					stream.throwTypeReadError(SocialClientPartData.class,socialT.getClass());
				}
				this.social.shadowCopy(socialT);
			}
		}
		else
		{
			this.social=null;
		}
		
		BaseData bagT=stream.readDataFullNotNull();
		if(bagT!=null)
		{
			if(bagT instanceof BagClientPartData)
			{
				this.bag=(BagClientPartData)bagT;
			}
			else
			{
				this.bag=new BagClientPartData();
				if(!(bagT.getClass().isAssignableFrom(BagClientPartData.class)))
				{
					stream.throwTypeReadError(BagClientPartData.class,bagT.getClass());
				}
				this.bag.shadowCopy(bagT);
			}
		}
		else
		{
			this.bag=null;
		}
		
		BaseData mailT=stream.readDataFullNotNull();
		if(mailT!=null)
		{
			if(mailT instanceof MailClientPartData)
			{
				this.mail=(MailClientPartData)mailT;
			}
			else
			{
				this.mail=new MailClientPartData();
				if(!(mailT.getClass().isAssignableFrom(MailClientPartData.class)))
				{
					stream.throwTypeReadError(MailClientPartData.class,mailT.getClass());
				}
				this.mail.shadowCopy(mailT);
			}
		}
		else
		{
			this.mail=null;
		}
		
		BaseData questT=stream.readDataFullNotNull();
		if(questT!=null)
		{
			if(questT instanceof QuestClientPartData)
			{
				this.quest=(QuestClientPartData)questT;
			}
			else
			{
				this.quest=new QuestClientPartData();
				if(!(questT.getClass().isAssignableFrom(QuestClientPartData.class)))
				{
					stream.throwTypeReadError(QuestClientPartData.class,questT.getClass());
				}
				this.quest.shadowCopy(questT);
			}
		}
		else
		{
			this.quest=null;
		}
		
		BaseData guideT=stream.readDataFullNotNull();
		if(guideT!=null)
		{
			if(guideT instanceof GuideClientPartData)
			{
				this.guide=(GuideClientPartData)guideT;
			}
			else
			{
				this.guide=new GuideClientPartData();
				if(!(guideT.getClass().isAssignableFrom(GuideClientPartData.class)))
				{
					stream.throwTypeReadError(GuideClientPartData.class,guideT.getClass());
				}
				this.guide.shadowCopy(guideT);
			}
		}
		else
		{
			this.guide=null;
		}
		
		BaseData friendT=stream.readDataFullNotNull();
		if(friendT!=null)
		{
			if(friendT instanceof FriendClientPartData)
			{
				this.friend=(FriendClientPartData)friendT;
			}
			else
			{
				this.friend=new FriendClientPartData();
				if(!(friendT.getClass().isAssignableFrom(FriendClientPartData.class)))
				{
					stream.throwTypeReadError(FriendClientPartData.class,friendT.getClass());
				}
				this.friend.shadowCopy(friendT);
			}
		}
		else
		{
			this.friend=null;
		}
		
		BaseData equipT=stream.readDataFullNotNull();
		if(equipT!=null)
		{
			if(equipT instanceof EquipClientPartData)
			{
				this.equip=(EquipClientPartData)equipT;
			}
			else
			{
				this.equip=new EquipClientPartData();
				if(!(equipT.getClass().isAssignableFrom(EquipClientPartData.class)))
				{
					stream.throwTypeReadError(EquipClientPartData.class,equipT.getClass());
				}
				this.equip.shadowCopy(equipT);
			}
		}
		else
		{
			this.equip=null;
		}
		
		BaseData teamT=stream.readDataFullNotNull();
		if(teamT!=null)
		{
			if(teamT instanceof TeamClientPartData)
			{
				this.team=(TeamClientPartData)teamT;
			}
			else
			{
				this.team=new TeamClientPartData();
				if(!(teamT.getClass().isAssignableFrom(TeamClientPartData.class)))
				{
					stream.throwTypeReadError(TeamClientPartData.class,teamT.getClass());
				}
				this.team.shadowCopy(teamT);
			}
		}
		else
		{
			this.team=null;
		}
		
		BaseData unionT=stream.readDataFullNotNull();
		if(unionT!=null)
		{
			if(unionT instanceof UnionClientPartData)
			{
				this.union=(UnionClientPartData)unionT;
			}
			else
			{
				this.union=new UnionClientPartData();
				if(!(unionT.getClass().isAssignableFrom(UnionClientPartData.class)))
				{
					stream.throwTypeReadError(UnionClientPartData.class,unionT.getClass());
				}
				this.union.shadowCopy(unionT);
			}
		}
		else
		{
			this.union=null;
		}
		
		BaseData achievementT=stream.readDataFullNotNull();
		if(achievementT!=null)
		{
			if(achievementT instanceof AchievementClientPartData)
			{
				this.achievement=(AchievementClientPartData)achievementT;
			}
			else
			{
				this.achievement=new AchievementClientPartData();
				if(!(achievementT.getClass().isAssignableFrom(AchievementClientPartData.class)))
				{
					stream.throwTypeReadError(AchievementClientPartData.class,achievementT.getClass());
				}
				this.achievement.shadowCopy(achievementT);
			}
		}
		else
		{
			this.achievement=null;
		}
		
		BaseData petT=stream.readDataFullNotNull();
		if(petT!=null)
		{
			if(petT instanceof PetClientPartData)
			{
				this.pet=(PetClientPartData)petT;
			}
			else
			{
				this.pet=new PetClientPartData();
				if(!(petT.getClass().isAssignableFrom(PetClientPartData.class)))
				{
					stream.throwTypeReadError(PetClientPartData.class,petT.getClass());
				}
				this.pet.shadowCopy(petT);
			}
		}
		else
		{
			this.pet=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.system!=null)
		{
			stream.writeDataFullNotNull(this.system);
		}
		else
		{
			nullObjError("system");
		}
		
		if(this.func!=null)
		{
			stream.writeDataFullNotNull(this.func);
		}
		else
		{
			nullObjError("func");
		}
		
		if(this.activity!=null)
		{
			stream.writeDataFullNotNull(this.activity);
		}
		else
		{
			nullObjError("activity");
		}
		
		if(this.role!=null)
		{
			stream.writeDataFullNotNull(this.role);
		}
		else
		{
			nullObjError("role");
		}
		
		if(this.scene!=null)
		{
			stream.writeDataFullNotNull(this.scene);
		}
		else
		{
			nullObjError("scene");
		}
		
		if(this.character!=null)
		{
			stream.writeDataFullNotNull(this.character);
		}
		else
		{
			nullObjError("character");
		}
		
		if(this.social!=null)
		{
			stream.writeDataFullNotNull(this.social);
		}
		else
		{
			nullObjError("social");
		}
		
		if(this.bag!=null)
		{
			stream.writeDataFullNotNull(this.bag);
		}
		else
		{
			nullObjError("bag");
		}
		
		if(this.mail!=null)
		{
			stream.writeDataFullNotNull(this.mail);
		}
		else
		{
			nullObjError("mail");
		}
		
		if(this.quest!=null)
		{
			stream.writeDataFullNotNull(this.quest);
		}
		else
		{
			nullObjError("quest");
		}
		
		if(this.guide!=null)
		{
			stream.writeDataFullNotNull(this.guide);
		}
		else
		{
			nullObjError("guide");
		}
		
		if(this.friend!=null)
		{
			stream.writeDataFullNotNull(this.friend);
		}
		else
		{
			nullObjError("friend");
		}
		
		if(this.equip!=null)
		{
			stream.writeDataFullNotNull(this.equip);
		}
		else
		{
			nullObjError("equip");
		}
		
		if(this.team!=null)
		{
			stream.writeDataFullNotNull(this.team);
		}
		else
		{
			nullObjError("team");
		}
		
		if(this.union!=null)
		{
			stream.writeDataFullNotNull(this.union);
		}
		else
		{
			nullObjError("union");
		}
		
		if(this.achievement!=null)
		{
			stream.writeDataFullNotNull(this.achievement);
		}
		else
		{
			nullObjError("achievement");
		}
		
		if(this.pet!=null)
		{
			stream.writeDataFullNotNull(this.pet);
		}
		else
		{
			nullObjError("pet");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.system=(SystemClientPartData)stream.readDataSimpleNotNull();
		
		this.func=(FuncClientPartData)stream.readDataSimpleNotNull();
		
		this.activity=(ActivityClientPartData)stream.readDataSimpleNotNull();
		
		this.role=(RoleClientPartData)stream.readDataSimpleNotNull();
		
		this.scene=(SceneClientPartData)stream.readDataSimpleNotNull();
		
		this.character=(CharacterClientPartData)stream.readDataSimpleNotNull();
		
		this.social=(SocialClientPartData)stream.readDataSimpleNotNull();
		
		this.bag=(BagClientPartData)stream.readDataSimpleNotNull();
		
		this.mail=(MailClientPartData)stream.readDataSimpleNotNull();
		
		this.quest=(QuestClientPartData)stream.readDataSimpleNotNull();
		
		this.guide=(GuideClientPartData)stream.readDataSimpleNotNull();
		
		this.friend=(FriendClientPartData)stream.readDataSimpleNotNull();
		
		this.equip=(EquipClientPartData)stream.readDataSimpleNotNull();
		
		this.team=(TeamClientPartData)stream.readDataSimpleNotNull();
		
		this.union=(UnionClientPartData)stream.readDataSimpleNotNull();
		
		this.achievement=(AchievementClientPartData)stream.readDataSimpleNotNull();
		
		this.pet=(PetClientPartData)stream.readDataSimpleNotNull();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.system!=null)
		{
			stream.writeDataSimpleNotNull(this.system);
		}
		else
		{
			nullObjError("system");
		}
		
		if(this.func!=null)
		{
			stream.writeDataSimpleNotNull(this.func);
		}
		else
		{
			nullObjError("func");
		}
		
		if(this.activity!=null)
		{
			stream.writeDataSimpleNotNull(this.activity);
		}
		else
		{
			nullObjError("activity");
		}
		
		if(this.role!=null)
		{
			stream.writeDataSimpleNotNull(this.role);
		}
		else
		{
			nullObjError("role");
		}
		
		if(this.scene!=null)
		{
			stream.writeDataSimpleNotNull(this.scene);
		}
		else
		{
			nullObjError("scene");
		}
		
		if(this.character!=null)
		{
			stream.writeDataSimpleNotNull(this.character);
		}
		else
		{
			nullObjError("character");
		}
		
		if(this.social!=null)
		{
			stream.writeDataSimpleNotNull(this.social);
		}
		else
		{
			nullObjError("social");
		}
		
		if(this.bag!=null)
		{
			stream.writeDataSimpleNotNull(this.bag);
		}
		else
		{
			nullObjError("bag");
		}
		
		if(this.mail!=null)
		{
			stream.writeDataSimpleNotNull(this.mail);
		}
		else
		{
			nullObjError("mail");
		}
		
		if(this.quest!=null)
		{
			stream.writeDataSimpleNotNull(this.quest);
		}
		else
		{
			nullObjError("quest");
		}
		
		if(this.guide!=null)
		{
			stream.writeDataSimpleNotNull(this.guide);
		}
		else
		{
			nullObjError("guide");
		}
		
		if(this.friend!=null)
		{
			stream.writeDataSimpleNotNull(this.friend);
		}
		else
		{
			nullObjError("friend");
		}
		
		if(this.equip!=null)
		{
			stream.writeDataSimpleNotNull(this.equip);
		}
		else
		{
			nullObjError("equip");
		}
		
		if(this.team!=null)
		{
			stream.writeDataSimpleNotNull(this.team);
		}
		else
		{
			nullObjError("team");
		}
		
		if(this.union!=null)
		{
			stream.writeDataSimpleNotNull(this.union);
		}
		else
		{
			nullObjError("union");
		}
		
		if(this.achievement!=null)
		{
			stream.writeDataSimpleNotNull(this.achievement);
		}
		else
		{
			nullObjError("achievement");
		}
		
		if(this.pet!=null)
		{
			stream.writeDataSimpleNotNull(this.pet);
		}
		else
		{
			nullObjError("pet");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof PlayerClientListData))
			return;
		
		PlayerClientListData mData=(PlayerClientListData)data;
		
		this.system=mData.system;
		this.func=mData.func;
		this.activity=mData.activity;
		this.role=mData.role;
		this.scene=mData.scene;
		this.character=mData.character;
		this.social=mData.social;
		this.bag=mData.bag;
		this.mail=mData.mail;
		this.quest=mData.quest;
		this.guide=mData.guide;
		this.friend=mData.friend;
		this.equip=mData.equip;
		this.team=mData.team;
		this.union=mData.union;
		this.achievement=mData.achievement;
		this.pet=mData.pet;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof PlayerClientListData))
			return;
		
		PlayerClientListData mData=(PlayerClientListData)data;
		
		if(mData.system!=null)
		{
			this.system=(SystemClientPartData)mData.system.clone();
		}
		else
		{
			this.system=null;
			nullObjError("system");
		}
		
		if(mData.func!=null)
		{
			this.func=(FuncClientPartData)mData.func.clone();
		}
		else
		{
			this.func=null;
			nullObjError("func");
		}
		
		if(mData.activity!=null)
		{
			this.activity=(ActivityClientPartData)mData.activity.clone();
		}
		else
		{
			this.activity=null;
			nullObjError("activity");
		}
		
		if(mData.role!=null)
		{
			this.role=(RoleClientPartData)mData.role.clone();
		}
		else
		{
			this.role=null;
			nullObjError("role");
		}
		
		if(mData.scene!=null)
		{
			this.scene=(SceneClientPartData)mData.scene.clone();
		}
		else
		{
			this.scene=null;
			nullObjError("scene");
		}
		
		if(mData.character!=null)
		{
			this.character=(CharacterClientPartData)mData.character.clone();
		}
		else
		{
			this.character=null;
			nullObjError("character");
		}
		
		if(mData.social!=null)
		{
			this.social=(SocialClientPartData)mData.social.clone();
		}
		else
		{
			this.social=null;
			nullObjError("social");
		}
		
		if(mData.bag!=null)
		{
			this.bag=(BagClientPartData)mData.bag.clone();
		}
		else
		{
			this.bag=null;
			nullObjError("bag");
		}
		
		if(mData.mail!=null)
		{
			this.mail=(MailClientPartData)mData.mail.clone();
		}
		else
		{
			this.mail=null;
			nullObjError("mail");
		}
		
		if(mData.quest!=null)
		{
			this.quest=(QuestClientPartData)mData.quest.clone();
		}
		else
		{
			this.quest=null;
			nullObjError("quest");
		}
		
		if(mData.guide!=null)
		{
			this.guide=(GuideClientPartData)mData.guide.clone();
		}
		else
		{
			this.guide=null;
			nullObjError("guide");
		}
		
		if(mData.friend!=null)
		{
			this.friend=(FriendClientPartData)mData.friend.clone();
		}
		else
		{
			this.friend=null;
			nullObjError("friend");
		}
		
		if(mData.equip!=null)
		{
			this.equip=(EquipClientPartData)mData.equip.clone();
		}
		else
		{
			this.equip=null;
			nullObjError("equip");
		}
		
		if(mData.team!=null)
		{
			this.team=(TeamClientPartData)mData.team.clone();
		}
		else
		{
			this.team=null;
			nullObjError("team");
		}
		
		if(mData.union!=null)
		{
			this.union=(UnionClientPartData)mData.union.clone();
		}
		else
		{
			this.union=null;
			nullObjError("union");
		}
		
		if(mData.achievement!=null)
		{
			this.achievement=(AchievementClientPartData)mData.achievement.clone();
		}
		else
		{
			this.achievement=null;
			nullObjError("achievement");
		}
		
		if(mData.pet!=null)
		{
			this.pet=(PetClientPartData)mData.pet.clone();
		}
		else
		{
			this.pet=null;
			nullObjError("pet");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		PlayerClientListData mData=(PlayerClientListData)data;
		if(mData.system!=null)
		{
			if(this.system==null)
				return false;
			if(!this.system.dataEquals(mData.system))
				return false;
		}
		else
		{
			if(this.system!=null)
				return false;
		}
		
		if(mData.func!=null)
		{
			if(this.func==null)
				return false;
			if(!this.func.dataEquals(mData.func))
				return false;
		}
		else
		{
			if(this.func!=null)
				return false;
		}
		
		if(mData.activity!=null)
		{
			if(this.activity==null)
				return false;
			if(!this.activity.dataEquals(mData.activity))
				return false;
		}
		else
		{
			if(this.activity!=null)
				return false;
		}
		
		if(mData.role!=null)
		{
			if(this.role==null)
				return false;
			if(!this.role.dataEquals(mData.role))
				return false;
		}
		else
		{
			if(this.role!=null)
				return false;
		}
		
		if(mData.scene!=null)
		{
			if(this.scene==null)
				return false;
			if(!this.scene.dataEquals(mData.scene))
				return false;
		}
		else
		{
			if(this.scene!=null)
				return false;
		}
		
		if(mData.character!=null)
		{
			if(this.character==null)
				return false;
			if(!this.character.dataEquals(mData.character))
				return false;
		}
		else
		{
			if(this.character!=null)
				return false;
		}
		
		if(mData.social!=null)
		{
			if(this.social==null)
				return false;
			if(!this.social.dataEquals(mData.social))
				return false;
		}
		else
		{
			if(this.social!=null)
				return false;
		}
		
		if(mData.bag!=null)
		{
			if(this.bag==null)
				return false;
			if(!this.bag.dataEquals(mData.bag))
				return false;
		}
		else
		{
			if(this.bag!=null)
				return false;
		}
		
		if(mData.mail!=null)
		{
			if(this.mail==null)
				return false;
			if(!this.mail.dataEquals(mData.mail))
				return false;
		}
		else
		{
			if(this.mail!=null)
				return false;
		}
		
		if(mData.quest!=null)
		{
			if(this.quest==null)
				return false;
			if(!this.quest.dataEquals(mData.quest))
				return false;
		}
		else
		{
			if(this.quest!=null)
				return false;
		}
		
		if(mData.guide!=null)
		{
			if(this.guide==null)
				return false;
			if(!this.guide.dataEquals(mData.guide))
				return false;
		}
		else
		{
			if(this.guide!=null)
				return false;
		}
		
		if(mData.friend!=null)
		{
			if(this.friend==null)
				return false;
			if(!this.friend.dataEquals(mData.friend))
				return false;
		}
		else
		{
			if(this.friend!=null)
				return false;
		}
		
		if(mData.equip!=null)
		{
			if(this.equip==null)
				return false;
			if(!this.equip.dataEquals(mData.equip))
				return false;
		}
		else
		{
			if(this.equip!=null)
				return false;
		}
		
		if(mData.team!=null)
		{
			if(this.team==null)
				return false;
			if(!this.team.dataEquals(mData.team))
				return false;
		}
		else
		{
			if(this.team!=null)
				return false;
		}
		
		if(mData.union!=null)
		{
			if(this.union==null)
				return false;
			if(!this.union.dataEquals(mData.union))
				return false;
		}
		else
		{
			if(this.union!=null)
				return false;
		}
		
		if(mData.achievement!=null)
		{
			if(this.achievement==null)
				return false;
			if(!this.achievement.dataEquals(mData.achievement))
				return false;
		}
		else
		{
			if(this.achievement!=null)
				return false;
		}
		
		if(mData.pet!=null)
		{
			if(this.pet==null)
				return false;
			if(!this.pet.dataEquals(mData.pet))
				return false;
		}
		else
		{
			if(this.pet!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("system");
		writer.sb.append(':');
		if(this.system!=null)
		{
			this.system.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SystemClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("func");
		writer.sb.append(':');
		if(this.func!=null)
		{
			this.func.writeDataString(writer);
		}
		else
		{
			writer.sb.append("FuncClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("activity");
		writer.sb.append(':');
		if(this.activity!=null)
		{
			this.activity.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ActivityClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("role");
		writer.sb.append(':');
		if(this.role!=null)
		{
			this.role.writeDataString(writer);
		}
		else
		{
			writer.sb.append("RoleClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("scene");
		writer.sb.append(':');
		if(this.scene!=null)
		{
			this.scene.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SceneClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("character");
		writer.sb.append(':');
		if(this.character!=null)
		{
			this.character.writeDataString(writer);
		}
		else
		{
			writer.sb.append("CharacterClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("social");
		writer.sb.append(':');
		if(this.social!=null)
		{
			this.social.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SocialClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("bag");
		writer.sb.append(':');
		if(this.bag!=null)
		{
			this.bag.writeDataString(writer);
		}
		else
		{
			writer.sb.append("BagClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("mail");
		writer.sb.append(':');
		if(this.mail!=null)
		{
			this.mail.writeDataString(writer);
		}
		else
		{
			writer.sb.append("MailClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("quest");
		writer.sb.append(':');
		if(this.quest!=null)
		{
			this.quest.writeDataString(writer);
		}
		else
		{
			writer.sb.append("QuestClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("guide");
		writer.sb.append(':');
		if(this.guide!=null)
		{
			this.guide.writeDataString(writer);
		}
		else
		{
			writer.sb.append("GuideClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("friend");
		writer.sb.append(':');
		if(this.friend!=null)
		{
			this.friend.writeDataString(writer);
		}
		else
		{
			writer.sb.append("FriendClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("equip");
		writer.sb.append(':');
		if(this.equip!=null)
		{
			this.equip.writeDataString(writer);
		}
		else
		{
			writer.sb.append("EquipClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("team");
		writer.sb.append(':');
		if(this.team!=null)
		{
			this.team.writeDataString(writer);
		}
		else
		{
			writer.sb.append("TeamClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("union");
		writer.sb.append(':');
		if(this.union!=null)
		{
			this.union.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnionClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("achievement");
		writer.sb.append(':');
		if(this.achievement!=null)
		{
			this.achievement.writeDataString(writer);
		}
		else
		{
			writer.sb.append("AchievementClientPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("pet");
		writer.sb.append(':');
		if(this.pet!=null)
		{
			this.pet.writeDataString(writer);
		}
		else
		{
			writer.sb.append("PetClientPartData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.system=null;
		this.func=null;
		this.activity=null;
		this.role=null;
		this.scene=null;
		this.character=null;
		this.social=null;
		this.bag=null;
		this.mail=null;
		this.quest=null;
		this.guide=null;
		this.friend=null;
		this.equip=null;
		this.team=null;
		this.union=null;
		this.achievement=null;
		this.pet=null;
	}
	
}
