package com.home.commonBase.data.role;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.item.EquipContainerData;
import com.home.commonBase.data.scene.unit.UnitAvatarData;
import com.home.commonBase.data.scene.unit.UnitFightData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 主单位(可脱离场景存在的)使用数据(generated by shine) */
public class MUnitUseData extends BaseData
{
	/** 单位id */
	public int id;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.MUnitUse;
	
	/** 等级 */
	public int level;
	
	/** 造型数据 */
	public UnitAvatarData avatar;
	
	/** 装备组 */
	public EquipContainerData equips;
	
	/** 战斗数据 */
	public UnitFightData fight;
	
	/** 是否上阵 */
	public boolean isWorking;
	
	/** 主单位序号 */
	public int mIndex;
	
	public MUnitUseData()
	{
		_dataID=BaseDataType.MUnitUse;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "MUnitUseData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		BaseData avatarT=stream.readDataFullNotNull();
		if(avatarT!=null)
		{
			if(avatarT instanceof UnitAvatarData)
			{
				this.avatar=(UnitAvatarData)avatarT;
			}
			else
			{
				this.avatar=new UnitAvatarData();
				if(!(avatarT.getClass().isAssignableFrom(UnitAvatarData.class)))
				{
					stream.throwTypeReadError(UnitAvatarData.class,avatarT.getClass());
				}
				this.avatar.shadowCopy(avatarT);
			}
		}
		else
		{
			this.avatar=null;
		}
		
		BaseData fightT=stream.readDataFullNotNull();
		if(fightT!=null)
		{
			if(fightT instanceof UnitFightData)
			{
				this.fight=(UnitFightData)fightT;
			}
			else
			{
				this.fight=new UnitFightData();
				if(!(fightT.getClass().isAssignableFrom(UnitFightData.class)))
				{
					stream.throwTypeReadError(UnitFightData.class,fightT.getClass());
				}
				this.fight.shadowCopy(fightT);
			}
		}
		else
		{
			this.fight=null;
		}
		
		BaseData equipsT=stream.readDataFullNotNull();
		if(equipsT!=null)
		{
			if(equipsT instanceof EquipContainerData)
			{
				this.equips=(EquipContainerData)equipsT;
			}
			else
			{
				this.equips=new EquipContainerData();
				if(!(equipsT.getClass().isAssignableFrom(EquipContainerData.class)))
				{
					stream.throwTypeReadError(EquipContainerData.class,equipsT.getClass());
				}
				this.equips.shadowCopy(equipsT);
			}
		}
		else
		{
			this.equips=null;
		}
		
		this.mIndex=stream.readInt();
		
		this.isWorking=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		if(this.avatar!=null)
		{
			stream.writeDataFullNotNull(this.avatar);
		}
		else
		{
			nullObjError("avatar");
		}
		
		if(this.fight!=null)
		{
			stream.writeDataFullNotNull(this.fight);
		}
		else
		{
			nullObjError("fight");
		}
		
		if(this.equips!=null)
		{
			stream.writeDataFullNotNull(this.equips);
		}
		else
		{
			nullObjError("equips");
		}
		
		stream.writeInt(this.mIndex);
		
		stream.writeBoolean(this.isWorking);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		this.avatar=(UnitAvatarData)stream.readDataSimpleNotNull();
		
		this.fight=(UnitFightData)stream.readDataSimpleNotNull();
		
		this.equips=(EquipContainerData)stream.readDataSimpleNotNull();
		
		this.mIndex=stream.readInt();
		
		this.isWorking=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		if(this.avatar!=null)
		{
			stream.writeDataSimpleNotNull(this.avatar);
		}
		else
		{
			nullObjError("avatar");
		}
		
		if(this.fight!=null)
		{
			stream.writeDataSimpleNotNull(this.fight);
		}
		else
		{
			nullObjError("fight");
		}
		
		if(this.equips!=null)
		{
			stream.writeDataSimpleNotNull(this.equips);
		}
		else
		{
			nullObjError("equips");
		}
		
		stream.writeInt(this.mIndex);
		
		stream.writeBoolean(this.isWorking);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof MUnitUseData))
			return;
		
		MUnitUseData mData=(MUnitUseData)data;
		
		this.id=mData.id;
		this.level=mData.level;
		this.avatar=mData.avatar;
		this.fight=mData.fight;
		this.equips=mData.equips;
		this.mIndex=mData.mIndex;
		this.isWorking=mData.isWorking;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof MUnitUseData))
			return;
		
		MUnitUseData mData=(MUnitUseData)data;
		
		this.id=mData.id;
		
		this.level=mData.level;
		
		if(mData.avatar!=null)
		{
			this.avatar=(UnitAvatarData)mData.avatar.clone();
		}
		else
		{
			this.avatar=null;
			nullObjError("avatar");
		}
		
		if(mData.fight!=null)
		{
			this.fight=(UnitFightData)mData.fight.clone();
		}
		else
		{
			this.fight=null;
			nullObjError("fight");
		}
		
		if(mData.equips!=null)
		{
			this.equips=(EquipContainerData)mData.equips.clone();
		}
		else
		{
			this.equips=null;
			nullObjError("equips");
		}
		
		this.mIndex=mData.mIndex;
		
		this.isWorking=mData.isWorking;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		MUnitUseData mData=(MUnitUseData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.level!=mData.level)
			return false;
		
		if(mData.avatar!=null)
		{
			if(this.avatar==null)
				return false;
			if(!this.avatar.dataEquals(mData.avatar))
				return false;
		}
		else
		{
			if(this.avatar!=null)
				return false;
		}
		
		if(mData.fight!=null)
		{
			if(this.fight==null)
				return false;
			if(!this.fight.dataEquals(mData.fight))
				return false;
		}
		else
		{
			if(this.fight!=null)
				return false;
		}
		
		if(mData.equips!=null)
		{
			if(this.equips==null)
				return false;
			if(!this.equips.dataEquals(mData.equips))
				return false;
		}
		else
		{
			if(this.equips!=null)
				return false;
		}
		
		if(this.mIndex!=mData.mIndex)
			return false;
		
		if(this.isWorking!=mData.isWorking)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("level");
		writer.sb.append(':');
		writer.sb.append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("avatar");
		writer.sb.append(':');
		if(this.avatar!=null)
		{
			this.avatar.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitAvatarData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("fight");
		writer.sb.append(':');
		if(this.fight!=null)
		{
			this.fight.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitFightData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("equips");
		writer.sb.append(':');
		if(this.equips!=null)
		{
			this.equips.writeDataString(writer);
		}
		else
		{
			writer.sb.append("EquipContainerData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("mIndex");
		writer.sb.append(':');
		writer.sb.append(this.mIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isWorking");
		writer.sb.append(':');
		writer.sb.append(this.isWorking);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.avatar=new UnitAvatarData();
		this.avatar.initDefault();
		this.fight=new UnitFightData();
		this.fight.initDefault();
		this.equips=new EquipContainerData();
		this.equips.initDefault();
	}
	
	/** 获取战斗单位ID */
	public int getFightUnitID()
	{
		return -1;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.id=0;
		this.level=0;
		this.avatar=null;
		this.fight=null;
		this.equips=null;
		this.mIndex=0;
		this.isWorking=false;
	}
	
}
