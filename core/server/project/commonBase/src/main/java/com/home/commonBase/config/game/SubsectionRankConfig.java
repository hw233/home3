package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.IntObjectMap;

/** 分段排行表(generated by shine) */
public class SubsectionRankConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<SubsectionRankConfig> _dic;
	
	/** 功能id */
	public int id;
	
	/** 是否中心服排行榜 */
	public boolean isCenter;
	
	/** 是否需要翻页插件 */
	public boolean needPageTool;
	
	/** 是否需要翻页缓存 */
	public boolean needPageCache;
	
	/** 绑定的活动ID */
	public int bindActivityID;
	
	/** 分段条件(分组依据) */
	public int[][][] subsectionConditions;
	
	/** 分组人数(-1无上限) */
	public int groupNum;
	
	/** 最小入榜值 */
	public int minValue;
	
	/** 每页显示人数 */
	public int eachPageShowNum;
	
	/** 显示最大人数 */
	public int showMaxNum;
	
	/** 排行榜最大人数(用于分组为-1的情况) */
	public int maxNum;
	
	/** 获取 */
	public static SubsectionRankConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<SubsectionRankConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<SubsectionRankConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readShort();
		
		int subsectionConditionsLen=stream.readLen();
		if(this.subsectionConditions==null || this.subsectionConditions.length!=subsectionConditionsLen)
		{
			this.subsectionConditions=new int[subsectionConditionsLen][][];
		}
		int[][][] subsectionConditionsT=this.subsectionConditions;
		for(int subsectionConditionsI=0;subsectionConditionsI<subsectionConditionsLen;++subsectionConditionsI)
		{
			int[][] subsectionConditionsV;
			int subsectionConditionsVLen=stream.readLen();
			subsectionConditionsV=new int[subsectionConditionsVLen][];
			int[][] subsectionConditionsVT=subsectionConditionsV;
			for(int subsectionConditionsVI=0;subsectionConditionsVI<subsectionConditionsVLen;++subsectionConditionsVI)
			{
				int[] subsectionConditionsVV;
				int subsectionConditionsVVLen=stream.readLen();
				subsectionConditionsVV=new int[subsectionConditionsVVLen];
				int[] subsectionConditionsVVT=subsectionConditionsVV;
				for(int subsectionConditionsVVI=0;subsectionConditionsVVI<subsectionConditionsVVLen;++subsectionConditionsVVI)
				{
					int subsectionConditionsVVV;
					subsectionConditionsVVV=stream.readInt();
					
					subsectionConditionsVVT[subsectionConditionsVVI]=subsectionConditionsVVV;
				}
				
				subsectionConditionsVT[subsectionConditionsVI]=subsectionConditionsVV;
			}
			
			subsectionConditionsT[subsectionConditionsI]=subsectionConditionsV;
		}
		
		this.isCenter=stream.readBoolean();
		
		this.needPageTool=stream.readBoolean();
		
		this.needPageCache=stream.readBoolean();
		
		this.bindActivityID=stream.readInt();
		
		this.groupNum=stream.readInt();
		
		this.minValue=stream.readInt();
		
		this.maxNum=stream.readInt();
		
		this.showMaxNum=stream.readInt();
		
		this.eachPageShowNum=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeShort(this.id);
		
		if(this.subsectionConditions!=null)
		{
			int[][][] subsectionConditionsT=this.subsectionConditions;
			stream.writeLen(subsectionConditionsT.length);
			for(int subsectionConditionsVI=0,subsectionConditionsVLen=subsectionConditionsT.length;subsectionConditionsVI<subsectionConditionsVLen;++subsectionConditionsVI)
			{
				int[][] subsectionConditionsV=subsectionConditionsT[subsectionConditionsVI];
				if(subsectionConditionsV!=null)
				{
					int[][] subsectionConditionsVT=subsectionConditionsV;
					stream.writeLen(subsectionConditionsVT.length);
					for(int subsectionConditionsVVI=0,subsectionConditionsVVLen=subsectionConditionsVT.length;subsectionConditionsVVI<subsectionConditionsVVLen;++subsectionConditionsVVI)
					{
						int[] subsectionConditionsVV=subsectionConditionsVT[subsectionConditionsVVI];
						if(subsectionConditionsVV!=null)
						{
							int[] subsectionConditionsVVT=subsectionConditionsVV;
							stream.writeLen(subsectionConditionsVVT.length);
							for(int subsectionConditionsVVVI=0,subsectionConditionsVVVLen=subsectionConditionsVVT.length;subsectionConditionsVVVI<subsectionConditionsVVVLen;++subsectionConditionsVVVI)
							{
								int subsectionConditionsVVV=subsectionConditionsVVT[subsectionConditionsVVVI];
								stream.writeInt(subsectionConditionsVVV);
								
							}
						}
						else
						{
							nullObjError("subsectionConditionsVV");
						}
						
					}
				}
				else
				{
					nullObjError("subsectionConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("subsectionConditions");
		}
		
		stream.writeBoolean(this.isCenter);
		
		stream.writeBoolean(this.needPageTool);
		
		stream.writeBoolean(this.needPageCache);
		
		stream.writeInt(this.bindActivityID);
		
		stream.writeInt(this.groupNum);
		
		stream.writeInt(this.minValue);
		
		stream.writeInt(this.maxNum);
		
		stream.writeInt(this.showMaxNum);
		
		stream.writeInt(this.eachPageShowNum);
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
}
