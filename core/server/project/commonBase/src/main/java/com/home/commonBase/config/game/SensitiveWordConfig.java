package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.constlist.generate.LanguageType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SList;

/** 敏感词表(generated by shine) */
public class SensitiveWordConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<SensitiveWordConfig> _dic;
	
	/** 键 */
	public int key;
	
	/** 简体中文 */
	public String zh_CN="";
	
	/** 美国英语 */
	public String en_US="";
	
	private static SList<String>[] _sList;
	
	/** 获取 */
	public static SensitiveWordConfig get(int key)
	{
		return _dic.get(key);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<SensitiveWordConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<SensitiveWordConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.key=stream.readInt();
		
		this.zh_CN=stream.readUTF();
		
		this.en_US=stream.readUTF();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
	
	}
	
	public static void init()
	{
		_sList=new SList[LanguageType.size];
		
		SensitiveWordConfig[] values;
		SensitiveWordConfig v;
		String str;
		SList<String> list;
		
		for(int i=(values=_dic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				for(int j=1;j<LanguageType.size;j++)
				{
					if((str=v.getStr(j))!=null)
					{
						if((list=_sList[j])==null)
						{
							_sList[j]=list=new SList<>(String[]::new);
						}
						
						list.add(str);
					}
				}
			}
		}
	}
	
	protected String getStr(int type)
	{
		switch(type)
		{
			case LanguageType.Zh_CN:
				return zh_CN;
			case LanguageType.En_US:
				return en_US;
		}
		
		return null;
	}
	
	public static SList<String> getWordList(int type)
	{
		return _sList[type];
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.key);
		
		stream.writeUTF(this.zh_CN);
		
		stream.writeUTF(this.en_US);
		
	}
	
}
