package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.config.game.LanguageConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.IntSet;
import com.home.shine.support.collection.SList;

/** 功能表(generated by shine) */
public class FunctionConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<FunctionConfig> _dic;
	
	/** 显示名字 */
	public String showName="";
	
	/** 关闭条件 */
	public int[][] closeConditions;
	
	/** 开启条件 */
	public int[][] openConditions;
	
	/** 功能id */
	public int id;
	
	/** 显示名字原值 */
	private String _showName;
	
	/** 是否需要关闭(T) */
	public boolean needClose;
	
	/** 条件组 */
	public static IntObjectMap<IntObjectMap<FunctionConfig>> conditionDic;
	
	/** 获取 */
	public static FunctionConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<FunctionConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<FunctionConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readShort();
		
		this.showName=stream.readUTF();
		
		int openConditionsLen=stream.readLen();
		if(this.openConditions==null || this.openConditions.length!=openConditionsLen)
		{
			this.openConditions=new int[openConditionsLen][];
		}
		int[][] openConditionsT=this.openConditions;
		for(int openConditionsI=0;openConditionsI<openConditionsLen;++openConditionsI)
		{
			int[] openConditionsV;
			int openConditionsVLen=stream.readLen();
			openConditionsV=new int[openConditionsVLen];
			int[] openConditionsVT=openConditionsV;
			for(int openConditionsVI=0;openConditionsVI<openConditionsVLen;++openConditionsVI)
			{
				int openConditionsVV;
				openConditionsVV=stream.readInt();
				
				openConditionsVT[openConditionsVI]=openConditionsVV;
			}
			
			openConditionsT[openConditionsI]=openConditionsV;
		}
		
		int closeConditionsLen=stream.readLen();
		if(this.closeConditions==null || this.closeConditions.length!=closeConditionsLen)
		{
			this.closeConditions=new int[closeConditionsLen][];
		}
		int[][] closeConditionsT=this.closeConditions;
		for(int closeConditionsI=0;closeConditionsI<closeConditionsLen;++closeConditionsI)
		{
			int[] closeConditionsV;
			int closeConditionsVLen=stream.readLen();
			closeConditionsV=new int[closeConditionsVLen];
			int[] closeConditionsVT=closeConditionsV;
			for(int closeConditionsVI=0;closeConditionsVI<closeConditionsVLen;++closeConditionsVI)
			{
				int closeConditionsVV;
				closeConditionsVV=stream.readInt();
				
				closeConditionsVT[closeConditionsVI]=closeConditionsVV;
			}
			
			closeConditionsT[closeConditionsI]=closeConditionsV;
		}
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		conditionDic=new IntObjectMap<>();
		
		for(FunctionConfig v:getDic())
		{
			for(int[] arr:v.openConditions)
			{
				conditionDic.computeIfAbsent(arr[0],k->new IntObjectMap<>(FunctionConfig[]::new)).put(v.id,v);
			}
			
			if(v.closeConditions.length==0)
			{
				v.needClose=false;
			}
			else
			{
				v.needClose=true;
				
				for(int[] arr:v.closeConditions)
				{
					conditionDic.computeIfAbsent(arr[0],k->new IntObjectMap<>(FunctionConfig[]::new)).put(v.id,v);
				}
			}
		}
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeShort(this.id);
		
		stream.writeUTF(this.showName);
		
		if(this.openConditions!=null)
		{
			int[][] openConditionsT=this.openConditions;
			stream.writeLen(openConditionsT.length);
			for(int openConditionsVI=0,openConditionsVLen=openConditionsT.length;openConditionsVI<openConditionsVLen;++openConditionsVI)
			{
				int[] openConditionsV=openConditionsT[openConditionsVI];
				if(openConditionsV!=null)
				{
					int[] openConditionsVT=openConditionsV;
					stream.writeLen(openConditionsVT.length);
					for(int openConditionsVVI=0,openConditionsVVLen=openConditionsVT.length;openConditionsVVI<openConditionsVVLen;++openConditionsVVI)
					{
						int openConditionsVV=openConditionsVT[openConditionsVVI];
						stream.writeInt(openConditionsVV);
						
					}
				}
				else
				{
					nullObjError("openConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("openConditions");
		}
		
		if(this.closeConditions!=null)
		{
			int[][] closeConditionsT=this.closeConditions;
			stream.writeLen(closeConditionsT.length);
			for(int closeConditionsVI=0,closeConditionsVLen=closeConditionsT.length;closeConditionsVI<closeConditionsVLen;++closeConditionsVI)
			{
				int[] closeConditionsV=closeConditionsT[closeConditionsVI];
				if(closeConditionsV!=null)
				{
					int[] closeConditionsVT=closeConditionsV;
					stream.writeLen(closeConditionsVT.length);
					for(int closeConditionsVVI=0,closeConditionsVVLen=closeConditionsVT.length;closeConditionsVVI<closeConditionsVVLen;++closeConditionsVVI)
					{
						int closeConditionsVV=closeConditionsVT[closeConditionsVVI];
						stream.writeInt(closeConditionsVV);
						
					}
				}
				else
				{
					nullObjError("closeConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("closeConditions");
		}
		
	}
	
	/** 生成刷新配置 */
	@Override
	protected void generateRefresh()
	{
		if(_showName==null)
			_showName=showName;
		showName=LanguageConfig.getText(_showName);
		
	}
	
}
