package com.home.commonBase.data.item;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.item.ItemData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 物品列表容器工具数据(generated by shine) */
public class ItemDicContainerData extends FuncToolData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ItemDicContainer;
	
	/** 物品数据组(key:index) */
	public IntObjectMap<ItemData> items;
	
	/** 服务器序号自增 */
	public int serverItemIndex;
	
	/** 客户端序号自增 */
	public int clientItemIndex;
	
	public ItemDicContainerData()
	{
		_dataID=BaseDataType.ItemDicContainer;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ItemDicContainerData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int itemsLen=stream.readLen();
		if(this.items!=null)
		{
			this.items.clear();
			this.items.ensureCapacity(itemsLen);
		}
		else
		{
			this.items=new IntObjectMap<ItemData>(ItemData[]::new,itemsLen);
		}
		
		IntObjectMap<ItemData> itemsT=this.items;
		for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
		{
			int itemsK;
			ItemData itemsV;
			itemsK=stream.readInt();
			
			BaseData itemsVT=stream.readDataFullNotNull();
			if(itemsVT!=null)
			{
				if(itemsVT instanceof ItemData)
				{
					itemsV=(ItemData)itemsVT;
				}
				else
				{
					itemsV=new ItemData();
					if(!(itemsVT.getClass().isAssignableFrom(ItemData.class)))
					{
						stream.throwTypeReadError(ItemData.class,itemsVT.getClass());
					}
					itemsV.shadowCopy(itemsVT);
				}
			}
			else
			{
				itemsV=null;
			}
			
			itemsT.put(itemsK,itemsV);
		}
		
		this.serverItemIndex=stream.readInt();
		
		this.clientItemIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.items!=null)
		{
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						stream.writeInt(itemsK);
						
						if(itemsV!=null)
						{
							stream.writeDataFullNotNull(itemsV);
						}
						else
						{
							nullObjError("itemsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("items");
		}
		
		stream.writeInt(this.serverItemIndex);
		
		stream.writeInt(this.clientItemIndex);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int itemsLen=stream.readLen();
		if(this.items!=null)
		{
			this.items.clear();
			this.items.ensureCapacity(itemsLen);
		}
		else
		{
			this.items=new IntObjectMap<ItemData>(ItemData[]::new,itemsLen);
		}
		
		IntObjectMap<ItemData> itemsT=this.items;
		for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
		{
			int itemsK;
			ItemData itemsV;
			itemsK=stream.readInt();
			
			itemsV=(ItemData)stream.readDataSimpleNotNull();
			
			itemsT.put(itemsK,itemsV);
		}
		
		this.serverItemIndex=stream.readInt();
		
		this.clientItemIndex=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.items!=null)
		{
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						stream.writeInt(itemsK);
						
						if(itemsV!=null)
						{
							stream.writeDataSimpleNotNull(itemsV);
						}
						else
						{
							nullObjError("itemsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("items");
		}
		
		stream.writeInt(this.serverItemIndex);
		
		stream.writeInt(this.clientItemIndex);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof ItemDicContainerData))
			return;
		
		ItemDicContainerData mData=(ItemDicContainerData)data;
		
		this.items=mData.items;
		this.serverItemIndex=mData.serverItemIndex;
		this.clientItemIndex=mData.clientItemIndex;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof ItemDicContainerData))
			return;
		
		ItemDicContainerData mData=(ItemDicContainerData)data;
		
		if(mData.items!=null)
		{
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(mData.items.size());
			}
			else
			{
				this.items=new IntObjectMap<ItemData>(ItemData[]::new,mData.items.size());
			}
			
			IntObjectMap<ItemData> itemsT=this.items;
			if(!mData.items.isEmpty())
			{
				int itemsKFreeValue=mData.items.getFreeValue();
				int[] itemsKKeys=mData.items.getKeys();
				Object[] itemsVValues=mData.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						int itemsW;
						ItemData itemsU;
						itemsW=itemsK;
						
						if(itemsV!=null)
						{
							itemsU=(ItemData)itemsV.clone();
						}
						else
						{
							itemsU=null;
							nullObjError("itemsU");
						}
						
						itemsT.put(itemsW,itemsU);
					}
				}
			}
		}
		else
		{
			this.items=null;
			nullObjError("items");
		}
		
		this.serverItemIndex=mData.serverItemIndex;
		
		this.clientItemIndex=mData.clientItemIndex;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		ItemDicContainerData mData=(ItemDicContainerData)data;
		if(mData.items!=null)
		{
			if(this.items==null)
				return false;
			if(this.items.size()!=mData.items.size())
				return false;
			IntObjectMap<ItemData> itemsR=mData.items;
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						ItemData itemsU=itemsR.get(itemsK);
						if(itemsU!=null)
						{
							if(itemsV==null)
								return false;
							if(!itemsV.dataEquals(itemsU))
								return false;
						}
						else
						{
							if(itemsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.items!=null)
				return false;
		}
		
		if(this.serverItemIndex!=mData.serverItemIndex)
			return false;
		
		if(this.clientItemIndex!=mData.clientItemIndex)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("items");
		writer.sb.append(':');
		writer.sb.append("Map<int,ItemData>");
		if(this.items!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.items.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				Object[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=(ItemData)itemsVValues[itemsKI];
						writer.writeTabs();
						writer.sb.append(itemsK);
						
						writer.sb.append(':');
						if(itemsV!=null)
						{
							itemsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ItemData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("serverItemIndex");
		writer.sb.append(':');
		writer.sb.append(this.serverItemIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientItemIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientItemIndex);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.items=new IntObjectMap<ItemData>(ItemData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.items=null;
		this.serverItemIndex=0;
		this.clientItemIndex=0;
	}
	
}
