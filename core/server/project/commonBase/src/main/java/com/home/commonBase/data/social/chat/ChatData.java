package com.home.commonBase.data.social.chat;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.social.chat.ChatElementData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 聊天数据(generated by shine) */
public class ChatData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Chat;
	
	/** 类型 */
	public int type;
	
	/** 文字 */
	public String text="";
	
	/** 聊天元素组 */
	public SList<ChatElementData> elements;
	
	public ChatData()
	{
		_dataID=BaseDataType.Chat;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ChatData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.type=stream.readInt();
		
		this.text=stream.readUTF();
		
		if(stream.readBoolean())
		{
			int elementsLen=stream.readLen();
			if(this.elements!=null)
			{
				this.elements.clear();
				this.elements.ensureCapacity(elementsLen);
			}
			else
			{
				this.elements=new SList<ChatElementData>(ChatElementData[]::new,elementsLen);
			}
			
			SList<ChatElementData> elementsT=this.elements;
			for(int elementsI=elementsLen-1;elementsI>=0;--elementsI)
			{
				ChatElementData elementsV;
				if(stream.readBoolean())
				{
					BaseData elementsVT=stream.readDataFullNotNull();
					if(elementsVT!=null)
					{
						if(elementsVT instanceof ChatElementData)
						{
							elementsV=(ChatElementData)elementsVT;
						}
						else
						{
							elementsV=new ChatElementData();
							if(!(elementsVT.getClass().isAssignableFrom(ChatElementData.class)))
							{
								stream.throwTypeReadError(ChatElementData.class,elementsVT.getClass());
							}
							elementsV.shadowCopy(elementsVT);
						}
					}
					else
					{
						elementsV=null;
					}
				}
				else
				{
					elementsV=null;
				}
				
				elementsT.add(elementsV);
			}
		}
		else
		{
			this.elements=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		stream.writeUTF(this.text);
		
		if(this.elements!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.elements.size());
			if(!this.elements.isEmpty())
			{
				Object[] elementsVValues=this.elements.getValues();
				for(int elementsVI=0,elementsVLen=this.elements.length();elementsVI<elementsVLen;++elementsVI)
				{
					ChatElementData elementsV=(ChatElementData)elementsVValues[elementsVI];
					if(elementsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(elementsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.type=stream.readInt();
		
		this.text=stream.readUTF();
		
		if(stream.readBoolean())
		{
			int elementsLen=stream.readLen();
			if(this.elements!=null)
			{
				this.elements.clear();
				this.elements.ensureCapacity(elementsLen);
			}
			else
			{
				this.elements=new SList<ChatElementData>(ChatElementData[]::new,elementsLen);
			}
			
			SList<ChatElementData> elementsT=this.elements;
			for(int elementsI=elementsLen-1;elementsI>=0;--elementsI)
			{
				ChatElementData elementsV;
				if(stream.readBoolean())
				{
					elementsV=(ChatElementData)stream.readDataSimpleNotNull();
				}
				else
				{
					elementsV=null;
				}
				
				elementsT.add(elementsV);
			}
		}
		else
		{
			this.elements=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.type);
		
		stream.writeUTF(this.text);
		
		if(this.elements!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.elements.size());
			if(!this.elements.isEmpty())
			{
				Object[] elementsVValues=this.elements.getValues();
				for(int elementsVI=0,elementsVLen=this.elements.length();elementsVI<elementsVLen;++elementsVI)
				{
					ChatElementData elementsV=(ChatElementData)elementsVValues[elementsVI];
					if(elementsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(elementsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ChatData))
			return;
		
		ChatData mData=(ChatData)data;
		
		this.type=mData.type;
		this.text=mData.text;
		this.elements=mData.elements;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ChatData))
			return;
		
		ChatData mData=(ChatData)data;
		
		this.type=mData.type;
		
		this.text=mData.text;
		
		if(mData.elements!=null)
		{
			if(this.elements!=null)
			{
				this.elements.clear();
				this.elements.ensureCapacity(mData.elements.size());
			}
			else
			{
				this.elements=new SList<ChatElementData>(ChatElementData[]::new,mData.elements.size());
			}
			
			SList<ChatElementData> elementsT=this.elements;
			if(!mData.elements.isEmpty())
			{
				Object[] elementsVValues=mData.elements.getValues();
				for(int elementsVI=0,elementsVLen=mData.elements.length();elementsVI<elementsVLen;++elementsVI)
				{
					ChatElementData elementsV=(ChatElementData)elementsVValues[elementsVI];
					ChatElementData elementsU;
					if(elementsV!=null)
					{
						elementsU=(ChatElementData)elementsV.clone();
					}
					else
					{
						elementsU=null;
					}
					
					elementsT.add(elementsU);
				}
			}
		}
		else
		{
			this.elements=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ChatData mData=(ChatData)data;
		if(this.type!=mData.type)
			return false;
		
		if(!this.text.equals(mData.text))
			return false;
		
		if(mData.elements!=null)
		{
			if(this.elements==null)
				return false;
			if(this.elements.size()!=mData.elements.size())
				return false;
			SList<ChatElementData> elementsT=this.elements;
			SList<ChatElementData> elementsR=mData.elements;
			int elementsLen=elementsT.size();
			for(int elementsI=0;elementsI<elementsLen;++elementsI)
			{
				ChatElementData elementsU=elementsT.get(elementsI);
				ChatElementData elementsV=elementsR.get(elementsI);
				if(elementsV!=null)
				{
					if(elementsU==null)
						return false;
					if(!elementsU.dataEquals(elementsV))
						return false;
				}
				else
				{
					if(elementsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.elements!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("text");
		writer.sb.append(':');
		writer.sb.append(this.text);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("elements");
		writer.sb.append(':');
		writer.sb.append("List<ChatElementData>");
		if(this.elements!=null)
		{
			SList<ChatElementData> elementsT=this.elements;
			int elementsLen=elementsT.size();
			writer.sb.append('(');
			writer.sb.append(elementsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int elementsI=0;elementsI<elementsLen;++elementsI)
			{
				ChatElementData elementsV=elementsT.get(elementsI);
				writer.writeTabs();
				writer.sb.append(elementsI);
				writer.sb.append(':');
				if(elementsV!=null)
				{
					elementsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ChatElementData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.type=0;
		this.text="";
		this.elements=null;
	}
	
}
