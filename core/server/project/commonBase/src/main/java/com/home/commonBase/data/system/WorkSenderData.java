package com.home.commonBase.data.system;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.system.WorkData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.pool.DataPool;

/** 事务发起者数据(generated by shine) */
public class WorkSenderData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.WorkSender;
	
	/** 事务分配序号(自增) */
	public long workInstanceID;
	
	/** 已发送事务记录字典 */
	public LongObjectMap<WorkData> workRecordDic;
	
	public WorkSenderData()
	{
		_dataID=BaseDataType.WorkSender;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "WorkSenderData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.workInstanceID=stream.readLong();
		
		int workRecordDicLen=stream.readLen();
		if(this.workRecordDic!=null)
		{
			this.workRecordDic.clear();
			this.workRecordDic.ensureCapacity(workRecordDicLen);
		}
		else
		{
			this.workRecordDic=new LongObjectMap<WorkData>(WorkData[]::new,workRecordDicLen);
		}
		
		LongObjectMap<WorkData> workRecordDicT=this.workRecordDic;
		for(int workRecordDicI=workRecordDicLen-1;workRecordDicI>=0;--workRecordDicI)
		{
			long workRecordDicK;
			WorkData workRecordDicV;
			workRecordDicK=stream.readLong();
			
			BaseData workRecordDicVT=stream.readDataFullNotNull();
			if(workRecordDicVT!=null)
			{
				if(workRecordDicVT instanceof WorkData)
				{
					workRecordDicV=(WorkData)workRecordDicVT;
				}
				else
				{
					workRecordDicV=new WorkData();
					if(!(workRecordDicVT.getClass().isAssignableFrom(WorkData.class)))
					{
						stream.throwTypeReadError(WorkData.class,workRecordDicVT.getClass());
					}
					workRecordDicV.shadowCopy(workRecordDicVT);
				}
			}
			else
			{
				workRecordDicV=null;
			}
			
			workRecordDicT.put(workRecordDicK,workRecordDicV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.workInstanceID);
		
		if(this.workRecordDic!=null)
		{
			stream.writeLen(this.workRecordDic.size());
			if(!this.workRecordDic.isEmpty())
			{
				long workRecordDicKFreeValue=this.workRecordDic.getFreeValue();
				long[] workRecordDicKKeys=this.workRecordDic.getKeys();
				Object[] workRecordDicVValues=this.workRecordDic.getValues();
				for(int workRecordDicKI=workRecordDicKKeys.length-1;workRecordDicKI>=0;--workRecordDicKI)
				{
					long workRecordDicK=workRecordDicKKeys[workRecordDicKI];
					if(workRecordDicK!=workRecordDicKFreeValue)
					{
						WorkData workRecordDicV=(WorkData)workRecordDicVValues[workRecordDicKI];
						stream.writeLong(workRecordDicK);
						
						if(workRecordDicV!=null)
						{
							stream.writeDataFullNotNull(workRecordDicV);
						}
						else
						{
							nullObjError("workRecordDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("workRecordDic");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.workInstanceID=stream.readLong();
		
		int workRecordDicLen=stream.readLen();
		if(this.workRecordDic!=null)
		{
			this.workRecordDic.clear();
			this.workRecordDic.ensureCapacity(workRecordDicLen);
		}
		else
		{
			this.workRecordDic=new LongObjectMap<WorkData>(WorkData[]::new,workRecordDicLen);
		}
		
		LongObjectMap<WorkData> workRecordDicT=this.workRecordDic;
		for(int workRecordDicI=workRecordDicLen-1;workRecordDicI>=0;--workRecordDicI)
		{
			long workRecordDicK;
			WorkData workRecordDicV;
			workRecordDicK=stream.readLong();
			
			workRecordDicV=(WorkData)stream.readDataSimpleNotNull();
			
			workRecordDicT.put(workRecordDicK,workRecordDicV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.workInstanceID);
		
		if(this.workRecordDic!=null)
		{
			stream.writeLen(this.workRecordDic.size());
			if(!this.workRecordDic.isEmpty())
			{
				long workRecordDicKFreeValue=this.workRecordDic.getFreeValue();
				long[] workRecordDicKKeys=this.workRecordDic.getKeys();
				Object[] workRecordDicVValues=this.workRecordDic.getValues();
				for(int workRecordDicKI=workRecordDicKKeys.length-1;workRecordDicKI>=0;--workRecordDicKI)
				{
					long workRecordDicK=workRecordDicKKeys[workRecordDicKI];
					if(workRecordDicK!=workRecordDicKFreeValue)
					{
						WorkData workRecordDicV=(WorkData)workRecordDicVValues[workRecordDicKI];
						stream.writeLong(workRecordDicK);
						
						if(workRecordDicV!=null)
						{
							stream.writeDataSimpleNotNull(workRecordDicV);
						}
						else
						{
							nullObjError("workRecordDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("workRecordDic");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof WorkSenderData))
			return;
		
		WorkSenderData mData=(WorkSenderData)data;
		
		this.workInstanceID=mData.workInstanceID;
		this.workRecordDic=mData.workRecordDic;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof WorkSenderData))
			return;
		
		WorkSenderData mData=(WorkSenderData)data;
		
		this.workInstanceID=mData.workInstanceID;
		
		if(mData.workRecordDic!=null)
		{
			if(this.workRecordDic!=null)
			{
				this.workRecordDic.clear();
				this.workRecordDic.ensureCapacity(mData.workRecordDic.size());
			}
			else
			{
				this.workRecordDic=new LongObjectMap<WorkData>(WorkData[]::new,mData.workRecordDic.size());
			}
			
			LongObjectMap<WorkData> workRecordDicT=this.workRecordDic;
			if(!mData.workRecordDic.isEmpty())
			{
				long workRecordDicKFreeValue=mData.workRecordDic.getFreeValue();
				long[] workRecordDicKKeys=mData.workRecordDic.getKeys();
				Object[] workRecordDicVValues=mData.workRecordDic.getValues();
				for(int workRecordDicKI=workRecordDicKKeys.length-1;workRecordDicKI>=0;--workRecordDicKI)
				{
					long workRecordDicK=workRecordDicKKeys[workRecordDicKI];
					if(workRecordDicK!=workRecordDicKFreeValue)
					{
						WorkData workRecordDicV=(WorkData)workRecordDicVValues[workRecordDicKI];
						long workRecordDicW;
						WorkData workRecordDicU;
						workRecordDicW=workRecordDicK;
						
						if(workRecordDicV!=null)
						{
							workRecordDicU=(WorkData)workRecordDicV.clone();
						}
						else
						{
							workRecordDicU=null;
							nullObjError("workRecordDicU");
						}
						
						workRecordDicT.put(workRecordDicW,workRecordDicU);
					}
				}
			}
		}
		else
		{
			this.workRecordDic=null;
			nullObjError("workRecordDic");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		WorkSenderData mData=(WorkSenderData)data;
		if(this.workInstanceID!=mData.workInstanceID)
			return false;
		
		if(mData.workRecordDic!=null)
		{
			if(this.workRecordDic==null)
				return false;
			if(this.workRecordDic.size()!=mData.workRecordDic.size())
				return false;
			LongObjectMap<WorkData> workRecordDicR=mData.workRecordDic;
			if(!this.workRecordDic.isEmpty())
			{
				long workRecordDicKFreeValue=this.workRecordDic.getFreeValue();
				long[] workRecordDicKKeys=this.workRecordDic.getKeys();
				Object[] workRecordDicVValues=this.workRecordDic.getValues();
				for(int workRecordDicKI=workRecordDicKKeys.length-1;workRecordDicKI>=0;--workRecordDicKI)
				{
					long workRecordDicK=workRecordDicKKeys[workRecordDicKI];
					if(workRecordDicK!=workRecordDicKFreeValue)
					{
						WorkData workRecordDicV=(WorkData)workRecordDicVValues[workRecordDicKI];
						WorkData workRecordDicU=workRecordDicR.get(workRecordDicK);
						if(workRecordDicU!=null)
						{
							if(workRecordDicV==null)
								return false;
							if(!workRecordDicV.dataEquals(workRecordDicU))
								return false;
						}
						else
						{
							if(workRecordDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.workRecordDic!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("workInstanceID");
		writer.sb.append(':');
		writer.sb.append(this.workInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("workRecordDic");
		writer.sb.append(':');
		writer.sb.append("Map<long,WorkData>");
		if(this.workRecordDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.workRecordDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.workRecordDic.isEmpty())
			{
				long workRecordDicKFreeValue=this.workRecordDic.getFreeValue();
				long[] workRecordDicKKeys=this.workRecordDic.getKeys();
				Object[] workRecordDicVValues=this.workRecordDic.getValues();
				for(int workRecordDicKI=workRecordDicKKeys.length-1;workRecordDicKI>=0;--workRecordDicKI)
				{
					long workRecordDicK=workRecordDicKKeys[workRecordDicKI];
					if(workRecordDicK!=workRecordDicKFreeValue)
					{
						WorkData workRecordDicV=(WorkData)workRecordDicVValues[workRecordDicKI];
						writer.writeTabs();
						writer.sb.append(workRecordDicK);
						
						writer.sb.append(':');
						if(workRecordDicV!=null)
						{
							workRecordDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("WorkData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.workRecordDic=new LongObjectMap<WorkData>(WorkData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.workInstanceID=0L;
		this.workRecordDic=null;
	}
	
}
