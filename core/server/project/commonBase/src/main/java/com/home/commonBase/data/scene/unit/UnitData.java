package com.home.commonBase.data.scene.unit;
import com.home.commonBase.config.game.ScenePlaceElementConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.unit.UnitAIData;
import com.home.commonBase.data.scene.unit.UnitAvatarData;
import com.home.commonBase.data.scene.unit.UnitFightData;
import com.home.commonBase.data.scene.unit.UnitFightExData;
import com.home.commonBase.data.scene.unit.UnitFuncData;
import com.home.commonBase.data.scene.unit.UnitIdentityData;
import com.home.commonBase.data.scene.unit.UnitMoveData;
import com.home.commonBase.data.scene.unit.UnitNormalData;
import com.home.commonBase.data.scene.unit.UnitPosData;
import com.home.commonBase.data.scene.unit.identity.CharacterIdentityData;
import com.home.commonBase.data.scene.unit.identity.FightUnitIdentityData;
import com.home.commonBase.data.scene.unit.identity.MUnitIdentityData;
import com.home.commonBase.logic.unit.UnitFightDataLogic;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 单位数据(generated by shine) */
public class UnitData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Unit;
	
	/** 流水ID */
	public int instanceID;
	
	/** 通用数据 */
	public UnitNormalData normal;
	
	/** 身份数据 */
	public UnitIdentityData identity;
	
	/** 位置数据 */
	public UnitPosData pos;
	
	/** 移动数据 */
	public UnitMoveData move;
	
	/** 造型数据 */
	public UnitAvatarData avatar;
	
	/** 战斗数据 */
	public UnitFightData fight;
	
	/** 附加战斗数据 */
	public UnitFightExData fightEx;
	
	/** 功能数据 */
	public UnitFuncData func;
	
	/** AI数据 */
	public UnitAIData ai;
	
	/** 战斗数据逻辑 */
	public UnitFightDataLogic fightDataLogic;
	
	/** 摆放配置(只有通过摆放配置创建的才有) */
	public ScenePlaceElementConfig placeConfig;
	
	public UnitData()
	{
		_dataID=BaseDataType.Unit;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.instanceID=stream.readInt();
		
		BaseData identityT=stream.readDataFullNotNull();
		if(identityT!=null)
		{
			if(identityT instanceof UnitIdentityData)
			{
				this.identity=(UnitIdentityData)identityT;
			}
			else
			{
				this.identity=new UnitIdentityData();
				if(!(identityT.getClass().isAssignableFrom(UnitIdentityData.class)))
				{
					stream.throwTypeReadError(UnitIdentityData.class,identityT.getClass());
				}
				this.identity.shadowCopy(identityT);
			}
		}
		else
		{
			this.identity=null;
		}
		
		BaseData normalT=stream.readDataFullNotNull();
		if(normalT!=null)
		{
			if(normalT instanceof UnitNormalData)
			{
				this.normal=(UnitNormalData)normalT;
			}
			else
			{
				this.normal=new UnitNormalData();
				if(!(normalT.getClass().isAssignableFrom(UnitNormalData.class)))
				{
					stream.throwTypeReadError(UnitNormalData.class,normalT.getClass());
				}
				this.normal.shadowCopy(normalT);
			}
		}
		else
		{
			this.normal=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData posT=stream.readDataFullNotNull();
			if(posT!=null)
			{
				if(posT instanceof UnitPosData)
				{
					this.pos=(UnitPosData)posT;
				}
				else
				{
					this.pos=new UnitPosData();
					if(!(posT.getClass().isAssignableFrom(UnitPosData.class)))
					{
						stream.throwTypeReadError(UnitPosData.class,posT.getClass());
					}
					this.pos.shadowCopy(posT);
				}
			}
			else
			{
				this.pos=null;
			}
		}
		else
		{
			this.pos=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData avatarT=stream.readDataFullNotNull();
			if(avatarT!=null)
			{
				if(avatarT instanceof UnitAvatarData)
				{
					this.avatar=(UnitAvatarData)avatarT;
				}
				else
				{
					this.avatar=new UnitAvatarData();
					if(!(avatarT.getClass().isAssignableFrom(UnitAvatarData.class)))
					{
						stream.throwTypeReadError(UnitAvatarData.class,avatarT.getClass());
					}
					this.avatar.shadowCopy(avatarT);
				}
			}
			else
			{
				this.avatar=null;
			}
		}
		else
		{
			this.avatar=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData moveT=stream.readDataFullNotNull();
			if(moveT!=null)
			{
				if(moveT instanceof UnitMoveData)
				{
					this.move=(UnitMoveData)moveT;
				}
				else
				{
					this.move=new UnitMoveData();
					if(!(moveT.getClass().isAssignableFrom(UnitMoveData.class)))
					{
						stream.throwTypeReadError(UnitMoveData.class,moveT.getClass());
					}
					this.move.shadowCopy(moveT);
				}
			}
			else
			{
				this.move=null;
			}
		}
		else
		{
			this.move=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData fightT=stream.readDataFullNotNull();
			if(fightT!=null)
			{
				if(fightT instanceof UnitFightData)
				{
					this.fight=(UnitFightData)fightT;
				}
				else
				{
					this.fight=new UnitFightData();
					if(!(fightT.getClass().isAssignableFrom(UnitFightData.class)))
					{
						stream.throwTypeReadError(UnitFightData.class,fightT.getClass());
					}
					this.fight.shadowCopy(fightT);
				}
			}
			else
			{
				this.fight=null;
			}
		}
		else
		{
			this.fight=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData fightExT=stream.readDataFullNotNull();
			if(fightExT!=null)
			{
				if(fightExT instanceof UnitFightExData)
				{
					this.fightEx=(UnitFightExData)fightExT;
				}
				else
				{
					this.fightEx=new UnitFightExData();
					if(!(fightExT.getClass().isAssignableFrom(UnitFightExData.class)))
					{
						stream.throwTypeReadError(UnitFightExData.class,fightExT.getClass());
					}
					this.fightEx.shadowCopy(fightExT);
				}
			}
			else
			{
				this.fightEx=null;
			}
		}
		else
		{
			this.fightEx=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData aiT=stream.readDataFullNotNull();
			if(aiT!=null)
			{
				if(aiT instanceof UnitAIData)
				{
					this.ai=(UnitAIData)aiT;
				}
				else
				{
					this.ai=new UnitAIData();
					if(!(aiT.getClass().isAssignableFrom(UnitAIData.class)))
					{
						stream.throwTypeReadError(UnitAIData.class,aiT.getClass());
					}
					this.ai.shadowCopy(aiT);
				}
			}
			else
			{
				this.ai=null;
			}
		}
		else
		{
			this.ai=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData funcT=stream.readDataFullNotNull();
			if(funcT!=null)
			{
				if(funcT instanceof UnitFuncData)
				{
					this.func=(UnitFuncData)funcT;
				}
				else
				{
					this.func=new UnitFuncData();
					if(!(funcT.getClass().isAssignableFrom(UnitFuncData.class)))
					{
						stream.throwTypeReadError(UnitFuncData.class,funcT.getClass());
					}
					this.func.shadowCopy(funcT);
				}
			}
			else
			{
				this.func=null;
			}
		}
		else
		{
			this.func=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.instanceID);
		
		if(this.identity!=null)
		{
			stream.writeDataFullNotNull(this.identity);
		}
		else
		{
			nullObjError("identity");
		}
		
		if(this.normal!=null)
		{
			stream.writeDataFullNotNull(this.normal);
		}
		else
		{
			nullObjError("normal");
		}
		
		if(this.pos!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.pos);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.avatar!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.avatar);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.move!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.move);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.fight!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.fight);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.fightEx!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.fightEx);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.ai!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.ai);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.func!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.func);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.instanceID=stream.readInt();
		
		this.identity=(UnitIdentityData)stream.readDataSimpleNotNull();
		
		this.normal=(UnitNormalData)stream.readDataSimpleNotNull();
		
		if(stream.readBoolean())
		{
			this.pos=(UnitPosData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.pos=null;
		}
		
		if(stream.readBoolean())
		{
			this.avatar=(UnitAvatarData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.avatar=null;
		}
		
		if(stream.readBoolean())
		{
			this.move=(UnitMoveData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.move=null;
		}
		
		if(stream.readBoolean())
		{
			this.fight=(UnitFightData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.fight=null;
		}
		
		if(stream.readBoolean())
		{
			this.fightEx=(UnitFightExData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.fightEx=null;
		}
		
		if(stream.readBoolean())
		{
			this.ai=(UnitAIData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.ai=null;
		}
		
		if(stream.readBoolean())
		{
			this.func=(UnitFuncData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.func=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.instanceID);
		
		if(this.identity!=null)
		{
			stream.writeDataSimpleNotNull(this.identity);
		}
		else
		{
			nullObjError("identity");
		}
		
		if(this.normal!=null)
		{
			stream.writeDataSimpleNotNull(this.normal);
		}
		else
		{
			nullObjError("normal");
		}
		
		if(this.pos!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.pos);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.avatar!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.avatar);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.move!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.move);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.fight!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.fight);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.fightEx!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.fightEx);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.ai!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.ai);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.func!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.func);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof UnitData))
			return;
		
		UnitData mData=(UnitData)data;
		
		this.instanceID=mData.instanceID;
		this.identity=mData.identity;
		this.normal=mData.normal;
		this.pos=mData.pos;
		this.avatar=mData.avatar;
		this.move=mData.move;
		this.fight=mData.fight;
		this.fightEx=mData.fightEx;
		this.ai=mData.ai;
		this.func=mData.func;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof UnitData))
			return;
		
		UnitData mData=(UnitData)data;
		
		this.instanceID=mData.instanceID;
		
		if(mData.identity!=null)
		{
			this.identity=(UnitIdentityData)mData.identity.clone();
		}
		else
		{
			this.identity=null;
			nullObjError("identity");
		}
		
		if(mData.normal!=null)
		{
			this.normal=(UnitNormalData)mData.normal.clone();
		}
		else
		{
			this.normal=null;
			nullObjError("normal");
		}
		
		if(mData.pos!=null)
		{
			this.pos=(UnitPosData)mData.pos.clone();
		}
		else
		{
			this.pos=null;
		}
		
		if(mData.avatar!=null)
		{
			this.avatar=(UnitAvatarData)mData.avatar.clone();
		}
		else
		{
			this.avatar=null;
		}
		
		if(mData.move!=null)
		{
			this.move=(UnitMoveData)mData.move.clone();
		}
		else
		{
			this.move=null;
		}
		
		if(mData.fight!=null)
		{
			this.fight=(UnitFightData)mData.fight.clone();
		}
		else
		{
			this.fight=null;
		}
		
		if(mData.fightEx!=null)
		{
			this.fightEx=(UnitFightExData)mData.fightEx.clone();
		}
		else
		{
			this.fightEx=null;
		}
		
		if(mData.ai!=null)
		{
			this.ai=(UnitAIData)mData.ai.clone();
		}
		else
		{
			this.ai=null;
		}
		
		if(mData.func!=null)
		{
			this.func=(UnitFuncData)mData.func.clone();
		}
		else
		{
			this.func=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		UnitData mData=(UnitData)data;
		if(this.instanceID!=mData.instanceID)
			return false;
		
		if(mData.identity!=null)
		{
			if(this.identity==null)
				return false;
			if(!this.identity.dataEquals(mData.identity))
				return false;
		}
		else
		{
			if(this.identity!=null)
				return false;
		}
		
		if(mData.normal!=null)
		{
			if(this.normal==null)
				return false;
			if(!this.normal.dataEquals(mData.normal))
				return false;
		}
		else
		{
			if(this.normal!=null)
				return false;
		}
		
		if(mData.pos!=null)
		{
			if(this.pos==null)
				return false;
			if(!this.pos.dataEquals(mData.pos))
				return false;
		}
		else
		{
			if(this.pos!=null)
				return false;
		}
		
		if(mData.avatar!=null)
		{
			if(this.avatar==null)
				return false;
			if(!this.avatar.dataEquals(mData.avatar))
				return false;
		}
		else
		{
			if(this.avatar!=null)
				return false;
		}
		
		if(mData.move!=null)
		{
			if(this.move==null)
				return false;
			if(!this.move.dataEquals(mData.move))
				return false;
		}
		else
		{
			if(this.move!=null)
				return false;
		}
		
		if(mData.fight!=null)
		{
			if(this.fight==null)
				return false;
			if(!this.fight.dataEquals(mData.fight))
				return false;
		}
		else
		{
			if(this.fight!=null)
				return false;
		}
		
		if(mData.fightEx!=null)
		{
			if(this.fightEx==null)
				return false;
			if(!this.fightEx.dataEquals(mData.fightEx))
				return false;
		}
		else
		{
			if(this.fightEx!=null)
				return false;
		}
		
		if(mData.ai!=null)
		{
			if(this.ai==null)
				return false;
			if(!this.ai.dataEquals(mData.ai))
				return false;
		}
		else
		{
			if(this.ai!=null)
				return false;
		}
		
		if(mData.func!=null)
		{
			if(this.func==null)
				return false;
			if(!this.func.dataEquals(mData.func))
				return false;
		}
		else
		{
			if(this.func!=null)
				return false;
		}
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UnitData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("instanceID");
		writer.sb.append(':');
		writer.sb.append(this.instanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("identity");
		writer.sb.append(':');
		if(this.identity!=null)
		{
			this.identity.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitIdentityData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("normal");
		writer.sb.append(':');
		if(this.normal!=null)
		{
			this.normal.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitNormalData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("pos");
		writer.sb.append(':');
		if(this.pos!=null)
		{
			this.pos.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitPosData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("avatar");
		writer.sb.append(':');
		if(this.avatar!=null)
		{
			this.avatar.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitAvatarData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("move");
		writer.sb.append(':');
		if(this.move!=null)
		{
			this.move.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitMoveData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("fight");
		writer.sb.append(':');
		if(this.fight!=null)
		{
			this.fight.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitFightData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("fightEx");
		writer.sb.append(':');
		if(this.fightEx!=null)
		{
			this.fightEx.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitFightExData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("ai");
		writer.sb.append(':');
		if(this.ai!=null)
		{
			this.ai.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitAIData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("func");
		writer.sb.append(':');
		if(this.func!=null)
		{
			this.func.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitFuncData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.identity=new UnitIdentityData();
		this.identity.initDefault();
		this.normal=new UnitNormalData();
		this.normal.initDefault();
	}
	
	@Override
	public void clear()
	{
		normal.clear();
		
		if(fightEx!=null)
			fightEx.clear();
	}
	
	/** 获取战斗身份数据 */
	public FightUnitIdentityData getFightIdentity()
	{
		return (FightUnitIdentityData)identity;
	}
	
	/** 获取角色身份数据(快捷方式) */
	public CharacterIdentityData getCharacterIdentity()
	{
		return (CharacterIdentityData)identity;
	}
	
	/** 获取主单位身份数据(快捷方式) */
	public MUnitIdentityData getMUnitIdentity()
	{
		return (MUnitIdentityData)identity;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.instanceID=0;
		this.identity=null;
		this.normal=null;
		this.pos=null;
		this.avatar=null;
		this.move=null;
		this.fight=null;
		this.fightEx=null;
		this.ai=null;
		this.func=null;
	}
	
}
