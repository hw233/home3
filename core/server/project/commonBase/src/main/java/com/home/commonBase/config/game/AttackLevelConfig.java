package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.constlist.generate.AttackMomentType;
import com.home.commonBase.constlist.generate.AttackScopeType;
import com.home.commonBase.dataEx.scene.SRect;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.SMap;

/** 技能攻击等级表(generated by shine) */
public class AttackLevelConfig extends BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<AttackLevelConfig> _dic;
	
	/** 攻击id */
	public int id;
	
	/** 攻击范围参数 */
	public float[] scopeArgs;
	
	/** 攻击范围 */
	public int scope;
	
	/** 等级 */
	public int level;
	
	/** 伤害组 */
	public int[][] damages;
	
	/** 伤害类型组 */
	public int[] damageTypesT;
	
	/** 命中添加buff组 */
	public DIntData[] addBuffs;
	
	/** 命中添加buff几率ID */
	public int addBuffProbID;
	
	/** 攻击时刻动作组 */
	public int[][] momentActions;
	
	/** 攻击时刻动作组T */
	public int[][][] momentActionsT;
	
	/** 变量配置组 */
	public SkillVarConfig[] varConfigT;
	
	/** 变量数据组 */
	public int varNumT;
	
	/** 造成僵直 */
	public int spasticityValue;
	
	/** 浮空力 */
	public int attackBlowForce;
	
	/** 击退力 */
	public int attackPushForce;
	
	/** 倒地击退力 */
	public int attackLiePushForce;
	
	/** 产生子弹 */
	public DIntData bullet;
	
	/** 碰撞矩形 */
	public SRect hitRect;
	
	/** 获取 */
	public static AttackLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/** 设置字典 */
	public static void setDic(LongObjectMap<AttackLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static LongObjectMap<AttackLevelConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		this.scope=stream.readInt();
		
		int scopeArgsLen=stream.readLen();
		if(this.scopeArgs==null || this.scopeArgs.length!=scopeArgsLen)
		{
			this.scopeArgs=new float[scopeArgsLen];
		}
		float[] scopeArgsT=this.scopeArgs;
		for(int scopeArgsI=0;scopeArgsI<scopeArgsLen;++scopeArgsI)
		{
			float scopeArgsV;
			scopeArgsV=stream.readFloat();
			
			scopeArgsT[scopeArgsI]=scopeArgsV;
		}
		
		this.bullet=new DIntData();
		this.bullet.readBytesSimple(stream);
		
		int damagesLen=stream.readLen();
		if(this.damages==null || this.damages.length!=damagesLen)
		{
			this.damages=new int[damagesLen][];
		}
		int[][] damagesT=this.damages;
		for(int damagesI=0;damagesI<damagesLen;++damagesI)
		{
			int[] damagesV;
			int damagesVLen=stream.readLen();
			damagesV=new int[damagesVLen];
			int[] damagesVT=damagesV;
			for(int damagesVI=0;damagesVI<damagesVLen;++damagesVI)
			{
				int damagesVV;
				damagesVV=stream.readInt();
				
				damagesVT[damagesVI]=damagesVV;
			}
			
			damagesT[damagesI]=damagesV;
		}
		
		this.addBuffProbID=stream.readInt();
		
		int addBuffsLen=stream.readLen();
		if(this.addBuffs==null || this.addBuffs.length!=addBuffsLen)
		{
			this.addBuffs=new DIntData[addBuffsLen];
		}
		DIntData[] addBuffsT=this.addBuffs;
		for(int addBuffsI=0;addBuffsI<addBuffsLen;++addBuffsI)
		{
			DIntData addBuffsV;
			addBuffsV=new DIntData();
			addBuffsV.readBytesSimple(stream);
			
			addBuffsT[addBuffsI]=addBuffsV;
		}
		
		int momentActionsLen=stream.readLen();
		if(this.momentActions==null || this.momentActions.length!=momentActionsLen)
		{
			this.momentActions=new int[momentActionsLen][];
		}
		int[][] momentActionsT=this.momentActions;
		for(int momentActionsI=0;momentActionsI<momentActionsLen;++momentActionsI)
		{
			int[] momentActionsV;
			int momentActionsVLen=stream.readLen();
			momentActionsV=new int[momentActionsVLen];
			int[] momentActionsVT=momentActionsV;
			for(int momentActionsVI=0;momentActionsVI<momentActionsVLen;++momentActionsVI)
			{
				int momentActionsVV;
				momentActionsVV=stream.readInt();
				
				momentActionsVT[momentActionsVI]=momentActionsVV;
			}
			
			momentActionsT[momentActionsI]=momentActionsV;
		}
		
		this.spasticityValue=stream.readInt();
		
		this.attackBlowForce=stream.readInt();
		
		this.attackPushForce=stream.readInt();
		
		this.attackLiePushForce=stream.readInt();
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		damageTypesT=new int[damages.length];
		
		for(int i=damages.length-1;i>=0;--i)
		{
			damageTypesT[i]=damages[i][0];
		}
		
		momentActionsT=new int[AttackMomentType.size][][];
		
		for(int i=momentActions.length-1;i>=0;--i)
		{
			int[] arr=momentActions[i];
			
			int[][] arr2=momentActionsT[arr[0]];
			
			if(arr2==null)
			{
				arr2=new int[1][];
				arr2[0]=arr;
			}
			else
			{
				int[][] arr3=new int[arr2.length+1][];
				System.arraycopy(arr2,0,arr3,0,arr2.length);
				arr3[arr2.length]=arr;
				arr2=arr3;
			}
			
			momentActionsT[arr[0]]=arr2;
		}
		
		if(scope==AttackScopeType.AttackRect)
		{
			hitRect=SRect.createByConfig(scopeArgs);
		}
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;
		
		AttackLevelConfig[] values=_dic.getValues();
		AttackLevelConfig v;
		
		for(int i=values.length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				v.varConfigT=new SkillVarConfig[v.damages.length];
				v.varNumT=0;
				
				for(int j=v.damages.length-1;j>=0;--j)
				{
					v.varNumT+=(v.varConfigT[j]=SkillVarConfig.get(v.damages[j][1])).args.length;
				}
			}
		}
	}
	
	/** 获取 */
	public static AttackLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		stream.writeInt(this.scope);
		
		if(this.scopeArgs!=null)
		{
			float[] scopeArgsT=this.scopeArgs;
			stream.writeLen(scopeArgsT.length);
			for(int scopeArgsVI=0,scopeArgsVLen=scopeArgsT.length;scopeArgsVI<scopeArgsVLen;++scopeArgsVI)
			{
				float scopeArgsV=scopeArgsT[scopeArgsVI];
				stream.writeFloat(scopeArgsV);
				
			}
		}
		else
		{
			nullObjError("scopeArgs");
		}
		
		if(this.bullet!=null)
		{
			this.bullet.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("bullet");
		}
		
		if(this.damages!=null)
		{
			int[][] damagesT=this.damages;
			stream.writeLen(damagesT.length);
			for(int damagesVI=0,damagesVLen=damagesT.length;damagesVI<damagesVLen;++damagesVI)
			{
				int[] damagesV=damagesT[damagesVI];
				if(damagesV!=null)
				{
					int[] damagesVT=damagesV;
					stream.writeLen(damagesVT.length);
					for(int damagesVVI=0,damagesVVLen=damagesVT.length;damagesVVI<damagesVVLen;++damagesVVI)
					{
						int damagesVV=damagesVT[damagesVVI];
						stream.writeInt(damagesVV);
						
					}
				}
				else
				{
					nullObjError("damagesV");
				}
				
			}
		}
		else
		{
			nullObjError("damages");
		}
		
		stream.writeInt(this.addBuffProbID);
		
		if(this.addBuffs!=null)
		{
			DIntData[] addBuffsT=this.addBuffs;
			stream.writeLen(addBuffsT.length);
			for(int addBuffsVI=0,addBuffsVLen=addBuffsT.length;addBuffsVI<addBuffsVLen;++addBuffsVI)
			{
				DIntData addBuffsV=addBuffsT[addBuffsVI];
				if(addBuffsV!=null)
				{
					addBuffsV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("addBuffsV");
				}
				
			}
		}
		else
		{
			nullObjError("addBuffs");
		}
		
		if(this.momentActions!=null)
		{
			int[][] momentActionsT=this.momentActions;
			stream.writeLen(momentActionsT.length);
			for(int momentActionsVI=0,momentActionsVLen=momentActionsT.length;momentActionsVI<momentActionsVLen;++momentActionsVI)
			{
				int[] momentActionsV=momentActionsT[momentActionsVI];
				if(momentActionsV!=null)
				{
					int[] momentActionsVT=momentActionsV;
					stream.writeLen(momentActionsVT.length);
					for(int momentActionsVVI=0,momentActionsVVLen=momentActionsVT.length;momentActionsVVI<momentActionsVVLen;++momentActionsVVI)
					{
						int momentActionsVV=momentActionsVT[momentActionsVVI];
						stream.writeInt(momentActionsVV);
						
					}
				}
				else
				{
					nullObjError("momentActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("momentActions");
		}
		
		stream.writeInt(this.spasticityValue);
		
		stream.writeInt(this.attackBlowForce);
		
		stream.writeInt(this.attackPushForce);
		
		stream.writeInt(this.attackLiePushForce);
		
	}
	
}
