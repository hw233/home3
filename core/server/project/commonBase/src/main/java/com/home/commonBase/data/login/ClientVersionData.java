package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 客户端版本数据(generated by shine) */
public class ClientVersionData extends BaseData
{
	/** 设备平台类型 */
	public int type;
	
	/** 当前App版本 */
	public int currentAppVersion;
	
	/** 最低App版本 */
	public int leastAppVersion;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ClientVersion;
	
	/** 最低资源版本 */
	public int leastResourceVersion;
	
	/** 当前资源版本 */
	public int currentResourceVersion;
	
	/** 版本字符串 */
	public String version="";
	
	public ClientVersionData()
	{
		_dataID=BaseDataType.ClientVersion;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ClientVersionData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.type=stream.readInt();
		
		this.leastAppVersion=stream.readInt();
		
		this.currentAppVersion=stream.readInt();
		
		this.leastResourceVersion=stream.readInt();
		
		this.currentResourceVersion=stream.readInt();
		
		this.version=stream.readUTF();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.leastAppVersion);
		
		stream.writeInt(this.currentAppVersion);
		
		stream.writeInt(this.leastResourceVersion);
		
		stream.writeInt(this.currentResourceVersion);
		
		stream.writeUTF(this.version);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.type=stream.readInt();
		
		this.leastAppVersion=stream.readInt();
		
		this.currentAppVersion=stream.readInt();
		
		this.leastResourceVersion=stream.readInt();
		
		this.currentResourceVersion=stream.readInt();
		
		this.version=stream.readUTF();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.type);
		
		stream.writeInt(this.leastAppVersion);
		
		stream.writeInt(this.currentAppVersion);
		
		stream.writeInt(this.leastResourceVersion);
		
		stream.writeInt(this.currentResourceVersion);
		
		stream.writeUTF(this.version);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ClientVersionData))
			return;
		
		ClientVersionData mData=(ClientVersionData)data;
		
		this.type=mData.type;
		this.leastAppVersion=mData.leastAppVersion;
		this.currentAppVersion=mData.currentAppVersion;
		this.leastResourceVersion=mData.leastResourceVersion;
		this.currentResourceVersion=mData.currentResourceVersion;
		this.version=mData.version;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ClientVersionData))
			return;
		
		ClientVersionData mData=(ClientVersionData)data;
		
		this.type=mData.type;
		
		this.leastAppVersion=mData.leastAppVersion;
		
		this.currentAppVersion=mData.currentAppVersion;
		
		this.leastResourceVersion=mData.leastResourceVersion;
		
		this.currentResourceVersion=mData.currentResourceVersion;
		
		this.version=mData.version;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ClientVersionData mData=(ClientVersionData)data;
		if(this.type!=mData.type)
			return false;
		
		if(this.leastAppVersion!=mData.leastAppVersion)
			return false;
		
		if(this.currentAppVersion!=mData.currentAppVersion)
			return false;
		
		if(this.leastResourceVersion!=mData.leastResourceVersion)
			return false;
		
		if(this.currentResourceVersion!=mData.currentResourceVersion)
			return false;
		
		if(!this.version.equals(mData.version))
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("leastAppVersion");
		writer.sb.append(':');
		writer.sb.append(this.leastAppVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentAppVersion");
		writer.sb.append(':');
		writer.sb.append(this.currentAppVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("leastResourceVersion");
		writer.sb.append(':');
		writer.sb.append(this.leastResourceVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentResourceVersion");
		writer.sb.append(':');
		writer.sb.append(this.currentResourceVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("version");
		writer.sb.append(':');
		writer.sb.append(this.version);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.type=0;
		this.leastAppVersion=0;
		this.currentAppVersion=0;
		this.leastResourceVersion=0;
		this.currentResourceVersion=0;
		this.version="";
	}
	
}
