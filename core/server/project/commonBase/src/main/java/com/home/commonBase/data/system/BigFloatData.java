package com.home.commonBase.data.system;
import com.home.commonBase.config.game.BigFloatRankConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.global.Global;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;
import com.home.shine.utils.StringUtils;

/** 大浮点数(generated by shine) */
public class BigFloatData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.BigFloat;
	
	/** 值 */
	public double value;
	
	/** 阶 */
	public int rank;
	
	/** 十进制字符串dirty */
	private boolean _numberStrDirty=true;
	
	/** 十进制字符串 */
	private String _numberStr;
	
	private BigFloatData _tempData;
	
	public BigFloatData()
	{
		_dataID=BaseDataType.BigFloat;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "BigFloatData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.rank=stream.readInt();
		
		this.value=stream.readDouble();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.rank);
		
		stream.writeDouble(this.value);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.rank=stream.readInt();
		
		this.value=stream.readDouble();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.rank);
		
		stream.writeDouble(this.value);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof BigFloatData))
			return;
		
		BigFloatData mData=(BigFloatData)data;
		
		this.rank=mData.rank;
		this.value=mData.value;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof BigFloatData))
			return;
		
		BigFloatData mData=(BigFloatData)data;
		
		this.rank=mData.rank;
		
		this.value=mData.value;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		BigFloatData mData=(BigFloatData)data;
		if(this.rank!=mData.rank)
			return false;
		
		if(this.value!=mData.value)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("rank");
		writer.sb.append(':');
		writer.sb.append(this.rank);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("value");
		writer.sb.append(':');
		writer.sb.append(this.value);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	@Override
	public void clear()
	{
		setEmpty();
	}
	
	private void setDirty()
	{
		_numberStrDirty=true;
	}
	
	/** 是否为空(零) */
	public boolean isEmpty()
	{
		return value==0f && rank==0;
	}
	
	/** 是否为负数 */
	public boolean isNegative()
	{
		return this.value<0;
	}
	
	/** 是否为空(零) */
	public void setEmpty()
	{
		value=0f;
		rank=0;
		setDirty();
	}
	
	@Override
	public String toString()
	{
		return toNumberString();
	}
	
	/** 转化数字显示 */
	public String toNumberString()
	{
		if(_numberStrDirty)
		{
			_numberStrDirty=false;
			
			if(Global.bigFloatWei==0)
			{
				Ctrl.throwError("未初始化BigFloat配置");
			}
			
			if(rank==0)
			{
				_numberStr=StringUtils.floorStrD2(value);
			}
			else
			{
				_numberStr=StringUtils.floorStrD2(value)+BigFloatRankConfig.getRankStr(rank);
			}
		}
		
		return _numberStr;
	}
	
	/** 转化为double */
	public double toFloat()
	{
		if(Global.bigFloatWeiValue==0.0)
		{
			Ctrl.throwError("未初始化BigFloat配置");
			return 0;
		}
		
		if(rank==0)
			return value;
		
		double re=value;
		
		while(rank<0)
		{
			re/=Global.bigFloatWeiValue;
			++rank;
		}
		
		while(rank>0)
		{
			re*=Global.bigFloatWeiValue;
			--rank;
		}
		
		return re;
	}
	
	/** 转化拼装long形 */
	public long toMixLong()
	{
		boolean isN=value<0;
		
		double vv=isN ? -value : value;
		
		long re=(long)(vv*Global.bigFloatWeiLastValue);
		
		re|=((long)rank<<32);
		
		if(isN)
		{
			re=-re;
		}
		
		return re;
	}
	
	/** 刷新 */
	public void refresh()
	{
		if(Global.bigFloatWeiValue==0.0)
		{
			Ctrl.throwError("未初始化BigFloat配置");
			return;
		}
		
		if(value==0)
		{
			setEmpty();
			return;
		}
		
		if(value>0)
		{
			while(value>=Global.bigFloatWeiValue || rank<0)
			{
				value/=Global.bigFloatWeiValue;
				++rank;
			}
			
			while(value<1.0 && rank>0)
			{
				value*=Global.bigFloatWeiValue;
				--rank;
			}
		}
		else
		{
			//TODO:CS的也改了
			while(value<=-Global.bigFloatWeiValue || rank<0)
			{
				value/=Global.bigFloatWeiValue;
				++rank;
			}
			
			while(value>-1.0 && rank>0)
			{
				value*=Global.bigFloatWeiValue;
				--rank;
			}
		}
		
		setDirty();
	}
	
	private static double changeRank(double value,int rankD)
	{
		if(rankD==0)
			return value;
		
		return value/Math.pow(Global.bigFloatWeiValue,rankD);
	}
	
	/** 通过字符串初始化 */
	public void initByStr(String str)
	{
		if(str.isEmpty())
		{
			setEmpty();
			return;
		}
		
		int re=0;
		
		for(int i=str.length()-1;i>=0;--i)
		{
		    if(StringUtils.isCharIsNumber(str.charAt(i)))
			{
				re=i+1;
				break;
			}
		}
		
		//没有末尾
		if(re==str.length())
		{
			rank=0;
			value=Double.parseDouble(str);
		}
		else
		{
			rank=BigFloatRankConfig.getRankByStr(str.substring(re));
			value=Double.parseDouble(str.substring(0,re));
		}
		
		refresh();
	}
	
	/** 通过字符串初始化 */
	public void initByDouble(double vv)
	{
		rank=0;
		value=vv;
		
		refresh();
	}
	
	/** 通过字符串初始化 */
	public void initByMixLong(long num)
	{
		boolean isN=num<0;
		
		long vv=isN ? -num : num;
		
		rank=(int)(vv>>32);
		value=((int)vv)/Global.bigFloatWeiLastValue;
		
		if(isN)
		{
			value=-value;
		}
	}
	
	/** 通过字符串初始化 */
	public void initByRV(int rank,double vv)
	{
		this.rank=rank;
		this.value=vv;
		
		refresh();
	}
	
	/** 通过字符串创建 */
	public static BigFloatData createByStr(String str)
	{
		BigFloatData re=new BigFloatData();
		re.initByStr(str);
		return re;
	}
	
	/** 通过int创建 */
	public static BigFloatData createByDouble(double value)
	{
		BigFloatData re=new BigFloatData();
		re.initByDouble(value);
		return re;
	}
	
	/** 通过混合long创建 */
	public static BigFloatData createByMixLong(long value)
	{
		BigFloatData re=new BigFloatData();
		re.initByMixLong(value);
		return re;
	}
	
	/** 比大小(b1<b2返回-1),b1==b2返回0,b1>b2返回1 */
	public static int compare(BigFloatData b1,BigFloatData b2)
	{
		int i1=Double.compare(b1.value,0);
		int i2=Double.compare(b2.value,0);
		
		if(i1!=i2)
			return Integer.compare(i1,i2);
		
		if(i1==0)
			return 0;
		
		int rankRe=Integer.compare(b1.rank,b2.rank);
		
		if(rankRe!=0)
			return i1>0 ? rankRe : -rankRe;
		
		return Double.compare(b1.value,b2.value);
	}
	
	/** 比大小(b1<b2返回-1),b1==b2返回0,b1>b2返回1 */
	public static int compare(BigFloatData b1,double value)
	{
		int i1=Double.compare(b1.value,0);
		int i2=Double.compare(value,0);
		
		if(i1!=i2)
			return Integer.compare(i1,i2);
		
		if(i1==0)
			return 0;
		
		if(Math.abs(value)<Global.bigFloatWeiValue)
		{
			int rankRe=Integer.compare(b1.rank,0);
			
			if(rankRe!=0)
				return i1>0 ? rankRe : -rankRe;
			
			return Double.compare(b1.value,value);
		}
		else
		{
			BigFloatData tempData=b1._tempData;
			
			if(tempData==null)
			{
				tempData=b1._tempData=new BigFloatData();
			}
			
			tempData.initByDouble(value);
			return compare(b1,tempData);
		}
	}
	
	/** 加法 */
	public void add(BigFloatData data)
	{
		if(this.rank==data.rank)
		{
			this.value+=data.value;
		}
		else
		{
			int dRank=this.rank-data.rank;
			
			//超出限制
			if(Math.abs(dRank)>=Global.bigFloatRankMaxD)
				return;
			
			this.value+=changeRank(data.value,dRank);
		}
		
		refresh();
	}
	
	/** 加法(返回新对象) */
	public BigFloatData addN(BigFloatData data)
	{
		BigFloatData re=this.clone();
		re.add(data);
		return re;
	}
	
	/** 加法 */
	public void add(double vv)
	{
		//超出限制
		if(Math.abs(rank)>=Global.bigFloatRankMaxD)
			return;
		
		this.value+=changeRank(vv,rank);
		
		refresh();
	}
	
	/** 加法(返回新对象) */
	public BigFloatData addN(double vv)
	{
		BigFloatData re=this.clone();
		re.add(vv);
		return re;
	}
	
	/** 减法 */
	public void sub(BigFloatData data)
	{
		if(this.rank==data.rank)
		{
			this.value-=data.value;
		}
		else
		{
			int dRank=this.rank-data.rank;
			
			//超出限制
			if(Math.abs(dRank)>=Global.bigFloatRankMaxD)
				return;
			
			this.value-=changeRank(data.value,dRank);
		}
		
		refresh();
	}
	
	/** 减法(返回新对象) */
	public BigFloatData subN(BigFloatData data)
	{
		BigFloatData re=this.clone();
		re.sub(data);
		return re;
	}
	
	/** 减法 */
	public void sub(double vv)
	{
		//超出限制
		if(Math.abs(rank)>=Global.bigFloatRankMaxD)
			return;
		
		this.value-=changeRank(vv,rank);
		
		refresh();
	}
	
	/** 减法(返回新对象) */
	public BigFloatData subN(double vv)
	{
		BigFloatData re=this.clone();
		re.sub(vv);
		return re;
	}
	
	/** 乘法 */
	public void mul(BigFloatData data)
	{
		this.value*=data.value;
		this.rank+=data.rank;
		
		refresh();
	}
	
	/** 乘法(返回新对象) */
	public BigFloatData mulN(BigFloatData data)
	{
		BigFloatData re=this.clone();
		re.mul(data);
		return re;
	}
	
	/** 乘法 */
	public void mul(double vv)
	{
		this.value*=vv;
		
		refresh();
	}
	
	/** 乘法(返回新对象) */
	public BigFloatData mulN(double vv)
	{
		BigFloatData re=this.clone();
		re.mul(vv);
		return re;
	}
	
	/** 乘法 */
	public void div(double vv)
	{
		if(vv==0.0)
		{
			Ctrl.throwError("除数不能为0");
			return;
		}
		
		//超出限制
		this.value/=vv;
		
		refresh();
	}
	
	/** 除法 */
	public void div(BigFloatData data)
	{
		if(data.isEmpty())
		{
			Ctrl.throwError("除数不能为0");
			return;
		}
		
		this.value/=data.value;
		this.rank-=data.rank;
		
		refresh();
	}
	
	/** 除法(返回值新new对象) */
	public BigFloatData divN(BigFloatData data)
	{
		BigFloatData re=this.clone();
		re.div(data);
		return re;
	}
	
	/** 除法(返回值新new对象) */
	public BigFloatData divN(double vv)
	{
		BigFloatData re=this.clone();
		re.div(vv);
		return re;
	}
	
	/** 克隆数据 */
	@Override
	public BigFloatData clone()
	{
		BigFloatData re = new BigFloatData();
		re.rank=this.rank;
		re.value=this.value;
		re._numberStrDirty=true;
		return re;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.rank=0;
		this.value=0.0;
	}
	
}
