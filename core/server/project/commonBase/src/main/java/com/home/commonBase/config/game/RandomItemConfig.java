package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.constlist.generate.ClientRandomSeedType;
import com.home.commonBase.constlist.generate.RandomItemType;
import com.home.commonBase.data.item.ItemData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.logic.LogicEntity;
import com.home.commonBase.tool.func.RandomWeightTool;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.timer.ITimeEntity;
import com.home.shine.utils.MathUtils;

/** 随机单个物品配置(generated by shine) */
public class RandomItemConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<RandomItemConfig> _dic;
	
	/** id */
	public int id;
	
	/** 类型 */
	public int type;
	
	/** 参数组 */
	public int[][] args;
	
	/** 权重随机插件 */
	private RandomWeightTool _weightTool;
	
	/** 获取 */
	public static RandomItemConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<RandomItemConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<RandomItemConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.type=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.length!=argsLen)
		{
			this.args=new int[argsLen][];
		}
		int[][] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			int[] argsV;
			int argsVLen=stream.readLen();
			argsV=new int[argsVLen];
			int[] argsVT=argsV;
			for(int argsVI=0;argsVI<argsVLen;++argsVI)
			{
				int argsVV;
				argsVV=stream.readInt();
				
				argsVT[argsVI]=argsVV;
			}
			
			argsT[argsI]=argsV;
		}
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		switch(type)
		{
			case RandomItemType.WeightItem:
			case RandomItemType.WeightCreateItem:
			case RandomItemType.WeightRandomItem:
			{
				_weightTool=new RandomWeightTool(args);
			}
				break;
		}
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;
		
		RandomItemConfig[] values;
		RandomItemConfig v;
		
		for(int i=(values=_dic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				switch(v.type)
				{
					case RandomItemType.Single:
					{
						int itemID=v.args[0][0];
						if(itemID>0 && ItemConfig.get(itemID)==null)
						{
							Ctrl.throwError("找不到物品ID",itemID);
							return;
						}
					}
						break;
					case RandomItemType.AverageItem:
					{
						for(int[] v2:v.args)
						{
							if(v2[0]>0 && ItemConfig.get(v2[0])==null)
							{
								Ctrl.throwError("找不到物品ID",v2[0]);
								return;
							}
						}
					}
						break;
					case RandomItemType.WeightItem:
					{
						for(int[] v2:v.args)
						{
							if(v2[1]>0 && ItemConfig.get(v2[1])==null)
							{
								Ctrl.throwError("找不到物品ID",v2[1]);
								return;
							}
						}
					}
						break;
					case RandomItemType.WeightCreateItem:
					{
						for(int[] v2:v.args)
						{
							if(v2[1]>0 && CreateItemConfig.get(v2[1])==null)
							{
								Ctrl.throwError("找不到创建物品ID",v2[1]);
								return;
							}
						}
					}
						break;
					case RandomItemType.WeightRandomItem:
					{
						for(int[] v2:v.args)
						{
							if(v2[1]>0 && RandomItemConfig.get(v2[1])==null)
							{
								Ctrl.throwError("找不到随机物品ID",v2[1]);
								return;
							}
						}
					}
						break;
				}
			}
		}
	}
	
	/** 随机一个物品(可能为空) */
	public ItemData randomOne(LogicEntity entity,int seedType)
	{
		switch(type)
		{
			case RandomItemType.Single:
			{
				int[] arr=args[0];

				if(arr[0]<=0)
					return null;

				return BaseC.logic.createItem(arr[0],arr.length>1 ? arr[1] : 1,entity);
			}
			case RandomItemType.AverageItem:
			{
				int[] arr=null;

				if (seedType == ClientRandomSeedType.Server)
					arr=args[MathUtils.randomInt(args.length)];
				else
					arr=args[entity.randomInt(args.length)];

				if(arr[0]<=0)
					return null;

				return BaseC.logic.createItem(arr[0],arr.length>1 ? arr[1] : 1,entity);
			}
			case RandomItemType.WeightItem:
			{
				int[] arr=_weightTool.randomForIntArr(entity,seedType);

				if(arr==null)
					return null;
				
				if(arr[1]<=0)
					return null;

				return BaseC.logic.createItem(arr[1],arr.length>2 ? arr[2] : 1,entity);
			}
			case RandomItemType.WeightCreateItem:
			{
				int[] arr=_weightTool.randomForIntArr(entity,seedType);
				
				if(arr==null)
					return null;
				
				if(arr[1]<=0)
					return null;

				ItemData data=BaseC.logic.createItemByCreateID(arr[1],entity);
				data.num=arr.length>2 ? arr[2] : 1;
				return data;
			}
			case RandomItemType.WeightRandomItem:
			{
				int[] arr=_weightTool.randomForIntArr(entity,seedType);
				
				if(arr==null)
					return null;
				
				if(arr[1]<=0)
					return null;

				return get(arr[1]).randomOne(entity,seedType);
			}
		}

		return null;
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.type);
		
		if(this.args!=null)
		{
			int[][] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				int[] argsV=argsT[argsVI];
				if(argsV!=null)
				{
					int[] argsVT=argsV;
					stream.writeLen(argsVT.length);
					for(int argsVVI=0,argsVVLen=argsVT.length;argsVVI<argsVVLen;++argsVVI)
					{
						int argsVV=argsVT[argsVVI];
						stream.writeInt(argsVV);
						
					}
				}
				else
				{
					nullObjError("argsV");
				}
				
			}
		}
		else
		{
			nullObjError("args");
		}
		
	}
	
}
