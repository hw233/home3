package com.home.commonBase.data.quest;
import com.home.commonBase.config.game.QuestConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.constlist.generate.QuestExecuteType;
import com.home.commonBase.data.quest.TaskData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 任务数据(已接)(generated by shine) */
public class QuestData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Quest;
	
	/** id */
	public int id;
	
	/** 有效时间(0为无限) */
	public long enableTime;
	
	/** 是否失败 */
	public boolean isFailed;
	
	/** 任务目标组 */
	public TaskData[] tasks;
	
	/** 配置 */
	public QuestConfig config;
	
	public QuestData()
	{
		_dataID=BaseDataType.Quest;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "QuestData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		int tasksLen=stream.readLen();
		if(this.tasks==null || this.tasks.length!=tasksLen)
		{
			this.tasks=new TaskData[tasksLen];
		}
		TaskData[] tasksT=this.tasks;
		for(int tasksI=0;tasksI<tasksLen;++tasksI)
		{
			TaskData tasksV;
			BaseData tasksVT=stream.readDataFullNotNull();
			if(tasksVT!=null)
			{
				if(tasksVT instanceof TaskData)
				{
					tasksV=(TaskData)tasksVT;
				}
				else
				{
					tasksV=new TaskData();
					if(!(tasksVT.getClass().isAssignableFrom(TaskData.class)))
					{
						stream.throwTypeReadError(TaskData.class,tasksVT.getClass());
					}
					tasksV.shadowCopy(tasksVT);
				}
			}
			else
			{
				tasksV=null;
			}
			
			tasksT[tasksI]=tasksV;
		}
		
		this.isFailed=stream.readBoolean();
		
		this.enableTime=stream.readLong();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		if(this.tasks!=null)
		{
			TaskData[] tasksT=this.tasks;
			stream.writeLen(tasksT.length);
			for(int tasksVI=0,tasksVLen=tasksT.length;tasksVI<tasksVLen;++tasksVI)
			{
				TaskData tasksV=tasksT[tasksVI];
				if(tasksV!=null)
				{
					stream.writeDataFullNotNull(tasksV);
				}
				else
				{
					nullObjError("tasksV");
				}
				
			}
		}
		else
		{
			nullObjError("tasks");
		}
		
		stream.writeBoolean(this.isFailed);
		
		stream.writeLong(this.enableTime);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		int tasksLen=stream.readLen();
		if(this.tasks==null || this.tasks.length!=tasksLen)
		{
			this.tasks=new TaskData[tasksLen];
		}
		TaskData[] tasksT=this.tasks;
		for(int tasksI=0;tasksI<tasksLen;++tasksI)
		{
			TaskData tasksV;
			tasksV=(TaskData)stream.readDataSimpleNotNull();
			
			tasksT[tasksI]=tasksV;
		}
		
		this.isFailed=stream.readBoolean();
		
		this.enableTime=stream.readLong();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		if(this.tasks!=null)
		{
			TaskData[] tasksT=this.tasks;
			stream.writeLen(tasksT.length);
			for(int tasksVI=0,tasksVLen=tasksT.length;tasksVI<tasksVLen;++tasksVI)
			{
				TaskData tasksV=tasksT[tasksVI];
				if(tasksV!=null)
				{
					stream.writeDataSimpleNotNull(tasksV);
				}
				else
				{
					nullObjError("tasksV");
				}
				
			}
		}
		else
		{
			nullObjError("tasks");
		}
		
		stream.writeBoolean(this.isFailed);
		
		stream.writeLong(this.enableTime);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof QuestData))
			return;
		
		QuestData mData=(QuestData)data;
		
		this.id=mData.id;
		this.tasks=mData.tasks;
		this.isFailed=mData.isFailed;
		this.enableTime=mData.enableTime;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof QuestData))
			return;
		
		QuestData mData=(QuestData)data;
		
		this.id=mData.id;
		
		if(mData.tasks!=null)
		{
			TaskData[] tasksR=mData.tasks;
			int tasksLen=tasksR.length;
			if(this.tasks==null || this.tasks.length!=tasksLen)
			{
				this.tasks=new TaskData[tasksLen];
			}
			TaskData[] tasksT=this.tasks;
			for(int tasksI=0;tasksI<tasksLen;++tasksI)
			{
				TaskData tasksV=tasksR[tasksI];
				TaskData tasksU;
				if(tasksV!=null)
				{
					tasksU=(TaskData)tasksV.clone();
				}
				else
				{
					tasksU=null;
					nullObjError("tasksU");
				}
				
				tasksT[tasksI]=tasksU;
			}
		}
		else
		{
			this.tasks=null;
			nullObjError("tasks");
		}
		
		this.isFailed=mData.isFailed;
		
		this.enableTime=mData.enableTime;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		QuestData mData=(QuestData)data;
		if(this.id!=mData.id)
			return false;
		
		if(mData.tasks!=null)
		{
			if(this.tasks==null)
				return false;
			if(this.tasks.length!=mData.tasks.length)
				return false;
			TaskData[] tasksT=this.tasks;
			TaskData[] tasksR=mData.tasks;
			int tasksLen=tasksT.length;
			for(int tasksI=0;tasksI<tasksLen;++tasksI)
			{
				TaskData tasksU=tasksT[tasksI];
				TaskData tasksV=tasksR[tasksI];
				if(tasksV!=null)
				{
					if(tasksU==null)
						return false;
					if(!tasksU.dataEquals(tasksV))
						return false;
				}
				else
				{
					if(tasksU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.tasks!=null)
				return false;
		}
		
		if(this.isFailed!=mData.isFailed)
			return false;
		
		if(this.enableTime!=mData.enableTime)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("tasks");
		writer.sb.append(':');
		writer.sb.append("Array<TaskData>");
		if(this.tasks!=null)
		{
			TaskData[] tasksT=this.tasks;
			int tasksLen=tasksT.length;
			writer.sb.append('(');
			writer.sb.append(tasksLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int tasksI=0;tasksI<tasksLen;++tasksI)
			{
				TaskData tasksV=tasksT[tasksI];
				writer.writeTabs();
				writer.sb.append(tasksI);
				writer.sb.append(':');
				if(tasksV!=null)
				{
					tasksV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("TaskData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isFailed");
		writer.sb.append(':');
		writer.sb.append(this.isFailed);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("enableTime");
		writer.sb.append(':');
		writer.sb.append(this.enableTime);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.tasks=new TaskData[0];
	}
	
	public void makeConfig()
	{
		if(config==null)
		{
			config=QuestConfig.get(id);
		}
	}
	
	public boolean isComplete()
	{
		//任意
		if(config.executeType==QuestExecuteType.Either)
		{
			for(TaskData v:tasks)
			{
				if(v.isComplete())
				{
					return true;
				}
			}
			
			return false;
		}
		else
		{
			for(TaskData v:tasks)
			{
				if(!v.isComplete())
				{
					return false;
				}
			}
			
			return true;
		}
	}
	
	@Override
	public void clear()
	{
		config=null;
		enableTime=0L;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.id=0;
		this.tasks=null;
		this.isFailed=false;
		this.enableTime=0L;
	}
	
}
