package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.login.ClientLoginServerInfoData;
import com.home.commonBase.data.login.ClientVersionData;
import com.home.commonBase.data.system.AreaClientData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 客户端登陆结果数据(generated by shine) */
public class ClientLoginResultData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ClientLoginResult;
	
	/** 登录服指定信息 */
	public ClientLoginServerInfoData loginInfo;
	
	/** 版本数据(空为服务器并无此版本) */
	public ClientVersionData version;
	
	/** 区服列表 */
	public IntObjectMap<AreaClientData> areas;
	
	/** 上次登陆区服 */
	public int lastAreaID;
	
	/** 逻辑服地址(直接登陆模式用) */
	public ClientLoginServerInfoData gameInfo;
	
	public ClientLoginResultData()
	{
		_dataID=BaseDataType.ClientLoginResult;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ClientLoginResultData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData loginInfoT=stream.readDataFullNotNull();
		if(loginInfoT!=null)
		{
			if(loginInfoT instanceof ClientLoginServerInfoData)
			{
				this.loginInfo=(ClientLoginServerInfoData)loginInfoT;
			}
			else
			{
				this.loginInfo=new ClientLoginServerInfoData();
				if(!(loginInfoT.getClass().isAssignableFrom(ClientLoginServerInfoData.class)))
				{
					stream.throwTypeReadError(ClientLoginServerInfoData.class,loginInfoT.getClass());
				}
				this.loginInfo.shadowCopy(loginInfoT);
			}
		}
		else
		{
			this.loginInfo=null;
		}
		
		if(stream.readBoolean())
		{
			this.version=new ClientVersionData();
			this.version.readBytesFull(stream);
		}
		else
		{
			this.version=null;
		}
		
		if(stream.readBoolean())
		{
			int areasLen=stream.readLen();
			if(this.areas!=null)
			{
				this.areas.clear();
				this.areas.ensureCapacity(areasLen);
			}
			else
			{
				this.areas=new IntObjectMap<AreaClientData>(AreaClientData[]::new,areasLen);
			}
			
			IntObjectMap<AreaClientData> areasT=this.areas;
			for(int areasI=areasLen-1;areasI>=0;--areasI)
			{
				AreaClientData areasV;
				if(stream.readBoolean())
				{
					BaseData areasVT=stream.readDataFullNotNull();
					if(areasVT!=null)
					{
						if(areasVT instanceof AreaClientData)
						{
							areasV=(AreaClientData)areasVT;
						}
						else
						{
							areasV=new AreaClientData();
							if(!(areasVT.getClass().isAssignableFrom(AreaClientData.class)))
							{
								stream.throwTypeReadError(AreaClientData.class,areasVT.getClass());
							}
							areasV.shadowCopy(areasVT);
						}
					}
					else
					{
						areasV=null;
					}
				}
				else
				{
					areasV=null;
				}
				
				areasT.put(areasV.areaID,areasV);
			}
		}
		else
		{
			this.areas=null;
		}
		
		this.lastAreaID=stream.readInt();
		
		if(stream.readBoolean())
		{
			BaseData gameInfoT=stream.readDataFullNotNull();
			if(gameInfoT!=null)
			{
				if(gameInfoT instanceof ClientLoginServerInfoData)
				{
					this.gameInfo=(ClientLoginServerInfoData)gameInfoT;
				}
				else
				{
					this.gameInfo=new ClientLoginServerInfoData();
					if(!(gameInfoT.getClass().isAssignableFrom(ClientLoginServerInfoData.class)))
					{
						stream.throwTypeReadError(ClientLoginServerInfoData.class,gameInfoT.getClass());
					}
					this.gameInfo.shadowCopy(gameInfoT);
				}
			}
			else
			{
				this.gameInfo=null;
			}
		}
		else
		{
			this.gameInfo=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.loginInfo!=null)
		{
			stream.writeDataFullNotNull(this.loginInfo);
		}
		else
		{
			nullObjError("loginInfo");
		}
		
		if(this.version!=null)
		{
			stream.writeBoolean(true);
			this.version.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.areas!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.areas.size());
			if(!this.areas.isEmpty())
			{
				Object[] areasVValues=this.areas.getValues();
				for(int areasVI=areasVValues.length-1;areasVI>=0;--areasVI)
				{
					if(areasVValues[areasVI]!=null)
					{
						AreaClientData areasV=(AreaClientData)areasVValues[areasVI];
						if(areasV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataFullNotNull(areasV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.lastAreaID);
		
		if(this.gameInfo!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.gameInfo);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.loginInfo=(ClientLoginServerInfoData)stream.readDataSimpleNotNull();
		
		if(stream.readBoolean())
		{
			this.version=new ClientVersionData();
			this.version.readBytesSimple(stream);
		}
		else
		{
			this.version=null;
		}
		
		if(stream.readBoolean())
		{
			int areasLen=stream.readLen();
			if(this.areas!=null)
			{
				this.areas.clear();
				this.areas.ensureCapacity(areasLen);
			}
			else
			{
				this.areas=new IntObjectMap<AreaClientData>(AreaClientData[]::new,areasLen);
			}
			
			IntObjectMap<AreaClientData> areasT=this.areas;
			for(int areasI=areasLen-1;areasI>=0;--areasI)
			{
				AreaClientData areasV;
				if(stream.readBoolean())
				{
					areasV=(AreaClientData)stream.readDataSimpleNotNull();
				}
				else
				{
					areasV=null;
				}
				
				areasT.put(areasV.areaID,areasV);
			}
		}
		else
		{
			this.areas=null;
		}
		
		this.lastAreaID=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.gameInfo=(ClientLoginServerInfoData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.gameInfo=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.loginInfo!=null)
		{
			stream.writeDataSimpleNotNull(this.loginInfo);
		}
		else
		{
			nullObjError("loginInfo");
		}
		
		if(this.version!=null)
		{
			stream.writeBoolean(true);
			this.version.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.areas!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.areas.size());
			if(!this.areas.isEmpty())
			{
				Object[] areasVValues=this.areas.getValues();
				for(int areasVI=areasVValues.length-1;areasVI>=0;--areasVI)
				{
					if(areasVValues[areasVI]!=null)
					{
						AreaClientData areasV=(AreaClientData)areasVValues[areasVI];
						if(areasV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(areasV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.lastAreaID);
		
		if(this.gameInfo!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.gameInfo);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ClientLoginResultData))
			return;
		
		ClientLoginResultData mData=(ClientLoginResultData)data;
		
		this.loginInfo=mData.loginInfo;
		this.version=mData.version;
		this.areas=mData.areas;
		this.lastAreaID=mData.lastAreaID;
		this.gameInfo=mData.gameInfo;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ClientLoginResultData))
			return;
		
		ClientLoginResultData mData=(ClientLoginResultData)data;
		
		if(mData.loginInfo!=null)
		{
			this.loginInfo=(ClientLoginServerInfoData)mData.loginInfo.clone();
		}
		else
		{
			this.loginInfo=null;
			nullObjError("loginInfo");
		}
		
		if(mData.version!=null)
		{
			this.version=new ClientVersionData();
			this.version.copy(mData.version);
		}
		else
		{
			this.version=null;
		}
		
		if(mData.areas!=null)
		{
			if(this.areas!=null)
			{
				this.areas.clear();
				this.areas.ensureCapacity(mData.areas.size());
			}
			else
			{
				this.areas=new IntObjectMap<AreaClientData>(AreaClientData[]::new,mData.areas.size());
			}
			
			IntObjectMap<AreaClientData> areasT=this.areas;
			if(!mData.areas.isEmpty())
			{
				Object[] areasVValues=mData.areas.getValues();
				for(int areasVI=areasVValues.length-1;areasVI>=0;--areasVI)
				{
					if(areasVValues[areasVI]!=null)
					{
						AreaClientData areasV=(AreaClientData)areasVValues[areasVI];
						AreaClientData areasU;
						if(areasV!=null)
						{
							areasU=(AreaClientData)areasV.clone();
						}
						else
						{
							areasU=null;
						}
						
						areasT.put(areasU.areaID,areasU);
					}
				}
			}
		}
		else
		{
			this.areas=null;
		}
		
		this.lastAreaID=mData.lastAreaID;
		
		if(mData.gameInfo!=null)
		{
			this.gameInfo=(ClientLoginServerInfoData)mData.gameInfo.clone();
		}
		else
		{
			this.gameInfo=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ClientLoginResultData mData=(ClientLoginResultData)data;
		if(mData.loginInfo!=null)
		{
			if(this.loginInfo==null)
				return false;
			if(!this.loginInfo.dataEquals(mData.loginInfo))
				return false;
		}
		else
		{
			if(this.loginInfo!=null)
				return false;
		}
		
		if(mData.version!=null)
		{
			if(this.version==null)
				return false;
			if(!this.version.dataEquals(mData.version))
				return false;
		}
		else
		{
			if(this.version!=null)
				return false;
		}
		
		if(mData.areas!=null)
		{
			if(this.areas==null)
				return false;
			if(this.areas.size()!=mData.areas.size())
				return false;
			IntObjectMap<AreaClientData> areasR=mData.areas;
			if(!this.areas.isEmpty())
			{
				int areasKFreeValue=this.areas.getFreeValue();
				int[] areasKKeys=this.areas.getKeys();
				Object[] areasVValues=this.areas.getValues();
				for(int areasKI=areasKKeys.length-1;areasKI>=0;--areasKI)
				{
					int areasK=areasKKeys[areasKI];
					if(areasK!=areasKFreeValue)
					{
						AreaClientData areasV=(AreaClientData)areasVValues[areasKI];
						AreaClientData areasU=areasR.get(areasK);
						if(areasU!=null)
						{
							if(areasV==null)
								return false;
							if(!areasV.dataEquals(areasU))
								return false;
						}
						else
						{
							if(areasV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.areas!=null)
				return false;
		}
		
		if(this.lastAreaID!=mData.lastAreaID)
			return false;
		
		if(mData.gameInfo!=null)
		{
			if(this.gameInfo==null)
				return false;
			if(!this.gameInfo.dataEquals(mData.gameInfo))
				return false;
		}
		else
		{
			if(this.gameInfo!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("loginInfo");
		writer.sb.append(':');
		if(this.loginInfo!=null)
		{
			this.loginInfo.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ClientLoginServerInfoData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("version");
		writer.sb.append(':');
		if(this.version!=null)
		{
			this.version.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ClientVersionData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("areas");
		writer.sb.append(':');
		writer.sb.append("Map<int,AreaClientData>");
		if(this.areas!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.areas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.areas.isEmpty())
			{
				int areasKFreeValue=this.areas.getFreeValue();
				int[] areasKKeys=this.areas.getKeys();
				Object[] areasVValues=this.areas.getValues();
				for(int areasKI=areasKKeys.length-1;areasKI>=0;--areasKI)
				{
					int areasK=areasKKeys[areasKI];
					if(areasK!=areasKFreeValue)
					{
						AreaClientData areasV=(AreaClientData)areasVValues[areasKI];
						writer.writeTabs();
						writer.sb.append(areasK);
						
						writer.sb.append(':');
						if(areasV!=null)
						{
							areasV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("AreaClientData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastAreaID");
		writer.sb.append(':');
		writer.sb.append(this.lastAreaID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gameInfo");
		writer.sb.append(':');
		if(this.gameInfo!=null)
		{
			this.gameInfo.writeDataString(writer);
		}
		else
		{
			writer.sb.append("ClientLoginServerInfoData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.loginInfo=new ClientLoginServerInfoData();
		this.loginInfo.initDefault();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.loginInfo=null;
		this.version=null;
		this.areas=null;
		this.lastAreaID=0;
		this.gameInfo=null;
	}
	
}
