package com.home.commonBase.part.player.data;
import com.home.commonBase.constlist.generate.PlayerPartDataType;
import com.home.commonBase.data.system.InfoLogData;
import com.home.commonBase.data.system.KeepSaveData;
import com.home.commonBase.data.system.SaveVersionData;
import com.home.commonBase.data.system.WorkReceiverData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.data.DateData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.SQueue;
import com.home.shine.support.pool.DataPool;

/** 系统模块(generated by shine) */
public class SystemPartData extends BaseData
{
	/** 版本数据 */
	public SaveVersionData version;
	
	/** 数据类型ID */
	public static final int dataID=PlayerPartDataType.System;
	
	/** 创建日期 */
	public DateData createDate;
	
	/** 是否封号 */
	public boolean isBlock;
	
	/** 解禁时间 */
	public long openBlockDate;
	
	/** 在线标记(为了做精准离线) */
	public boolean onLineMark;
	
	/** 是否初次登录过 */
	public boolean firstLogined;
	
	/** 上次上线时间(ms) */
	public long loginDate;
	
	/** 上次下线时间(ms) */
	public long logoutDate;
	
	/** 下一个0点时刻 */
	public long nextDailyTime;
	
	/** 上次(在线时)的服务器运行序号 */
	public int serverRunIndex;
	
	/** 流程步 */
	public int flowStep;
	
	/** 客户端随机种子(废弃) */
	public int[] clientRandomSeeds;
	
	/** 客户端随机种子序号 */
	public int clientRandomSeedIndex;
	
	/** 上次登录客户端设备平台类型 */
	public int lastLoginClientPlatformType;
	
	/** 事务接收者数据 */
	public WorkReceiverData workReceiverData;
	
	/** game全局数据离线事务索引(未实现) */
	public int gameGlobalOfflineWorkIndex;
	
	/** 客户端离线事务收到的客户端序号 */
	public int clientOfflineWorkReceiveIndex;
	
	/** 上次执行客户端离线事务时间(ms) */
	public long lastClientOfflineTime;
	
	/** GM类型 */
	public int gmType;
	
	/** 客户端离线事务每日时间可修改次数 */
	public int clientOfflineWorkTimeChangeNum;
	
	/** 上次登录客户端设备唯一标识 */
	public String lastLoginDeviceUniqueIdentifier="";
	
	/** 上次登录客户端设备类型 */
	public String lastLoginDeviceType="";
	
	/** 游戏日志信息队列 */
	public SQueue<InfoLogData> logQueue;
	
	/** 客户端离线事务累计修改次数(作弊次数) */
	public int clientOfflineWorkTimeChangeTotalNum;
	
	/** 上次登陆资源版本 */
	public int lastLoginResourceVersion;
	
	/** 上次登陆App版本 */
	public int lastLoginAppVersion;
	
	/** 当前随机种子是否需要重置 */
	public boolean clientRandomSeedNeedReset;
	
	/** 当前随机种子key */
	public int clientRandomSeedKey;
	
	/** 保存数据 */
	public KeepSaveData keepSave;
	
	public SystemPartData()
	{
		_dataID=PlayerPartDataType.System;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData versionT=stream.readDataFullNotNull();
		if(versionT!=null)
		{
			if(versionT instanceof SaveVersionData)
			{
				this.version=(SaveVersionData)versionT;
			}
			else
			{
				this.version=new SaveVersionData();
				if(!(versionT.getClass().isAssignableFrom(SaveVersionData.class)))
				{
					stream.throwTypeReadError(SaveVersionData.class,versionT.getClass());
				}
				this.version.shadowCopy(versionT);
			}
		}
		else
		{
			this.version=null;
		}
		
		this.createDate=new DateData();
		this.createDate.readBytesFull(stream);
		
		this.isBlock=stream.readBoolean();
		
		this.openBlockDate=stream.readLong();
		
		this.firstLogined=stream.readBoolean();
		
		this.onLineMark=stream.readBoolean();
		
		this.loginDate=stream.readLong();
		
		this.logoutDate=stream.readLong();
		
		this.nextDailyTime=stream.readLong();
		
		this.serverRunIndex=stream.readInt();
		
		this.flowStep=stream.readInt();
		
		this.keepSave=new KeepSaveData();
		this.keepSave.readBytesFull(stream);
		
		if(stream.readBoolean())
		{
			int clientRandomSeedsLen=stream.readLen();
			if(this.clientRandomSeeds==null || this.clientRandomSeeds.length!=clientRandomSeedsLen)
			{
				this.clientRandomSeeds=new int[clientRandomSeedsLen];
			}
			int[] clientRandomSeedsT=this.clientRandomSeeds;
			for(int clientRandomSeedsI=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
			{
				int clientRandomSeedsV;
				clientRandomSeedsV=stream.readInt();
				
				clientRandomSeedsT[clientRandomSeedsI]=clientRandomSeedsV;
			}
		}
		else
		{
			this.clientRandomSeeds=null;
		}
		
		this.clientRandomSeedIndex=stream.readInt();
		
		this.lastLoginClientPlatformType=stream.readInt();
		
		this.workReceiverData=new WorkReceiverData();
		this.workReceiverData.readBytesFull(stream);
		
		this.gameGlobalOfflineWorkIndex=stream.readInt();
		
		this.clientOfflineWorkReceiveIndex=stream.readInt();
		
		this.lastClientOfflineTime=stream.readLong();
		
		this.gmType=stream.readInt();
		
		this.clientOfflineWorkTimeChangeNum=stream.readInt();
		
		this.lastLoginDeviceType=stream.readUTF();
		
		this.lastLoginDeviceUniqueIdentifier=stream.readUTF();
		
		int logQueueLen=stream.readLen();
		if(this.logQueue!=null)
		{
			this.logQueue.clear();
			this.logQueue.ensureCapacity(logQueueLen);
		}
		else
		{
			this.logQueue=new SQueue<InfoLogData>(InfoLogData[]::new,logQueueLen);
		}
		
		SQueue<InfoLogData> logQueueT=this.logQueue;
		for(int logQueueI=logQueueLen-1;logQueueI>=0;--logQueueI)
		{
			InfoLogData logQueueV;
			BaseData logQueueVT=stream.readDataFullNotNull();
			if(logQueueVT!=null)
			{
				if(logQueueVT instanceof InfoLogData)
				{
					logQueueV=(InfoLogData)logQueueVT;
				}
				else
				{
					logQueueV=new InfoLogData();
					if(!(logQueueVT.getClass().isAssignableFrom(InfoLogData.class)))
					{
						stream.throwTypeReadError(InfoLogData.class,logQueueVT.getClass());
					}
					logQueueV.shadowCopy(logQueueVT);
				}
			}
			else
			{
				logQueueV=null;
			}
			
			logQueueT.offer(logQueueV);
		}
		
		this.clientOfflineWorkTimeChangeTotalNum=stream.readInt();
		
		this.lastLoginAppVersion=stream.readInt();
		
		this.lastLoginResourceVersion=stream.readInt();
		
		this.clientRandomSeedKey=stream.readInt();
		
		this.clientRandomSeedNeedReset=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.version!=null)
		{
			stream.writeDataFullNotNull(this.version);
		}
		else
		{
			nullObjError("version");
		}
		
		if(this.createDate!=null)
		{
			this.createDate.writeBytesFull(stream);
		}
		else
		{
			nullObjError("createDate");
		}
		
		stream.writeBoolean(this.isBlock);
		
		stream.writeLong(this.openBlockDate);
		
		stream.writeBoolean(this.firstLogined);
		
		stream.writeBoolean(this.onLineMark);
		
		stream.writeLong(this.loginDate);
		
		stream.writeLong(this.logoutDate);
		
		stream.writeLong(this.nextDailyTime);
		
		stream.writeInt(this.serverRunIndex);
		
		stream.writeInt(this.flowStep);
		
		if(this.keepSave!=null)
		{
			this.keepSave.writeBytesFull(stream);
		}
		else
		{
			nullObjError("keepSave");
		}
		
		if(this.clientRandomSeeds!=null)
		{
			stream.writeBoolean(true);
			int[] clientRandomSeedsT=this.clientRandomSeeds;
			stream.writeLen(clientRandomSeedsT.length);
			for(int clientRandomSeedsVI=0,clientRandomSeedsVLen=clientRandomSeedsT.length;clientRandomSeedsVI<clientRandomSeedsVLen;++clientRandomSeedsVI)
			{
				int clientRandomSeedsV=clientRandomSeedsT[clientRandomSeedsVI];
				stream.writeInt(clientRandomSeedsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
		stream.writeInt(this.lastLoginClientPlatformType);
		
		if(this.workReceiverData!=null)
		{
			this.workReceiverData.writeBytesFull(stream);
		}
		else
		{
			nullObjError("workReceiverData");
		}
		
		stream.writeInt(this.gameGlobalOfflineWorkIndex);
		
		stream.writeInt(this.clientOfflineWorkReceiveIndex);
		
		stream.writeLong(this.lastClientOfflineTime);
		
		stream.writeInt(this.gmType);
		
		stream.writeInt(this.clientOfflineWorkTimeChangeNum);
		
		stream.writeUTF(this.lastLoginDeviceType);
		
		stream.writeUTF(this.lastLoginDeviceUniqueIdentifier);
		
		if(this.logQueue!=null)
		{
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				Object[] logQueueVValues=this.logQueue.getValues();
				int logQueueVMark=this.logQueue.getMark();
				int logQueueVStart=this.logQueue.getStart();
				for(int logQueueVI=0,logQueueVLen=this.logQueue.length();logQueueVI<logQueueVLen;++logQueueVI)
				{
					InfoLogData logQueueV=(InfoLogData)logQueueVValues[(logQueueVI+logQueueVStart)&logQueueVMark];
					if(logQueueV!=null)
					{
						stream.writeDataFullNotNull(logQueueV);
					}
					else
					{
						nullObjError("logQueueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("logQueue");
		}
		
		stream.writeInt(this.clientOfflineWorkTimeChangeTotalNum);
		
		stream.writeInt(this.lastLoginAppVersion);
		
		stream.writeInt(this.lastLoginResourceVersion);
		
		stream.writeInt(this.clientRandomSeedKey);
		
		stream.writeBoolean(this.clientRandomSeedNeedReset);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.version=(SaveVersionData)stream.readDataSimpleNotNull();
		
		this.createDate=new DateData();
		this.createDate.readBytesSimple(stream);
		
		this.isBlock=stream.readBoolean();
		
		this.openBlockDate=stream.readLong();
		
		this.firstLogined=stream.readBoolean();
		
		this.onLineMark=stream.readBoolean();
		
		this.loginDate=stream.readLong();
		
		this.logoutDate=stream.readLong();
		
		this.nextDailyTime=stream.readLong();
		
		this.serverRunIndex=stream.readInt();
		
		this.flowStep=stream.readInt();
		
		this.keepSave=new KeepSaveData();
		this.keepSave.readBytesSimple(stream);
		
		if(stream.readBoolean())
		{
			int clientRandomSeedsLen=stream.readLen();
			if(this.clientRandomSeeds==null || this.clientRandomSeeds.length!=clientRandomSeedsLen)
			{
				this.clientRandomSeeds=new int[clientRandomSeedsLen];
			}
			int[] clientRandomSeedsT=this.clientRandomSeeds;
			for(int clientRandomSeedsI=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
			{
				int clientRandomSeedsV;
				clientRandomSeedsV=stream.readInt();
				
				clientRandomSeedsT[clientRandomSeedsI]=clientRandomSeedsV;
			}
		}
		else
		{
			this.clientRandomSeeds=null;
		}
		
		this.clientRandomSeedIndex=stream.readInt();
		
		this.lastLoginClientPlatformType=stream.readInt();
		
		this.workReceiverData=new WorkReceiverData();
		this.workReceiverData.readBytesSimple(stream);
		
		this.gameGlobalOfflineWorkIndex=stream.readInt();
		
		this.clientOfflineWorkReceiveIndex=stream.readInt();
		
		this.lastClientOfflineTime=stream.readLong();
		
		this.gmType=stream.readInt();
		
		this.clientOfflineWorkTimeChangeNum=stream.readInt();
		
		this.lastLoginDeviceType=stream.readUTF();
		
		this.lastLoginDeviceUniqueIdentifier=stream.readUTF();
		
		int logQueueLen=stream.readLen();
		if(this.logQueue!=null)
		{
			this.logQueue.clear();
			this.logQueue.ensureCapacity(logQueueLen);
		}
		else
		{
			this.logQueue=new SQueue<InfoLogData>(InfoLogData[]::new,logQueueLen);
		}
		
		SQueue<InfoLogData> logQueueT=this.logQueue;
		for(int logQueueI=logQueueLen-1;logQueueI>=0;--logQueueI)
		{
			InfoLogData logQueueV;
			logQueueV=(InfoLogData)stream.readDataSimpleNotNull();
			
			logQueueT.offer(logQueueV);
		}
		
		this.clientOfflineWorkTimeChangeTotalNum=stream.readInt();
		
		this.lastLoginAppVersion=stream.readInt();
		
		this.lastLoginResourceVersion=stream.readInt();
		
		this.clientRandomSeedKey=stream.readInt();
		
		this.clientRandomSeedNeedReset=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.version!=null)
		{
			stream.writeDataSimpleNotNull(this.version);
		}
		else
		{
			nullObjError("version");
		}
		
		if(this.createDate!=null)
		{
			this.createDate.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("createDate");
		}
		
		stream.writeBoolean(this.isBlock);
		
		stream.writeLong(this.openBlockDate);
		
		stream.writeBoolean(this.firstLogined);
		
		stream.writeBoolean(this.onLineMark);
		
		stream.writeLong(this.loginDate);
		
		stream.writeLong(this.logoutDate);
		
		stream.writeLong(this.nextDailyTime);
		
		stream.writeInt(this.serverRunIndex);
		
		stream.writeInt(this.flowStep);
		
		if(this.keepSave!=null)
		{
			this.keepSave.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("keepSave");
		}
		
		if(this.clientRandomSeeds!=null)
		{
			stream.writeBoolean(true);
			int[] clientRandomSeedsT=this.clientRandomSeeds;
			stream.writeLen(clientRandomSeedsT.length);
			for(int clientRandomSeedsVI=0,clientRandomSeedsVLen=clientRandomSeedsT.length;clientRandomSeedsVI<clientRandomSeedsVLen;++clientRandomSeedsVI)
			{
				int clientRandomSeedsV=clientRandomSeedsT[clientRandomSeedsVI];
				stream.writeInt(clientRandomSeedsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
		stream.writeInt(this.lastLoginClientPlatformType);
		
		if(this.workReceiverData!=null)
		{
			this.workReceiverData.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("workReceiverData");
		}
		
		stream.writeInt(this.gameGlobalOfflineWorkIndex);
		
		stream.writeInt(this.clientOfflineWorkReceiveIndex);
		
		stream.writeLong(this.lastClientOfflineTime);
		
		stream.writeInt(this.gmType);
		
		stream.writeInt(this.clientOfflineWorkTimeChangeNum);
		
		stream.writeUTF(this.lastLoginDeviceType);
		
		stream.writeUTF(this.lastLoginDeviceUniqueIdentifier);
		
		if(this.logQueue!=null)
		{
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				Object[] logQueueVValues=this.logQueue.getValues();
				int logQueueVMark=this.logQueue.getMark();
				int logQueueVStart=this.logQueue.getStart();
				for(int logQueueVI=0,logQueueVLen=this.logQueue.length();logQueueVI<logQueueVLen;++logQueueVI)
				{
					InfoLogData logQueueV=(InfoLogData)logQueueVValues[(logQueueVI+logQueueVStart)&logQueueVMark];
					if(logQueueV!=null)
					{
						stream.writeDataSimpleNotNull(logQueueV);
					}
					else
					{
						nullObjError("logQueueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("logQueue");
		}
		
		stream.writeInt(this.clientOfflineWorkTimeChangeTotalNum);
		
		stream.writeInt(this.lastLoginAppVersion);
		
		stream.writeInt(this.lastLoginResourceVersion);
		
		stream.writeInt(this.clientRandomSeedKey);
		
		stream.writeBoolean(this.clientRandomSeedNeedReset);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof SystemPartData))
			return;
		
		SystemPartData mData=(SystemPartData)data;
		
		this.version=mData.version;
		this.createDate=mData.createDate;
		this.isBlock=mData.isBlock;
		this.openBlockDate=mData.openBlockDate;
		this.firstLogined=mData.firstLogined;
		this.onLineMark=mData.onLineMark;
		this.loginDate=mData.loginDate;
		this.logoutDate=mData.logoutDate;
		this.nextDailyTime=mData.nextDailyTime;
		this.serverRunIndex=mData.serverRunIndex;
		this.flowStep=mData.flowStep;
		this.keepSave=mData.keepSave;
		this.clientRandomSeeds=mData.clientRandomSeeds;
		this.clientRandomSeedIndex=mData.clientRandomSeedIndex;
		this.lastLoginClientPlatformType=mData.lastLoginClientPlatformType;
		this.workReceiverData=mData.workReceiverData;
		this.gameGlobalOfflineWorkIndex=mData.gameGlobalOfflineWorkIndex;
		this.clientOfflineWorkReceiveIndex=mData.clientOfflineWorkReceiveIndex;
		this.lastClientOfflineTime=mData.lastClientOfflineTime;
		this.gmType=mData.gmType;
		this.clientOfflineWorkTimeChangeNum=mData.clientOfflineWorkTimeChangeNum;
		this.lastLoginDeviceType=mData.lastLoginDeviceType;
		this.lastLoginDeviceUniqueIdentifier=mData.lastLoginDeviceUniqueIdentifier;
		this.logQueue=mData.logQueue;
		this.clientOfflineWorkTimeChangeTotalNum=mData.clientOfflineWorkTimeChangeTotalNum;
		this.lastLoginAppVersion=mData.lastLoginAppVersion;
		this.lastLoginResourceVersion=mData.lastLoginResourceVersion;
		this.clientRandomSeedKey=mData.clientRandomSeedKey;
		this.clientRandomSeedNeedReset=mData.clientRandomSeedNeedReset;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof SystemPartData))
			return;
		
		SystemPartData mData=(SystemPartData)data;
		
		if(mData.version!=null)
		{
			this.version=(SaveVersionData)mData.version.clone();
		}
		else
		{
			this.version=null;
			nullObjError("version");
		}
		
		if(mData.createDate!=null)
		{
			this.createDate=new DateData();
			this.createDate.copy(mData.createDate);
		}
		else
		{
			this.createDate=null;
			nullObjError("createDate");
		}
		
		this.isBlock=mData.isBlock;
		
		this.openBlockDate=mData.openBlockDate;
		
		this.firstLogined=mData.firstLogined;
		
		this.onLineMark=mData.onLineMark;
		
		this.loginDate=mData.loginDate;
		
		this.logoutDate=mData.logoutDate;
		
		this.nextDailyTime=mData.nextDailyTime;
		
		this.serverRunIndex=mData.serverRunIndex;
		
		this.flowStep=mData.flowStep;
		
		if(mData.keepSave!=null)
		{
			this.keepSave=new KeepSaveData();
			this.keepSave.copy(mData.keepSave);
		}
		else
		{
			this.keepSave=null;
			nullObjError("keepSave");
		}
		
		if(mData.clientRandomSeeds!=null)
		{
			int[] clientRandomSeedsR=mData.clientRandomSeeds;
			int clientRandomSeedsLen=clientRandomSeedsR.length;
			if(this.clientRandomSeeds==null || this.clientRandomSeeds.length!=clientRandomSeedsLen)
			{
				this.clientRandomSeeds=new int[clientRandomSeedsLen];
			}
			BytesControl.arrayCopy(mData.clientRandomSeeds,this.clientRandomSeeds,clientRandomSeedsLen);
		}
		else
		{
			this.clientRandomSeeds=null;
		}
		
		this.clientRandomSeedIndex=mData.clientRandomSeedIndex;
		
		this.lastLoginClientPlatformType=mData.lastLoginClientPlatformType;
		
		if(mData.workReceiverData!=null)
		{
			this.workReceiverData=new WorkReceiverData();
			this.workReceiverData.copy(mData.workReceiverData);
		}
		else
		{
			this.workReceiverData=null;
			nullObjError("workReceiverData");
		}
		
		this.gameGlobalOfflineWorkIndex=mData.gameGlobalOfflineWorkIndex;
		
		this.clientOfflineWorkReceiveIndex=mData.clientOfflineWorkReceiveIndex;
		
		this.lastClientOfflineTime=mData.lastClientOfflineTime;
		
		this.gmType=mData.gmType;
		
		this.clientOfflineWorkTimeChangeNum=mData.clientOfflineWorkTimeChangeNum;
		
		this.lastLoginDeviceType=mData.lastLoginDeviceType;
		
		this.lastLoginDeviceUniqueIdentifier=mData.lastLoginDeviceUniqueIdentifier;
		
		if(mData.logQueue!=null)
		{
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(mData.logQueue.size());
			}
			else
			{
				this.logQueue=new SQueue<InfoLogData>(InfoLogData[]::new,mData.logQueue.size());
			}
			
			SQueue<InfoLogData> logQueueT=this.logQueue;
			if(!mData.logQueue.isEmpty())
			{
				Object[] logQueueVValues=mData.logQueue.getValues();
				int logQueueVMark=mData.logQueue.getMark();
				int logQueueVStart=mData.logQueue.getStart();
				for(int logQueueVI=0,logQueueVLen=mData.logQueue.length();logQueueVI<logQueueVLen;++logQueueVI)
				{
					InfoLogData logQueueV=(InfoLogData)logQueueVValues[(logQueueVI+logQueueVStart)&logQueueVMark];
					InfoLogData logQueueU;
					if(logQueueV!=null)
					{
						logQueueU=(InfoLogData)logQueueV.clone();
					}
					else
					{
						logQueueU=null;
						nullObjError("logQueueU");
					}
					
					logQueueT.offer(logQueueU);
				}
			}
		}
		else
		{
			this.logQueue=null;
			nullObjError("logQueue");
		}
		
		this.clientOfflineWorkTimeChangeTotalNum=mData.clientOfflineWorkTimeChangeTotalNum;
		
		this.lastLoginAppVersion=mData.lastLoginAppVersion;
		
		this.lastLoginResourceVersion=mData.lastLoginResourceVersion;
		
		this.clientRandomSeedKey=mData.clientRandomSeedKey;
		
		this.clientRandomSeedNeedReset=mData.clientRandomSeedNeedReset;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		SystemPartData mData=(SystemPartData)data;
		if(mData.version!=null)
		{
			if(this.version==null)
				return false;
			if(!this.version.dataEquals(mData.version))
				return false;
		}
		else
		{
			if(this.version!=null)
				return false;
		}
		
		if(mData.createDate!=null)
		{
			if(this.createDate==null)
				return false;
			if(!this.createDate.dataEquals(mData.createDate))
				return false;
		}
		else
		{
			if(this.createDate!=null)
				return false;
		}
		
		if(this.isBlock!=mData.isBlock)
			return false;
		
		if(this.openBlockDate!=mData.openBlockDate)
			return false;
		
		if(this.firstLogined!=mData.firstLogined)
			return false;
		
		if(this.onLineMark!=mData.onLineMark)
			return false;
		
		if(this.loginDate!=mData.loginDate)
			return false;
		
		if(this.logoutDate!=mData.logoutDate)
			return false;
		
		if(this.nextDailyTime!=mData.nextDailyTime)
			return false;
		
		if(this.serverRunIndex!=mData.serverRunIndex)
			return false;
		
		if(this.flowStep!=mData.flowStep)
			return false;
		
		if(mData.keepSave!=null)
		{
			if(this.keepSave==null)
				return false;
			if(!this.keepSave.dataEquals(mData.keepSave))
				return false;
		}
		else
		{
			if(this.keepSave!=null)
				return false;
		}
		
		if(mData.clientRandomSeeds!=null)
		{
			if(this.clientRandomSeeds==null)
				return false;
			if(this.clientRandomSeeds.length!=mData.clientRandomSeeds.length)
				return false;
			int[] clientRandomSeedsT=this.clientRandomSeeds;
			int[] clientRandomSeedsR=mData.clientRandomSeeds;
			int clientRandomSeedsLen=clientRandomSeedsT.length;
			for(int clientRandomSeedsI=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
			{
				int clientRandomSeedsU=clientRandomSeedsT[clientRandomSeedsI];
				int clientRandomSeedsV=clientRandomSeedsR[clientRandomSeedsI];
				if(clientRandomSeedsU!=clientRandomSeedsV)
					return false;
				
			}
		}
		else
		{
			if(this.clientRandomSeeds!=null)
				return false;
		}
		
		if(this.clientRandomSeedIndex!=mData.clientRandomSeedIndex)
			return false;
		
		if(this.lastLoginClientPlatformType!=mData.lastLoginClientPlatformType)
			return false;
		
		if(mData.workReceiverData!=null)
		{
			if(this.workReceiverData==null)
				return false;
			if(!this.workReceiverData.dataEquals(mData.workReceiverData))
				return false;
		}
		else
		{
			if(this.workReceiverData!=null)
				return false;
		}
		
		if(this.gameGlobalOfflineWorkIndex!=mData.gameGlobalOfflineWorkIndex)
			return false;
		
		if(this.clientOfflineWorkReceiveIndex!=mData.clientOfflineWorkReceiveIndex)
			return false;
		
		if(this.lastClientOfflineTime!=mData.lastClientOfflineTime)
			return false;
		
		if(this.gmType!=mData.gmType)
			return false;
		
		if(this.clientOfflineWorkTimeChangeNum!=mData.clientOfflineWorkTimeChangeNum)
			return false;
		
		if(!this.lastLoginDeviceType.equals(mData.lastLoginDeviceType))
			return false;
		
		if(!this.lastLoginDeviceUniqueIdentifier.equals(mData.lastLoginDeviceUniqueIdentifier))
			return false;
		
		if(mData.logQueue!=null)
		{
			if(this.logQueue==null)
				return false;
			if(this.logQueue.size()!=mData.logQueue.size())
				return false;
			SQueue<InfoLogData> logQueueT=this.logQueue;
			SQueue<InfoLogData> logQueueR=mData.logQueue;
			int logQueueLen=logQueueT.size();
			for(int logQueueI=0;logQueueI<logQueueLen;++logQueueI)
			{
				InfoLogData logQueueU=logQueueT.get(logQueueI);
				InfoLogData logQueueV=logQueueR.get(logQueueI);
				if(logQueueV!=null)
				{
					if(logQueueU==null)
						return false;
					if(!logQueueU.dataEquals(logQueueV))
						return false;
				}
				else
				{
					if(logQueueU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.logQueue!=null)
				return false;
		}
		
		if(this.clientOfflineWorkTimeChangeTotalNum!=mData.clientOfflineWorkTimeChangeTotalNum)
			return false;
		
		if(this.lastLoginAppVersion!=mData.lastLoginAppVersion)
			return false;
		
		if(this.lastLoginResourceVersion!=mData.lastLoginResourceVersion)
			return false;
		
		if(this.clientRandomSeedKey!=mData.clientRandomSeedKey)
			return false;
		
		if(this.clientRandomSeedNeedReset!=mData.clientRandomSeedNeedReset)
			return false;
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SystemPartData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("version");
		writer.sb.append(':');
		if(this.version!=null)
		{
			this.version.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SaveVersionData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("createDate");
		writer.sb.append(':');
		if(this.createDate!=null)
		{
			this.createDate.writeDataString(writer);
		}
		else
		{
			writer.sb.append("DateData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isBlock");
		writer.sb.append(':');
		writer.sb.append(this.isBlock);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("openBlockDate");
		writer.sb.append(':');
		writer.sb.append(this.openBlockDate);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("firstLogined");
		writer.sb.append(':');
		writer.sb.append(this.firstLogined);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("onLineMark");
		writer.sb.append(':');
		writer.sb.append(this.onLineMark);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("loginDate");
		writer.sb.append(':');
		writer.sb.append(this.loginDate);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("logoutDate");
		writer.sb.append(':');
		writer.sb.append(this.logoutDate);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("nextDailyTime");
		writer.sb.append(':');
		writer.sb.append(this.nextDailyTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("serverRunIndex");
		writer.sb.append(':');
		writer.sb.append(this.serverRunIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("flowStep");
		writer.sb.append(':');
		writer.sb.append(this.flowStep);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("keepSave");
		writer.sb.append(':');
		if(this.keepSave!=null)
		{
			this.keepSave.writeDataString(writer);
		}
		else
		{
			writer.sb.append("KeepSaveData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeeds");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.clientRandomSeeds!=null)
		{
			int[] clientRandomSeedsT=this.clientRandomSeeds;
			int clientRandomSeedsLen=clientRandomSeedsT.length;
			writer.sb.append('(');
			writer.sb.append(clientRandomSeedsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int clientRandomSeedsI=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
			{
				int clientRandomSeedsV=clientRandomSeedsT[clientRandomSeedsI];
				writer.writeTabs();
				writer.sb.append(clientRandomSeedsI);
				writer.sb.append(':');
				writer.sb.append(clientRandomSeedsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeedIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientRandomSeedIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastLoginClientPlatformType");
		writer.sb.append(':');
		writer.sb.append(this.lastLoginClientPlatformType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("workReceiverData");
		writer.sb.append(':');
		if(this.workReceiverData!=null)
		{
			this.workReceiverData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("WorkReceiverData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gameGlobalOfflineWorkIndex");
		writer.sb.append(':');
		writer.sb.append(this.gameGlobalOfflineWorkIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientOfflineWorkReceiveIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientOfflineWorkReceiveIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastClientOfflineTime");
		writer.sb.append(':');
		writer.sb.append(this.lastClientOfflineTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gmType");
		writer.sb.append(':');
		writer.sb.append(this.gmType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientOfflineWorkTimeChangeNum");
		writer.sb.append(':');
		writer.sb.append(this.clientOfflineWorkTimeChangeNum);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastLoginDeviceType");
		writer.sb.append(':');
		writer.sb.append(this.lastLoginDeviceType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastLoginDeviceUniqueIdentifier");
		writer.sb.append(':');
		writer.sb.append(this.lastLoginDeviceUniqueIdentifier);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("logQueue");
		writer.sb.append(':');
		writer.sb.append("Queue<InfoLogData>");
		if(this.logQueue!=null)
		{
			SQueue<InfoLogData> logQueueT=this.logQueue;
			int logQueueLen=logQueueT.size();
			writer.sb.append('(');
			writer.sb.append(logQueueLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int logQueueI=0;logQueueI<logQueueLen;++logQueueI)
			{
				InfoLogData logQueueV=logQueueT.get(logQueueI);
				writer.writeTabs();
				writer.sb.append(logQueueI);
				writer.sb.append(':');
				if(logQueueV!=null)
				{
					logQueueV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("InfoLogData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientOfflineWorkTimeChangeTotalNum");
		writer.sb.append(':');
		writer.sb.append(this.clientOfflineWorkTimeChangeTotalNum);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastLoginAppVersion");
		writer.sb.append(':');
		writer.sb.append(this.lastLoginAppVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lastLoginResourceVersion");
		writer.sb.append(':');
		writer.sb.append(this.lastLoginResourceVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeedKey");
		writer.sb.append(':');
		writer.sb.append(this.clientRandomSeedKey);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeedNeedReset");
		writer.sb.append(':');
		writer.sb.append(this.clientRandomSeedNeedReset);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.version=new SaveVersionData();
		this.version.initDefault();
		this.createDate=new DateData();
		this.createDate.initDefault();
		this.keepSave=new KeepSaveData();
		this.keepSave.initDefault();
		this.workReceiverData=new WorkReceiverData();
		this.workReceiverData.initDefault();
		this.logQueue=new SQueue<InfoLogData>(InfoLogData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.version=null;
		this.createDate=null;
		this.isBlock=false;
		this.openBlockDate=0L;
		this.firstLogined=false;
		this.onLineMark=false;
		this.loginDate=0L;
		this.logoutDate=0L;
		this.nextDailyTime=0L;
		this.serverRunIndex=0;
		this.flowStep=0;
		this.keepSave=null;
		this.clientRandomSeeds=null;
		this.clientRandomSeedIndex=0;
		this.lastLoginClientPlatformType=0;
		this.workReceiverData=null;
		this.gameGlobalOfflineWorkIndex=0;
		this.clientOfflineWorkReceiveIndex=0;
		this.lastClientOfflineTime=0L;
		this.gmType=0;
		this.clientOfflineWorkTimeChangeNum=0;
		this.lastLoginDeviceType="";
		this.lastLoginDeviceUniqueIdentifier="";
		this.logQueue=null;
		this.clientOfflineWorkTimeChangeTotalNum=0;
		this.lastLoginAppVersion=0;
		this.lastLoginResourceVersion=0;
		this.clientRandomSeedKey=0;
		this.clientRandomSeedNeedReset=false;
	}
	
}
