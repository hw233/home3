package com.home.commonBase.data.test;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.test.Test2Data;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.IntQueue;
import com.home.shine.support.collection.IntSet;
import com.home.shine.support.collection.LongList;
import com.home.shine.support.collection.LongLongMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.LongSet;
import com.home.shine.support.collection.SList;
import com.home.shine.support.collection.SMap;
import com.home.shine.support.collection.SQueue;
import com.home.shine.support.collection.SSet;
import com.home.shine.support.pool.DataPool;

/** 测试数据(generated by shine) */
public class TestData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Test;
	
	/** 00 */
	public boolean a1;
	
	/** 11 */
	public int a2;
	
	public int a6;
	
	public float a7;
	
	public double a8;
	
	public long a9;
	
	public String a10="";
	
	public Test2Data b1;
	
	/** b2 */
	public Test2Data b2;
	
	public Test2Data b3;
	
	/** b4 */
	public Test2Data b4;
	
	public byte[] c1;
	
	public int[] c2;
	
	public long[] c3;
	
	public String[] c4;
	
	public int[][] c5;
	
	public int[][][] c6;
	
	public IntList d1;
	
	public LongList d2;
	
	public SList<String> d3;
	
	public SList<Test2Data> d4;
	
	public SList<Test2Data> d6;
	
	public IntSet d7;
	
	public LongSet d8;
	
	public SSet<String> d9;
	
	public SSet<Test2Data> d10;
	
	public IntIntMap e1;
	
	public IntObjectMap<Test2Data> e2;
	
	public LongLongMap e12;
	
	public LongObjectMap<Test2Data> e3;
	
	public SMap<String,Test2Data> e4;
	
	public IntObjectMap<Test2Data> e5;
	
	public IntObjectMap<Test2Data> e6;
	
	public IntObjectMap<Test2Data> e7;
	
	public IntObjectMap<Test2Data> e8;
	
	public IntList[] f1;
	
	public SList<int[]>[] f2;
	
	public SList<Test2Data>[] f3;
	
	public SList<Test2Data[]>[] f4;
	
	public SList<Test2Data>[] f5;
	
	public SList<Test2Data[]>[] f6;
	
	public SList<Test2Data> d5;
	
	public IntObjectMap<IntObjectMap<Test2Data>> g1;
	
	public SSet<Test2Data> d11;
	
	public IntQueue h1;
	
	public SQueue<Test2Data> h2;
	
	public IntObjectMap<SQueue<Test2Data>> h3;
	
	public TestData()
	{
		_dataID=BaseDataType.Test;
	}
	
	/** 读取字节流(完整版) */
	@SuppressWarnings("unchecked")
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.a1=stream.readBoolean();
		
		this.a2=stream.readByte();
		
		this.a6=stream.readInt();
		
		this.a7=stream.readFloat();
		
		this.a8=stream.readDouble();
		
		this.a9=stream.readLong();
		
		this.a10=stream.readUTF();
		
		BaseData b1T=stream.readDataFullNotNull();
		if(b1T!=null)
		{
			if(b1T instanceof Test2Data)
			{
				this.b1=(Test2Data)b1T;
			}
			else
			{
				this.b1=new Test2Data();
				if(!(b1T.getClass().isAssignableFrom(Test2Data.class)))
				{
					stream.throwTypeReadError(Test2Data.class,b1T.getClass());
				}
				this.b1.shadowCopy(b1T);
			}
		}
		else
		{
			this.b1=null;
		}
		
		BaseData b2T=stream.readDataFullNotNull();
		if(b2T!=null)
		{
			if(b2T instanceof Test2Data)
			{
				this.b2=(Test2Data)b2T;
			}
			else
			{
				this.b2=new Test2Data();
				if(!(b2T.getClass().isAssignableFrom(Test2Data.class)))
				{
					stream.throwTypeReadError(Test2Data.class,b2T.getClass());
				}
				this.b2.shadowCopy(b2T);
			}
		}
		else
		{
			this.b2=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData b3T=stream.readDataFullNotNull();
			if(b3T!=null)
			{
				if(b3T instanceof Test2Data)
				{
					this.b3=(Test2Data)b3T;
				}
				else
				{
					this.b3=new Test2Data();
					if(!(b3T.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,b3T.getClass());
					}
					this.b3.shadowCopy(b3T);
				}
			}
			else
			{
				this.b3=null;
			}
		}
		else
		{
			this.b3=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData b4T=stream.readDataFullNotNull();
			if(b4T!=null)
			{
				if(b4T instanceof Test2Data)
				{
					this.b4=(Test2Data)b4T;
				}
				else
				{
					this.b4=new Test2Data();
					if(!(b4T.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,b4T.getClass());
					}
					this.b4.shadowCopy(b4T);
				}
			}
			else
			{
				this.b4=null;
			}
		}
		else
		{
			this.b4=null;
		}
		
		int c1Len=stream.readLen();
		this.c1=stream.readByteArr(c1Len);
		
		int c2Len=stream.readLen();
		if(this.c2==null || this.c2.length!=c2Len)
		{
			this.c2=new int[c2Len];
		}
		int[] c2T=this.c2;
		for(int c2I=0;c2I<c2Len;++c2I)
		{
			int c2V;
			c2V=stream.readInt();
			
			c2T[c2I]=c2V;
		}
		
		int c3Len=stream.readLen();
		if(this.c3==null || this.c3.length!=c3Len)
		{
			this.c3=new long[c3Len];
		}
		long[] c3T=this.c3;
		for(int c3I=0;c3I<c3Len;++c3I)
		{
			long c3V;
			c3V=stream.readLong();
			
			c3T[c3I]=c3V;
		}
		
		int c4Len=stream.readLen();
		if(this.c4==null || this.c4.length!=c4Len)
		{
			this.c4=new String[c4Len];
		}
		String[] c4T=this.c4;
		for(int c4I=0;c4I<c4Len;++c4I)
		{
			String c4V;
			c4V=stream.readUTF();
			
			c4T[c4I]=c4V;
		}
		
		int c5Len=stream.readLen();
		if(this.c5==null || this.c5.length!=c5Len)
		{
			this.c5=new int[c5Len][];
		}
		int[][] c5T=this.c5;
		for(int c5I=0;c5I<c5Len;++c5I)
		{
			int[] c5V;
			int c5VLen=stream.readLen();
			c5V=new int[c5VLen];
			int[] c5VT=c5V;
			for(int c5VI=0;c5VI<c5VLen;++c5VI)
			{
				int c5VV;
				c5VV=stream.readInt();
				
				c5VT[c5VI]=c5VV;
			}
			
			c5T[c5I]=c5V;
		}
		
		int c6Len=stream.readLen();
		if(this.c6==null || this.c6.length!=c6Len)
		{
			this.c6=new int[c6Len][][];
		}
		int[][][] c6T=this.c6;
		for(int c6I=0;c6I<c6Len;++c6I)
		{
			int[][] c6V;
			int c6VLen=stream.readLen();
			c6V=new int[c6VLen][];
			int[][] c6VT=c6V;
			for(int c6VI=0;c6VI<c6VLen;++c6VI)
			{
				int[] c6VV;
				int c6VVLen=stream.readLen();
				c6VV=new int[c6VVLen];
				int[] c6VVT=c6VV;
				for(int c6VVI=0;c6VVI<c6VVLen;++c6VVI)
				{
					int c6VVV;
					c6VVV=stream.readInt();
					
					c6VVT[c6VVI]=c6VVV;
				}
				
				c6VT[c6VI]=c6VV;
			}
			
			c6T[c6I]=c6V;
		}
		
		int d1Len=stream.readLen();
		if(this.d1!=null)
		{
			this.d1.clear();
			this.d1.ensureCapacity(d1Len);
		}
		else
		{
			this.d1=new IntList(d1Len);
		}
		
		IntList d1T=this.d1;
		for(int d1I=d1Len-1;d1I>=0;--d1I)
		{
			int d1V;
			d1V=stream.readInt();
			
			d1T.add(d1V);
		}
		
		int d2Len=stream.readLen();
		if(this.d2!=null)
		{
			this.d2.clear();
			this.d2.ensureCapacity(d2Len);
		}
		else
		{
			this.d2=new LongList(d2Len);
		}
		
		LongList d2T=this.d2;
		for(int d2I=d2Len-1;d2I>=0;--d2I)
		{
			long d2V;
			d2V=stream.readLong();
			
			d2T.add(d2V);
		}
		
		int d3Len=stream.readLen();
		if(this.d3!=null)
		{
			this.d3.clear();
			this.d3.ensureCapacity(d3Len);
		}
		else
		{
			this.d3=new SList<String>(String[]::new,d3Len);
		}
		
		SList<String> d3T=this.d3;
		for(int d3I=d3Len-1;d3I>=0;--d3I)
		{
			String d3V;
			d3V=stream.readUTF();
			
			d3T.add(d3V);
		}
		
		int d4Len=stream.readLen();
		if(this.d4!=null)
		{
			this.d4.clear();
			this.d4.ensureCapacity(d4Len);
		}
		else
		{
			this.d4=new SList<Test2Data>(Test2Data[]::new,d4Len);
		}
		
		SList<Test2Data> d4T=this.d4;
		for(int d4I=d4Len-1;d4I>=0;--d4I)
		{
			Test2Data d4V;
			BaseData d4VT=stream.readDataFullNotNull();
			if(d4VT!=null)
			{
				if(d4VT instanceof Test2Data)
				{
					d4V=(Test2Data)d4VT;
				}
				else
				{
					d4V=new Test2Data();
					if(!(d4VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,d4VT.getClass());
					}
					d4V.shadowCopy(d4VT);
				}
			}
			else
			{
				d4V=null;
			}
			
			d4T.add(d4V);
		}
		
		int d5Len=stream.readLen();
		if(this.d5!=null)
		{
			this.d5.clear();
			this.d5.ensureCapacity(d5Len);
		}
		else
		{
			this.d5=new SList<Test2Data>(Test2Data[]::new,d5Len);
		}
		
		SList<Test2Data> d5T=this.d5;
		for(int d5I=d5Len-1;d5I>=0;--d5I)
		{
			Test2Data d5V;
			BaseData d5VT=stream.readDataFullNotNull();
			if(d5VT!=null)
			{
				if(d5VT instanceof Test2Data)
				{
					d5V=(Test2Data)d5VT;
				}
				else
				{
					d5V=new Test2Data();
					if(!(d5VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,d5VT.getClass());
					}
					d5V.shadowCopy(d5VT);
				}
			}
			else
			{
				d5V=null;
			}
			
			d5T.add(d5V);
		}
		
		if(stream.readBoolean())
		{
			int d6Len=stream.readLen();
			if(this.d6!=null)
			{
				this.d6.clear();
				this.d6.ensureCapacity(d6Len);
			}
			else
			{
				this.d6=new SList<Test2Data>(Test2Data[]::new,d6Len);
			}
			
			SList<Test2Data> d6T=this.d6;
			for(int d6I=d6Len-1;d6I>=0;--d6I)
			{
				Test2Data d6V;
				if(stream.readBoolean())
				{
					BaseData d6VT=stream.readDataFullNotNull();
					if(d6VT!=null)
					{
						if(d6VT instanceof Test2Data)
						{
							d6V=(Test2Data)d6VT;
						}
						else
						{
							d6V=new Test2Data();
							if(!(d6VT.getClass().isAssignableFrom(Test2Data.class)))
							{
								stream.throwTypeReadError(Test2Data.class,d6VT.getClass());
							}
							d6V.shadowCopy(d6VT);
						}
					}
					else
					{
						d6V=null;
					}
				}
				else
				{
					d6V=null;
				}
				
				d6T.add(d6V);
			}
		}
		else
		{
			this.d6=null;
		}
		
		int d7Len=stream.readLen();
		if(this.d7!=null)
		{
			this.d7.clear();
			this.d7.ensureCapacity(d7Len);
		}
		else
		{
			this.d7=new IntSet(d7Len);
		}
		
		IntSet d7T=this.d7;
		for(int d7I=d7Len-1;d7I>=0;--d7I)
		{
			int d7V;
			d7V=stream.readInt();
			
			d7T.add(d7V);
		}
		
		int d8Len=stream.readLen();
		if(this.d8!=null)
		{
			this.d8.clear();
			this.d8.ensureCapacity(d8Len);
		}
		else
		{
			this.d8=new LongSet(d8Len);
		}
		
		LongSet d8T=this.d8;
		for(int d8I=d8Len-1;d8I>=0;--d8I)
		{
			long d8V;
			d8V=stream.readLong();
			
			d8T.add(d8V);
		}
		
		int d9Len=stream.readLen();
		if(this.d9!=null)
		{
			this.d9.clear();
			this.d9.ensureCapacity(d9Len);
		}
		else
		{
			this.d9=new SSet<String>(String[]::new,d9Len);
		}
		
		SSet<String> d9T=this.d9;
		for(int d9I=d9Len-1;d9I>=0;--d9I)
		{
			String d9V;
			d9V=stream.readUTF();
			
			d9T.add(d9V);
		}
		
		int d10Len=stream.readLen();
		if(this.d10!=null)
		{
			this.d10.clear();
			this.d10.ensureCapacity(d10Len);
		}
		else
		{
			this.d10=new SSet<Test2Data>(Test2Data[]::new,d10Len);
		}
		
		SSet<Test2Data> d10T=this.d10;
		for(int d10I=d10Len-1;d10I>=0;--d10I)
		{
			Test2Data d10V;
			BaseData d10VT=stream.readDataFullNotNull();
			if(d10VT!=null)
			{
				if(d10VT instanceof Test2Data)
				{
					d10V=(Test2Data)d10VT;
				}
				else
				{
					d10V=new Test2Data();
					if(!(d10VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,d10VT.getClass());
					}
					d10V.shadowCopy(d10VT);
				}
			}
			else
			{
				d10V=null;
			}
			
			d10T.add(d10V);
		}
		
		int d11Len=stream.readLen();
		if(this.d11!=null)
		{
			this.d11.clear();
			this.d11.ensureCapacity(d11Len);
		}
		else
		{
			this.d11=new SSet<Test2Data>(Test2Data[]::new,d11Len);
		}
		
		SSet<Test2Data> d11T=this.d11;
		for(int d11I=d11Len-1;d11I>=0;--d11I)
		{
			Test2Data d11V;
			BaseData d11VT=stream.readDataFullNotNull();
			if(d11VT!=null)
			{
				if(d11VT instanceof Test2Data)
				{
					d11V=(Test2Data)d11VT;
				}
				else
				{
					d11V=new Test2Data();
					if(!(d11VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,d11VT.getClass());
					}
					d11V.shadowCopy(d11VT);
				}
			}
			else
			{
				d11V=null;
			}
			
			d11T.add(d11V);
		}
		
		int e1Len=stream.readLen();
		if(this.e1!=null)
		{
			this.e1.clear();
			this.e1.ensureCapacity(e1Len);
		}
		else
		{
			this.e1=new IntIntMap(e1Len);
		}
		
		IntIntMap e1T=this.e1;
		for(int e1I=e1Len-1;e1I>=0;--e1I)
		{
			int e1K;
			int e1V;
			e1K=stream.readInt();
			
			e1V=stream.readInt();
			
			e1T.put(e1K,e1V);
		}
		
		int e12Len=stream.readLen();
		if(this.e12!=null)
		{
			this.e12.clear();
			this.e12.ensureCapacity(e12Len);
		}
		else
		{
			this.e12=new LongLongMap(e12Len);
		}
		
		LongLongMap e12T=this.e12;
		for(int e12I=e12Len-1;e12I>=0;--e12I)
		{
			long e12K;
			long e12V;
			e12K=stream.readLong();
			
			e12V=stream.readLong();
			
			e12T.put(e12K,e12V);
		}
		
		int e2Len=stream.readLen();
		if(this.e2!=null)
		{
			this.e2.clear();
			this.e2.ensureCapacity(e2Len);
		}
		else
		{
			this.e2=new IntObjectMap<Test2Data>(Test2Data[]::new,e2Len);
		}
		
		IntObjectMap<Test2Data> e2T=this.e2;
		for(int e2I=e2Len-1;e2I>=0;--e2I)
		{
			int e2K;
			Test2Data e2V;
			e2K=stream.readInt();
			
			BaseData e2VT=stream.readDataFullNotNull();
			if(e2VT!=null)
			{
				if(e2VT instanceof Test2Data)
				{
					e2V=(Test2Data)e2VT;
				}
				else
				{
					e2V=new Test2Data();
					if(!(e2VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e2VT.getClass());
					}
					e2V.shadowCopy(e2VT);
				}
			}
			else
			{
				e2V=null;
			}
			
			e2T.put(e2K,e2V);
		}
		
		int e3Len=stream.readLen();
		if(this.e3!=null)
		{
			this.e3.clear();
			this.e3.ensureCapacity(e3Len);
		}
		else
		{
			this.e3=new LongObjectMap<Test2Data>(Test2Data[]::new,e3Len);
		}
		
		LongObjectMap<Test2Data> e3T=this.e3;
		for(int e3I=e3Len-1;e3I>=0;--e3I)
		{
			long e3K;
			Test2Data e3V;
			e3K=stream.readLong();
			
			BaseData e3VT=stream.readDataFullNotNull();
			if(e3VT!=null)
			{
				if(e3VT instanceof Test2Data)
				{
					e3V=(Test2Data)e3VT;
				}
				else
				{
					e3V=new Test2Data();
					if(!(e3VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e3VT.getClass());
					}
					e3V.shadowCopy(e3VT);
				}
			}
			else
			{
				e3V=null;
			}
			
			e3T.put(e3K,e3V);
		}
		
		int e4Len=stream.readLen();
		if(this.e4!=null)
		{
			this.e4.clear();
			this.e4.ensureCapacity(e4Len);
		}
		else
		{
			this.e4=new SMap<String,Test2Data>(e4Len);
		}
		
		SMap<String,Test2Data> e4T=this.e4;
		for(int e4I=e4Len-1;e4I>=0;--e4I)
		{
			String e4K;
			Test2Data e4V;
			e4K=stream.readUTF();
			
			BaseData e4VT=stream.readDataFullNotNull();
			if(e4VT!=null)
			{
				if(e4VT instanceof Test2Data)
				{
					e4V=(Test2Data)e4VT;
				}
				else
				{
					e4V=new Test2Data();
					if(!(e4VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e4VT.getClass());
					}
					e4V.shadowCopy(e4VT);
				}
			}
			else
			{
				e4V=null;
			}
			
			e4T.put(e4K,e4V);
		}
		
		int e5Len=stream.readLen();
		if(this.e5!=null)
		{
			this.e5.clear();
			this.e5.ensureCapacity(e5Len);
		}
		else
		{
			this.e5=new IntObjectMap<Test2Data>(Test2Data[]::new,e5Len);
		}
		
		IntObjectMap<Test2Data> e5T=this.e5;
		for(int e5I=e5Len-1;e5I>=0;--e5I)
		{
			int e5K;
			Test2Data e5V;
			e5K=stream.readInt();
			
			BaseData e5VT=stream.readDataFullNotNull();
			if(e5VT!=null)
			{
				if(e5VT instanceof Test2Data)
				{
					e5V=(Test2Data)e5VT;
				}
				else
				{
					e5V=new Test2Data();
					if(!(e5VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e5VT.getClass());
					}
					e5V.shadowCopy(e5VT);
				}
			}
			else
			{
				e5V=null;
			}
			
			e5T.put(e5K,e5V);
		}
		
		int e6Len=stream.readLen();
		if(this.e6!=null)
		{
			this.e6.clear();
			this.e6.ensureCapacity(e6Len);
		}
		else
		{
			this.e6=new IntObjectMap<Test2Data>(Test2Data[]::new,e6Len);
		}
		
		IntObjectMap<Test2Data> e6T=this.e6;
		for(int e6I=e6Len-1;e6I>=0;--e6I)
		{
			Test2Data e6V;
			BaseData e6VT=stream.readDataFullNotNull();
			if(e6VT!=null)
			{
				if(e6VT instanceof Test2Data)
				{
					e6V=(Test2Data)e6VT;
				}
				else
				{
					e6V=new Test2Data();
					if(!(e6VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e6VT.getClass());
					}
					e6V.shadowCopy(e6VT);
				}
			}
			else
			{
				e6V=null;
			}
			
			e6T.put(e6V.a,e6V);
		}
		
		int e7Len=stream.readLen();
		if(this.e7!=null)
		{
			this.e7.clear();
			this.e7.ensureCapacity(e7Len);
		}
		else
		{
			this.e7=new IntObjectMap<Test2Data>(Test2Data[]::new,e7Len);
		}
		
		IntObjectMap<Test2Data> e7T=this.e7;
		for(int e7I=e7Len-1;e7I>=0;--e7I)
		{
			Test2Data e7V;
			BaseData e7VT=stream.readDataFullNotNull();
			if(e7VT!=null)
			{
				if(e7VT instanceof Test2Data)
				{
					e7V=(Test2Data)e7VT;
				}
				else
				{
					e7V=new Test2Data();
					if(!(e7VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e7VT.getClass());
					}
					e7V.shadowCopy(e7VT);
				}
			}
			else
			{
				e7V=null;
			}
			
			e7T.put(e7V.a,e7V);
		}
		
		int e8Len=stream.readLen();
		if(this.e8!=null)
		{
			this.e8.clear();
			this.e8.ensureCapacity(e8Len);
		}
		else
		{
			this.e8=new IntObjectMap<Test2Data>(Test2Data[]::new,e8Len);
		}
		
		IntObjectMap<Test2Data> e8T=this.e8;
		for(int e8I=e8Len-1;e8I>=0;--e8I)
		{
			Test2Data e8V;
			BaseData e8VT=stream.readDataFullNotNull();
			if(e8VT!=null)
			{
				if(e8VT instanceof Test2Data)
				{
					e8V=(Test2Data)e8VT;
				}
				else
				{
					e8V=new Test2Data();
					if(!(e8VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,e8VT.getClass());
					}
					e8V.shadowCopy(e8VT);
				}
			}
			else
			{
				e8V=null;
			}
			
			e8T.put(e8V.a,e8V);
		}
		
		int f1Len=stream.readLen();
		if(this.f1==null || this.f1.length!=f1Len)
		{
			this.f1=new IntList[f1Len];
		}
		IntList[] f1T=this.f1;
		for(int f1I=0;f1I<f1Len;++f1I)
		{
			IntList f1V;
			int f1VLen=stream.readLen();
			f1V=new IntList(f1VLen);
			IntList f1VT=f1V;
			for(int f1VI=f1VLen-1;f1VI>=0;--f1VI)
			{
				int f1VV;
				f1VV=stream.readInt();
				
				f1VT.add(f1VV);
			}
			
			f1T[f1I]=f1V;
		}
		
		int f2Len=stream.readLen();
		if(this.f2==null || this.f2.length!=f2Len)
		{
			this.f2=new SList[f2Len];
		}
		SList<int[]>[] f2T=this.f2;
		for(int f2I=0;f2I<f2Len;++f2I)
		{
			SList<int[]> f2V;
			int f2VLen=stream.readLen();
			f2V=new SList<int[]>(int[][]::new,f2VLen);
			SList<int[]> f2VT=f2V;
			for(int f2VI=f2VLen-1;f2VI>=0;--f2VI)
			{
				int[] f2VV;
				int f2VVLen=stream.readLen();
				f2VV=new int[f2VVLen];
				int[] f2VVT=f2VV;
				for(int f2VVI=0;f2VVI<f2VVLen;++f2VVI)
				{
					int f2VVV;
					f2VVV=stream.readInt();
					
					f2VVT[f2VVI]=f2VVV;
				}
				
				f2VT.add(f2VV);
			}
			
			f2T[f2I]=f2V;
		}
		
		int f3Len=stream.readLen();
		if(this.f3==null || this.f3.length!=f3Len)
		{
			this.f3=new SList[f3Len];
		}
		SList<Test2Data>[] f3T=this.f3;
		for(int f3I=0;f3I<f3Len;++f3I)
		{
			SList<Test2Data> f3V;
			int f3VLen=stream.readLen();
			f3V=new SList<Test2Data>(Test2Data[]::new,f3VLen);
			SList<Test2Data> f3VT=f3V;
			for(int f3VI=f3VLen-1;f3VI>=0;--f3VI)
			{
				Test2Data f3VV;
				BaseData f3VVT=stream.readDataFullNotNull();
				if(f3VVT!=null)
				{
					if(f3VVT instanceof Test2Data)
					{
						f3VV=(Test2Data)f3VVT;
					}
					else
					{
						f3VV=new Test2Data();
						if(!(f3VVT.getClass().isAssignableFrom(Test2Data.class)))
						{
							stream.throwTypeReadError(Test2Data.class,f3VVT.getClass());
						}
						f3VV.shadowCopy(f3VVT);
					}
				}
				else
				{
					f3VV=null;
				}
				
				f3VT.add(f3VV);
			}
			
			f3T[f3I]=f3V;
		}
		
		int f4Len=stream.readLen();
		if(this.f4==null || this.f4.length!=f4Len)
		{
			this.f4=new SList[f4Len];
		}
		SList<Test2Data[]>[] f4T=this.f4;
		for(int f4I=0;f4I<f4Len;++f4I)
		{
			SList<Test2Data[]> f4V;
			int f4VLen=stream.readLen();
			f4V=new SList<Test2Data[]>(Test2Data[][]::new,f4VLen);
			SList<Test2Data[]> f4VT=f4V;
			for(int f4VI=f4VLen-1;f4VI>=0;--f4VI)
			{
				Test2Data[] f4VV;
				int f4VVLen=stream.readLen();
				f4VV=new Test2Data[f4VVLen];
				Test2Data[] f4VVT=f4VV;
				for(int f4VVI=0;f4VVI<f4VVLen;++f4VVI)
				{
					Test2Data f4VVV;
					BaseData f4VVVT=stream.readDataFullNotNull();
					if(f4VVVT!=null)
					{
						if(f4VVVT instanceof Test2Data)
						{
							f4VVV=(Test2Data)f4VVVT;
						}
						else
						{
							f4VVV=new Test2Data();
							if(!(f4VVVT.getClass().isAssignableFrom(Test2Data.class)))
							{
								stream.throwTypeReadError(Test2Data.class,f4VVVT.getClass());
							}
							f4VVV.shadowCopy(f4VVVT);
						}
					}
					else
					{
						f4VVV=null;
					}
					
					f4VVT[f4VVI]=f4VVV;
				}
				
				f4VT.add(f4VV);
			}
			
			f4T[f4I]=f4V;
		}
		
		if(stream.readBoolean())
		{
			int f5Len=stream.readLen();
			if(this.f5==null || this.f5.length!=f5Len)
			{
				this.f5=new SList[f5Len];
			}
			SList<Test2Data>[] f5T=this.f5;
			for(int f5I=0;f5I<f5Len;++f5I)
			{
				SList<Test2Data> f5V;
				if(stream.readBoolean())
				{
					int f5VLen=stream.readLen();
					f5V=new SList<Test2Data>(Test2Data[]::new,f5VLen);
					SList<Test2Data> f5VT=f5V;
					for(int f5VI=f5VLen-1;f5VI>=0;--f5VI)
					{
						Test2Data f5VV;
						if(stream.readBoolean())
						{
							BaseData f5VVT=stream.readDataFullNotNull();
							if(f5VVT!=null)
							{
								if(f5VVT instanceof Test2Data)
								{
									f5VV=(Test2Data)f5VVT;
								}
								else
								{
									f5VV=new Test2Data();
									if(!(f5VVT.getClass().isAssignableFrom(Test2Data.class)))
									{
										stream.throwTypeReadError(Test2Data.class,f5VVT.getClass());
									}
									f5VV.shadowCopy(f5VVT);
								}
							}
							else
							{
								f5VV=null;
							}
						}
						else
						{
							f5VV=null;
						}
						
						f5VT.add(f5VV);
					}
				}
				else
				{
					f5V=null;
				}
				
				f5T[f5I]=f5V;
			}
		}
		else
		{
			this.f5=null;
		}
		
		if(stream.readBoolean())
		{
			int f6Len=stream.readLen();
			if(this.f6==null || this.f6.length!=f6Len)
			{
				this.f6=new SList[f6Len];
			}
			SList<Test2Data[]>[] f6T=this.f6;
			for(int f6I=0;f6I<f6Len;++f6I)
			{
				SList<Test2Data[]> f6V;
				if(stream.readBoolean())
				{
					int f6VLen=stream.readLen();
					f6V=new SList<Test2Data[]>(Test2Data[][]::new,f6VLen);
					SList<Test2Data[]> f6VT=f6V;
					for(int f6VI=f6VLen-1;f6VI>=0;--f6VI)
					{
						Test2Data[] f6VV;
						if(stream.readBoolean())
						{
							int f6VVLen=stream.readLen();
							f6VV=new Test2Data[f6VVLen];
							Test2Data[] f6VVT=f6VV;
							for(int f6VVI=0;f6VVI<f6VVLen;++f6VVI)
							{
								Test2Data f6VVV;
								if(stream.readBoolean())
								{
									BaseData f6VVVT=stream.readDataFullNotNull();
									if(f6VVVT!=null)
									{
										if(f6VVVT instanceof Test2Data)
										{
											f6VVV=(Test2Data)f6VVVT;
										}
										else
										{
											f6VVV=new Test2Data();
											if(!(f6VVVT.getClass().isAssignableFrom(Test2Data.class)))
											{
												stream.throwTypeReadError(Test2Data.class,f6VVVT.getClass());
											}
											f6VVV.shadowCopy(f6VVVT);
										}
									}
									else
									{
										f6VVV=null;
									}
								}
								else
								{
									f6VVV=null;
								}
								
								f6VVT[f6VVI]=f6VVV;
							}
						}
						else
						{
							f6VV=null;
						}
						
						f6VT.add(f6VV);
					}
				}
				else
				{
					f6V=null;
				}
				
				f6T[f6I]=f6V;
			}
		}
		else
		{
			this.f6=null;
		}
		
		int g1Len=stream.readLen();
		if(this.g1!=null)
		{
			this.g1.clear();
			this.g1.ensureCapacity(g1Len);
		}
		else
		{
			this.g1=new IntObjectMap<IntObjectMap<Test2Data>>(IntObjectMap[]::new,g1Len);
		}
		
		IntObjectMap<IntObjectMap<Test2Data>> g1T=this.g1;
		for(int g1I=g1Len-1;g1I>=0;--g1I)
		{
			int g1K;
			IntObjectMap<Test2Data> g1V;
			g1K=stream.readInt();
			
			int g1VLen=stream.readLen();
			g1V=new IntObjectMap<Test2Data>(Test2Data[]::new,g1VLen);
			IntObjectMap<Test2Data> g1VT=g1V;
			for(int g1VI=g1VLen-1;g1VI>=0;--g1VI)
			{
				int g1VK;
				Test2Data g1VV;
				g1VK=stream.readInt();
				
				BaseData g1VVT=stream.readDataFullNotNull();
				if(g1VVT!=null)
				{
					if(g1VVT instanceof Test2Data)
					{
						g1VV=(Test2Data)g1VVT;
					}
					else
					{
						g1VV=new Test2Data();
						if(!(g1VVT.getClass().isAssignableFrom(Test2Data.class)))
						{
							stream.throwTypeReadError(Test2Data.class,g1VVT.getClass());
						}
						g1VV.shadowCopy(g1VVT);
					}
				}
				else
				{
					g1VV=null;
				}
				
				g1VT.put(g1VK,g1VV);
			}
			
			g1T.put(g1K,g1V);
		}
		
		int h1Len=stream.readLen();
		if(this.h1!=null)
		{
			this.h1.clear();
			this.h1.ensureCapacity(h1Len);
		}
		else
		{
			this.h1=new IntQueue(h1Len);
		}
		
		IntQueue h1T=this.h1;
		for(int h1I=h1Len-1;h1I>=0;--h1I)
		{
			int h1V;
			h1V=stream.readInt();
			
			h1T.offer(h1V);
		}
		
		int h2Len=stream.readLen();
		if(this.h2!=null)
		{
			this.h2.clear();
			this.h2.ensureCapacity(h2Len);
		}
		else
		{
			this.h2=new SQueue<Test2Data>(Test2Data[]::new,h2Len);
		}
		
		SQueue<Test2Data> h2T=this.h2;
		for(int h2I=h2Len-1;h2I>=0;--h2I)
		{
			Test2Data h2V;
			BaseData h2VT=stream.readDataFullNotNull();
			if(h2VT!=null)
			{
				if(h2VT instanceof Test2Data)
				{
					h2V=(Test2Data)h2VT;
				}
				else
				{
					h2V=new Test2Data();
					if(!(h2VT.getClass().isAssignableFrom(Test2Data.class)))
					{
						stream.throwTypeReadError(Test2Data.class,h2VT.getClass());
					}
					h2V.shadowCopy(h2VT);
				}
			}
			else
			{
				h2V=null;
			}
			
			h2T.offer(h2V);
		}
		
		int h3Len=stream.readLen();
		if(this.h3!=null)
		{
			this.h3.clear();
			this.h3.ensureCapacity(h3Len);
		}
		else
		{
			this.h3=new IntObjectMap<SQueue<Test2Data>>(SQueue[]::new,h3Len);
		}
		
		IntObjectMap<SQueue<Test2Data>> h3T=this.h3;
		for(int h3I=h3Len-1;h3I>=0;--h3I)
		{
			int h3K;
			SQueue<Test2Data> h3V;
			h3K=stream.readInt();
			
			int h3VLen=stream.readLen();
			h3V=new SQueue<Test2Data>(Test2Data[]::new,h3VLen);
			SQueue<Test2Data> h3VT=h3V;
			for(int h3VI=h3VLen-1;h3VI>=0;--h3VI)
			{
				Test2Data h3VV;
				BaseData h3VVT=stream.readDataFullNotNull();
				if(h3VVT!=null)
				{
					if(h3VVT instanceof Test2Data)
					{
						h3VV=(Test2Data)h3VVT;
					}
					else
					{
						h3VV=new Test2Data();
						if(!(h3VVT.getClass().isAssignableFrom(Test2Data.class)))
						{
							stream.throwTypeReadError(Test2Data.class,h3VVT.getClass());
						}
						h3VV.shadowCopy(h3VVT);
					}
				}
				else
				{
					h3VV=null;
				}
				
				h3VT.offer(h3VV);
			}
			
			h3T.put(h3K,h3V);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeBoolean(this.a1);
		
		stream.writeByte(this.a2);
		
		stream.writeInt(this.a6);
		
		stream.writeFloat(this.a7);
		
		stream.writeDouble(this.a8);
		
		stream.writeLong(this.a9);
		
		stream.writeUTF(this.a10);
		
		if(this.b1!=null)
		{
			stream.writeDataFullNotNull(this.b1);
		}
		else
		{
			nullObjError("b1");
		}
		
		if(this.b2!=null)
		{
			stream.writeDataFullNotNull(this.b2);
		}
		else
		{
			nullObjError("b2");
		}
		
		if(this.b3!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.b3);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.b4!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.b4);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.c1!=null)
		{
			stream.writeLen(this.c1.length);
			stream.writeByteArr(this.c1);
		}
		else
		{
			nullObjError("c1");
		}
		
		if(this.c2!=null)
		{
			int[] c2T=this.c2;
			stream.writeLen(c2T.length);
			for(int c2VI=0,c2VLen=c2T.length;c2VI<c2VLen;++c2VI)
			{
				int c2V=c2T[c2VI];
				stream.writeInt(c2V);
				
			}
		}
		else
		{
			nullObjError("c2");
		}
		
		if(this.c3!=null)
		{
			long[] c3T=this.c3;
			stream.writeLen(c3T.length);
			for(int c3VI=0,c3VLen=c3T.length;c3VI<c3VLen;++c3VI)
			{
				long c3V=c3T[c3VI];
				stream.writeLong(c3V);
				
			}
		}
		else
		{
			nullObjError("c3");
		}
		
		if(this.c4!=null)
		{
			String[] c4T=this.c4;
			stream.writeLen(c4T.length);
			for(int c4VI=0,c4VLen=c4T.length;c4VI<c4VLen;++c4VI)
			{
				String c4V=c4T[c4VI];
				stream.writeUTF(c4V);
				
			}
		}
		else
		{
			nullObjError("c4");
		}
		
		if(this.c5!=null)
		{
			int[][] c5T=this.c5;
			stream.writeLen(c5T.length);
			for(int c5VI=0,c5VLen=c5T.length;c5VI<c5VLen;++c5VI)
			{
				int[] c5V=c5T[c5VI];
				if(c5V!=null)
				{
					int[] c5VT=c5V;
					stream.writeLen(c5VT.length);
					for(int c5VVI=0,c5VVLen=c5VT.length;c5VVI<c5VVLen;++c5VVI)
					{
						int c5VV=c5VT[c5VVI];
						stream.writeInt(c5VV);
						
					}
				}
				else
				{
					nullObjError("c5V");
				}
				
			}
		}
		else
		{
			nullObjError("c5");
		}
		
		if(this.c6!=null)
		{
			int[][][] c6T=this.c6;
			stream.writeLen(c6T.length);
			for(int c6VI=0,c6VLen=c6T.length;c6VI<c6VLen;++c6VI)
			{
				int[][] c6V=c6T[c6VI];
				if(c6V!=null)
				{
					int[][] c6VT=c6V;
					stream.writeLen(c6VT.length);
					for(int c6VVI=0,c6VVLen=c6VT.length;c6VVI<c6VVLen;++c6VVI)
					{
						int[] c6VV=c6VT[c6VVI];
						if(c6VV!=null)
						{
							int[] c6VVT=c6VV;
							stream.writeLen(c6VVT.length);
							for(int c6VVVI=0,c6VVVLen=c6VVT.length;c6VVVI<c6VVVLen;++c6VVVI)
							{
								int c6VVV=c6VVT[c6VVVI];
								stream.writeInt(c6VVV);
								
							}
						}
						else
						{
							nullObjError("c6VV");
						}
						
					}
				}
				else
				{
					nullObjError("c6V");
				}
				
			}
		}
		else
		{
			nullObjError("c6");
		}
		
		if(this.d1!=null)
		{
			stream.writeLen(this.d1.size());
			if(!this.d1.isEmpty())
			{
				int[] d1VValues=this.d1.getValues();
				for(int d1VI=0,d1VLen=this.d1.length();d1VI<d1VLen;++d1VI)
				{
					int d1V=d1VValues[d1VI];
					stream.writeInt(d1V);
					
				}
			}
		}
		else
		{
			nullObjError("d1");
		}
		
		if(this.d2!=null)
		{
			stream.writeLen(this.d2.size());
			if(!this.d2.isEmpty())
			{
				long[] d2VValues=this.d2.getValues();
				for(int d2VI=0,d2VLen=this.d2.length();d2VI<d2VLen;++d2VI)
				{
					long d2V=d2VValues[d2VI];
					stream.writeLong(d2V);
					
				}
			}
		}
		else
		{
			nullObjError("d2");
		}
		
		if(this.d3!=null)
		{
			stream.writeLen(this.d3.size());
			if(!this.d3.isEmpty())
			{
				Object[] d3VValues=this.d3.getValues();
				for(int d3VI=0,d3VLen=this.d3.length();d3VI<d3VLen;++d3VI)
				{
					String d3V=(String)d3VValues[d3VI];
					stream.writeUTF(d3V);
					
				}
			}
		}
		else
		{
			nullObjError("d3");
		}
		
		if(this.d4!=null)
		{
			stream.writeLen(this.d4.size());
			if(!this.d4.isEmpty())
			{
				Object[] d4VValues=this.d4.getValues();
				for(int d4VI=0,d4VLen=this.d4.length();d4VI<d4VLen;++d4VI)
				{
					Test2Data d4V=(Test2Data)d4VValues[d4VI];
					if(d4V!=null)
					{
						stream.writeDataFullNotNull(d4V);
					}
					else
					{
						nullObjError("d4V");
					}
					
				}
			}
		}
		else
		{
			nullObjError("d4");
		}
		
		if(this.d5!=null)
		{
			stream.writeLen(this.d5.size());
			if(!this.d5.isEmpty())
			{
				Object[] d5VValues=this.d5.getValues();
				for(int d5VI=0,d5VLen=this.d5.length();d5VI<d5VLen;++d5VI)
				{
					Test2Data d5V=(Test2Data)d5VValues[d5VI];
					if(d5V!=null)
					{
						stream.writeDataFullNotNull(d5V);
					}
					else
					{
						nullObjError("d5V");
					}
					
				}
			}
		}
		else
		{
			nullObjError("d5");
		}
		
		if(this.d6!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.d6.size());
			if(!this.d6.isEmpty())
			{
				Object[] d6VValues=this.d6.getValues();
				for(int d6VI=0,d6VLen=this.d6.length();d6VI<d6VLen;++d6VI)
				{
					Test2Data d6V=(Test2Data)d6VValues[d6VI];
					if(d6V!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(d6V);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.d7!=null)
		{
			stream.writeLen(this.d7.size());
			if(!this.d7.isEmpty())
			{
				int d7VFreeValue=this.d7.getFreeValue();
				int[] d7VKeys=this.d7.getKeys();
				for(int d7VI=d7VKeys.length-1;d7VI>=0;--d7VI)
				{
					int d7V=d7VKeys[d7VI];
					if(d7V!=d7VFreeValue)
					{
						stream.writeInt(d7V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("d7");
		}
		
		if(this.d8!=null)
		{
			stream.writeLen(this.d8.size());
			if(!this.d8.isEmpty())
			{
				long d8VFreeValue=this.d8.getFreeValue();
				long[] d8VKeys=this.d8.getKeys();
				for(int d8VI=d8VKeys.length-1;d8VI>=0;--d8VI)
				{
					long d8V=d8VKeys[d8VI];
					if(d8V!=d8VFreeValue)
					{
						stream.writeLong(d8V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("d8");
		}
		
		if(this.d9!=null)
		{
			stream.writeLen(this.d9.size());
			if(!this.d9.isEmpty())
			{
				Object[] d9VKeys=this.d9.getKeys();
				for(int d9VI=d9VKeys.length-1;d9VI>=0;--d9VI)
				{
					if(d9VKeys[d9VI]!=null)
					{
						String d9V=(String)d9VKeys[d9VI];
						stream.writeUTF(d9V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("d9");
		}
		
		if(this.d10!=null)
		{
			stream.writeLen(this.d10.size());
			if(!this.d10.isEmpty())
			{
				Object[] d10VKeys=this.d10.getKeys();
				for(int d10VI=d10VKeys.length-1;d10VI>=0;--d10VI)
				{
					if(d10VKeys[d10VI]!=null)
					{
						Test2Data d10V=(Test2Data)d10VKeys[d10VI];
						if(d10V!=null)
						{
							stream.writeDataFullNotNull(d10V);
						}
						else
						{
							nullObjError("d10V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("d10");
		}
		
		if(this.d11!=null)
		{
			stream.writeLen(this.d11.size());
			if(!this.d11.isEmpty())
			{
				Object[] d11VKeys=this.d11.getKeys();
				for(int d11VI=d11VKeys.length-1;d11VI>=0;--d11VI)
				{
					if(d11VKeys[d11VI]!=null)
					{
						Test2Data d11V=(Test2Data)d11VKeys[d11VI];
						if(d11V!=null)
						{
							stream.writeDataFullNotNull(d11V);
						}
						else
						{
							nullObjError("d11V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("d11");
		}
		
		if(this.e1!=null)
		{
			stream.writeLen(this.e1.size());
			if(!this.e1.isEmpty())
			{
				int e1KFreeValue=this.e1.getFreeValue();
				long[] e1KTable=this.e1.getTable();
				long e1KEntry;
				for(int e1KI=e1KTable.length-1;e1KI>=0;--e1KI)
				{
					e1KEntry=e1KTable[e1KI];
					int e1K=(int)e1KEntry;
					if(e1K!=e1KFreeValue)
					{
						int e1V=(int)(e1KEntry>>>32);
						stream.writeInt(e1K);
						
						stream.writeInt(e1V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("e1");
		}
		
		if(this.e12!=null)
		{
			stream.writeLen(this.e12.size());
			if(!this.e12.isEmpty())
			{
				long e12KFreeValue=this.e12.getFreeValue();
				long[] e12KKeys=this.e12.getKeys();
				long[] e12VValues=this.e12.getValues();
				for(int e12KI=e12KKeys.length-1;e12KI>=0;--e12KI)
				{
					long e12K=e12KKeys[e12KI];
					if(e12K!=e12KFreeValue)
					{
						long e12V=e12VValues[e12KI];
						stream.writeLong(e12K);
						
						stream.writeLong(e12V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("e12");
		}
		
		if(this.e2!=null)
		{
			stream.writeLen(this.e2.size());
			if(!this.e2.isEmpty())
			{
				int e2KFreeValue=this.e2.getFreeValue();
				int[] e2KKeys=this.e2.getKeys();
				Object[] e2VValues=this.e2.getValues();
				for(int e2KI=e2KKeys.length-1;e2KI>=0;--e2KI)
				{
					int e2K=e2KKeys[e2KI];
					if(e2K!=e2KFreeValue)
					{
						Test2Data e2V=(Test2Data)e2VValues[e2KI];
						stream.writeInt(e2K);
						
						if(e2V!=null)
						{
							stream.writeDataFullNotNull(e2V);
						}
						else
						{
							nullObjError("e2V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e2");
		}
		
		if(this.e3!=null)
		{
			stream.writeLen(this.e3.size());
			if(!this.e3.isEmpty())
			{
				long e3KFreeValue=this.e3.getFreeValue();
				long[] e3KKeys=this.e3.getKeys();
				Object[] e3VValues=this.e3.getValues();
				for(int e3KI=e3KKeys.length-1;e3KI>=0;--e3KI)
				{
					long e3K=e3KKeys[e3KI];
					if(e3K!=e3KFreeValue)
					{
						Test2Data e3V=(Test2Data)e3VValues[e3KI];
						stream.writeLong(e3K);
						
						if(e3V!=null)
						{
							stream.writeDataFullNotNull(e3V);
						}
						else
						{
							nullObjError("e3V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e3");
		}
		
		if(this.e4!=null)
		{
			stream.writeLen(this.e4.size());
			if(!this.e4.isEmpty())
			{
				Object[] e4KTable=this.e4.getTable();
				for(int e4KI=e4KTable.length-2;e4KI>=0;e4KI-=2)
				{
					if(e4KTable[e4KI]!=null)
					{
						String e4K=(String)e4KTable[e4KI];
						Test2Data e4V=(Test2Data)e4KTable[e4KI+1];
						stream.writeUTF(e4K);
						
						if(e4V!=null)
						{
							stream.writeDataFullNotNull(e4V);
						}
						else
						{
							nullObjError("e4V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e4");
		}
		
		if(this.e5!=null)
		{
			stream.writeLen(this.e5.size());
			if(!this.e5.isEmpty())
			{
				int e5KFreeValue=this.e5.getFreeValue();
				int[] e5KKeys=this.e5.getKeys();
				Object[] e5VValues=this.e5.getValues();
				for(int e5KI=e5KKeys.length-1;e5KI>=0;--e5KI)
				{
					int e5K=e5KKeys[e5KI];
					if(e5K!=e5KFreeValue)
					{
						Test2Data e5V=(Test2Data)e5VValues[e5KI];
						stream.writeInt(e5K);
						
						if(e5V!=null)
						{
							stream.writeDataFullNotNull(e5V);
						}
						else
						{
							nullObjError("e5V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e5");
		}
		
		if(this.e6!=null)
		{
			stream.writeLen(this.e6.size());
			if(!this.e6.isEmpty())
			{
				Object[] e6VValues=this.e6.getValues();
				for(int e6VI=e6VValues.length-1;e6VI>=0;--e6VI)
				{
					if(e6VValues[e6VI]!=null)
					{
						Test2Data e6V=(Test2Data)e6VValues[e6VI];
						if(e6V!=null)
						{
							stream.writeDataFullNotNull(e6V);
						}
						else
						{
							nullObjError("e6V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e6");
		}
		
		if(this.e7!=null)
		{
			stream.writeLen(this.e7.size());
			if(!this.e7.isEmpty())
			{
				Object[] e7VValues=this.e7.getValues();
				for(int e7VI=e7VValues.length-1;e7VI>=0;--e7VI)
				{
					if(e7VValues[e7VI]!=null)
					{
						Test2Data e7V=(Test2Data)e7VValues[e7VI];
						if(e7V!=null)
						{
							stream.writeDataFullNotNull(e7V);
						}
						else
						{
							nullObjError("e7V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e7");
		}
		
		if(this.e8!=null)
		{
			stream.writeLen(this.e8.size());
			if(!this.e8.isEmpty())
			{
				Object[] e8VValues=this.e8.getValues();
				for(int e8VI=e8VValues.length-1;e8VI>=0;--e8VI)
				{
					if(e8VValues[e8VI]!=null)
					{
						Test2Data e8V=(Test2Data)e8VValues[e8VI];
						if(e8V!=null)
						{
							stream.writeDataFullNotNull(e8V);
						}
						else
						{
							nullObjError("e8V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e8");
		}
		
		if(this.f1!=null)
		{
			IntList[] f1T=this.f1;
			stream.writeLen(f1T.length);
			for(int f1VI=0,f1VLen=f1T.length;f1VI<f1VLen;++f1VI)
			{
				IntList f1V=f1T[f1VI];
				if(f1V!=null)
				{
					stream.writeLen(f1V.size());
					if(!f1V.isEmpty())
					{
						int[] f1VVValues=f1V.getValues();
						for(int f1VVI=0,f1VVLen=f1V.length();f1VVI<f1VVLen;++f1VVI)
						{
							int f1VV=f1VVValues[f1VVI];
							stream.writeInt(f1VV);
							
						}
					}
				}
				else
				{
					nullObjError("f1V");
				}
				
			}
		}
		else
		{
			nullObjError("f1");
		}
		
		if(this.f2!=null)
		{
			SList<int[]>[] f2T=this.f2;
			stream.writeLen(f2T.length);
			for(int f2VI=0,f2VLen=f2T.length;f2VI<f2VLen;++f2VI)
			{
				SList<int[]> f2V=f2T[f2VI];
				if(f2V!=null)
				{
					stream.writeLen(f2V.size());
					if(!f2V.isEmpty())
					{
						Object[] f2VVValues=f2V.getValues();
						for(int f2VVI=0,f2VVLen=f2V.length();f2VVI<f2VVLen;++f2VVI)
						{
							int[] f2VV=(int[])f2VVValues[f2VVI];
							if(f2VV!=null)
							{
								int[] f2VVT=f2VV;
								stream.writeLen(f2VVT.length);
								for(int f2VVVI=0,f2VVVLen=f2VVT.length;f2VVVI<f2VVVLen;++f2VVVI)
								{
									int f2VVV=f2VVT[f2VVVI];
									stream.writeInt(f2VVV);
									
								}
							}
							else
							{
								nullObjError("f2VV");
							}
							
						}
					}
				}
				else
				{
					nullObjError("f2V");
				}
				
			}
		}
		else
		{
			nullObjError("f2");
		}
		
		if(this.f3!=null)
		{
			SList<Test2Data>[] f3T=this.f3;
			stream.writeLen(f3T.length);
			for(int f3VI=0,f3VLen=f3T.length;f3VI<f3VLen;++f3VI)
			{
				SList<Test2Data> f3V=f3T[f3VI];
				if(f3V!=null)
				{
					stream.writeLen(f3V.size());
					if(!f3V.isEmpty())
					{
						Object[] f3VVValues=f3V.getValues();
						for(int f3VVI=0,f3VVLen=f3V.length();f3VVI<f3VVLen;++f3VVI)
						{
							Test2Data f3VV=(Test2Data)f3VVValues[f3VVI];
							if(f3VV!=null)
							{
								stream.writeDataFullNotNull(f3VV);
							}
							else
							{
								nullObjError("f3VV");
							}
							
						}
					}
				}
				else
				{
					nullObjError("f3V");
				}
				
			}
		}
		else
		{
			nullObjError("f3");
		}
		
		if(this.f4!=null)
		{
			SList<Test2Data[]>[] f4T=this.f4;
			stream.writeLen(f4T.length);
			for(int f4VI=0,f4VLen=f4T.length;f4VI<f4VLen;++f4VI)
			{
				SList<Test2Data[]> f4V=f4T[f4VI];
				if(f4V!=null)
				{
					stream.writeLen(f4V.size());
					if(!f4V.isEmpty())
					{
						Object[] f4VVValues=f4V.getValues();
						for(int f4VVI=0,f4VVLen=f4V.length();f4VVI<f4VVLen;++f4VVI)
						{
							Test2Data[] f4VV=(Test2Data[])f4VVValues[f4VVI];
							if(f4VV!=null)
							{
								Test2Data[] f4VVT=f4VV;
								stream.writeLen(f4VVT.length);
								for(int f4VVVI=0,f4VVVLen=f4VVT.length;f4VVVI<f4VVVLen;++f4VVVI)
								{
									Test2Data f4VVV=f4VVT[f4VVVI];
									if(f4VVV!=null)
									{
										stream.writeDataFullNotNull(f4VVV);
									}
									else
									{
										nullObjError("f4VVV");
									}
									
								}
							}
							else
							{
								nullObjError("f4VV");
							}
							
						}
					}
				}
				else
				{
					nullObjError("f4V");
				}
				
			}
		}
		else
		{
			nullObjError("f4");
		}
		
		if(this.f5!=null)
		{
			stream.writeBoolean(true);
			SList<Test2Data>[] f5T=this.f5;
			stream.writeLen(f5T.length);
			for(int f5VI=0,f5VLen=f5T.length;f5VI<f5VLen;++f5VI)
			{
				SList<Test2Data> f5V=f5T[f5VI];
				if(f5V!=null)
				{
					stream.writeBoolean(true);
					stream.writeLen(f5V.size());
					if(!f5V.isEmpty())
					{
						Object[] f5VVValues=f5V.getValues();
						for(int f5VVI=0,f5VVLen=f5V.length();f5VVI<f5VVLen;++f5VVI)
						{
							Test2Data f5VV=(Test2Data)f5VVValues[f5VVI];
							if(f5VV!=null)
							{
								stream.writeBoolean(true);
								stream.writeDataFullNotNull(f5VV);
							}
							else
							{
								stream.writeBoolean(false);
							}
							
						}
					}
				}
				else
				{
					stream.writeBoolean(false);
				}
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.f6!=null)
		{
			stream.writeBoolean(true);
			SList<Test2Data[]>[] f6T=this.f6;
			stream.writeLen(f6T.length);
			for(int f6VI=0,f6VLen=f6T.length;f6VI<f6VLen;++f6VI)
			{
				SList<Test2Data[]> f6V=f6T[f6VI];
				if(f6V!=null)
				{
					stream.writeBoolean(true);
					stream.writeLen(f6V.size());
					if(!f6V.isEmpty())
					{
						Object[] f6VVValues=f6V.getValues();
						for(int f6VVI=0,f6VVLen=f6V.length();f6VVI<f6VVLen;++f6VVI)
						{
							Test2Data[] f6VV=(Test2Data[])f6VVValues[f6VVI];
							if(f6VV!=null)
							{
								stream.writeBoolean(true);
								Test2Data[] f6VVT=f6VV;
								stream.writeLen(f6VVT.length);
								for(int f6VVVI=0,f6VVVLen=f6VVT.length;f6VVVI<f6VVVLen;++f6VVVI)
								{
									Test2Data f6VVV=f6VVT[f6VVVI];
									if(f6VVV!=null)
									{
										stream.writeBoolean(true);
										stream.writeDataFullNotNull(f6VVV);
									}
									else
									{
										stream.writeBoolean(false);
									}
									
								}
							}
							else
							{
								stream.writeBoolean(false);
							}
							
						}
					}
				}
				else
				{
					stream.writeBoolean(false);
				}
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.g1!=null)
		{
			stream.writeLen(this.g1.size());
			if(!this.g1.isEmpty())
			{
				int g1KFreeValue=this.g1.getFreeValue();
				int[] g1KKeys=this.g1.getKeys();
				Object[] g1VValues=this.g1.getValues();
				for(int g1KI=g1KKeys.length-1;g1KI>=0;--g1KI)
				{
					int g1K=g1KKeys[g1KI];
					if(g1K!=g1KFreeValue)
					{
						IntObjectMap<Test2Data> g1V=(IntObjectMap<Test2Data>)g1VValues[g1KI];
						stream.writeInt(g1K);
						
						if(g1V!=null)
						{
							stream.writeLen(g1V.size());
							if(!g1V.isEmpty())
							{
								int g1VKFreeValue=g1V.getFreeValue();
								int[] g1VKKeys=g1V.getKeys();
								Object[] g1VVValues=g1V.getValues();
								for(int g1VKI=g1VKKeys.length-1;g1VKI>=0;--g1VKI)
								{
									int g1VK=g1VKKeys[g1VKI];
									if(g1VK!=g1VKFreeValue)
									{
										Test2Data g1VV=(Test2Data)g1VVValues[g1VKI];
										stream.writeInt(g1VK);
										
										if(g1VV!=null)
										{
											stream.writeDataFullNotNull(g1VV);
										}
										else
										{
											nullObjError("g1VV");
										}
										
									}
								}
							}
						}
						else
						{
							nullObjError("g1V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("g1");
		}
		
		if(this.h1!=null)
		{
			stream.writeLen(this.h1.size());
			if(!this.h1.isEmpty())
			{
				int[] h1VValues=this.h1.getValues();
				int h1VMark=this.h1.getMark();
				int h1VStart=this.h1.getStart();
				for(int h1VI=0,h1VLen=this.h1.length();h1VI<h1VLen;++h1VI)
				{
					int h1V=h1VValues[(h1VI+h1VStart)&h1VMark];
					stream.writeInt(h1V);
					
				}
			}
		}
		else
		{
			nullObjError("h1");
		}
		
		if(this.h2!=null)
		{
			stream.writeLen(this.h2.size());
			if(!this.h2.isEmpty())
			{
				Object[] h2VValues=this.h2.getValues();
				int h2VMark=this.h2.getMark();
				int h2VStart=this.h2.getStart();
				for(int h2VI=0,h2VLen=this.h2.length();h2VI<h2VLen;++h2VI)
				{
					Test2Data h2V=(Test2Data)h2VValues[(h2VI+h2VStart)&h2VMark];
					if(h2V!=null)
					{
						stream.writeDataFullNotNull(h2V);
					}
					else
					{
						nullObjError("h2V");
					}
					
				}
			}
		}
		else
		{
			nullObjError("h2");
		}
		
		if(this.h3!=null)
		{
			stream.writeLen(this.h3.size());
			if(!this.h3.isEmpty())
			{
				int h3KFreeValue=this.h3.getFreeValue();
				int[] h3KKeys=this.h3.getKeys();
				Object[] h3VValues=this.h3.getValues();
				for(int h3KI=h3KKeys.length-1;h3KI>=0;--h3KI)
				{
					int h3K=h3KKeys[h3KI];
					if(h3K!=h3KFreeValue)
					{
						SQueue<Test2Data> h3V=(SQueue<Test2Data>)h3VValues[h3KI];
						stream.writeInt(h3K);
						
						if(h3V!=null)
						{
							stream.writeLen(h3V.size());
							if(!h3V.isEmpty())
							{
								Object[] h3VVValues=h3V.getValues();
								int h3VVMark=h3V.getMark();
								int h3VVStart=h3V.getStart();
								for(int h3VVI=0,h3VVLen=h3V.length();h3VVI<h3VVLen;++h3VVI)
								{
									Test2Data h3VV=(Test2Data)h3VVValues[(h3VVI+h3VVStart)&h3VVMark];
									if(h3VV!=null)
									{
										stream.writeDataFullNotNull(h3VV);
									}
									else
									{
										nullObjError("h3VV");
									}
									
								}
							}
						}
						else
						{
							nullObjError("h3V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("h3");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@SuppressWarnings("unchecked")
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.a1=stream.readBoolean();
		
		this.a2=stream.readByte();
		
		this.a6=stream.readInt();
		
		this.a7=stream.readFloat();
		
		this.a8=stream.readDouble();
		
		this.a9=stream.readLong();
		
		this.a10=stream.readUTF();
		
		this.b1=(Test2Data)stream.readDataSimpleNotNull();
		
		this.b2=(Test2Data)stream.readDataSimpleNotNull();
		
		if(stream.readBoolean())
		{
			this.b3=(Test2Data)stream.readDataSimpleNotNull();
		}
		else
		{
			this.b3=null;
		}
		
		if(stream.readBoolean())
		{
			this.b4=(Test2Data)stream.readDataSimpleNotNull();
		}
		else
		{
			this.b4=null;
		}
		
		int c1Len=stream.readLen();
		this.c1=stream.readByteArr(c1Len);
		
		int c2Len=stream.readLen();
		if(this.c2==null || this.c2.length!=c2Len)
		{
			this.c2=new int[c2Len];
		}
		int[] c2T=this.c2;
		for(int c2I=0;c2I<c2Len;++c2I)
		{
			int c2V;
			c2V=stream.readInt();
			
			c2T[c2I]=c2V;
		}
		
		int c3Len=stream.readLen();
		if(this.c3==null || this.c3.length!=c3Len)
		{
			this.c3=new long[c3Len];
		}
		long[] c3T=this.c3;
		for(int c3I=0;c3I<c3Len;++c3I)
		{
			long c3V;
			c3V=stream.readLong();
			
			c3T[c3I]=c3V;
		}
		
		int c4Len=stream.readLen();
		if(this.c4==null || this.c4.length!=c4Len)
		{
			this.c4=new String[c4Len];
		}
		String[] c4T=this.c4;
		for(int c4I=0;c4I<c4Len;++c4I)
		{
			String c4V;
			c4V=stream.readUTF();
			
			c4T[c4I]=c4V;
		}
		
		int c5Len=stream.readLen();
		if(this.c5==null || this.c5.length!=c5Len)
		{
			this.c5=new int[c5Len][];
		}
		int[][] c5T=this.c5;
		for(int c5I=0;c5I<c5Len;++c5I)
		{
			int[] c5V;
			int c5VLen=stream.readLen();
			c5V=new int[c5VLen];
			int[] c5VT=c5V;
			for(int c5VI=0;c5VI<c5VLen;++c5VI)
			{
				int c5VV;
				c5VV=stream.readInt();
				
				c5VT[c5VI]=c5VV;
			}
			
			c5T[c5I]=c5V;
		}
		
		int c6Len=stream.readLen();
		if(this.c6==null || this.c6.length!=c6Len)
		{
			this.c6=new int[c6Len][][];
		}
		int[][][] c6T=this.c6;
		for(int c6I=0;c6I<c6Len;++c6I)
		{
			int[][] c6V;
			int c6VLen=stream.readLen();
			c6V=new int[c6VLen][];
			int[][] c6VT=c6V;
			for(int c6VI=0;c6VI<c6VLen;++c6VI)
			{
				int[] c6VV;
				int c6VVLen=stream.readLen();
				c6VV=new int[c6VVLen];
				int[] c6VVT=c6VV;
				for(int c6VVI=0;c6VVI<c6VVLen;++c6VVI)
				{
					int c6VVV;
					c6VVV=stream.readInt();
					
					c6VVT[c6VVI]=c6VVV;
				}
				
				c6VT[c6VI]=c6VV;
			}
			
			c6T[c6I]=c6V;
		}
		
		int d1Len=stream.readLen();
		if(this.d1!=null)
		{
			this.d1.clear();
			this.d1.ensureCapacity(d1Len);
		}
		else
		{
			this.d1=new IntList(d1Len);
		}
		
		IntList d1T=this.d1;
		for(int d1I=d1Len-1;d1I>=0;--d1I)
		{
			int d1V;
			d1V=stream.readInt();
			
			d1T.add(d1V);
		}
		
		int d2Len=stream.readLen();
		if(this.d2!=null)
		{
			this.d2.clear();
			this.d2.ensureCapacity(d2Len);
		}
		else
		{
			this.d2=new LongList(d2Len);
		}
		
		LongList d2T=this.d2;
		for(int d2I=d2Len-1;d2I>=0;--d2I)
		{
			long d2V;
			d2V=stream.readLong();
			
			d2T.add(d2V);
		}
		
		int d3Len=stream.readLen();
		if(this.d3!=null)
		{
			this.d3.clear();
			this.d3.ensureCapacity(d3Len);
		}
		else
		{
			this.d3=new SList<String>(String[]::new,d3Len);
		}
		
		SList<String> d3T=this.d3;
		for(int d3I=d3Len-1;d3I>=0;--d3I)
		{
			String d3V;
			d3V=stream.readUTF();
			
			d3T.add(d3V);
		}
		
		int d4Len=stream.readLen();
		if(this.d4!=null)
		{
			this.d4.clear();
			this.d4.ensureCapacity(d4Len);
		}
		else
		{
			this.d4=new SList<Test2Data>(Test2Data[]::new,d4Len);
		}
		
		SList<Test2Data> d4T=this.d4;
		for(int d4I=d4Len-1;d4I>=0;--d4I)
		{
			Test2Data d4V;
			d4V=(Test2Data)stream.readDataSimpleNotNull();
			
			d4T.add(d4V);
		}
		
		int d5Len=stream.readLen();
		if(this.d5!=null)
		{
			this.d5.clear();
			this.d5.ensureCapacity(d5Len);
		}
		else
		{
			this.d5=new SList<Test2Data>(Test2Data[]::new,d5Len);
		}
		
		SList<Test2Data> d5T=this.d5;
		for(int d5I=d5Len-1;d5I>=0;--d5I)
		{
			Test2Data d5V;
			d5V=(Test2Data)stream.readDataSimpleNotNull();
			
			d5T.add(d5V);
		}
		
		if(stream.readBoolean())
		{
			int d6Len=stream.readLen();
			if(this.d6!=null)
			{
				this.d6.clear();
				this.d6.ensureCapacity(d6Len);
			}
			else
			{
				this.d6=new SList<Test2Data>(Test2Data[]::new,d6Len);
			}
			
			SList<Test2Data> d6T=this.d6;
			for(int d6I=d6Len-1;d6I>=0;--d6I)
			{
				Test2Data d6V;
				if(stream.readBoolean())
				{
					d6V=(Test2Data)stream.readDataSimpleNotNull();
				}
				else
				{
					d6V=null;
				}
				
				d6T.add(d6V);
			}
		}
		else
		{
			this.d6=null;
		}
		
		int d7Len=stream.readLen();
		if(this.d7!=null)
		{
			this.d7.clear();
			this.d7.ensureCapacity(d7Len);
		}
		else
		{
			this.d7=new IntSet(d7Len);
		}
		
		IntSet d7T=this.d7;
		for(int d7I=d7Len-1;d7I>=0;--d7I)
		{
			int d7V;
			d7V=stream.readInt();
			
			d7T.add(d7V);
		}
		
		int d8Len=stream.readLen();
		if(this.d8!=null)
		{
			this.d8.clear();
			this.d8.ensureCapacity(d8Len);
		}
		else
		{
			this.d8=new LongSet(d8Len);
		}
		
		LongSet d8T=this.d8;
		for(int d8I=d8Len-1;d8I>=0;--d8I)
		{
			long d8V;
			d8V=stream.readLong();
			
			d8T.add(d8V);
		}
		
		int d9Len=stream.readLen();
		if(this.d9!=null)
		{
			this.d9.clear();
			this.d9.ensureCapacity(d9Len);
		}
		else
		{
			this.d9=new SSet<String>(String[]::new,d9Len);
		}
		
		SSet<String> d9T=this.d9;
		for(int d9I=d9Len-1;d9I>=0;--d9I)
		{
			String d9V;
			d9V=stream.readUTF();
			
			d9T.add(d9V);
		}
		
		int d10Len=stream.readLen();
		if(this.d10!=null)
		{
			this.d10.clear();
			this.d10.ensureCapacity(d10Len);
		}
		else
		{
			this.d10=new SSet<Test2Data>(Test2Data[]::new,d10Len);
		}
		
		SSet<Test2Data> d10T=this.d10;
		for(int d10I=d10Len-1;d10I>=0;--d10I)
		{
			Test2Data d10V;
			d10V=(Test2Data)stream.readDataSimpleNotNull();
			
			d10T.add(d10V);
		}
		
		int d11Len=stream.readLen();
		if(this.d11!=null)
		{
			this.d11.clear();
			this.d11.ensureCapacity(d11Len);
		}
		else
		{
			this.d11=new SSet<Test2Data>(Test2Data[]::new,d11Len);
		}
		
		SSet<Test2Data> d11T=this.d11;
		for(int d11I=d11Len-1;d11I>=0;--d11I)
		{
			Test2Data d11V;
			d11V=(Test2Data)stream.readDataSimpleNotNull();
			
			d11T.add(d11V);
		}
		
		int e1Len=stream.readLen();
		if(this.e1!=null)
		{
			this.e1.clear();
			this.e1.ensureCapacity(e1Len);
		}
		else
		{
			this.e1=new IntIntMap(e1Len);
		}
		
		IntIntMap e1T=this.e1;
		for(int e1I=e1Len-1;e1I>=0;--e1I)
		{
			int e1K;
			int e1V;
			e1K=stream.readInt();
			
			e1V=stream.readInt();
			
			e1T.put(e1K,e1V);
		}
		
		int e12Len=stream.readLen();
		if(this.e12!=null)
		{
			this.e12.clear();
			this.e12.ensureCapacity(e12Len);
		}
		else
		{
			this.e12=new LongLongMap(e12Len);
		}
		
		LongLongMap e12T=this.e12;
		for(int e12I=e12Len-1;e12I>=0;--e12I)
		{
			long e12K;
			long e12V;
			e12K=stream.readLong();
			
			e12V=stream.readLong();
			
			e12T.put(e12K,e12V);
		}
		
		int e2Len=stream.readLen();
		if(this.e2!=null)
		{
			this.e2.clear();
			this.e2.ensureCapacity(e2Len);
		}
		else
		{
			this.e2=new IntObjectMap<Test2Data>(Test2Data[]::new,e2Len);
		}
		
		IntObjectMap<Test2Data> e2T=this.e2;
		for(int e2I=e2Len-1;e2I>=0;--e2I)
		{
			int e2K;
			Test2Data e2V;
			e2K=stream.readInt();
			
			e2V=(Test2Data)stream.readDataSimpleNotNull();
			
			e2T.put(e2K,e2V);
		}
		
		int e3Len=stream.readLen();
		if(this.e3!=null)
		{
			this.e3.clear();
			this.e3.ensureCapacity(e3Len);
		}
		else
		{
			this.e3=new LongObjectMap<Test2Data>(Test2Data[]::new,e3Len);
		}
		
		LongObjectMap<Test2Data> e3T=this.e3;
		for(int e3I=e3Len-1;e3I>=0;--e3I)
		{
			long e3K;
			Test2Data e3V;
			e3K=stream.readLong();
			
			e3V=(Test2Data)stream.readDataSimpleNotNull();
			
			e3T.put(e3K,e3V);
		}
		
		int e4Len=stream.readLen();
		if(this.e4!=null)
		{
			this.e4.clear();
			this.e4.ensureCapacity(e4Len);
		}
		else
		{
			this.e4=new SMap<String,Test2Data>(e4Len);
		}
		
		SMap<String,Test2Data> e4T=this.e4;
		for(int e4I=e4Len-1;e4I>=0;--e4I)
		{
			String e4K;
			Test2Data e4V;
			e4K=stream.readUTF();
			
			e4V=(Test2Data)stream.readDataSimpleNotNull();
			
			e4T.put(e4K,e4V);
		}
		
		int e5Len=stream.readLen();
		if(this.e5!=null)
		{
			this.e5.clear();
			this.e5.ensureCapacity(e5Len);
		}
		else
		{
			this.e5=new IntObjectMap<Test2Data>(Test2Data[]::new,e5Len);
		}
		
		IntObjectMap<Test2Data> e5T=this.e5;
		for(int e5I=e5Len-1;e5I>=0;--e5I)
		{
			int e5K;
			Test2Data e5V;
			e5K=stream.readInt();
			
			e5V=(Test2Data)stream.readDataSimpleNotNull();
			
			e5T.put(e5K,e5V);
		}
		
		int e6Len=stream.readLen();
		if(this.e6!=null)
		{
			this.e6.clear();
			this.e6.ensureCapacity(e6Len);
		}
		else
		{
			this.e6=new IntObjectMap<Test2Data>(Test2Data[]::new,e6Len);
		}
		
		IntObjectMap<Test2Data> e6T=this.e6;
		for(int e6I=e6Len-1;e6I>=0;--e6I)
		{
			Test2Data e6V;
			e6V=(Test2Data)stream.readDataSimpleNotNull();
			
			e6T.put(e6V.a,e6V);
		}
		
		int e7Len=stream.readLen();
		if(this.e7!=null)
		{
			this.e7.clear();
			this.e7.ensureCapacity(e7Len);
		}
		else
		{
			this.e7=new IntObjectMap<Test2Data>(Test2Data[]::new,e7Len);
		}
		
		IntObjectMap<Test2Data> e7T=this.e7;
		for(int e7I=e7Len-1;e7I>=0;--e7I)
		{
			Test2Data e7V;
			e7V=(Test2Data)stream.readDataSimpleNotNull();
			
			e7T.put(e7V.a,e7V);
		}
		
		int e8Len=stream.readLen();
		if(this.e8!=null)
		{
			this.e8.clear();
			this.e8.ensureCapacity(e8Len);
		}
		else
		{
			this.e8=new IntObjectMap<Test2Data>(Test2Data[]::new,e8Len);
		}
		
		IntObjectMap<Test2Data> e8T=this.e8;
		for(int e8I=e8Len-1;e8I>=0;--e8I)
		{
			Test2Data e8V;
			e8V=(Test2Data)stream.readDataSimpleNotNull();
			
			e8T.put(e8V.a,e8V);
		}
		
		int f1Len=stream.readLen();
		if(this.f1==null || this.f1.length!=f1Len)
		{
			this.f1=new IntList[f1Len];
		}
		IntList[] f1T=this.f1;
		for(int f1I=0;f1I<f1Len;++f1I)
		{
			IntList f1V;
			int f1VLen=stream.readLen();
			f1V=new IntList(f1VLen);
			IntList f1VT=f1V;
			for(int f1VI=f1VLen-1;f1VI>=0;--f1VI)
			{
				int f1VV;
				f1VV=stream.readInt();
				
				f1VT.add(f1VV);
			}
			
			f1T[f1I]=f1V;
		}
		
		int f2Len=stream.readLen();
		if(this.f2==null || this.f2.length!=f2Len)
		{
			this.f2=new SList[f2Len];
		}
		SList<int[]>[] f2T=this.f2;
		for(int f2I=0;f2I<f2Len;++f2I)
		{
			SList<int[]> f2V;
			int f2VLen=stream.readLen();
			f2V=new SList<int[]>(int[][]::new,f2VLen);
			SList<int[]> f2VT=f2V;
			for(int f2VI=f2VLen-1;f2VI>=0;--f2VI)
			{
				int[] f2VV;
				int f2VVLen=stream.readLen();
				f2VV=new int[f2VVLen];
				int[] f2VVT=f2VV;
				for(int f2VVI=0;f2VVI<f2VVLen;++f2VVI)
				{
					int f2VVV;
					f2VVV=stream.readInt();
					
					f2VVT[f2VVI]=f2VVV;
				}
				
				f2VT.add(f2VV);
			}
			
			f2T[f2I]=f2V;
		}
		
		int f3Len=stream.readLen();
		if(this.f3==null || this.f3.length!=f3Len)
		{
			this.f3=new SList[f3Len];
		}
		SList<Test2Data>[] f3T=this.f3;
		for(int f3I=0;f3I<f3Len;++f3I)
		{
			SList<Test2Data> f3V;
			int f3VLen=stream.readLen();
			f3V=new SList<Test2Data>(Test2Data[]::new,f3VLen);
			SList<Test2Data> f3VT=f3V;
			for(int f3VI=f3VLen-1;f3VI>=0;--f3VI)
			{
				Test2Data f3VV;
				f3VV=(Test2Data)stream.readDataSimpleNotNull();
				
				f3VT.add(f3VV);
			}
			
			f3T[f3I]=f3V;
		}
		
		int f4Len=stream.readLen();
		if(this.f4==null || this.f4.length!=f4Len)
		{
			this.f4=new SList[f4Len];
		}
		SList<Test2Data[]>[] f4T=this.f4;
		for(int f4I=0;f4I<f4Len;++f4I)
		{
			SList<Test2Data[]> f4V;
			int f4VLen=stream.readLen();
			f4V=new SList<Test2Data[]>(Test2Data[][]::new,f4VLen);
			SList<Test2Data[]> f4VT=f4V;
			for(int f4VI=f4VLen-1;f4VI>=0;--f4VI)
			{
				Test2Data[] f4VV;
				int f4VVLen=stream.readLen();
				f4VV=new Test2Data[f4VVLen];
				Test2Data[] f4VVT=f4VV;
				for(int f4VVI=0;f4VVI<f4VVLen;++f4VVI)
				{
					Test2Data f4VVV;
					f4VVV=(Test2Data)stream.readDataSimpleNotNull();
					
					f4VVT[f4VVI]=f4VVV;
				}
				
				f4VT.add(f4VV);
			}
			
			f4T[f4I]=f4V;
		}
		
		if(stream.readBoolean())
		{
			int f5Len=stream.readLen();
			if(this.f5==null || this.f5.length!=f5Len)
			{
				this.f5=new SList[f5Len];
			}
			SList<Test2Data>[] f5T=this.f5;
			for(int f5I=0;f5I<f5Len;++f5I)
			{
				SList<Test2Data> f5V;
				if(stream.readBoolean())
				{
					int f5VLen=stream.readLen();
					f5V=new SList<Test2Data>(Test2Data[]::new,f5VLen);
					SList<Test2Data> f5VT=f5V;
					for(int f5VI=f5VLen-1;f5VI>=0;--f5VI)
					{
						Test2Data f5VV;
						if(stream.readBoolean())
						{
							f5VV=(Test2Data)stream.readDataSimpleNotNull();
						}
						else
						{
							f5VV=null;
						}
						
						f5VT.add(f5VV);
					}
				}
				else
				{
					f5V=null;
				}
				
				f5T[f5I]=f5V;
			}
		}
		else
		{
			this.f5=null;
		}
		
		if(stream.readBoolean())
		{
			int f6Len=stream.readLen();
			if(this.f6==null || this.f6.length!=f6Len)
			{
				this.f6=new SList[f6Len];
			}
			SList<Test2Data[]>[] f6T=this.f6;
			for(int f6I=0;f6I<f6Len;++f6I)
			{
				SList<Test2Data[]> f6V;
				if(stream.readBoolean())
				{
					int f6VLen=stream.readLen();
					f6V=new SList<Test2Data[]>(Test2Data[][]::new,f6VLen);
					SList<Test2Data[]> f6VT=f6V;
					for(int f6VI=f6VLen-1;f6VI>=0;--f6VI)
					{
						Test2Data[] f6VV;
						if(stream.readBoolean())
						{
							int f6VVLen=stream.readLen();
							f6VV=new Test2Data[f6VVLen];
							Test2Data[] f6VVT=f6VV;
							for(int f6VVI=0;f6VVI<f6VVLen;++f6VVI)
							{
								Test2Data f6VVV;
								if(stream.readBoolean())
								{
									f6VVV=(Test2Data)stream.readDataSimpleNotNull();
								}
								else
								{
									f6VVV=null;
								}
								
								f6VVT[f6VVI]=f6VVV;
							}
						}
						else
						{
							f6VV=null;
						}
						
						f6VT.add(f6VV);
					}
				}
				else
				{
					f6V=null;
				}
				
				f6T[f6I]=f6V;
			}
		}
		else
		{
			this.f6=null;
		}
		
		int g1Len=stream.readLen();
		if(this.g1!=null)
		{
			this.g1.clear();
			this.g1.ensureCapacity(g1Len);
		}
		else
		{
			this.g1=new IntObjectMap<IntObjectMap<Test2Data>>(IntObjectMap[]::new,g1Len);
		}
		
		IntObjectMap<IntObjectMap<Test2Data>> g1T=this.g1;
		for(int g1I=g1Len-1;g1I>=0;--g1I)
		{
			int g1K;
			IntObjectMap<Test2Data> g1V;
			g1K=stream.readInt();
			
			int g1VLen=stream.readLen();
			g1V=new IntObjectMap<Test2Data>(Test2Data[]::new,g1VLen);
			IntObjectMap<Test2Data> g1VT=g1V;
			for(int g1VI=g1VLen-1;g1VI>=0;--g1VI)
			{
				int g1VK;
				Test2Data g1VV;
				g1VK=stream.readInt();
				
				g1VV=(Test2Data)stream.readDataSimpleNotNull();
				
				g1VT.put(g1VK,g1VV);
			}
			
			g1T.put(g1K,g1V);
		}
		
		int h1Len=stream.readLen();
		if(this.h1!=null)
		{
			this.h1.clear();
			this.h1.ensureCapacity(h1Len);
		}
		else
		{
			this.h1=new IntQueue(h1Len);
		}
		
		IntQueue h1T=this.h1;
		for(int h1I=h1Len-1;h1I>=0;--h1I)
		{
			int h1V;
			h1V=stream.readInt();
			
			h1T.offer(h1V);
		}
		
		int h2Len=stream.readLen();
		if(this.h2!=null)
		{
			this.h2.clear();
			this.h2.ensureCapacity(h2Len);
		}
		else
		{
			this.h2=new SQueue<Test2Data>(Test2Data[]::new,h2Len);
		}
		
		SQueue<Test2Data> h2T=this.h2;
		for(int h2I=h2Len-1;h2I>=0;--h2I)
		{
			Test2Data h2V;
			h2V=(Test2Data)stream.readDataSimpleNotNull();
			
			h2T.offer(h2V);
		}
		
		int h3Len=stream.readLen();
		if(this.h3!=null)
		{
			this.h3.clear();
			this.h3.ensureCapacity(h3Len);
		}
		else
		{
			this.h3=new IntObjectMap<SQueue<Test2Data>>(SQueue[]::new,h3Len);
		}
		
		IntObjectMap<SQueue<Test2Data>> h3T=this.h3;
		for(int h3I=h3Len-1;h3I>=0;--h3I)
		{
			int h3K;
			SQueue<Test2Data> h3V;
			h3K=stream.readInt();
			
			int h3VLen=stream.readLen();
			h3V=new SQueue<Test2Data>(Test2Data[]::new,h3VLen);
			SQueue<Test2Data> h3VT=h3V;
			for(int h3VI=h3VLen-1;h3VI>=0;--h3VI)
			{
				Test2Data h3VV;
				h3VV=(Test2Data)stream.readDataSimpleNotNull();
				
				h3VT.offer(h3VV);
			}
			
			h3T.put(h3K,h3V);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeBoolean(this.a1);
		
		stream.writeByte(this.a2);
		
		stream.writeInt(this.a6);
		
		stream.writeFloat(this.a7);
		
		stream.writeDouble(this.a8);
		
		stream.writeLong(this.a9);
		
		stream.writeUTF(this.a10);
		
		if(this.b1!=null)
		{
			stream.writeDataSimpleNotNull(this.b1);
		}
		else
		{
			nullObjError("b1");
		}
		
		if(this.b2!=null)
		{
			stream.writeDataSimpleNotNull(this.b2);
		}
		else
		{
			nullObjError("b2");
		}
		
		if(this.b3!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.b3);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.b4!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.b4);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.c1!=null)
		{
			stream.writeLen(this.c1.length);
			stream.writeByteArr(this.c1);
		}
		else
		{
			nullObjError("c1");
		}
		
		if(this.c2!=null)
		{
			int[] c2T=this.c2;
			stream.writeLen(c2T.length);
			for(int c2VI=0,c2VLen=c2T.length;c2VI<c2VLen;++c2VI)
			{
				int c2V=c2T[c2VI];
				stream.writeInt(c2V);
				
			}
		}
		else
		{
			nullObjError("c2");
		}
		
		if(this.c3!=null)
		{
			long[] c3T=this.c3;
			stream.writeLen(c3T.length);
			for(int c3VI=0,c3VLen=c3T.length;c3VI<c3VLen;++c3VI)
			{
				long c3V=c3T[c3VI];
				stream.writeLong(c3V);
				
			}
		}
		else
		{
			nullObjError("c3");
		}
		
		if(this.c4!=null)
		{
			String[] c4T=this.c4;
			stream.writeLen(c4T.length);
			for(int c4VI=0,c4VLen=c4T.length;c4VI<c4VLen;++c4VI)
			{
				String c4V=c4T[c4VI];
				stream.writeUTF(c4V);
				
			}
		}
		else
		{
			nullObjError("c4");
		}
		
		if(this.c5!=null)
		{
			int[][] c5T=this.c5;
			stream.writeLen(c5T.length);
			for(int c5VI=0,c5VLen=c5T.length;c5VI<c5VLen;++c5VI)
			{
				int[] c5V=c5T[c5VI];
				if(c5V!=null)
				{
					int[] c5VT=c5V;
					stream.writeLen(c5VT.length);
					for(int c5VVI=0,c5VVLen=c5VT.length;c5VVI<c5VVLen;++c5VVI)
					{
						int c5VV=c5VT[c5VVI];
						stream.writeInt(c5VV);
						
					}
				}
				else
				{
					nullObjError("c5V");
				}
				
			}
		}
		else
		{
			nullObjError("c5");
		}
		
		if(this.c6!=null)
		{
			int[][][] c6T=this.c6;
			stream.writeLen(c6T.length);
			for(int c6VI=0,c6VLen=c6T.length;c6VI<c6VLen;++c6VI)
			{
				int[][] c6V=c6T[c6VI];
				if(c6V!=null)
				{
					int[][] c6VT=c6V;
					stream.writeLen(c6VT.length);
					for(int c6VVI=0,c6VVLen=c6VT.length;c6VVI<c6VVLen;++c6VVI)
					{
						int[] c6VV=c6VT[c6VVI];
						if(c6VV!=null)
						{
							int[] c6VVT=c6VV;
							stream.writeLen(c6VVT.length);
							for(int c6VVVI=0,c6VVVLen=c6VVT.length;c6VVVI<c6VVVLen;++c6VVVI)
							{
								int c6VVV=c6VVT[c6VVVI];
								stream.writeInt(c6VVV);
								
							}
						}
						else
						{
							nullObjError("c6VV");
						}
						
					}
				}
				else
				{
					nullObjError("c6V");
				}
				
			}
		}
		else
		{
			nullObjError("c6");
		}
		
		if(this.d1!=null)
		{
			stream.writeLen(this.d1.size());
			if(!this.d1.isEmpty())
			{
				int[] d1VValues=this.d1.getValues();
				for(int d1VI=0,d1VLen=this.d1.length();d1VI<d1VLen;++d1VI)
				{
					int d1V=d1VValues[d1VI];
					stream.writeInt(d1V);
					
				}
			}
		}
		else
		{
			nullObjError("d1");
		}
		
		if(this.d2!=null)
		{
			stream.writeLen(this.d2.size());
			if(!this.d2.isEmpty())
			{
				long[] d2VValues=this.d2.getValues();
				for(int d2VI=0,d2VLen=this.d2.length();d2VI<d2VLen;++d2VI)
				{
					long d2V=d2VValues[d2VI];
					stream.writeLong(d2V);
					
				}
			}
		}
		else
		{
			nullObjError("d2");
		}
		
		if(this.d3!=null)
		{
			stream.writeLen(this.d3.size());
			if(!this.d3.isEmpty())
			{
				Object[] d3VValues=this.d3.getValues();
				for(int d3VI=0,d3VLen=this.d3.length();d3VI<d3VLen;++d3VI)
				{
					String d3V=(String)d3VValues[d3VI];
					stream.writeUTF(d3V);
					
				}
			}
		}
		else
		{
			nullObjError("d3");
		}
		
		if(this.d4!=null)
		{
			stream.writeLen(this.d4.size());
			if(!this.d4.isEmpty())
			{
				Object[] d4VValues=this.d4.getValues();
				for(int d4VI=0,d4VLen=this.d4.length();d4VI<d4VLen;++d4VI)
				{
					Test2Data d4V=(Test2Data)d4VValues[d4VI];
					if(d4V!=null)
					{
						stream.writeDataSimpleNotNull(d4V);
					}
					else
					{
						nullObjError("d4V");
					}
					
				}
			}
		}
		else
		{
			nullObjError("d4");
		}
		
		if(this.d5!=null)
		{
			stream.writeLen(this.d5.size());
			if(!this.d5.isEmpty())
			{
				Object[] d5VValues=this.d5.getValues();
				for(int d5VI=0,d5VLen=this.d5.length();d5VI<d5VLen;++d5VI)
				{
					Test2Data d5V=(Test2Data)d5VValues[d5VI];
					if(d5V!=null)
					{
						stream.writeDataSimpleNotNull(d5V);
					}
					else
					{
						nullObjError("d5V");
					}
					
				}
			}
		}
		else
		{
			nullObjError("d5");
		}
		
		if(this.d6!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.d6.size());
			if(!this.d6.isEmpty())
			{
				Object[] d6VValues=this.d6.getValues();
				for(int d6VI=0,d6VLen=this.d6.length();d6VI<d6VLen;++d6VI)
				{
					Test2Data d6V=(Test2Data)d6VValues[d6VI];
					if(d6V!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(d6V);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.d7!=null)
		{
			stream.writeLen(this.d7.size());
			if(!this.d7.isEmpty())
			{
				int d7VFreeValue=this.d7.getFreeValue();
				int[] d7VKeys=this.d7.getKeys();
				for(int d7VI=d7VKeys.length-1;d7VI>=0;--d7VI)
				{
					int d7V=d7VKeys[d7VI];
					if(d7V!=d7VFreeValue)
					{
						stream.writeInt(d7V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("d7");
		}
		
		if(this.d8!=null)
		{
			stream.writeLen(this.d8.size());
			if(!this.d8.isEmpty())
			{
				long d8VFreeValue=this.d8.getFreeValue();
				long[] d8VKeys=this.d8.getKeys();
				for(int d8VI=d8VKeys.length-1;d8VI>=0;--d8VI)
				{
					long d8V=d8VKeys[d8VI];
					if(d8V!=d8VFreeValue)
					{
						stream.writeLong(d8V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("d8");
		}
		
		if(this.d9!=null)
		{
			stream.writeLen(this.d9.size());
			if(!this.d9.isEmpty())
			{
				Object[] d9VKeys=this.d9.getKeys();
				for(int d9VI=d9VKeys.length-1;d9VI>=0;--d9VI)
				{
					if(d9VKeys[d9VI]!=null)
					{
						String d9V=(String)d9VKeys[d9VI];
						stream.writeUTF(d9V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("d9");
		}
		
		if(this.d10!=null)
		{
			stream.writeLen(this.d10.size());
			if(!this.d10.isEmpty())
			{
				Object[] d10VKeys=this.d10.getKeys();
				for(int d10VI=d10VKeys.length-1;d10VI>=0;--d10VI)
				{
					if(d10VKeys[d10VI]!=null)
					{
						Test2Data d10V=(Test2Data)d10VKeys[d10VI];
						if(d10V!=null)
						{
							stream.writeDataSimpleNotNull(d10V);
						}
						else
						{
							nullObjError("d10V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("d10");
		}
		
		if(this.d11!=null)
		{
			stream.writeLen(this.d11.size());
			if(!this.d11.isEmpty())
			{
				Object[] d11VKeys=this.d11.getKeys();
				for(int d11VI=d11VKeys.length-1;d11VI>=0;--d11VI)
				{
					if(d11VKeys[d11VI]!=null)
					{
						Test2Data d11V=(Test2Data)d11VKeys[d11VI];
						if(d11V!=null)
						{
							stream.writeDataSimpleNotNull(d11V);
						}
						else
						{
							nullObjError("d11V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("d11");
		}
		
		if(this.e1!=null)
		{
			stream.writeLen(this.e1.size());
			if(!this.e1.isEmpty())
			{
				int e1KFreeValue=this.e1.getFreeValue();
				long[] e1KTable=this.e1.getTable();
				long e1KEntry;
				for(int e1KI=e1KTable.length-1;e1KI>=0;--e1KI)
				{
					e1KEntry=e1KTable[e1KI];
					int e1K=(int)e1KEntry;
					if(e1K!=e1KFreeValue)
					{
						int e1V=(int)(e1KEntry>>>32);
						stream.writeInt(e1K);
						
						stream.writeInt(e1V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("e1");
		}
		
		if(this.e12!=null)
		{
			stream.writeLen(this.e12.size());
			if(!this.e12.isEmpty())
			{
				long e12KFreeValue=this.e12.getFreeValue();
				long[] e12KKeys=this.e12.getKeys();
				long[] e12VValues=this.e12.getValues();
				for(int e12KI=e12KKeys.length-1;e12KI>=0;--e12KI)
				{
					long e12K=e12KKeys[e12KI];
					if(e12K!=e12KFreeValue)
					{
						long e12V=e12VValues[e12KI];
						stream.writeLong(e12K);
						
						stream.writeLong(e12V);
						
					}
				}
			}
		}
		else
		{
			nullObjError("e12");
		}
		
		if(this.e2!=null)
		{
			stream.writeLen(this.e2.size());
			if(!this.e2.isEmpty())
			{
				int e2KFreeValue=this.e2.getFreeValue();
				int[] e2KKeys=this.e2.getKeys();
				Object[] e2VValues=this.e2.getValues();
				for(int e2KI=e2KKeys.length-1;e2KI>=0;--e2KI)
				{
					int e2K=e2KKeys[e2KI];
					if(e2K!=e2KFreeValue)
					{
						Test2Data e2V=(Test2Data)e2VValues[e2KI];
						stream.writeInt(e2K);
						
						if(e2V!=null)
						{
							stream.writeDataSimpleNotNull(e2V);
						}
						else
						{
							nullObjError("e2V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e2");
		}
		
		if(this.e3!=null)
		{
			stream.writeLen(this.e3.size());
			if(!this.e3.isEmpty())
			{
				long e3KFreeValue=this.e3.getFreeValue();
				long[] e3KKeys=this.e3.getKeys();
				Object[] e3VValues=this.e3.getValues();
				for(int e3KI=e3KKeys.length-1;e3KI>=0;--e3KI)
				{
					long e3K=e3KKeys[e3KI];
					if(e3K!=e3KFreeValue)
					{
						Test2Data e3V=(Test2Data)e3VValues[e3KI];
						stream.writeLong(e3K);
						
						if(e3V!=null)
						{
							stream.writeDataSimpleNotNull(e3V);
						}
						else
						{
							nullObjError("e3V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e3");
		}
		
		if(this.e4!=null)
		{
			stream.writeLen(this.e4.size());
			if(!this.e4.isEmpty())
			{
				Object[] e4KTable=this.e4.getTable();
				for(int e4KI=e4KTable.length-2;e4KI>=0;e4KI-=2)
				{
					if(e4KTable[e4KI]!=null)
					{
						String e4K=(String)e4KTable[e4KI];
						Test2Data e4V=(Test2Data)e4KTable[e4KI+1];
						stream.writeUTF(e4K);
						
						if(e4V!=null)
						{
							stream.writeDataSimpleNotNull(e4V);
						}
						else
						{
							nullObjError("e4V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e4");
		}
		
		if(this.e5!=null)
		{
			stream.writeLen(this.e5.size());
			if(!this.e5.isEmpty())
			{
				int e5KFreeValue=this.e5.getFreeValue();
				int[] e5KKeys=this.e5.getKeys();
				Object[] e5VValues=this.e5.getValues();
				for(int e5KI=e5KKeys.length-1;e5KI>=0;--e5KI)
				{
					int e5K=e5KKeys[e5KI];
					if(e5K!=e5KFreeValue)
					{
						Test2Data e5V=(Test2Data)e5VValues[e5KI];
						stream.writeInt(e5K);
						
						if(e5V!=null)
						{
							stream.writeDataSimpleNotNull(e5V);
						}
						else
						{
							nullObjError("e5V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e5");
		}
		
		if(this.e6!=null)
		{
			stream.writeLen(this.e6.size());
			if(!this.e6.isEmpty())
			{
				Object[] e6VValues=this.e6.getValues();
				for(int e6VI=e6VValues.length-1;e6VI>=0;--e6VI)
				{
					if(e6VValues[e6VI]!=null)
					{
						Test2Data e6V=(Test2Data)e6VValues[e6VI];
						if(e6V!=null)
						{
							stream.writeDataSimpleNotNull(e6V);
						}
						else
						{
							nullObjError("e6V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e6");
		}
		
		if(this.e7!=null)
		{
			stream.writeLen(this.e7.size());
			if(!this.e7.isEmpty())
			{
				Object[] e7VValues=this.e7.getValues();
				for(int e7VI=e7VValues.length-1;e7VI>=0;--e7VI)
				{
					if(e7VValues[e7VI]!=null)
					{
						Test2Data e7V=(Test2Data)e7VValues[e7VI];
						if(e7V!=null)
						{
							stream.writeDataSimpleNotNull(e7V);
						}
						else
						{
							nullObjError("e7V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e7");
		}
		
		if(this.e8!=null)
		{
			stream.writeLen(this.e8.size());
			if(!this.e8.isEmpty())
			{
				Object[] e8VValues=this.e8.getValues();
				for(int e8VI=e8VValues.length-1;e8VI>=0;--e8VI)
				{
					if(e8VValues[e8VI]!=null)
					{
						Test2Data e8V=(Test2Data)e8VValues[e8VI];
						if(e8V!=null)
						{
							stream.writeDataSimpleNotNull(e8V);
						}
						else
						{
							nullObjError("e8V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("e8");
		}
		
		if(this.f1!=null)
		{
			IntList[] f1T=this.f1;
			stream.writeLen(f1T.length);
			for(int f1VI=0,f1VLen=f1T.length;f1VI<f1VLen;++f1VI)
			{
				IntList f1V=f1T[f1VI];
				if(f1V!=null)
				{
					stream.writeLen(f1V.size());
					if(!f1V.isEmpty())
					{
						int[] f1VVValues=f1V.getValues();
						for(int f1VVI=0,f1VVLen=f1V.length();f1VVI<f1VVLen;++f1VVI)
						{
							int f1VV=f1VVValues[f1VVI];
							stream.writeInt(f1VV);
							
						}
					}
				}
				else
				{
					nullObjError("f1V");
				}
				
			}
		}
		else
		{
			nullObjError("f1");
		}
		
		if(this.f2!=null)
		{
			SList<int[]>[] f2T=this.f2;
			stream.writeLen(f2T.length);
			for(int f2VI=0,f2VLen=f2T.length;f2VI<f2VLen;++f2VI)
			{
				SList<int[]> f2V=f2T[f2VI];
				if(f2V!=null)
				{
					stream.writeLen(f2V.size());
					if(!f2V.isEmpty())
					{
						Object[] f2VVValues=f2V.getValues();
						for(int f2VVI=0,f2VVLen=f2V.length();f2VVI<f2VVLen;++f2VVI)
						{
							int[] f2VV=(int[])f2VVValues[f2VVI];
							if(f2VV!=null)
							{
								int[] f2VVT=f2VV;
								stream.writeLen(f2VVT.length);
								for(int f2VVVI=0,f2VVVLen=f2VVT.length;f2VVVI<f2VVVLen;++f2VVVI)
								{
									int f2VVV=f2VVT[f2VVVI];
									stream.writeInt(f2VVV);
									
								}
							}
							else
							{
								nullObjError("f2VV");
							}
							
						}
					}
				}
				else
				{
					nullObjError("f2V");
				}
				
			}
		}
		else
		{
			nullObjError("f2");
		}
		
		if(this.f3!=null)
		{
			SList<Test2Data>[] f3T=this.f3;
			stream.writeLen(f3T.length);
			for(int f3VI=0,f3VLen=f3T.length;f3VI<f3VLen;++f3VI)
			{
				SList<Test2Data> f3V=f3T[f3VI];
				if(f3V!=null)
				{
					stream.writeLen(f3V.size());
					if(!f3V.isEmpty())
					{
						Object[] f3VVValues=f3V.getValues();
						for(int f3VVI=0,f3VVLen=f3V.length();f3VVI<f3VVLen;++f3VVI)
						{
							Test2Data f3VV=(Test2Data)f3VVValues[f3VVI];
							if(f3VV!=null)
							{
								stream.writeDataSimpleNotNull(f3VV);
							}
							else
							{
								nullObjError("f3VV");
							}
							
						}
					}
				}
				else
				{
					nullObjError("f3V");
				}
				
			}
		}
		else
		{
			nullObjError("f3");
		}
		
		if(this.f4!=null)
		{
			SList<Test2Data[]>[] f4T=this.f4;
			stream.writeLen(f4T.length);
			for(int f4VI=0,f4VLen=f4T.length;f4VI<f4VLen;++f4VI)
			{
				SList<Test2Data[]> f4V=f4T[f4VI];
				if(f4V!=null)
				{
					stream.writeLen(f4V.size());
					if(!f4V.isEmpty())
					{
						Object[] f4VVValues=f4V.getValues();
						for(int f4VVI=0,f4VVLen=f4V.length();f4VVI<f4VVLen;++f4VVI)
						{
							Test2Data[] f4VV=(Test2Data[])f4VVValues[f4VVI];
							if(f4VV!=null)
							{
								Test2Data[] f4VVT=f4VV;
								stream.writeLen(f4VVT.length);
								for(int f4VVVI=0,f4VVVLen=f4VVT.length;f4VVVI<f4VVVLen;++f4VVVI)
								{
									Test2Data f4VVV=f4VVT[f4VVVI];
									if(f4VVV!=null)
									{
										stream.writeDataSimpleNotNull(f4VVV);
									}
									else
									{
										nullObjError("f4VVV");
									}
									
								}
							}
							else
							{
								nullObjError("f4VV");
							}
							
						}
					}
				}
				else
				{
					nullObjError("f4V");
				}
				
			}
		}
		else
		{
			nullObjError("f4");
		}
		
		if(this.f5!=null)
		{
			stream.writeBoolean(true);
			SList<Test2Data>[] f5T=this.f5;
			stream.writeLen(f5T.length);
			for(int f5VI=0,f5VLen=f5T.length;f5VI<f5VLen;++f5VI)
			{
				SList<Test2Data> f5V=f5T[f5VI];
				if(f5V!=null)
				{
					stream.writeBoolean(true);
					stream.writeLen(f5V.size());
					if(!f5V.isEmpty())
					{
						Object[] f5VVValues=f5V.getValues();
						for(int f5VVI=0,f5VVLen=f5V.length();f5VVI<f5VVLen;++f5VVI)
						{
							Test2Data f5VV=(Test2Data)f5VVValues[f5VVI];
							if(f5VV!=null)
							{
								stream.writeBoolean(true);
								stream.writeDataSimpleNotNull(f5VV);
							}
							else
							{
								stream.writeBoolean(false);
							}
							
						}
					}
				}
				else
				{
					stream.writeBoolean(false);
				}
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.f6!=null)
		{
			stream.writeBoolean(true);
			SList<Test2Data[]>[] f6T=this.f6;
			stream.writeLen(f6T.length);
			for(int f6VI=0,f6VLen=f6T.length;f6VI<f6VLen;++f6VI)
			{
				SList<Test2Data[]> f6V=f6T[f6VI];
				if(f6V!=null)
				{
					stream.writeBoolean(true);
					stream.writeLen(f6V.size());
					if(!f6V.isEmpty())
					{
						Object[] f6VVValues=f6V.getValues();
						for(int f6VVI=0,f6VVLen=f6V.length();f6VVI<f6VVLen;++f6VVI)
						{
							Test2Data[] f6VV=(Test2Data[])f6VVValues[f6VVI];
							if(f6VV!=null)
							{
								stream.writeBoolean(true);
								Test2Data[] f6VVT=f6VV;
								stream.writeLen(f6VVT.length);
								for(int f6VVVI=0,f6VVVLen=f6VVT.length;f6VVVI<f6VVVLen;++f6VVVI)
								{
									Test2Data f6VVV=f6VVT[f6VVVI];
									if(f6VVV!=null)
									{
										stream.writeBoolean(true);
										stream.writeDataSimpleNotNull(f6VVV);
									}
									else
									{
										stream.writeBoolean(false);
									}
									
								}
							}
							else
							{
								stream.writeBoolean(false);
							}
							
						}
					}
				}
				else
				{
					stream.writeBoolean(false);
				}
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.g1!=null)
		{
			stream.writeLen(this.g1.size());
			if(!this.g1.isEmpty())
			{
				int g1KFreeValue=this.g1.getFreeValue();
				int[] g1KKeys=this.g1.getKeys();
				Object[] g1VValues=this.g1.getValues();
				for(int g1KI=g1KKeys.length-1;g1KI>=0;--g1KI)
				{
					int g1K=g1KKeys[g1KI];
					if(g1K!=g1KFreeValue)
					{
						IntObjectMap<Test2Data> g1V=(IntObjectMap<Test2Data>)g1VValues[g1KI];
						stream.writeInt(g1K);
						
						if(g1V!=null)
						{
							stream.writeLen(g1V.size());
							if(!g1V.isEmpty())
							{
								int g1VKFreeValue=g1V.getFreeValue();
								int[] g1VKKeys=g1V.getKeys();
								Object[] g1VVValues=g1V.getValues();
								for(int g1VKI=g1VKKeys.length-1;g1VKI>=0;--g1VKI)
								{
									int g1VK=g1VKKeys[g1VKI];
									if(g1VK!=g1VKFreeValue)
									{
										Test2Data g1VV=(Test2Data)g1VVValues[g1VKI];
										stream.writeInt(g1VK);
										
										if(g1VV!=null)
										{
											stream.writeDataSimpleNotNull(g1VV);
										}
										else
										{
											nullObjError("g1VV");
										}
										
									}
								}
							}
						}
						else
						{
							nullObjError("g1V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("g1");
		}
		
		if(this.h1!=null)
		{
			stream.writeLen(this.h1.size());
			if(!this.h1.isEmpty())
			{
				int[] h1VValues=this.h1.getValues();
				int h1VMark=this.h1.getMark();
				int h1VStart=this.h1.getStart();
				for(int h1VI=0,h1VLen=this.h1.length();h1VI<h1VLen;++h1VI)
				{
					int h1V=h1VValues[(h1VI+h1VStart)&h1VMark];
					stream.writeInt(h1V);
					
				}
			}
		}
		else
		{
			nullObjError("h1");
		}
		
		if(this.h2!=null)
		{
			stream.writeLen(this.h2.size());
			if(!this.h2.isEmpty())
			{
				Object[] h2VValues=this.h2.getValues();
				int h2VMark=this.h2.getMark();
				int h2VStart=this.h2.getStart();
				for(int h2VI=0,h2VLen=this.h2.length();h2VI<h2VLen;++h2VI)
				{
					Test2Data h2V=(Test2Data)h2VValues[(h2VI+h2VStart)&h2VMark];
					if(h2V!=null)
					{
						stream.writeDataSimpleNotNull(h2V);
					}
					else
					{
						nullObjError("h2V");
					}
					
				}
			}
		}
		else
		{
			nullObjError("h2");
		}
		
		if(this.h3!=null)
		{
			stream.writeLen(this.h3.size());
			if(!this.h3.isEmpty())
			{
				int h3KFreeValue=this.h3.getFreeValue();
				int[] h3KKeys=this.h3.getKeys();
				Object[] h3VValues=this.h3.getValues();
				for(int h3KI=h3KKeys.length-1;h3KI>=0;--h3KI)
				{
					int h3K=h3KKeys[h3KI];
					if(h3K!=h3KFreeValue)
					{
						SQueue<Test2Data> h3V=(SQueue<Test2Data>)h3VValues[h3KI];
						stream.writeInt(h3K);
						
						if(h3V!=null)
						{
							stream.writeLen(h3V.size());
							if(!h3V.isEmpty())
							{
								Object[] h3VVValues=h3V.getValues();
								int h3VVMark=h3V.getMark();
								int h3VVStart=h3V.getStart();
								for(int h3VVI=0,h3VVLen=h3V.length();h3VVI<h3VVLen;++h3VVI)
								{
									Test2Data h3VV=(Test2Data)h3VVValues[(h3VVI+h3VVStart)&h3VVMark];
									if(h3VV!=null)
									{
										stream.writeDataSimpleNotNull(h3VV);
									}
									else
									{
										nullObjError("h3VV");
									}
									
								}
							}
						}
						else
						{
							nullObjError("h3V");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("h3");
		}
		
	}
	
	/** 复制(深拷贝) */
	@SuppressWarnings("unchecked")
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof TestData))
			return;
		
		TestData mData=(TestData)data;
		
		this.a1=mData.a1;
		
		this.a2=mData.a2;
		
		this.a6=mData.a6;
		
		this.a7=mData.a7;
		
		this.a8=mData.a8;
		
		this.a9=mData.a9;
		
		this.a10=mData.a10;
		
		if(mData.b1!=null)
		{
			this.b1=(Test2Data)mData.b1.clone();
		}
		else
		{
			this.b1=null;
			nullObjError("b1");
		}
		
		if(mData.b2!=null)
		{
			this.b2=(Test2Data)mData.b2.clone();
		}
		else
		{
			this.b2=null;
			nullObjError("b2");
		}
		
		if(mData.b3!=null)
		{
			this.b3=(Test2Data)mData.b3.clone();
		}
		else
		{
			this.b3=null;
		}
		
		if(mData.b4!=null)
		{
			this.b4=(Test2Data)mData.b4.clone();
		}
		else
		{
			this.b4=null;
		}
		
		if(mData.c1!=null)
		{
			this.c1=BytesControl.byteArrCopy(mData.c1);
		}
		else
		{
			this.c1=null;
			nullObjError("c1");
		}
		
		if(mData.c2!=null)
		{
			int[] c2R=mData.c2;
			int c2Len=c2R.length;
			if(this.c2==null || this.c2.length!=c2Len)
			{
				this.c2=new int[c2Len];
			}
			BytesControl.arrayCopy(mData.c2,this.c2,c2Len);
		}
		else
		{
			this.c2=null;
			nullObjError("c2");
		}
		
		if(mData.c3!=null)
		{
			long[] c3R=mData.c3;
			int c3Len=c3R.length;
			if(this.c3==null || this.c3.length!=c3Len)
			{
				this.c3=new long[c3Len];
			}
			BytesControl.arrayCopy(mData.c3,this.c3,c3Len);
		}
		else
		{
			this.c3=null;
			nullObjError("c3");
		}
		
		if(mData.c4!=null)
		{
			String[] c4R=mData.c4;
			int c4Len=c4R.length;
			if(this.c4==null || this.c4.length!=c4Len)
			{
				this.c4=new String[c4Len];
			}
			BytesControl.arrayCopy(mData.c4,this.c4,c4Len);
		}
		else
		{
			this.c4=null;
			nullObjError("c4");
		}
		
		if(mData.c5!=null)
		{
			int[][] c5R=mData.c5;
			int c5Len=c5R.length;
			if(this.c5==null || this.c5.length!=c5Len)
			{
				this.c5=new int[c5Len][];
			}
			int[][] c5T=this.c5;
			for(int c5I=0;c5I<c5Len;++c5I)
			{
				int[] c5V=c5R[c5I];
				int[] c5U;
				if(c5V!=null)
				{
					int[] c5UR=c5V;
					int c5ULen=c5UR.length;
					c5U=new int[c5ULen];
					BytesControl.arrayCopy(c5V,c5U,c5ULen);
				}
				else
				{
					c5U=null;
					nullObjError("c5U");
				}
				
				c5T[c5I]=c5U;
			}
		}
		else
		{
			this.c5=null;
			nullObjError("c5");
		}
		
		if(mData.c6!=null)
		{
			int[][][] c6R=mData.c6;
			int c6Len=c6R.length;
			if(this.c6==null || this.c6.length!=c6Len)
			{
				this.c6=new int[c6Len][][];
			}
			int[][][] c6T=this.c6;
			for(int c6I=0;c6I<c6Len;++c6I)
			{
				int[][] c6V=c6R[c6I];
				int[][] c6U;
				if(c6V!=null)
				{
					int[][] c6UR=c6V;
					int c6ULen=c6UR.length;
					c6U=new int[c6ULen][];
					int[][] c6UT=c6U;
					for(int c6UI=0;c6UI<c6ULen;++c6UI)
					{
						int[] c6UV=c6UR[c6UI];
						int[] c6UU;
						if(c6UV!=null)
						{
							int[] c6UUR=c6UV;
							int c6UULen=c6UUR.length;
							c6UU=new int[c6UULen];
							BytesControl.arrayCopy(c6UV,c6UU,c6UULen);
						}
						else
						{
							c6UU=null;
							nullObjError("c6UU");
						}
						
						c6UT[c6UI]=c6UU;
					}
				}
				else
				{
					c6U=null;
					nullObjError("c6U");
				}
				
				c6T[c6I]=c6U;
			}
		}
		else
		{
			this.c6=null;
			nullObjError("c6");
		}
		
		if(mData.d1!=null)
		{
			if(this.d1!=null)
			{
				this.d1.clear();
				this.d1.ensureCapacity(mData.d1.size());
			}
			else
			{
				this.d1=new IntList(mData.d1.size());
			}
			
			IntList d1T=this.d1;
			if(!mData.d1.isEmpty())
			{
				int[] d1VValues=mData.d1.getValues();
				for(int d1VI=0,d1VLen=mData.d1.length();d1VI<d1VLen;++d1VI)
				{
					int d1V=d1VValues[d1VI];
					int d1U;
					d1U=d1V;
					
					d1T.add(d1U);
				}
			}
		}
		else
		{
			this.d1=null;
			nullObjError("d1");
		}
		
		if(mData.d2!=null)
		{
			if(this.d2!=null)
			{
				this.d2.clear();
				this.d2.ensureCapacity(mData.d2.size());
			}
			else
			{
				this.d2=new LongList(mData.d2.size());
			}
			
			LongList d2T=this.d2;
			if(!mData.d2.isEmpty())
			{
				long[] d2VValues=mData.d2.getValues();
				for(int d2VI=0,d2VLen=mData.d2.length();d2VI<d2VLen;++d2VI)
				{
					long d2V=d2VValues[d2VI];
					long d2U;
					d2U=d2V;
					
					d2T.add(d2U);
				}
			}
		}
		else
		{
			this.d2=null;
			nullObjError("d2");
		}
		
		if(mData.d3!=null)
		{
			if(this.d3!=null)
			{
				this.d3.clear();
				this.d3.ensureCapacity(mData.d3.size());
			}
			else
			{
				this.d3=new SList<String>(String[]::new,mData.d3.size());
			}
			
			SList<String> d3T=this.d3;
			if(!mData.d3.isEmpty())
			{
				Object[] d3VValues=mData.d3.getValues();
				for(int d3VI=0,d3VLen=mData.d3.length();d3VI<d3VLen;++d3VI)
				{
					String d3V=(String)d3VValues[d3VI];
					String d3U;
					d3U=d3V;
					
					d3T.add(d3U);
				}
			}
		}
		else
		{
			this.d3=null;
			nullObjError("d3");
		}
		
		if(mData.d4!=null)
		{
			if(this.d4!=null)
			{
				this.d4.clear();
				this.d4.ensureCapacity(mData.d4.size());
			}
			else
			{
				this.d4=new SList<Test2Data>(Test2Data[]::new,mData.d4.size());
			}
			
			SList<Test2Data> d4T=this.d4;
			if(!mData.d4.isEmpty())
			{
				Object[] d4VValues=mData.d4.getValues();
				for(int d4VI=0,d4VLen=mData.d4.length();d4VI<d4VLen;++d4VI)
				{
					Test2Data d4V=(Test2Data)d4VValues[d4VI];
					Test2Data d4U;
					if(d4V!=null)
					{
						d4U=(Test2Data)d4V.clone();
					}
					else
					{
						d4U=null;
						nullObjError("d4U");
					}
					
					d4T.add(d4U);
				}
			}
		}
		else
		{
			this.d4=null;
			nullObjError("d4");
		}
		
		if(mData.d5!=null)
		{
			if(this.d5!=null)
			{
				this.d5.clear();
				this.d5.ensureCapacity(mData.d5.size());
			}
			else
			{
				this.d5=new SList<Test2Data>(Test2Data[]::new,mData.d5.size());
			}
			
			SList<Test2Data> d5T=this.d5;
			if(!mData.d5.isEmpty())
			{
				Object[] d5VValues=mData.d5.getValues();
				for(int d5VI=0,d5VLen=mData.d5.length();d5VI<d5VLen;++d5VI)
				{
					Test2Data d5V=(Test2Data)d5VValues[d5VI];
					Test2Data d5U;
					if(d5V!=null)
					{
						d5U=(Test2Data)d5V.clone();
					}
					else
					{
						d5U=null;
						nullObjError("d5U");
					}
					
					d5T.add(d5U);
				}
			}
		}
		else
		{
			this.d5=null;
			nullObjError("d5");
		}
		
		if(mData.d6!=null)
		{
			if(this.d6!=null)
			{
				this.d6.clear();
				this.d6.ensureCapacity(mData.d6.size());
			}
			else
			{
				this.d6=new SList<Test2Data>(Test2Data[]::new,mData.d6.size());
			}
			
			SList<Test2Data> d6T=this.d6;
			if(!mData.d6.isEmpty())
			{
				Object[] d6VValues=mData.d6.getValues();
				for(int d6VI=0,d6VLen=mData.d6.length();d6VI<d6VLen;++d6VI)
				{
					Test2Data d6V=(Test2Data)d6VValues[d6VI];
					Test2Data d6U;
					if(d6V!=null)
					{
						d6U=(Test2Data)d6V.clone();
					}
					else
					{
						d6U=null;
					}
					
					d6T.add(d6U);
				}
			}
		}
		else
		{
			this.d6=null;
		}
		
		if(mData.d7!=null)
		{
			if(this.d7!=null)
			{
				this.d7.clear();
				this.d7.ensureCapacity(mData.d7.size());
			}
			else
			{
				this.d7=new IntSet(mData.d7.size());
			}
			
			IntSet d7T=this.d7;
			if(!mData.d7.isEmpty())
			{
				int d7VFreeValue=mData.d7.getFreeValue();
				int[] d7VKeys=mData.d7.getKeys();
				for(int d7VI=d7VKeys.length-1;d7VI>=0;--d7VI)
				{
					int d7V=d7VKeys[d7VI];
					if(d7V!=d7VFreeValue)
					{
						int d7U;
						d7U=d7V;
						
						d7T.add(d7U);
					}
				}
			}
		}
		else
		{
			this.d7=null;
			nullObjError("d7");
		}
		
		if(mData.d8!=null)
		{
			if(this.d8!=null)
			{
				this.d8.clear();
				this.d8.ensureCapacity(mData.d8.size());
			}
			else
			{
				this.d8=new LongSet(mData.d8.size());
			}
			
			LongSet d8T=this.d8;
			if(!mData.d8.isEmpty())
			{
				long d8VFreeValue=mData.d8.getFreeValue();
				long[] d8VKeys=mData.d8.getKeys();
				for(int d8VI=d8VKeys.length-1;d8VI>=0;--d8VI)
				{
					long d8V=d8VKeys[d8VI];
					if(d8V!=d8VFreeValue)
					{
						long d8U;
						d8U=d8V;
						
						d8T.add(d8U);
					}
				}
			}
		}
		else
		{
			this.d8=null;
			nullObjError("d8");
		}
		
		if(mData.d9!=null)
		{
			if(this.d9!=null)
			{
				this.d9.clear();
				this.d9.ensureCapacity(mData.d9.size());
			}
			else
			{
				this.d9=new SSet<String>(String[]::new,mData.d9.size());
			}
			
			SSet<String> d9T=this.d9;
			if(!mData.d9.isEmpty())
			{
				Object[] d9VKeys=mData.d9.getKeys();
				for(int d9VI=d9VKeys.length-1;d9VI>=0;--d9VI)
				{
					if(d9VKeys[d9VI]!=null)
					{
						String d9V=(String)d9VKeys[d9VI];
						String d9U;
						d9U=d9V;
						
						d9T.add(d9U);
					}
				}
			}
		}
		else
		{
			this.d9=null;
			nullObjError("d9");
		}
		
		if(mData.d10!=null)
		{
			if(this.d10!=null)
			{
				this.d10.clear();
				this.d10.ensureCapacity(mData.d10.size());
			}
			else
			{
				this.d10=new SSet<Test2Data>(Test2Data[]::new,mData.d10.size());
			}
			
			SSet<Test2Data> d10T=this.d10;
			if(!mData.d10.isEmpty())
			{
				Object[] d10VKeys=mData.d10.getKeys();
				for(int d10VI=d10VKeys.length-1;d10VI>=0;--d10VI)
				{
					if(d10VKeys[d10VI]!=null)
					{
						Test2Data d10V=(Test2Data)d10VKeys[d10VI];
						Test2Data d10U;
						if(d10V!=null)
						{
							d10U=(Test2Data)d10V.clone();
						}
						else
						{
							d10U=null;
							nullObjError("d10U");
						}
						
						d10T.add(d10U);
					}
				}
			}
		}
		else
		{
			this.d10=null;
			nullObjError("d10");
		}
		
		if(mData.d11!=null)
		{
			if(this.d11!=null)
			{
				this.d11.clear();
				this.d11.ensureCapacity(mData.d11.size());
			}
			else
			{
				this.d11=new SSet<Test2Data>(Test2Data[]::new,mData.d11.size());
			}
			
			SSet<Test2Data> d11T=this.d11;
			if(!mData.d11.isEmpty())
			{
				Object[] d11VKeys=mData.d11.getKeys();
				for(int d11VI=d11VKeys.length-1;d11VI>=0;--d11VI)
				{
					if(d11VKeys[d11VI]!=null)
					{
						Test2Data d11V=(Test2Data)d11VKeys[d11VI];
						Test2Data d11U;
						if(d11V!=null)
						{
							d11U=(Test2Data)d11V.clone();
						}
						else
						{
							d11U=null;
							nullObjError("d11U");
						}
						
						d11T.add(d11U);
					}
				}
			}
		}
		else
		{
			this.d11=null;
			nullObjError("d11");
		}
		
		if(mData.e1!=null)
		{
			if(this.e1!=null)
			{
				this.e1.clear();
				this.e1.ensureCapacity(mData.e1.size());
			}
			else
			{
				this.e1=new IntIntMap(mData.e1.size());
			}
			
			IntIntMap e1T=this.e1;
			if(!mData.e1.isEmpty())
			{
				int e1KFreeValue=mData.e1.getFreeValue();
				long[] e1KTable=mData.e1.getTable();
				long e1KEntry;
				for(int e1KI=e1KTable.length-1;e1KI>=0;--e1KI)
				{
					e1KEntry=e1KTable[e1KI];
					int e1K=(int)e1KEntry;
					if(e1K!=e1KFreeValue)
					{
						int e1V=(int)(e1KEntry>>>32);
						int e1W;
						int e1U;
						e1W=e1K;
						
						e1U=e1V;
						
						e1T.put(e1W,e1U);
					}
				}
			}
		}
		else
		{
			this.e1=null;
			nullObjError("e1");
		}
		
		if(mData.e12!=null)
		{
			if(this.e12!=null)
			{
				this.e12.clear();
				this.e12.ensureCapacity(mData.e12.size());
			}
			else
			{
				this.e12=new LongLongMap(mData.e12.size());
			}
			
			LongLongMap e12T=this.e12;
			if(!mData.e12.isEmpty())
			{
				long e12KFreeValue=mData.e12.getFreeValue();
				long[] e12KKeys=mData.e12.getKeys();
				long[] e12VValues=mData.e12.getValues();
				for(int e12KI=e12KKeys.length-1;e12KI>=0;--e12KI)
				{
					long e12K=e12KKeys[e12KI];
					if(e12K!=e12KFreeValue)
					{
						long e12V=e12VValues[e12KI];
						long e12W;
						long e12U;
						e12W=e12K;
						
						e12U=e12V;
						
						e12T.put(e12W,e12U);
					}
				}
			}
		}
		else
		{
			this.e12=null;
			nullObjError("e12");
		}
		
		if(mData.e2!=null)
		{
			if(this.e2!=null)
			{
				this.e2.clear();
				this.e2.ensureCapacity(mData.e2.size());
			}
			else
			{
				this.e2=new IntObjectMap<Test2Data>(Test2Data[]::new,mData.e2.size());
			}
			
			IntObjectMap<Test2Data> e2T=this.e2;
			if(!mData.e2.isEmpty())
			{
				int e2KFreeValue=mData.e2.getFreeValue();
				int[] e2KKeys=mData.e2.getKeys();
				Object[] e2VValues=mData.e2.getValues();
				for(int e2KI=e2KKeys.length-1;e2KI>=0;--e2KI)
				{
					int e2K=e2KKeys[e2KI];
					if(e2K!=e2KFreeValue)
					{
						Test2Data e2V=(Test2Data)e2VValues[e2KI];
						int e2W;
						Test2Data e2U;
						e2W=e2K;
						
						if(e2V!=null)
						{
							e2U=(Test2Data)e2V.clone();
						}
						else
						{
							e2U=null;
							nullObjError("e2U");
						}
						
						e2T.put(e2W,e2U);
					}
				}
			}
		}
		else
		{
			this.e2=null;
			nullObjError("e2");
		}
		
		if(mData.e3!=null)
		{
			if(this.e3!=null)
			{
				this.e3.clear();
				this.e3.ensureCapacity(mData.e3.size());
			}
			else
			{
				this.e3=new LongObjectMap<Test2Data>(Test2Data[]::new,mData.e3.size());
			}
			
			LongObjectMap<Test2Data> e3T=this.e3;
			if(!mData.e3.isEmpty())
			{
				long e3KFreeValue=mData.e3.getFreeValue();
				long[] e3KKeys=mData.e3.getKeys();
				Object[] e3VValues=mData.e3.getValues();
				for(int e3KI=e3KKeys.length-1;e3KI>=0;--e3KI)
				{
					long e3K=e3KKeys[e3KI];
					if(e3K!=e3KFreeValue)
					{
						Test2Data e3V=(Test2Data)e3VValues[e3KI];
						long e3W;
						Test2Data e3U;
						e3W=e3K;
						
						if(e3V!=null)
						{
							e3U=(Test2Data)e3V.clone();
						}
						else
						{
							e3U=null;
							nullObjError("e3U");
						}
						
						e3T.put(e3W,e3U);
					}
				}
			}
		}
		else
		{
			this.e3=null;
			nullObjError("e3");
		}
		
		if(mData.e4!=null)
		{
			if(this.e4!=null)
			{
				this.e4.clear();
				this.e4.ensureCapacity(mData.e4.size());
			}
			else
			{
				this.e4=new SMap<String,Test2Data>(mData.e4.size());
			}
			
			SMap<String,Test2Data> e4T=this.e4;
			if(!mData.e4.isEmpty())
			{
				Object[] e4KTable=mData.e4.getTable();
				for(int e4KI=e4KTable.length-2;e4KI>=0;e4KI-=2)
				{
					if(e4KTable[e4KI]!=null)
					{
						String e4K=(String)e4KTable[e4KI];
						Test2Data e4V=(Test2Data)e4KTable[e4KI+1];
						String e4W;
						Test2Data e4U;
						e4W=e4K;
						
						if(e4V!=null)
						{
							e4U=(Test2Data)e4V.clone();
						}
						else
						{
							e4U=null;
							nullObjError("e4U");
						}
						
						e4T.put(e4W,e4U);
					}
				}
			}
		}
		else
		{
			this.e4=null;
			nullObjError("e4");
		}
		
		if(mData.e5!=null)
		{
			if(this.e5!=null)
			{
				this.e5.clear();
				this.e5.ensureCapacity(mData.e5.size());
			}
			else
			{
				this.e5=new IntObjectMap<Test2Data>(Test2Data[]::new,mData.e5.size());
			}
			
			IntObjectMap<Test2Data> e5T=this.e5;
			if(!mData.e5.isEmpty())
			{
				int e5KFreeValue=mData.e5.getFreeValue();
				int[] e5KKeys=mData.e5.getKeys();
				Object[] e5VValues=mData.e5.getValues();
				for(int e5KI=e5KKeys.length-1;e5KI>=0;--e5KI)
				{
					int e5K=e5KKeys[e5KI];
					if(e5K!=e5KFreeValue)
					{
						Test2Data e5V=(Test2Data)e5VValues[e5KI];
						int e5W;
						Test2Data e5U;
						e5W=e5K;
						
						if(e5V!=null)
						{
							e5U=(Test2Data)e5V.clone();
						}
						else
						{
							e5U=null;
							nullObjError("e5U");
						}
						
						e5T.put(e5W,e5U);
					}
				}
			}
		}
		else
		{
			this.e5=null;
			nullObjError("e5");
		}
		
		if(mData.e6!=null)
		{
			if(this.e6!=null)
			{
				this.e6.clear();
				this.e6.ensureCapacity(mData.e6.size());
			}
			else
			{
				this.e6=new IntObjectMap<Test2Data>(Test2Data[]::new,mData.e6.size());
			}
			
			IntObjectMap<Test2Data> e6T=this.e6;
			if(!mData.e6.isEmpty())
			{
				Object[] e6VValues=mData.e6.getValues();
				for(int e6VI=e6VValues.length-1;e6VI>=0;--e6VI)
				{
					if(e6VValues[e6VI]!=null)
					{
						Test2Data e6V=(Test2Data)e6VValues[e6VI];
						Test2Data e6U;
						if(e6V!=null)
						{
							e6U=(Test2Data)e6V.clone();
						}
						else
						{
							e6U=null;
							nullObjError("e6U");
						}
						
						e6T.put(e6U.a,e6U);
					}
				}
			}
		}
		else
		{
			this.e6=null;
			nullObjError("e6");
		}
		
		if(mData.e7!=null)
		{
			if(this.e7!=null)
			{
				this.e7.clear();
				this.e7.ensureCapacity(mData.e7.size());
			}
			else
			{
				this.e7=new IntObjectMap<Test2Data>(Test2Data[]::new,mData.e7.size());
			}
			
			IntObjectMap<Test2Data> e7T=this.e7;
			if(!mData.e7.isEmpty())
			{
				Object[] e7VValues=mData.e7.getValues();
				for(int e7VI=e7VValues.length-1;e7VI>=0;--e7VI)
				{
					if(e7VValues[e7VI]!=null)
					{
						Test2Data e7V=(Test2Data)e7VValues[e7VI];
						Test2Data e7U;
						if(e7V!=null)
						{
							e7U=(Test2Data)e7V.clone();
						}
						else
						{
							e7U=null;
							nullObjError("e7U");
						}
						
						e7T.put(e7U.a,e7U);
					}
				}
			}
		}
		else
		{
			this.e7=null;
			nullObjError("e7");
		}
		
		if(mData.e8!=null)
		{
			if(this.e8!=null)
			{
				this.e8.clear();
				this.e8.ensureCapacity(mData.e8.size());
			}
			else
			{
				this.e8=new IntObjectMap<Test2Data>(Test2Data[]::new,mData.e8.size());
			}
			
			IntObjectMap<Test2Data> e8T=this.e8;
			if(!mData.e8.isEmpty())
			{
				Object[] e8VValues=mData.e8.getValues();
				for(int e8VI=e8VValues.length-1;e8VI>=0;--e8VI)
				{
					if(e8VValues[e8VI]!=null)
					{
						Test2Data e8V=(Test2Data)e8VValues[e8VI];
						Test2Data e8U;
						if(e8V!=null)
						{
							e8U=(Test2Data)e8V.clone();
						}
						else
						{
							e8U=null;
							nullObjError("e8U");
						}
						
						e8T.put(e8U.a,e8U);
					}
				}
			}
		}
		else
		{
			this.e8=null;
			nullObjError("e8");
		}
		
		if(mData.f1!=null)
		{
			IntList[] f1R=mData.f1;
			int f1Len=f1R.length;
			if(this.f1==null || this.f1.length!=f1Len)
			{
				this.f1=new IntList[f1Len];
			}
			IntList[] f1T=this.f1;
			for(int f1I=0;f1I<f1Len;++f1I)
			{
				IntList f1V=f1R[f1I];
				IntList f1U;
				if(f1V!=null)
				{
					f1U=new IntList(f1V.size());
					IntList f1UT=f1U;
					if(!f1V.isEmpty())
					{
						int[] f1UVValues=f1V.getValues();
						for(int f1UVI=0,f1UVLen=f1V.length();f1UVI<f1UVLen;++f1UVI)
						{
							int f1UV=f1UVValues[f1UVI];
							int f1UU;
							f1UU=f1UV;
							
							f1UT.add(f1UU);
						}
					}
				}
				else
				{
					f1U=null;
					nullObjError("f1U");
				}
				
				f1T[f1I]=f1U;
			}
		}
		else
		{
			this.f1=null;
			nullObjError("f1");
		}
		
		if(mData.f2!=null)
		{
			SList<int[]>[] f2R=mData.f2;
			int f2Len=f2R.length;
			if(this.f2==null || this.f2.length!=f2Len)
			{
				this.f2=new SList[f2Len];
			}
			SList<int[]>[] f2T=this.f2;
			for(int f2I=0;f2I<f2Len;++f2I)
			{
				SList<int[]> f2V=f2R[f2I];
				SList<int[]> f2U;
				if(f2V!=null)
				{
					f2U=new SList<int[]>(int[][]::new,f2V.size());
					SList<int[]> f2UT=f2U;
					if(!f2V.isEmpty())
					{
						Object[] f2UVValues=f2V.getValues();
						for(int f2UVI=0,f2UVLen=f2V.length();f2UVI<f2UVLen;++f2UVI)
						{
							int[] f2UV=(int[])f2UVValues[f2UVI];
							int[] f2UU;
							if(f2UV!=null)
							{
								int[] f2UUR=f2UV;
								int f2UULen=f2UUR.length;
								f2UU=new int[f2UULen];
								BytesControl.arrayCopy(f2UV,f2UU,f2UULen);
							}
							else
							{
								f2UU=null;
								nullObjError("f2UU");
							}
							
							f2UT.add(f2UU);
						}
					}
				}
				else
				{
					f2U=null;
					nullObjError("f2U");
				}
				
				f2T[f2I]=f2U;
			}
		}
		else
		{
			this.f2=null;
			nullObjError("f2");
		}
		
		if(mData.f3!=null)
		{
			SList<Test2Data>[] f3R=mData.f3;
			int f3Len=f3R.length;
			if(this.f3==null || this.f3.length!=f3Len)
			{
				this.f3=new SList[f3Len];
			}
			SList<Test2Data>[] f3T=this.f3;
			for(int f3I=0;f3I<f3Len;++f3I)
			{
				SList<Test2Data> f3V=f3R[f3I];
				SList<Test2Data> f3U;
				if(f3V!=null)
				{
					f3U=new SList<Test2Data>(Test2Data[]::new,f3V.size());
					SList<Test2Data> f3UT=f3U;
					if(!f3V.isEmpty())
					{
						Object[] f3UVValues=f3V.getValues();
						for(int f3UVI=0,f3UVLen=f3V.length();f3UVI<f3UVLen;++f3UVI)
						{
							Test2Data f3UV=(Test2Data)f3UVValues[f3UVI];
							Test2Data f3UU;
							if(f3UV!=null)
							{
								f3UU=(Test2Data)f3UV.clone();
							}
							else
							{
								f3UU=null;
								nullObjError("f3UU");
							}
							
							f3UT.add(f3UU);
						}
					}
				}
				else
				{
					f3U=null;
					nullObjError("f3U");
				}
				
				f3T[f3I]=f3U;
			}
		}
		else
		{
			this.f3=null;
			nullObjError("f3");
		}
		
		if(mData.f4!=null)
		{
			SList<Test2Data[]>[] f4R=mData.f4;
			int f4Len=f4R.length;
			if(this.f4==null || this.f4.length!=f4Len)
			{
				this.f4=new SList[f4Len];
			}
			SList<Test2Data[]>[] f4T=this.f4;
			for(int f4I=0;f4I<f4Len;++f4I)
			{
				SList<Test2Data[]> f4V=f4R[f4I];
				SList<Test2Data[]> f4U;
				if(f4V!=null)
				{
					f4U=new SList<Test2Data[]>(Test2Data[][]::new,f4V.size());
					SList<Test2Data[]> f4UT=f4U;
					if(!f4V.isEmpty())
					{
						Object[] f4UVValues=f4V.getValues();
						for(int f4UVI=0,f4UVLen=f4V.length();f4UVI<f4UVLen;++f4UVI)
						{
							Test2Data[] f4UV=(Test2Data[])f4UVValues[f4UVI];
							Test2Data[] f4UU;
							if(f4UV!=null)
							{
								Test2Data[] f4UUR=f4UV;
								int f4UULen=f4UUR.length;
								f4UU=new Test2Data[f4UULen];
								Test2Data[] f4UUT=f4UU;
								for(int f4UUI=0;f4UUI<f4UULen;++f4UUI)
								{
									Test2Data f4UUV=f4UUR[f4UUI];
									Test2Data f4UUU;
									if(f4UUV!=null)
									{
										f4UUU=(Test2Data)f4UUV.clone();
									}
									else
									{
										f4UUU=null;
										nullObjError("f4UUU");
									}
									
									f4UUT[f4UUI]=f4UUU;
								}
							}
							else
							{
								f4UU=null;
								nullObjError("f4UU");
							}
							
							f4UT.add(f4UU);
						}
					}
				}
				else
				{
					f4U=null;
					nullObjError("f4U");
				}
				
				f4T[f4I]=f4U;
			}
		}
		else
		{
			this.f4=null;
			nullObjError("f4");
		}
		
		if(mData.f5!=null)
		{
			SList<Test2Data>[] f5R=mData.f5;
			int f5Len=f5R.length;
			if(this.f5==null || this.f5.length!=f5Len)
			{
				this.f5=new SList[f5Len];
			}
			SList<Test2Data>[] f5T=this.f5;
			for(int f5I=0;f5I<f5Len;++f5I)
			{
				SList<Test2Data> f5V=f5R[f5I];
				SList<Test2Data> f5U;
				if(f5V!=null)
				{
					f5U=new SList<Test2Data>(Test2Data[]::new,f5V.size());
					SList<Test2Data> f5UT=f5U;
					if(!f5V.isEmpty())
					{
						Object[] f5UVValues=f5V.getValues();
						for(int f5UVI=0,f5UVLen=f5V.length();f5UVI<f5UVLen;++f5UVI)
						{
							Test2Data f5UV=(Test2Data)f5UVValues[f5UVI];
							Test2Data f5UU;
							if(f5UV!=null)
							{
								f5UU=(Test2Data)f5UV.clone();
							}
							else
							{
								f5UU=null;
							}
							
							f5UT.add(f5UU);
						}
					}
				}
				else
				{
					f5U=null;
				}
				
				f5T[f5I]=f5U;
			}
		}
		else
		{
			this.f5=null;
		}
		
		if(mData.f6!=null)
		{
			SList<Test2Data[]>[] f6R=mData.f6;
			int f6Len=f6R.length;
			if(this.f6==null || this.f6.length!=f6Len)
			{
				this.f6=new SList[f6Len];
			}
			SList<Test2Data[]>[] f6T=this.f6;
			for(int f6I=0;f6I<f6Len;++f6I)
			{
				SList<Test2Data[]> f6V=f6R[f6I];
				SList<Test2Data[]> f6U;
				if(f6V!=null)
				{
					f6U=new SList<Test2Data[]>(Test2Data[][]::new,f6V.size());
					SList<Test2Data[]> f6UT=f6U;
					if(!f6V.isEmpty())
					{
						Object[] f6UVValues=f6V.getValues();
						for(int f6UVI=0,f6UVLen=f6V.length();f6UVI<f6UVLen;++f6UVI)
						{
							Test2Data[] f6UV=(Test2Data[])f6UVValues[f6UVI];
							Test2Data[] f6UU;
							if(f6UV!=null)
							{
								Test2Data[] f6UUR=f6UV;
								int f6UULen=f6UUR.length;
								f6UU=new Test2Data[f6UULen];
								Test2Data[] f6UUT=f6UU;
								for(int f6UUI=0;f6UUI<f6UULen;++f6UUI)
								{
									Test2Data f6UUV=f6UUR[f6UUI];
									Test2Data f6UUU;
									if(f6UUV!=null)
									{
										f6UUU=(Test2Data)f6UUV.clone();
									}
									else
									{
										f6UUU=null;
									}
									
									f6UUT[f6UUI]=f6UUU;
								}
							}
							else
							{
								f6UU=null;
							}
							
							f6UT.add(f6UU);
						}
					}
				}
				else
				{
					f6U=null;
				}
				
				f6T[f6I]=f6U;
			}
		}
		else
		{
			this.f6=null;
		}
		
		if(mData.g1!=null)
		{
			if(this.g1!=null)
			{
				this.g1.clear();
				this.g1.ensureCapacity(mData.g1.size());
			}
			else
			{
				this.g1=new IntObjectMap<IntObjectMap<Test2Data>>(IntObjectMap[]::new,mData.g1.size());
			}
			
			IntObjectMap<IntObjectMap<Test2Data>> g1T=this.g1;
			if(!mData.g1.isEmpty())
			{
				int g1KFreeValue=mData.g1.getFreeValue();
				int[] g1KKeys=mData.g1.getKeys();
				Object[] g1VValues=mData.g1.getValues();
				for(int g1KI=g1KKeys.length-1;g1KI>=0;--g1KI)
				{
					int g1K=g1KKeys[g1KI];
					if(g1K!=g1KFreeValue)
					{
						IntObjectMap<Test2Data> g1V=(IntObjectMap<Test2Data>)g1VValues[g1KI];
						int g1W;
						IntObjectMap<Test2Data> g1U;
						g1W=g1K;
						
						if(g1V!=null)
						{
							g1U=new IntObjectMap<Test2Data>(Test2Data[]::new,g1V.size());
							IntObjectMap<Test2Data> g1UT=g1U;
							if(!g1V.isEmpty())
							{
								int g1UKFreeValue=g1V.getFreeValue();
								int[] g1UKKeys=g1V.getKeys();
								Object[] g1UVValues=g1V.getValues();
								for(int g1UKI=g1UKKeys.length-1;g1UKI>=0;--g1UKI)
								{
									int g1UK=g1UKKeys[g1UKI];
									if(g1UK!=g1UKFreeValue)
									{
										Test2Data g1UV=(Test2Data)g1UVValues[g1UKI];
										int g1UW;
										Test2Data g1UU;
										g1UW=g1UK;
										
										if(g1UV!=null)
										{
											g1UU=(Test2Data)g1UV.clone();
										}
										else
										{
											g1UU=null;
											nullObjError("g1UU");
										}
										
										g1UT.put(g1UW,g1UU);
									}
								}
							}
						}
						else
						{
							g1U=null;
							nullObjError("g1U");
						}
						
						g1T.put(g1W,g1U);
					}
				}
			}
		}
		else
		{
			this.g1=null;
			nullObjError("g1");
		}
		
		if(mData.h1!=null)
		{
			if(this.h1!=null)
			{
				this.h1.clear();
				this.h1.ensureCapacity(mData.h1.size());
			}
			else
			{
				this.h1=new IntQueue(mData.h1.size());
			}
			
			IntQueue h1T=this.h1;
			if(!mData.h1.isEmpty())
			{
				int[] h1VValues=mData.h1.getValues();
				int h1VMark=mData.h1.getMark();
				int h1VStart=mData.h1.getStart();
				for(int h1VI=0,h1VLen=mData.h1.length();h1VI<h1VLen;++h1VI)
				{
					int h1V=h1VValues[(h1VI+h1VStart)&h1VMark];
					int h1U;
					h1U=h1V;
					
					h1T.offer(h1U);
				}
			}
		}
		else
		{
			this.h1=null;
			nullObjError("h1");
		}
		
		if(mData.h2!=null)
		{
			if(this.h2!=null)
			{
				this.h2.clear();
				this.h2.ensureCapacity(mData.h2.size());
			}
			else
			{
				this.h2=new SQueue<Test2Data>(Test2Data[]::new,mData.h2.size());
			}
			
			SQueue<Test2Data> h2T=this.h2;
			if(!mData.h2.isEmpty())
			{
				Object[] h2VValues=mData.h2.getValues();
				int h2VMark=mData.h2.getMark();
				int h2VStart=mData.h2.getStart();
				for(int h2VI=0,h2VLen=mData.h2.length();h2VI<h2VLen;++h2VI)
				{
					Test2Data h2V=(Test2Data)h2VValues[(h2VI+h2VStart)&h2VMark];
					Test2Data h2U;
					if(h2V!=null)
					{
						h2U=(Test2Data)h2V.clone();
					}
					else
					{
						h2U=null;
						nullObjError("h2U");
					}
					
					h2T.offer(h2U);
				}
			}
		}
		else
		{
			this.h2=null;
			nullObjError("h2");
		}
		
		if(mData.h3!=null)
		{
			if(this.h3!=null)
			{
				this.h3.clear();
				this.h3.ensureCapacity(mData.h3.size());
			}
			else
			{
				this.h3=new IntObjectMap<SQueue<Test2Data>>(SQueue[]::new,mData.h3.size());
			}
			
			IntObjectMap<SQueue<Test2Data>> h3T=this.h3;
			if(!mData.h3.isEmpty())
			{
				int h3KFreeValue=mData.h3.getFreeValue();
				int[] h3KKeys=mData.h3.getKeys();
				Object[] h3VValues=mData.h3.getValues();
				for(int h3KI=h3KKeys.length-1;h3KI>=0;--h3KI)
				{
					int h3K=h3KKeys[h3KI];
					if(h3K!=h3KFreeValue)
					{
						SQueue<Test2Data> h3V=(SQueue<Test2Data>)h3VValues[h3KI];
						int h3W;
						SQueue<Test2Data> h3U;
						h3W=h3K;
						
						if(h3V!=null)
						{
							h3U=new SQueue<Test2Data>(Test2Data[]::new,h3V.size());
							SQueue<Test2Data> h3UT=h3U;
							if(!h3V.isEmpty())
							{
								Object[] h3UVValues=h3V.getValues();
								int h3UVMark=h3V.getMark();
								int h3UVStart=h3V.getStart();
								for(int h3UVI=0,h3UVLen=h3V.length();h3UVI<h3UVLen;++h3UVI)
								{
									Test2Data h3UV=(Test2Data)h3UVValues[(h3UVI+h3UVStart)&h3UVMark];
									Test2Data h3UU;
									if(h3UV!=null)
									{
										h3UU=(Test2Data)h3UV.clone();
									}
									else
									{
										h3UU=null;
										nullObjError("h3UU");
									}
									
									h3UT.offer(h3UU);
								}
							}
						}
						else
						{
							h3U=null;
							nullObjError("h3U");
						}
						
						h3T.put(h3W,h3U);
					}
				}
			}
		}
		else
		{
			this.h3=null;
			nullObjError("h3");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof TestData))
			return;
		
		TestData mData=(TestData)data;
		
		this.a1=mData.a1;
		this.a2=mData.a2;
		this.a6=mData.a6;
		this.a7=mData.a7;
		this.a8=mData.a8;
		this.a9=mData.a9;
		this.a10=mData.a10;
		this.b1=mData.b1;
		this.b2=mData.b2;
		this.b3=mData.b3;
		this.b4=mData.b4;
		this.c1=mData.c1;
		this.c2=mData.c2;
		this.c3=mData.c3;
		this.c4=mData.c4;
		this.c5=mData.c5;
		this.c6=mData.c6;
		this.d1=mData.d1;
		this.d2=mData.d2;
		this.d3=mData.d3;
		this.d4=mData.d4;
		this.d5=mData.d5;
		this.d6=mData.d6;
		this.d7=mData.d7;
		this.d8=mData.d8;
		this.d9=mData.d9;
		this.d10=mData.d10;
		this.d11=mData.d11;
		this.e1=mData.e1;
		this.e12=mData.e12;
		this.e2=mData.e2;
		this.e3=mData.e3;
		this.e4=mData.e4;
		this.e5=mData.e5;
		this.e6=mData.e6;
		this.e7=mData.e7;
		this.e8=mData.e8;
		this.f1=mData.f1;
		this.f2=mData.f2;
		this.f3=mData.f3;
		this.f4=mData.f4;
		this.f5=mData.f5;
		this.f6=mData.f6;
		this.g1=mData.g1;
		this.h1=mData.h1;
		this.h2=mData.h2;
		this.h3=mData.h3;
	}
	
	/** 是否数据一致 */
	@SuppressWarnings("unchecked")
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		TestData mData=(TestData)data;
		if(this.a1!=mData.a1)
			return false;
		
		if(this.a2!=mData.a2)
			return false;
		
		if(this.a6!=mData.a6)
			return false;
		
		if(this.a7!=mData.a7)
			return false;
		
		if(this.a8!=mData.a8)
			return false;
		
		if(this.a9!=mData.a9)
			return false;
		
		if(!this.a10.equals(mData.a10))
			return false;
		
		if(mData.b1!=null)
		{
			if(this.b1==null)
				return false;
			if(!this.b1.dataEquals(mData.b1))
				return false;
		}
		else
		{
			if(this.b1!=null)
				return false;
		}
		
		if(mData.b2!=null)
		{
			if(this.b2==null)
				return false;
			if(!this.b2.dataEquals(mData.b2))
				return false;
		}
		else
		{
			if(this.b2!=null)
				return false;
		}
		
		if(mData.b3!=null)
		{
			if(this.b3==null)
				return false;
			if(!this.b3.dataEquals(mData.b3))
				return false;
		}
		else
		{
			if(this.b3!=null)
				return false;
		}
		
		if(mData.b4!=null)
		{
			if(this.b4==null)
				return false;
			if(!this.b4.dataEquals(mData.b4))
				return false;
		}
		else
		{
			if(this.b4!=null)
				return false;
		}
		
		if(mData.c1!=null)
		{
			if(this.c1==null)
				return false;
			if(this.c1.length!=mData.c1.length)
				return false;
			byte[] c1T=this.c1;
			byte[] c1R=mData.c1;
			int c1Len=c1T.length;
			for(int c1I=0;c1I<c1Len;++c1I)
			{
				byte c1U=c1T[c1I];
				byte c1V=c1R[c1I];
				if(c1U!=c1V)
					return false;
				
			}
		}
		else
		{
			if(this.c1!=null)
				return false;
		}
		
		if(mData.c2!=null)
		{
			if(this.c2==null)
				return false;
			if(this.c2.length!=mData.c2.length)
				return false;
			int[] c2T=this.c2;
			int[] c2R=mData.c2;
			int c2Len=c2T.length;
			for(int c2I=0;c2I<c2Len;++c2I)
			{
				int c2U=c2T[c2I];
				int c2V=c2R[c2I];
				if(c2U!=c2V)
					return false;
				
			}
		}
		else
		{
			if(this.c2!=null)
				return false;
		}
		
		if(mData.c3!=null)
		{
			if(this.c3==null)
				return false;
			if(this.c3.length!=mData.c3.length)
				return false;
			long[] c3T=this.c3;
			long[] c3R=mData.c3;
			int c3Len=c3T.length;
			for(int c3I=0;c3I<c3Len;++c3I)
			{
				long c3U=c3T[c3I];
				long c3V=c3R[c3I];
				if(c3U!=c3V)
					return false;
				
			}
		}
		else
		{
			if(this.c3!=null)
				return false;
		}
		
		if(mData.c4!=null)
		{
			if(this.c4==null)
				return false;
			if(this.c4.length!=mData.c4.length)
				return false;
			String[] c4T=this.c4;
			String[] c4R=mData.c4;
			int c4Len=c4T.length;
			for(int c4I=0;c4I<c4Len;++c4I)
			{
				String c4U=c4T[c4I];
				String c4V=c4R[c4I];
				if(!c4U.equals(c4V))
					return false;
				
			}
		}
		else
		{
			if(this.c4!=null)
				return false;
		}
		
		if(mData.c5!=null)
		{
			if(this.c5==null)
				return false;
			if(this.c5.length!=mData.c5.length)
				return false;
			int[][] c5T=this.c5;
			int[][] c5R=mData.c5;
			int c5Len=c5T.length;
			for(int c5I=0;c5I<c5Len;++c5I)
			{
				int[] c5U=c5T[c5I];
				int[] c5V=c5R[c5I];
				if(c5V!=null)
				{
					if(c5U==null)
						return false;
					if(c5U.length!=c5V.length)
						return false;
					int[] c5UT=c5U;
					int[] c5UR=c5V;
					int c5ULen=c5UT.length;
					for(int c5UI=0;c5UI<c5ULen;++c5UI)
					{
						int c5UU=c5UT[c5UI];
						int c5UV=c5UR[c5UI];
						if(c5UU!=c5UV)
							return false;
						
					}
				}
				else
				{
					if(c5U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.c5!=null)
				return false;
		}
		
		if(mData.c6!=null)
		{
			if(this.c6==null)
				return false;
			if(this.c6.length!=mData.c6.length)
				return false;
			int[][][] c6T=this.c6;
			int[][][] c6R=mData.c6;
			int c6Len=c6T.length;
			for(int c6I=0;c6I<c6Len;++c6I)
			{
				int[][] c6U=c6T[c6I];
				int[][] c6V=c6R[c6I];
				if(c6V!=null)
				{
					if(c6U==null)
						return false;
					if(c6U.length!=c6V.length)
						return false;
					int[][] c6UT=c6U;
					int[][] c6UR=c6V;
					int c6ULen=c6UT.length;
					for(int c6UI=0;c6UI<c6ULen;++c6UI)
					{
						int[] c6UU=c6UT[c6UI];
						int[] c6UV=c6UR[c6UI];
						if(c6UV!=null)
						{
							if(c6UU==null)
								return false;
							if(c6UU.length!=c6UV.length)
								return false;
							int[] c6UUT=c6UU;
							int[] c6UUR=c6UV;
							int c6UULen=c6UUT.length;
							for(int c6UUI=0;c6UUI<c6UULen;++c6UUI)
							{
								int c6UUU=c6UUT[c6UUI];
								int c6UUV=c6UUR[c6UUI];
								if(c6UUU!=c6UUV)
									return false;
								
							}
						}
						else
						{
							if(c6UU!=null)
								return false;
						}
						
					}
				}
				else
				{
					if(c6U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.c6!=null)
				return false;
		}
		
		if(mData.d1!=null)
		{
			if(this.d1==null)
				return false;
			if(this.d1.size()!=mData.d1.size())
				return false;
			IntList d1T=this.d1;
			IntList d1R=mData.d1;
			int d1Len=d1T.size();
			for(int d1I=0;d1I<d1Len;++d1I)
			{
				int d1U=d1T.get(d1I);
				int d1V=d1R.get(d1I);
				if(d1U!=d1V)
					return false;
				
			}
		}
		else
		{
			if(this.d1!=null)
				return false;
		}
		
		if(mData.d2!=null)
		{
			if(this.d2==null)
				return false;
			if(this.d2.size()!=mData.d2.size())
				return false;
			LongList d2T=this.d2;
			LongList d2R=mData.d2;
			int d2Len=d2T.size();
			for(int d2I=0;d2I<d2Len;++d2I)
			{
				long d2U=d2T.get(d2I);
				long d2V=d2R.get(d2I);
				if(d2U!=d2V)
					return false;
				
			}
		}
		else
		{
			if(this.d2!=null)
				return false;
		}
		
		if(mData.d3!=null)
		{
			if(this.d3==null)
				return false;
			if(this.d3.size()!=mData.d3.size())
				return false;
			SList<String> d3T=this.d3;
			SList<String> d3R=mData.d3;
			int d3Len=d3T.size();
			for(int d3I=0;d3I<d3Len;++d3I)
			{
				String d3U=d3T.get(d3I);
				String d3V=d3R.get(d3I);
				if(!d3U.equals(d3V))
					return false;
				
			}
		}
		else
		{
			if(this.d3!=null)
				return false;
		}
		
		if(mData.d4!=null)
		{
			if(this.d4==null)
				return false;
			if(this.d4.size()!=mData.d4.size())
				return false;
			SList<Test2Data> d4T=this.d4;
			SList<Test2Data> d4R=mData.d4;
			int d4Len=d4T.size();
			for(int d4I=0;d4I<d4Len;++d4I)
			{
				Test2Data d4U=d4T.get(d4I);
				Test2Data d4V=d4R.get(d4I);
				if(d4V!=null)
				{
					if(d4U==null)
						return false;
					if(!d4U.dataEquals(d4V))
						return false;
				}
				else
				{
					if(d4U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.d4!=null)
				return false;
		}
		
		if(mData.d5!=null)
		{
			if(this.d5==null)
				return false;
			if(this.d5.size()!=mData.d5.size())
				return false;
			SList<Test2Data> d5T=this.d5;
			SList<Test2Data> d5R=mData.d5;
			int d5Len=d5T.size();
			for(int d5I=0;d5I<d5Len;++d5I)
			{
				Test2Data d5U=d5T.get(d5I);
				Test2Data d5V=d5R.get(d5I);
				if(d5V!=null)
				{
					if(d5U==null)
						return false;
					if(!d5U.dataEquals(d5V))
						return false;
				}
				else
				{
					if(d5U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.d5!=null)
				return false;
		}
		
		if(mData.d6!=null)
		{
			if(this.d6==null)
				return false;
			if(this.d6.size()!=mData.d6.size())
				return false;
			SList<Test2Data> d6T=this.d6;
			SList<Test2Data> d6R=mData.d6;
			int d6Len=d6T.size();
			for(int d6I=0;d6I<d6Len;++d6I)
			{
				Test2Data d6U=d6T.get(d6I);
				Test2Data d6V=d6R.get(d6I);
				if(d6V!=null)
				{
					if(d6U==null)
						return false;
					if(!d6U.dataEquals(d6V))
						return false;
				}
				else
				{
					if(d6U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.d6!=null)
				return false;
		}
		
		if(mData.d7!=null)
		{
			if(this.d7==null)
				return false;
			if(this.d7.size()!=mData.d7.size())
				return false;
			IntSet d7R=mData.d7;
			if(!this.d7.isEmpty())
			{
				int d7VFreeValue=this.d7.getFreeValue();
				int[] d7VKeys=this.d7.getKeys();
				for(int d7VI=d7VKeys.length-1;d7VI>=0;--d7VI)
				{
					int d7V=d7VKeys[d7VI];
					if(d7V!=d7VFreeValue)
					{
						if(!d7R.contains(d7V))
							return false;
					}
				}
			}
		}
		else
		{
			if(this.d7!=null)
				return false;
		}
		
		if(mData.d8!=null)
		{
			if(this.d8==null)
				return false;
			if(this.d8.size()!=mData.d8.size())
				return false;
			LongSet d8R=mData.d8;
			if(!this.d8.isEmpty())
			{
				long d8VFreeValue=this.d8.getFreeValue();
				long[] d8VKeys=this.d8.getKeys();
				for(int d8VI=d8VKeys.length-1;d8VI>=0;--d8VI)
				{
					long d8V=d8VKeys[d8VI];
					if(d8V!=d8VFreeValue)
					{
						if(!d8R.contains(d8V))
							return false;
					}
				}
			}
		}
		else
		{
			if(this.d8!=null)
				return false;
		}
		
		if(mData.d9!=null)
		{
			if(this.d9==null)
				return false;
			if(this.d9.size()!=mData.d9.size())
				return false;
			SSet<String> d9R=mData.d9;
			if(!this.d9.isEmpty())
			{
				Object[] d9VKeys=this.d9.getKeys();
				for(int d9VI=d9VKeys.length-1;d9VI>=0;--d9VI)
				{
					if(d9VKeys[d9VI]!=null)
					{
						String d9V=(String)d9VKeys[d9VI];
						if(!d9R.contains(d9V))
							return false;
					}
				}
			}
		}
		else
		{
			if(this.d9!=null)
				return false;
		}
		
		if(mData.d10!=null)
		{
			if(this.d10==null)
				return false;
			if(this.d10.size()!=mData.d10.size())
				return false;
			SSet<Test2Data> d10R=mData.d10;
			if(!this.d10.isEmpty())
			{
				Object[] d10VKeys=this.d10.getKeys();
				for(int d10VI=d10VKeys.length-1;d10VI>=0;--d10VI)
				{
					if(d10VKeys[d10VI]!=null)
					{
						Test2Data d10V=(Test2Data)d10VKeys[d10VI];
						if(!d10R.contains(d10V))
							return false;
					}
				}
			}
		}
		else
		{
			if(this.d10!=null)
				return false;
		}
		
		if(mData.d11!=null)
		{
			if(this.d11==null)
				return false;
			if(this.d11.size()!=mData.d11.size())
				return false;
			SSet<Test2Data> d11R=mData.d11;
			if(!this.d11.isEmpty())
			{
				Object[] d11VKeys=this.d11.getKeys();
				for(int d11VI=d11VKeys.length-1;d11VI>=0;--d11VI)
				{
					if(d11VKeys[d11VI]!=null)
					{
						Test2Data d11V=(Test2Data)d11VKeys[d11VI];
						if(!d11R.contains(d11V))
							return false;
					}
				}
			}
		}
		else
		{
			if(this.d11!=null)
				return false;
		}
		
		if(mData.e1!=null)
		{
			if(this.e1==null)
				return false;
			if(this.e1.size()!=mData.e1.size())
				return false;
			IntIntMap e1R=mData.e1;
			if(!this.e1.isEmpty())
			{
				int e1KFreeValue=this.e1.getFreeValue();
				long[] e1KTable=this.e1.getTable();
				long e1KEntry;
				for(int e1KI=e1KTable.length-1;e1KI>=0;--e1KI)
				{
					e1KEntry=e1KTable[e1KI];
					int e1K=(int)e1KEntry;
					if(e1K!=e1KFreeValue)
					{
						int e1V=(int)(e1KEntry>>>32);
						int e1U=e1R.get(e1K);
						if(e1V!=e1U)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.e1!=null)
				return false;
		}
		
		if(mData.e12!=null)
		{
			if(this.e12==null)
				return false;
			if(this.e12.size()!=mData.e12.size())
				return false;
			LongLongMap e12R=mData.e12;
			if(!this.e12.isEmpty())
			{
				long e12KFreeValue=this.e12.getFreeValue();
				long[] e12KKeys=this.e12.getKeys();
				long[] e12VValues=this.e12.getValues();
				for(int e12KI=e12KKeys.length-1;e12KI>=0;--e12KI)
				{
					long e12K=e12KKeys[e12KI];
					if(e12K!=e12KFreeValue)
					{
						long e12V=e12VValues[e12KI];
						long e12U=e12R.get(e12K);
						if(e12V!=e12U)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.e12!=null)
				return false;
		}
		
		if(mData.e2!=null)
		{
			if(this.e2==null)
				return false;
			if(this.e2.size()!=mData.e2.size())
				return false;
			IntObjectMap<Test2Data> e2R=mData.e2;
			if(!this.e2.isEmpty())
			{
				int e2KFreeValue=this.e2.getFreeValue();
				int[] e2KKeys=this.e2.getKeys();
				Object[] e2VValues=this.e2.getValues();
				for(int e2KI=e2KKeys.length-1;e2KI>=0;--e2KI)
				{
					int e2K=e2KKeys[e2KI];
					if(e2K!=e2KFreeValue)
					{
						Test2Data e2V=(Test2Data)e2VValues[e2KI];
						Test2Data e2U=e2R.get(e2K);
						if(e2U!=null)
						{
							if(e2V==null)
								return false;
							if(!e2V.dataEquals(e2U))
								return false;
						}
						else
						{
							if(e2V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e2!=null)
				return false;
		}
		
		if(mData.e3!=null)
		{
			if(this.e3==null)
				return false;
			if(this.e3.size()!=mData.e3.size())
				return false;
			LongObjectMap<Test2Data> e3R=mData.e3;
			if(!this.e3.isEmpty())
			{
				long e3KFreeValue=this.e3.getFreeValue();
				long[] e3KKeys=this.e3.getKeys();
				Object[] e3VValues=this.e3.getValues();
				for(int e3KI=e3KKeys.length-1;e3KI>=0;--e3KI)
				{
					long e3K=e3KKeys[e3KI];
					if(e3K!=e3KFreeValue)
					{
						Test2Data e3V=(Test2Data)e3VValues[e3KI];
						Test2Data e3U=e3R.get(e3K);
						if(e3U!=null)
						{
							if(e3V==null)
								return false;
							if(!e3V.dataEquals(e3U))
								return false;
						}
						else
						{
							if(e3V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e3!=null)
				return false;
		}
		
		if(mData.e4!=null)
		{
			if(this.e4==null)
				return false;
			if(this.e4.size()!=mData.e4.size())
				return false;
			SMap<String,Test2Data> e4R=mData.e4;
			if(!this.e4.isEmpty())
			{
				Object[] e4KTable=this.e4.getTable();
				for(int e4KI=e4KTable.length-2;e4KI>=0;e4KI-=2)
				{
					if(e4KTable[e4KI]!=null)
					{
						String e4K=(String)e4KTable[e4KI];
						Test2Data e4V=(Test2Data)e4KTable[e4KI+1];
						Test2Data e4U=e4R.get(e4K);
						if(e4U!=null)
						{
							if(e4V==null)
								return false;
							if(!e4V.dataEquals(e4U))
								return false;
						}
						else
						{
							if(e4V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e4!=null)
				return false;
		}
		
		if(mData.e5!=null)
		{
			if(this.e5==null)
				return false;
			if(this.e5.size()!=mData.e5.size())
				return false;
			IntObjectMap<Test2Data> e5R=mData.e5;
			if(!this.e5.isEmpty())
			{
				int e5KFreeValue=this.e5.getFreeValue();
				int[] e5KKeys=this.e5.getKeys();
				Object[] e5VValues=this.e5.getValues();
				for(int e5KI=e5KKeys.length-1;e5KI>=0;--e5KI)
				{
					int e5K=e5KKeys[e5KI];
					if(e5K!=e5KFreeValue)
					{
						Test2Data e5V=(Test2Data)e5VValues[e5KI];
						Test2Data e5U=e5R.get(e5K);
						if(e5U!=null)
						{
							if(e5V==null)
								return false;
							if(!e5V.dataEquals(e5U))
								return false;
						}
						else
						{
							if(e5V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e5!=null)
				return false;
		}
		
		if(mData.e6!=null)
		{
			if(this.e6==null)
				return false;
			if(this.e6.size()!=mData.e6.size())
				return false;
			IntObjectMap<Test2Data> e6R=mData.e6;
			if(!this.e6.isEmpty())
			{
				int e6KFreeValue=this.e6.getFreeValue();
				int[] e6KKeys=this.e6.getKeys();
				Object[] e6VValues=this.e6.getValues();
				for(int e6KI=e6KKeys.length-1;e6KI>=0;--e6KI)
				{
					int e6K=e6KKeys[e6KI];
					if(e6K!=e6KFreeValue)
					{
						Test2Data e6V=(Test2Data)e6VValues[e6KI];
						Test2Data e6U=e6R.get(e6K);
						if(e6U!=null)
						{
							if(e6V==null)
								return false;
							if(!e6V.dataEquals(e6U))
								return false;
						}
						else
						{
							if(e6V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e6!=null)
				return false;
		}
		
		if(mData.e7!=null)
		{
			if(this.e7==null)
				return false;
			if(this.e7.size()!=mData.e7.size())
				return false;
			IntObjectMap<Test2Data> e7R=mData.e7;
			if(!this.e7.isEmpty())
			{
				int e7KFreeValue=this.e7.getFreeValue();
				int[] e7KKeys=this.e7.getKeys();
				Object[] e7VValues=this.e7.getValues();
				for(int e7KI=e7KKeys.length-1;e7KI>=0;--e7KI)
				{
					int e7K=e7KKeys[e7KI];
					if(e7K!=e7KFreeValue)
					{
						Test2Data e7V=(Test2Data)e7VValues[e7KI];
						Test2Data e7U=e7R.get(e7K);
						if(e7U!=null)
						{
							if(e7V==null)
								return false;
							if(!e7V.dataEquals(e7U))
								return false;
						}
						else
						{
							if(e7V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e7!=null)
				return false;
		}
		
		if(mData.e8!=null)
		{
			if(this.e8==null)
				return false;
			if(this.e8.size()!=mData.e8.size())
				return false;
			IntObjectMap<Test2Data> e8R=mData.e8;
			if(!this.e8.isEmpty())
			{
				int e8KFreeValue=this.e8.getFreeValue();
				int[] e8KKeys=this.e8.getKeys();
				Object[] e8VValues=this.e8.getValues();
				for(int e8KI=e8KKeys.length-1;e8KI>=0;--e8KI)
				{
					int e8K=e8KKeys[e8KI];
					if(e8K!=e8KFreeValue)
					{
						Test2Data e8V=(Test2Data)e8VValues[e8KI];
						Test2Data e8U=e8R.get(e8K);
						if(e8U!=null)
						{
							if(e8V==null)
								return false;
							if(!e8V.dataEquals(e8U))
								return false;
						}
						else
						{
							if(e8V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.e8!=null)
				return false;
		}
		
		if(mData.f1!=null)
		{
			if(this.f1==null)
				return false;
			if(this.f1.length!=mData.f1.length)
				return false;
			IntList[] f1T=this.f1;
			IntList[] f1R=mData.f1;
			int f1Len=f1T.length;
			for(int f1I=0;f1I<f1Len;++f1I)
			{
				IntList f1U=f1T[f1I];
				IntList f1V=f1R[f1I];
				if(f1V!=null)
				{
					if(f1U==null)
						return false;
					if(f1U.size()!=f1V.size())
						return false;
					IntList f1UT=f1U;
					IntList f1UR=f1V;
					int f1ULen=f1UT.size();
					for(int f1UI=0;f1UI<f1ULen;++f1UI)
					{
						int f1UU=f1UT.get(f1UI);
						int f1UV=f1UR.get(f1UI);
						if(f1UU!=f1UV)
							return false;
						
					}
				}
				else
				{
					if(f1U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.f1!=null)
				return false;
		}
		
		if(mData.f2!=null)
		{
			if(this.f2==null)
				return false;
			if(this.f2.length!=mData.f2.length)
				return false;
			SList<int[]>[] f2T=this.f2;
			SList<int[]>[] f2R=mData.f2;
			int f2Len=f2T.length;
			for(int f2I=0;f2I<f2Len;++f2I)
			{
				SList<int[]> f2U=f2T[f2I];
				SList<int[]> f2V=f2R[f2I];
				if(f2V!=null)
				{
					if(f2U==null)
						return false;
					if(f2U.size()!=f2V.size())
						return false;
					SList<int[]> f2UT=f2U;
					SList<int[]> f2UR=f2V;
					int f2ULen=f2UT.size();
					for(int f2UI=0;f2UI<f2ULen;++f2UI)
					{
						int[] f2UU=f2UT.get(f2UI);
						int[] f2UV=f2UR.get(f2UI);
						if(f2UV!=null)
						{
							if(f2UU==null)
								return false;
							if(f2UU.length!=f2UV.length)
								return false;
							int[] f2UUT=f2UU;
							int[] f2UUR=f2UV;
							int f2UULen=f2UUT.length;
							for(int f2UUI=0;f2UUI<f2UULen;++f2UUI)
							{
								int f2UUU=f2UUT[f2UUI];
								int f2UUV=f2UUR[f2UUI];
								if(f2UUU!=f2UUV)
									return false;
								
							}
						}
						else
						{
							if(f2UU!=null)
								return false;
						}
						
					}
				}
				else
				{
					if(f2U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.f2!=null)
				return false;
		}
		
		if(mData.f3!=null)
		{
			if(this.f3==null)
				return false;
			if(this.f3.length!=mData.f3.length)
				return false;
			SList<Test2Data>[] f3T=this.f3;
			SList<Test2Data>[] f3R=mData.f3;
			int f3Len=f3T.length;
			for(int f3I=0;f3I<f3Len;++f3I)
			{
				SList<Test2Data> f3U=f3T[f3I];
				SList<Test2Data> f3V=f3R[f3I];
				if(f3V!=null)
				{
					if(f3U==null)
						return false;
					if(f3U.size()!=f3V.size())
						return false;
					SList<Test2Data> f3UT=f3U;
					SList<Test2Data> f3UR=f3V;
					int f3ULen=f3UT.size();
					for(int f3UI=0;f3UI<f3ULen;++f3UI)
					{
						Test2Data f3UU=f3UT.get(f3UI);
						Test2Data f3UV=f3UR.get(f3UI);
						if(f3UV!=null)
						{
							if(f3UU==null)
								return false;
							if(!f3UU.dataEquals(f3UV))
								return false;
						}
						else
						{
							if(f3UU!=null)
								return false;
						}
						
					}
				}
				else
				{
					if(f3U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.f3!=null)
				return false;
		}
		
		if(mData.f4!=null)
		{
			if(this.f4==null)
				return false;
			if(this.f4.length!=mData.f4.length)
				return false;
			SList<Test2Data[]>[] f4T=this.f4;
			SList<Test2Data[]>[] f4R=mData.f4;
			int f4Len=f4T.length;
			for(int f4I=0;f4I<f4Len;++f4I)
			{
				SList<Test2Data[]> f4U=f4T[f4I];
				SList<Test2Data[]> f4V=f4R[f4I];
				if(f4V!=null)
				{
					if(f4U==null)
						return false;
					if(f4U.size()!=f4V.size())
						return false;
					SList<Test2Data[]> f4UT=f4U;
					SList<Test2Data[]> f4UR=f4V;
					int f4ULen=f4UT.size();
					for(int f4UI=0;f4UI<f4ULen;++f4UI)
					{
						Test2Data[] f4UU=f4UT.get(f4UI);
						Test2Data[] f4UV=f4UR.get(f4UI);
						if(f4UV!=null)
						{
							if(f4UU==null)
								return false;
							if(f4UU.length!=f4UV.length)
								return false;
							Test2Data[] f4UUT=f4UU;
							Test2Data[] f4UUR=f4UV;
							int f4UULen=f4UUT.length;
							for(int f4UUI=0;f4UUI<f4UULen;++f4UUI)
							{
								Test2Data f4UUU=f4UUT[f4UUI];
								Test2Data f4UUV=f4UUR[f4UUI];
								if(f4UUV!=null)
								{
									if(f4UUU==null)
										return false;
									if(!f4UUU.dataEquals(f4UUV))
										return false;
								}
								else
								{
									if(f4UUU!=null)
										return false;
								}
								
							}
						}
						else
						{
							if(f4UU!=null)
								return false;
						}
						
					}
				}
				else
				{
					if(f4U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.f4!=null)
				return false;
		}
		
		if(mData.f5!=null)
		{
			if(this.f5==null)
				return false;
			if(this.f5.length!=mData.f5.length)
				return false;
			SList<Test2Data>[] f5T=this.f5;
			SList<Test2Data>[] f5R=mData.f5;
			int f5Len=f5T.length;
			for(int f5I=0;f5I<f5Len;++f5I)
			{
				SList<Test2Data> f5U=f5T[f5I];
				SList<Test2Data> f5V=f5R[f5I];
				if(f5V!=null)
				{
					if(f5U==null)
						return false;
					if(f5U.size()!=f5V.size())
						return false;
					SList<Test2Data> f5UT=f5U;
					SList<Test2Data> f5UR=f5V;
					int f5ULen=f5UT.size();
					for(int f5UI=0;f5UI<f5ULen;++f5UI)
					{
						Test2Data f5UU=f5UT.get(f5UI);
						Test2Data f5UV=f5UR.get(f5UI);
						if(f5UV!=null)
						{
							if(f5UU==null)
								return false;
							if(!f5UU.dataEquals(f5UV))
								return false;
						}
						else
						{
							if(f5UU!=null)
								return false;
						}
						
					}
				}
				else
				{
					if(f5U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.f5!=null)
				return false;
		}
		
		if(mData.f6!=null)
		{
			if(this.f6==null)
				return false;
			if(this.f6.length!=mData.f6.length)
				return false;
			SList<Test2Data[]>[] f6T=this.f6;
			SList<Test2Data[]>[] f6R=mData.f6;
			int f6Len=f6T.length;
			for(int f6I=0;f6I<f6Len;++f6I)
			{
				SList<Test2Data[]> f6U=f6T[f6I];
				SList<Test2Data[]> f6V=f6R[f6I];
				if(f6V!=null)
				{
					if(f6U==null)
						return false;
					if(f6U.size()!=f6V.size())
						return false;
					SList<Test2Data[]> f6UT=f6U;
					SList<Test2Data[]> f6UR=f6V;
					int f6ULen=f6UT.size();
					for(int f6UI=0;f6UI<f6ULen;++f6UI)
					{
						Test2Data[] f6UU=f6UT.get(f6UI);
						Test2Data[] f6UV=f6UR.get(f6UI);
						if(f6UV!=null)
						{
							if(f6UU==null)
								return false;
							if(f6UU.length!=f6UV.length)
								return false;
							Test2Data[] f6UUT=f6UU;
							Test2Data[] f6UUR=f6UV;
							int f6UULen=f6UUT.length;
							for(int f6UUI=0;f6UUI<f6UULen;++f6UUI)
							{
								Test2Data f6UUU=f6UUT[f6UUI];
								Test2Data f6UUV=f6UUR[f6UUI];
								if(f6UUV!=null)
								{
									if(f6UUU==null)
										return false;
									if(!f6UUU.dataEquals(f6UUV))
										return false;
								}
								else
								{
									if(f6UUU!=null)
										return false;
								}
								
							}
						}
						else
						{
							if(f6UU!=null)
								return false;
						}
						
					}
				}
				else
				{
					if(f6U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.f6!=null)
				return false;
		}
		
		if(mData.g1!=null)
		{
			if(this.g1==null)
				return false;
			if(this.g1.size()!=mData.g1.size())
				return false;
			IntObjectMap<IntObjectMap<Test2Data>> g1R=mData.g1;
			if(!this.g1.isEmpty())
			{
				int g1KFreeValue=this.g1.getFreeValue();
				int[] g1KKeys=this.g1.getKeys();
				Object[] g1VValues=this.g1.getValues();
				for(int g1KI=g1KKeys.length-1;g1KI>=0;--g1KI)
				{
					int g1K=g1KKeys[g1KI];
					if(g1K!=g1KFreeValue)
					{
						IntObjectMap<Test2Data> g1V=(IntObjectMap<Test2Data>)g1VValues[g1KI];
						IntObjectMap<Test2Data> g1U=g1R.get(g1K);
						if(g1U!=null)
						{
							if(g1V==null)
								return false;
							if(g1V.size()!=g1U.size())
								return false;
							IntObjectMap<Test2Data> g1VR=g1U;
							if(!g1V.isEmpty())
							{
								int g1VKFreeValue=g1V.getFreeValue();
								int[] g1VKKeys=g1V.getKeys();
								Object[] g1VVValues=g1V.getValues();
								for(int g1VKI=g1VKKeys.length-1;g1VKI>=0;--g1VKI)
								{
									int g1VK=g1VKKeys[g1VKI];
									if(g1VK!=g1VKFreeValue)
									{
										Test2Data g1VV=(Test2Data)g1VVValues[g1VKI];
										Test2Data g1VU=g1VR.get(g1VK);
										if(g1VU!=null)
										{
											if(g1VV==null)
												return false;
											if(!g1VV.dataEquals(g1VU))
												return false;
										}
										else
										{
											if(g1VV!=null)
												return false;
										}
										
									}
								}
							}
						}
						else
						{
							if(g1V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.g1!=null)
				return false;
		}
		
		if(mData.h1!=null)
		{
			if(this.h1==null)
				return false;
			if(this.h1.size()!=mData.h1.size())
				return false;
			IntQueue h1T=this.h1;
			IntQueue h1R=mData.h1;
			int h1Len=h1T.size();
			for(int h1I=0;h1I<h1Len;++h1I)
			{
				int h1U=h1T.get(h1I);
				int h1V=h1R.get(h1I);
				if(h1U!=h1V)
					return false;
				
			}
		}
		else
		{
			if(this.h1!=null)
				return false;
		}
		
		if(mData.h2!=null)
		{
			if(this.h2==null)
				return false;
			if(this.h2.size()!=mData.h2.size())
				return false;
			SQueue<Test2Data> h2T=this.h2;
			SQueue<Test2Data> h2R=mData.h2;
			int h2Len=h2T.size();
			for(int h2I=0;h2I<h2Len;++h2I)
			{
				Test2Data h2U=h2T.get(h2I);
				Test2Data h2V=h2R.get(h2I);
				if(h2V!=null)
				{
					if(h2U==null)
						return false;
					if(!h2U.dataEquals(h2V))
						return false;
				}
				else
				{
					if(h2U!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.h2!=null)
				return false;
		}
		
		if(mData.h3!=null)
		{
			if(this.h3==null)
				return false;
			if(this.h3.size()!=mData.h3.size())
				return false;
			IntObjectMap<SQueue<Test2Data>> h3R=mData.h3;
			if(!this.h3.isEmpty())
			{
				int h3KFreeValue=this.h3.getFreeValue();
				int[] h3KKeys=this.h3.getKeys();
				Object[] h3VValues=this.h3.getValues();
				for(int h3KI=h3KKeys.length-1;h3KI>=0;--h3KI)
				{
					int h3K=h3KKeys[h3KI];
					if(h3K!=h3KFreeValue)
					{
						SQueue<Test2Data> h3V=(SQueue<Test2Data>)h3VValues[h3KI];
						SQueue<Test2Data> h3U=h3R.get(h3K);
						if(h3U!=null)
						{
							if(h3V==null)
								return false;
							if(h3V.size()!=h3U.size())
								return false;
							SQueue<Test2Data> h3VT=h3V;
							SQueue<Test2Data> h3VR=h3U;
							int h3VLen=h3VT.size();
							for(int h3VI=0;h3VI<h3VLen;++h3VI)
							{
								Test2Data h3VU=h3VT.get(h3VI);
								Test2Data h3VV=h3VR.get(h3VI);
								if(h3VV!=null)
								{
									if(h3VU==null)
										return false;
									if(!h3VU.dataEquals(h3VV))
										return false;
								}
								else
								{
									if(h3VU!=null)
										return false;
								}
								
							}
						}
						else
						{
							if(h3V!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.h3!=null)
				return false;
		}
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "TestData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("a1");
		writer.sb.append(':');
		writer.sb.append(this.a1);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("a2");
		writer.sb.append(':');
		writer.sb.append(this.a2);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("a6");
		writer.sb.append(':');
		writer.sb.append(this.a6);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("a7");
		writer.sb.append(':');
		writer.sb.append(this.a7);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("a8");
		writer.sb.append(':');
		writer.sb.append(this.a8);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("a9");
		writer.sb.append(':');
		writer.sb.append(this.a9);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("a10");
		writer.sb.append(':');
		writer.sb.append(this.a10);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("b1");
		writer.sb.append(':');
		if(this.b1!=null)
		{
			this.b1.writeDataString(writer);
		}
		else
		{
			writer.sb.append("Test2Data=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("b2");
		writer.sb.append(':');
		if(this.b2!=null)
		{
			this.b2.writeDataString(writer);
		}
		else
		{
			writer.sb.append("Test2Data=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("b3");
		writer.sb.append(':');
		if(this.b3!=null)
		{
			this.b3.writeDataString(writer);
		}
		else
		{
			writer.sb.append("Test2Data=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("b4");
		writer.sb.append(':');
		if(this.b4!=null)
		{
			this.b4.writeDataString(writer);
		}
		else
		{
			writer.sb.append("Test2Data=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("c1");
		writer.sb.append(':');
		writer.sb.append("Array<byte>");
		if(this.c1!=null)
		{
			byte[] c1T=this.c1;
			int c1Len=c1T.length;
			writer.sb.append('(');
			writer.sb.append(c1Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int c1I=0;c1I<c1Len;++c1I)
			{
				byte c1V=c1T[c1I];
				writer.writeTabs();
				writer.sb.append(c1I);
				writer.sb.append(':');
				writer.sb.append(c1V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("c2");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.c2!=null)
		{
			int[] c2T=this.c2;
			int c2Len=c2T.length;
			writer.sb.append('(');
			writer.sb.append(c2Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int c2I=0;c2I<c2Len;++c2I)
			{
				int c2V=c2T[c2I];
				writer.writeTabs();
				writer.sb.append(c2I);
				writer.sb.append(':');
				writer.sb.append(c2V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("c3");
		writer.sb.append(':');
		writer.sb.append("Array<long>");
		if(this.c3!=null)
		{
			long[] c3T=this.c3;
			int c3Len=c3T.length;
			writer.sb.append('(');
			writer.sb.append(c3Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int c3I=0;c3I<c3Len;++c3I)
			{
				long c3V=c3T[c3I];
				writer.writeTabs();
				writer.sb.append(c3I);
				writer.sb.append(':');
				writer.sb.append(c3V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("c4");
		writer.sb.append(':');
		writer.sb.append("Array<String>");
		if(this.c4!=null)
		{
			String[] c4T=this.c4;
			int c4Len=c4T.length;
			writer.sb.append('(');
			writer.sb.append(c4Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int c4I=0;c4I<c4Len;++c4I)
			{
				String c4V=c4T[c4I];
				writer.writeTabs();
				writer.sb.append(c4I);
				writer.sb.append(':');
				writer.sb.append(c4V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("c5");
		writer.sb.append(':');
		writer.sb.append("Array<int[]>");
		if(this.c5!=null)
		{
			int[][] c5T=this.c5;
			int c5Len=c5T.length;
			writer.sb.append('(');
			writer.sb.append(c5Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int c5I=0;c5I<c5Len;++c5I)
			{
				int[] c5V=c5T[c5I];
				writer.writeTabs();
				writer.sb.append(c5I);
				writer.sb.append(':');
				writer.sb.append("Array<int>");
				if(c5V!=null)
				{
					int[] c5VT=c5V;
					int c5VLen=c5VT.length;
					writer.sb.append('(');
					writer.sb.append(c5VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int c5VI=0;c5VI<c5VLen;++c5VI)
					{
						int c5VV=c5VT[c5VI];
						writer.writeTabs();
						writer.sb.append(c5VI);
						writer.sb.append(':');
						writer.sb.append(c5VV);
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("c6");
		writer.sb.append(':');
		writer.sb.append("Array<int[][]>");
		if(this.c6!=null)
		{
			int[][][] c6T=this.c6;
			int c6Len=c6T.length;
			writer.sb.append('(');
			writer.sb.append(c6Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int c6I=0;c6I<c6Len;++c6I)
			{
				int[][] c6V=c6T[c6I];
				writer.writeTabs();
				writer.sb.append(c6I);
				writer.sb.append(':');
				writer.sb.append("Array<int[]>");
				if(c6V!=null)
				{
					int[][] c6VT=c6V;
					int c6VLen=c6VT.length;
					writer.sb.append('(');
					writer.sb.append(c6VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int c6VI=0;c6VI<c6VLen;++c6VI)
					{
						int[] c6VV=c6VT[c6VI];
						writer.writeTabs();
						writer.sb.append(c6VI);
						writer.sb.append(':');
						writer.sb.append("Array<int>");
						if(c6VV!=null)
						{
							int[] c6VVT=c6VV;
							int c6VVLen=c6VVT.length;
							writer.sb.append('(');
							writer.sb.append(c6VVLen);
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int c6VVI=0;c6VVI<c6VVLen;++c6VVI)
							{
								int c6VVV=c6VVT[c6VVI];
								writer.writeTabs();
								writer.sb.append(c6VVI);
								writer.sb.append(':');
								writer.sb.append(c6VVV);
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d1");
		writer.sb.append(':');
		writer.sb.append("List<int>");
		if(this.d1!=null)
		{
			IntList d1T=this.d1;
			int d1Len=d1T.size();
			writer.sb.append('(');
			writer.sb.append(d1Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int d1I=0;d1I<d1Len;++d1I)
			{
				int d1V=d1T.get(d1I);
				writer.writeTabs();
				writer.sb.append(d1I);
				writer.sb.append(':');
				writer.sb.append(d1V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d2");
		writer.sb.append(':');
		writer.sb.append("List<long>");
		if(this.d2!=null)
		{
			LongList d2T=this.d2;
			int d2Len=d2T.size();
			writer.sb.append('(');
			writer.sb.append(d2Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int d2I=0;d2I<d2Len;++d2I)
			{
				long d2V=d2T.get(d2I);
				writer.writeTabs();
				writer.sb.append(d2I);
				writer.sb.append(':');
				writer.sb.append(d2V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d3");
		writer.sb.append(':');
		writer.sb.append("List<String>");
		if(this.d3!=null)
		{
			SList<String> d3T=this.d3;
			int d3Len=d3T.size();
			writer.sb.append('(');
			writer.sb.append(d3Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int d3I=0;d3I<d3Len;++d3I)
			{
				String d3V=d3T.get(d3I);
				writer.writeTabs();
				writer.sb.append(d3I);
				writer.sb.append(':');
				writer.sb.append(d3V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d4");
		writer.sb.append(':');
		writer.sb.append("List<Test2Data>");
		if(this.d4!=null)
		{
			SList<Test2Data> d4T=this.d4;
			int d4Len=d4T.size();
			writer.sb.append('(');
			writer.sb.append(d4Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int d4I=0;d4I<d4Len;++d4I)
			{
				Test2Data d4V=d4T.get(d4I);
				writer.writeTabs();
				writer.sb.append(d4I);
				writer.sb.append(':');
				if(d4V!=null)
				{
					d4V.writeDataString(writer);
				}
				else
				{
					writer.sb.append("Test2Data=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d5");
		writer.sb.append(':');
		writer.sb.append("List<Test2Data>");
		if(this.d5!=null)
		{
			SList<Test2Data> d5T=this.d5;
			int d5Len=d5T.size();
			writer.sb.append('(');
			writer.sb.append(d5Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int d5I=0;d5I<d5Len;++d5I)
			{
				Test2Data d5V=d5T.get(d5I);
				writer.writeTabs();
				writer.sb.append(d5I);
				writer.sb.append(':');
				if(d5V!=null)
				{
					d5V.writeDataString(writer);
				}
				else
				{
					writer.sb.append("Test2Data=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d6");
		writer.sb.append(':');
		writer.sb.append("List<Test2Data>");
		if(this.d6!=null)
		{
			SList<Test2Data> d6T=this.d6;
			int d6Len=d6T.size();
			writer.sb.append('(');
			writer.sb.append(d6Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int d6I=0;d6I<d6Len;++d6I)
			{
				Test2Data d6V=d6T.get(d6I);
				writer.writeTabs();
				writer.sb.append(d6I);
				writer.sb.append(':');
				if(d6V!=null)
				{
					d6V.writeDataString(writer);
				}
				else
				{
					writer.sb.append("Test2Data=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d7");
		writer.sb.append(':');
		writer.sb.append("Set<int>");
		if(this.d7!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.d7.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.d7.isEmpty())
			{
				int d7VFreeValue=this.d7.getFreeValue();
				int[] d7VKeys=this.d7.getKeys();
				for(int d7VI=d7VKeys.length-1;d7VI>=0;--d7VI)
				{
					int d7V=d7VKeys[d7VI];
					if(d7V!=d7VFreeValue)
					{
						writer.writeTabs();
						writer.sb.append(d7V);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d8");
		writer.sb.append(':');
		writer.sb.append("Set<long>");
		if(this.d8!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.d8.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.d8.isEmpty())
			{
				long d8VFreeValue=this.d8.getFreeValue();
				long[] d8VKeys=this.d8.getKeys();
				for(int d8VI=d8VKeys.length-1;d8VI>=0;--d8VI)
				{
					long d8V=d8VKeys[d8VI];
					if(d8V!=d8VFreeValue)
					{
						writer.writeTabs();
						writer.sb.append(d8V);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d9");
		writer.sb.append(':');
		writer.sb.append("Set<String>");
		if(this.d9!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.d9.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.d9.isEmpty())
			{
				Object[] d9VKeys=this.d9.getKeys();
				for(int d9VI=d9VKeys.length-1;d9VI>=0;--d9VI)
				{
					if(d9VKeys[d9VI]!=null)
					{
						String d9V=(String)d9VKeys[d9VI];
						writer.writeTabs();
						writer.sb.append(d9V);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d10");
		writer.sb.append(':');
		writer.sb.append("Set<Test2Data>");
		if(this.d10!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.d10.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.d10.isEmpty())
			{
				Object[] d10VKeys=this.d10.getKeys();
				for(int d10VI=d10VKeys.length-1;d10VI>=0;--d10VI)
				{
					if(d10VKeys[d10VI]!=null)
					{
						Test2Data d10V=(Test2Data)d10VKeys[d10VI];
						writer.writeTabs();
						if(d10V!=null)
						{
							d10V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("d11");
		writer.sb.append(':');
		writer.sb.append("Set<Test2Data>");
		if(this.d11!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.d11.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.d11.isEmpty())
			{
				Object[] d11VKeys=this.d11.getKeys();
				for(int d11VI=d11VKeys.length-1;d11VI>=0;--d11VI)
				{
					if(d11VKeys[d11VI]!=null)
					{
						Test2Data d11V=(Test2Data)d11VKeys[d11VI];
						writer.writeTabs();
						if(d11V!=null)
						{
							d11V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e1");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.e1!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e1.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e1.isEmpty())
			{
				int e1KFreeValue=this.e1.getFreeValue();
				long[] e1KTable=this.e1.getTable();
				long e1KEntry;
				for(int e1KI=e1KTable.length-1;e1KI>=0;--e1KI)
				{
					e1KEntry=e1KTable[e1KI];
					int e1K=(int)e1KEntry;
					if(e1K!=e1KFreeValue)
					{
						int e1V=(int)(e1KEntry>>>32);
						writer.writeTabs();
						writer.sb.append(e1K);
						
						writer.sb.append(':');
						writer.sb.append(e1V);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e12");
		writer.sb.append(':');
		writer.sb.append("Map<long,long>");
		if(this.e12!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e12.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e12.isEmpty())
			{
				long e12KFreeValue=this.e12.getFreeValue();
				long[] e12KKeys=this.e12.getKeys();
				long[] e12VValues=this.e12.getValues();
				for(int e12KI=e12KKeys.length-1;e12KI>=0;--e12KI)
				{
					long e12K=e12KKeys[e12KI];
					if(e12K!=e12KFreeValue)
					{
						long e12V=e12VValues[e12KI];
						writer.writeTabs();
						writer.sb.append(e12K);
						
						writer.sb.append(':');
						writer.sb.append(e12V);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e2");
		writer.sb.append(':');
		writer.sb.append("Map<int,Test2Data>");
		if(this.e2!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e2.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e2.isEmpty())
			{
				int e2KFreeValue=this.e2.getFreeValue();
				int[] e2KKeys=this.e2.getKeys();
				Object[] e2VValues=this.e2.getValues();
				for(int e2KI=e2KKeys.length-1;e2KI>=0;--e2KI)
				{
					int e2K=e2KKeys[e2KI];
					if(e2K!=e2KFreeValue)
					{
						Test2Data e2V=(Test2Data)e2VValues[e2KI];
						writer.writeTabs();
						writer.sb.append(e2K);
						
						writer.sb.append(':');
						if(e2V!=null)
						{
							e2V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e3");
		writer.sb.append(':');
		writer.sb.append("Map<long,Test2Data>");
		if(this.e3!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e3.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e3.isEmpty())
			{
				long e3KFreeValue=this.e3.getFreeValue();
				long[] e3KKeys=this.e3.getKeys();
				Object[] e3VValues=this.e3.getValues();
				for(int e3KI=e3KKeys.length-1;e3KI>=0;--e3KI)
				{
					long e3K=e3KKeys[e3KI];
					if(e3K!=e3KFreeValue)
					{
						Test2Data e3V=(Test2Data)e3VValues[e3KI];
						writer.writeTabs();
						writer.sb.append(e3K);
						
						writer.sb.append(':');
						if(e3V!=null)
						{
							e3V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e4");
		writer.sb.append(':');
		writer.sb.append("Map<String,Test2Data>");
		if(this.e4!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e4.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e4.isEmpty())
			{
				Object[] e4KTable=this.e4.getTable();
				for(int e4KI=e4KTable.length-2;e4KI>=0;e4KI-=2)
				{
					if(e4KTable[e4KI]!=null)
					{
						String e4K=(String)e4KTable[e4KI];
						Test2Data e4V=(Test2Data)e4KTable[e4KI+1];
						writer.writeTabs();
						writer.sb.append(e4K);
						
						writer.sb.append(':');
						if(e4V!=null)
						{
							e4V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e5");
		writer.sb.append(':');
		writer.sb.append("Map<int,Test2Data>");
		if(this.e5!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e5.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e5.isEmpty())
			{
				int e5KFreeValue=this.e5.getFreeValue();
				int[] e5KKeys=this.e5.getKeys();
				Object[] e5VValues=this.e5.getValues();
				for(int e5KI=e5KKeys.length-1;e5KI>=0;--e5KI)
				{
					int e5K=e5KKeys[e5KI];
					if(e5K!=e5KFreeValue)
					{
						Test2Data e5V=(Test2Data)e5VValues[e5KI];
						writer.writeTabs();
						writer.sb.append(e5K);
						
						writer.sb.append(':');
						if(e5V!=null)
						{
							e5V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e6");
		writer.sb.append(':');
		writer.sb.append("Map<int,Test2Data>");
		if(this.e6!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e6.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e6.isEmpty())
			{
				int e6KFreeValue=this.e6.getFreeValue();
				int[] e6KKeys=this.e6.getKeys();
				Object[] e6VValues=this.e6.getValues();
				for(int e6KI=e6KKeys.length-1;e6KI>=0;--e6KI)
				{
					int e6K=e6KKeys[e6KI];
					if(e6K!=e6KFreeValue)
					{
						Test2Data e6V=(Test2Data)e6VValues[e6KI];
						writer.writeTabs();
						writer.sb.append(e6K);
						
						writer.sb.append(':');
						if(e6V!=null)
						{
							e6V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e7");
		writer.sb.append(':');
		writer.sb.append("Map<int,Test2Data>");
		if(this.e7!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e7.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e7.isEmpty())
			{
				int e7KFreeValue=this.e7.getFreeValue();
				int[] e7KKeys=this.e7.getKeys();
				Object[] e7VValues=this.e7.getValues();
				for(int e7KI=e7KKeys.length-1;e7KI>=0;--e7KI)
				{
					int e7K=e7KKeys[e7KI];
					if(e7K!=e7KFreeValue)
					{
						Test2Data e7V=(Test2Data)e7VValues[e7KI];
						writer.writeTabs();
						writer.sb.append(e7K);
						
						writer.sb.append(':');
						if(e7V!=null)
						{
							e7V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("e8");
		writer.sb.append(':');
		writer.sb.append("Map<int,Test2Data>");
		if(this.e8!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.e8.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.e8.isEmpty())
			{
				int e8KFreeValue=this.e8.getFreeValue();
				int[] e8KKeys=this.e8.getKeys();
				Object[] e8VValues=this.e8.getValues();
				for(int e8KI=e8KKeys.length-1;e8KI>=0;--e8KI)
				{
					int e8K=e8KKeys[e8KI];
					if(e8K!=e8KFreeValue)
					{
						Test2Data e8V=(Test2Data)e8VValues[e8KI];
						writer.writeTabs();
						writer.sb.append(e8K);
						
						writer.sb.append(':');
						if(e8V!=null)
						{
							e8V.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("f1");
		writer.sb.append(':');
		writer.sb.append("Array<IntList>");
		if(this.f1!=null)
		{
			IntList[] f1T=this.f1;
			int f1Len=f1T.length;
			writer.sb.append('(');
			writer.sb.append(f1Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int f1I=0;f1I<f1Len;++f1I)
			{
				IntList f1V=f1T[f1I];
				writer.writeTabs();
				writer.sb.append(f1I);
				writer.sb.append(':');
				writer.sb.append("List<int>");
				if(f1V!=null)
				{
					IntList f1VT=f1V;
					int f1VLen=f1VT.size();
					writer.sb.append('(');
					writer.sb.append(f1VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int f1VI=0;f1VI<f1VLen;++f1VI)
					{
						int f1VV=f1VT.get(f1VI);
						writer.writeTabs();
						writer.sb.append(f1VI);
						writer.sb.append(':');
						writer.sb.append(f1VV);
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("f2");
		writer.sb.append(':');
		writer.sb.append("Array<SList<int[]>>");
		if(this.f2!=null)
		{
			SList<int[]>[] f2T=this.f2;
			int f2Len=f2T.length;
			writer.sb.append('(');
			writer.sb.append(f2Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int f2I=0;f2I<f2Len;++f2I)
			{
				SList<int[]> f2V=f2T[f2I];
				writer.writeTabs();
				writer.sb.append(f2I);
				writer.sb.append(':');
				writer.sb.append("List<int[]>");
				if(f2V!=null)
				{
					SList<int[]> f2VT=f2V;
					int f2VLen=f2VT.size();
					writer.sb.append('(');
					writer.sb.append(f2VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int f2VI=0;f2VI<f2VLen;++f2VI)
					{
						int[] f2VV=f2VT.get(f2VI);
						writer.writeTabs();
						writer.sb.append(f2VI);
						writer.sb.append(':');
						writer.sb.append("Array<int>");
						if(f2VV!=null)
						{
							int[] f2VVT=f2VV;
							int f2VVLen=f2VVT.length;
							writer.sb.append('(');
							writer.sb.append(f2VVLen);
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int f2VVI=0;f2VVI<f2VVLen;++f2VVI)
							{
								int f2VVV=f2VVT[f2VVI];
								writer.writeTabs();
								writer.sb.append(f2VVI);
								writer.sb.append(':');
								writer.sb.append(f2VVV);
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("f3");
		writer.sb.append(':');
		writer.sb.append("Array<SList<Test2Data>>");
		if(this.f3!=null)
		{
			SList<Test2Data>[] f3T=this.f3;
			int f3Len=f3T.length;
			writer.sb.append('(');
			writer.sb.append(f3Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int f3I=0;f3I<f3Len;++f3I)
			{
				SList<Test2Data> f3V=f3T[f3I];
				writer.writeTabs();
				writer.sb.append(f3I);
				writer.sb.append(':');
				writer.sb.append("List<Test2Data>");
				if(f3V!=null)
				{
					SList<Test2Data> f3VT=f3V;
					int f3VLen=f3VT.size();
					writer.sb.append('(');
					writer.sb.append(f3VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int f3VI=0;f3VI<f3VLen;++f3VI)
					{
						Test2Data f3VV=f3VT.get(f3VI);
						writer.writeTabs();
						writer.sb.append(f3VI);
						writer.sb.append(':');
						if(f3VV!=null)
						{
							f3VV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("f4");
		writer.sb.append(':');
		writer.sb.append("Array<SList<Test2Data[]>>");
		if(this.f4!=null)
		{
			SList<Test2Data[]>[] f4T=this.f4;
			int f4Len=f4T.length;
			writer.sb.append('(');
			writer.sb.append(f4Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int f4I=0;f4I<f4Len;++f4I)
			{
				SList<Test2Data[]> f4V=f4T[f4I];
				writer.writeTabs();
				writer.sb.append(f4I);
				writer.sb.append(':');
				writer.sb.append("List<Test2Data[]>");
				if(f4V!=null)
				{
					SList<Test2Data[]> f4VT=f4V;
					int f4VLen=f4VT.size();
					writer.sb.append('(');
					writer.sb.append(f4VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int f4VI=0;f4VI<f4VLen;++f4VI)
					{
						Test2Data[] f4VV=f4VT.get(f4VI);
						writer.writeTabs();
						writer.sb.append(f4VI);
						writer.sb.append(':');
						writer.sb.append("Array<Test2Data>");
						if(f4VV!=null)
						{
							Test2Data[] f4VVT=f4VV;
							int f4VVLen=f4VVT.length;
							writer.sb.append('(');
							writer.sb.append(f4VVLen);
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int f4VVI=0;f4VVI<f4VVLen;++f4VVI)
							{
								Test2Data f4VVV=f4VVT[f4VVI];
								writer.writeTabs();
								writer.sb.append(f4VVI);
								writer.sb.append(':');
								if(f4VVV!=null)
								{
									f4VVV.writeDataString(writer);
								}
								else
								{
									writer.sb.append("Test2Data=null");
								}
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("f5");
		writer.sb.append(':');
		writer.sb.append("Array<SList<Test2Data>>");
		if(this.f5!=null)
		{
			SList<Test2Data>[] f5T=this.f5;
			int f5Len=f5T.length;
			writer.sb.append('(');
			writer.sb.append(f5Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int f5I=0;f5I<f5Len;++f5I)
			{
				SList<Test2Data> f5V=f5T[f5I];
				writer.writeTabs();
				writer.sb.append(f5I);
				writer.sb.append(':');
				writer.sb.append("List<Test2Data>");
				if(f5V!=null)
				{
					SList<Test2Data> f5VT=f5V;
					int f5VLen=f5VT.size();
					writer.sb.append('(');
					writer.sb.append(f5VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int f5VI=0;f5VI<f5VLen;++f5VI)
					{
						Test2Data f5VV=f5VT.get(f5VI);
						writer.writeTabs();
						writer.sb.append(f5VI);
						writer.sb.append(':');
						if(f5VV!=null)
						{
							f5VV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("Test2Data=null");
						}
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("f6");
		writer.sb.append(':');
		writer.sb.append("Array<SList<Test2Data[]>>");
		if(this.f6!=null)
		{
			SList<Test2Data[]>[] f6T=this.f6;
			int f6Len=f6T.length;
			writer.sb.append('(');
			writer.sb.append(f6Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int f6I=0;f6I<f6Len;++f6I)
			{
				SList<Test2Data[]> f6V=f6T[f6I];
				writer.writeTabs();
				writer.sb.append(f6I);
				writer.sb.append(':');
				writer.sb.append("List<Test2Data[]>");
				if(f6V!=null)
				{
					SList<Test2Data[]> f6VT=f6V;
					int f6VLen=f6VT.size();
					writer.sb.append('(');
					writer.sb.append(f6VLen);
					writer.sb.append(')');
					writer.writeEnter();
					writer.writeLeftBrace();
					for(int f6VI=0;f6VI<f6VLen;++f6VI)
					{
						Test2Data[] f6VV=f6VT.get(f6VI);
						writer.writeTabs();
						writer.sb.append(f6VI);
						writer.sb.append(':');
						writer.sb.append("Array<Test2Data>");
						if(f6VV!=null)
						{
							Test2Data[] f6VVT=f6VV;
							int f6VVLen=f6VVT.length;
							writer.sb.append('(');
							writer.sb.append(f6VVLen);
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int f6VVI=0;f6VVI<f6VVLen;++f6VVI)
							{
								Test2Data f6VVV=f6VVT[f6VVI];
								writer.writeTabs();
								writer.sb.append(f6VVI);
								writer.sb.append(':');
								if(f6VVV!=null)
								{
									f6VVV.writeDataString(writer);
								}
								else
								{
									writer.sb.append("Test2Data=null");
								}
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
					writer.writeRightBrace();
				}
				else
				{
					writer.sb.append("=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("g1");
		writer.sb.append(':');
		writer.sb.append("Map<int,IntObjectMap<Test2Data>>");
		if(this.g1!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.g1.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.g1.isEmpty())
			{
				int g1KFreeValue=this.g1.getFreeValue();
				int[] g1KKeys=this.g1.getKeys();
				Object[] g1VValues=this.g1.getValues();
				for(int g1KI=g1KKeys.length-1;g1KI>=0;--g1KI)
				{
					int g1K=g1KKeys[g1KI];
					if(g1K!=g1KFreeValue)
					{
						IntObjectMap<Test2Data> g1V=(IntObjectMap<Test2Data>)g1VValues[g1KI];
						writer.writeTabs();
						writer.sb.append(g1K);
						
						writer.sb.append(':');
						writer.sb.append("Map<int,Test2Data>");
						if(g1V!=null)
						{
							writer.sb.append('(');
							writer.sb.append(g1V.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!g1V.isEmpty())
							{
								int g1VKFreeValue=g1V.getFreeValue();
								int[] g1VKKeys=g1V.getKeys();
								Object[] g1VVValues=g1V.getValues();
								for(int g1VKI=g1VKKeys.length-1;g1VKI>=0;--g1VKI)
								{
									int g1VK=g1VKKeys[g1VKI];
									if(g1VK!=g1VKFreeValue)
									{
										Test2Data g1VV=(Test2Data)g1VVValues[g1VKI];
										writer.writeTabs();
										writer.sb.append(g1VK);
										
										writer.sb.append(':');
										if(g1VV!=null)
										{
											g1VV.writeDataString(writer);
										}
										else
										{
											writer.sb.append("Test2Data=null");
										}
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("h1");
		writer.sb.append(':');
		writer.sb.append("Queue<int>");
		if(this.h1!=null)
		{
			IntQueue h1T=this.h1;
			int h1Len=h1T.size();
			writer.sb.append('(');
			writer.sb.append(h1Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int h1I=0;h1I<h1Len;++h1I)
			{
				int h1V=h1T.get(h1I);
				writer.writeTabs();
				writer.sb.append(h1I);
				writer.sb.append(':');
				writer.sb.append(h1V);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("h2");
		writer.sb.append(':');
		writer.sb.append("Queue<Test2Data>");
		if(this.h2!=null)
		{
			SQueue<Test2Data> h2T=this.h2;
			int h2Len=h2T.size();
			writer.sb.append('(');
			writer.sb.append(h2Len);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int h2I=0;h2I<h2Len;++h2I)
			{
				Test2Data h2V=h2T.get(h2I);
				writer.writeTabs();
				writer.sb.append(h2I);
				writer.sb.append(':');
				if(h2V!=null)
				{
					h2V.writeDataString(writer);
				}
				else
				{
					writer.sb.append("Test2Data=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("h3");
		writer.sb.append(':');
		writer.sb.append("Map<int,SQueue<Test2Data>>");
		if(this.h3!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.h3.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.h3.isEmpty())
			{
				int h3KFreeValue=this.h3.getFreeValue();
				int[] h3KKeys=this.h3.getKeys();
				Object[] h3VValues=this.h3.getValues();
				for(int h3KI=h3KKeys.length-1;h3KI>=0;--h3KI)
				{
					int h3K=h3KKeys[h3KI];
					if(h3K!=h3KFreeValue)
					{
						SQueue<Test2Data> h3V=(SQueue<Test2Data>)h3VValues[h3KI];
						writer.writeTabs();
						writer.sb.append(h3K);
						
						writer.sb.append(':');
						writer.sb.append("Queue<Test2Data>");
						if(h3V!=null)
						{
							SQueue<Test2Data> h3VT=h3V;
							int h3VLen=h3VT.size();
							writer.sb.append('(');
							writer.sb.append(h3VLen);
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int h3VI=0;h3VI<h3VLen;++h3VI)
							{
								Test2Data h3VV=h3VT.get(h3VI);
								writer.writeTabs();
								writer.sb.append(h3VI);
								writer.sb.append(':');
								if(h3VV!=null)
								{
									h3VV.writeDataString(writer);
								}
								else
								{
									writer.sb.append("Test2Data=null");
								}
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.b1=new Test2Data();
		this.b1.initDefault();
		this.b2=new Test2Data();
		this.b2.initDefault();
		this.c1=new byte[0];
		this.c2=new int[0];
		this.c3=new long[0];
		this.c4=new String[0];
		this.c5=new int[0][];
		this.c6=new int[0][][];
		this.d1=new IntList();
		this.d2=new LongList();
		this.d3=new SList<String>(String[]::new);
		this.d4=new SList<Test2Data>(Test2Data[]::new);
		this.d5=new SList<Test2Data>(Test2Data[]::new);
		this.d7=new IntSet();
		this.d8=new LongSet();
		this.d9=new SSet<String>(String[]::new);
		this.d10=new SSet<Test2Data>(Test2Data[]::new);
		this.d11=new SSet<Test2Data>(Test2Data[]::new);
		this.e1=new IntIntMap();
		this.e12=new LongLongMap();
		this.e2=new IntObjectMap<Test2Data>(Test2Data[]::new);
		this.e3=new LongObjectMap<Test2Data>(Test2Data[]::new);
		this.e4=new SMap<String,Test2Data>();
		this.e5=new IntObjectMap<Test2Data>(Test2Data[]::new);
		this.e6=new IntObjectMap<Test2Data>(Test2Data[]::new);
		this.e7=new IntObjectMap<Test2Data>(Test2Data[]::new);
		this.e8=new IntObjectMap<Test2Data>(Test2Data[]::new);
		this.f1=new IntList[0];
		this.f2=new SList[0];
		this.f3=new SList[0];
		this.f4=new SList[0];
		this.g1=new IntObjectMap<IntObjectMap<Test2Data>>(IntObjectMap[]::new);
		this.h1=new IntQueue();
		this.h2=new SQueue<Test2Data>(Test2Data[]::new);
		this.h3=new IntObjectMap<SQueue<Test2Data>>(SQueue[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.a1=false;
		this.a2=0;
		this.a6=0;
		this.a7=0f;
		this.a8=0.0;
		this.a9=0L;
		this.a10="";
		this.b1=null;
		this.b2=null;
		this.b3=null;
		this.b4=null;
		this.c1=null;
		this.c2=null;
		this.c3=null;
		this.c4=null;
		this.c5=null;
		this.c6=null;
		this.d1=null;
		this.d2=null;
		this.d3=null;
		this.d4=null;
		this.d5=null;
		this.d6=null;
		this.d7=null;
		this.d8=null;
		this.d9=null;
		this.d10=null;
		this.d11=null;
		this.e1=null;
		this.e12=null;
		this.e2=null;
		this.e3=null;
		this.e4=null;
		this.e5=null;
		this.e6=null;
		this.e7=null;
		this.e8=null;
		this.f1=null;
		this.f2=null;
		this.f3=null;
		this.f4=null;
		this.f5=null;
		this.f6=null;
		this.g1=null;
		this.h1=null;
		this.h2=null;
		this.h3=null;
	}
	
}
