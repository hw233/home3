package com.home.commonBase.data.role;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 角色显示改变数据(maybeExtends)(generated by shine) */
public class RoleShowChangeData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.RoleShowChange;
	
	/** 类型 */
	public int type;
	
	/** 整形参 */
	public int arg0;
	
	/** long参 */
	public long arg2;
	
	/** str参 */
	public String arg1="";
	
	public RoleShowChangeData()
	{
		_dataID=BaseDataType.RoleShowChange;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RoleShowChangeData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.type=stream.readInt();
		
		this.arg0=stream.readInt();
		
		this.arg1=stream.readUTF();
		
		this.arg2=stream.readLong();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.arg0);
		
		stream.writeUTF(this.arg1);
		
		stream.writeLong(this.arg2);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.type=stream.readInt();
		
		this.arg0=stream.readInt();
		
		this.arg1=stream.readUTF();
		
		this.arg2=stream.readLong();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.type);
		
		stream.writeInt(this.arg0);
		
		stream.writeUTF(this.arg1);
		
		stream.writeLong(this.arg2);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof RoleShowChangeData))
			return;
		
		RoleShowChangeData mData=(RoleShowChangeData)data;
		
		this.type=mData.type;
		this.arg0=mData.arg0;
		this.arg1=mData.arg1;
		this.arg2=mData.arg2;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof RoleShowChangeData))
			return;
		
		RoleShowChangeData mData=(RoleShowChangeData)data;
		
		this.type=mData.type;
		
		this.arg0=mData.arg0;
		
		this.arg1=mData.arg1;
		
		this.arg2=mData.arg2;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		RoleShowChangeData mData=(RoleShowChangeData)data;
		if(this.type!=mData.type)
			return false;
		
		if(this.arg0!=mData.arg0)
			return false;
		
		if(!this.arg1.equals(mData.arg1))
			return false;
		
		if(this.arg2!=mData.arg2)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg0");
		writer.sb.append(':');
		writer.sb.append(this.arg0);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg1");
		writer.sb.append(':');
		writer.sb.append(this.arg1);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg2");
		writer.sb.append(':');
		writer.sb.append(this.arg2);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.type=0;
		this.arg0=0;
		this.arg1="";
		this.arg2=0L;
	}
	
}
