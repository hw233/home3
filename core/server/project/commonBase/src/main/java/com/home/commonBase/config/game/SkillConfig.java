package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.config.game.enumT.SkillInfluenceTypeConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.IntSet;
import com.home.shine.support.collection.SMap;
import com.home.shine.utils.ObjectUtils;

/** 技能表(generated by shine) */
public class SkillConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<SkillConfig> _dic;
	
	/** 技能id */
	public int id;
	
	/** 等级上限 */
	public int levelMax;
	
	/** 释放方式 */
	public int useType;
	
	/** 是否可移动施法 */
	public boolean canMove;
	
	/** 攻击方式 */
	public int attackType;
	
	/** 目标类型 */
	public int targetType;
	
	/** 所属组号 */
	public int[] groups;
	
	/** 所在冷却组 */
	public int[] underGroupCDs;
	
	/** 限制释放冷却组ID */
	public int inGroupCD;
	
	/** 可强制技能组 */
	public int[] canCancelSkillGroups;
	
	/** 目标影响类型 */
	public int[] influenceType;
	
	/** 目标影响类型转 */
	public boolean[] influenceTypeT;
	
	/** AI使用优先级 */
	public int aiPriority;
	
	/** 释放条件组 */
	public int[][] useConditions;
	
	/** 获取 */
	public static SkillConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<SkillConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<SkillConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.levelMax=stream.readInt();
		
		this.useType=stream.readInt();
		
		this.attackType=stream.readInt();
		
		this.canMove=stream.readBoolean();
		
		this.targetType=stream.readInt();
		
		int influenceTypeLen=stream.readLen();
		if(this.influenceType==null || this.influenceType.length!=influenceTypeLen)
		{
			this.influenceType=new int[influenceTypeLen];
		}
		int[] influenceTypeT=this.influenceType;
		for(int influenceTypeI=0;influenceTypeI<influenceTypeLen;++influenceTypeI)
		{
			int influenceTypeV;
			influenceTypeV=stream.readInt();
			
			influenceTypeT[influenceTypeI]=influenceTypeV;
		}
		
		int groupsLen=stream.readLen();
		if(this.groups==null || this.groups.length!=groupsLen)
		{
			this.groups=new int[groupsLen];
		}
		int[] groupsT=this.groups;
		for(int groupsI=0;groupsI<groupsLen;++groupsI)
		{
			int groupsV;
			groupsV=stream.readInt();
			
			groupsT[groupsI]=groupsV;
		}
		
		int underGroupCDsLen=stream.readLen();
		if(this.underGroupCDs==null || this.underGroupCDs.length!=underGroupCDsLen)
		{
			this.underGroupCDs=new int[underGroupCDsLen];
		}
		int[] underGroupCDsT=this.underGroupCDs;
		for(int underGroupCDsI=0;underGroupCDsI<underGroupCDsLen;++underGroupCDsI)
		{
			int underGroupCDsV;
			underGroupCDsV=stream.readInt();
			
			underGroupCDsT[underGroupCDsI]=underGroupCDsV;
		}
		
		this.inGroupCD=stream.readInt();
		
		int canCancelSkillGroupsLen=stream.readLen();
		if(this.canCancelSkillGroups==null || this.canCancelSkillGroups.length!=canCancelSkillGroupsLen)
		{
			this.canCancelSkillGroups=new int[canCancelSkillGroupsLen];
		}
		int[] canCancelSkillGroupsT=this.canCancelSkillGroups;
		for(int canCancelSkillGroupsI=0;canCancelSkillGroupsI<canCancelSkillGroupsLen;++canCancelSkillGroupsI)
		{
			int canCancelSkillGroupsV;
			canCancelSkillGroupsV=stream.readInt();
			
			canCancelSkillGroupsT[canCancelSkillGroupsI]=canCancelSkillGroupsV;
		}
		
		this.aiPriority=stream.readInt();
		
		int useConditionsLen=stream.readLen();
		if(this.useConditions==null || this.useConditions.length!=useConditionsLen)
		{
			this.useConditions=new int[useConditionsLen][];
		}
		int[][] useConditionsT=this.useConditions;
		for(int useConditionsI=0;useConditionsI<useConditionsLen;++useConditionsI)
		{
			int[] useConditionsV;
			int useConditionsVLen=stream.readLen();
			useConditionsV=new int[useConditionsVLen];
			int[] useConditionsVT=useConditionsV;
			for(int useConditionsVI=0;useConditionsVI<useConditionsVLen;++useConditionsVI)
			{
				int useConditionsVV;
				useConditionsVV=stream.readInt();
				
				useConditionsVT[useConditionsVI]=useConditionsVV;
			}
			
			useConditionsT[useConditionsI]=useConditionsV;
		}
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		influenceTypeT=SkillInfluenceTypeConfig.getInfluenceSet(influenceType);
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
	
	}
	
	/** 是否包含某组 */
	public boolean hasGroup(int groupID)
	{
		int[] groups;
		
		for(int i=(groups=this.groups).length-1;i>=0;--i)
		{
			if(groups[i]==groupID)
				return true;
		}
		
		return false;
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.levelMax);
		
		stream.writeInt(this.useType);
		
		stream.writeInt(this.attackType);
		
		stream.writeBoolean(this.canMove);
		
		stream.writeInt(this.targetType);
		
		if(this.influenceType!=null)
		{
			int[] influenceTypeT=this.influenceType;
			stream.writeLen(influenceTypeT.length);
			for(int influenceTypeVI=0,influenceTypeVLen=influenceTypeT.length;influenceTypeVI<influenceTypeVLen;++influenceTypeVI)
			{
				int influenceTypeV=influenceTypeT[influenceTypeVI];
				stream.writeInt(influenceTypeV);
				
			}
		}
		else
		{
			nullObjError("influenceType");
		}
		
		if(this.groups!=null)
		{
			int[] groupsT=this.groups;
			stream.writeLen(groupsT.length);
			for(int groupsVI=0,groupsVLen=groupsT.length;groupsVI<groupsVLen;++groupsVI)
			{
				int groupsV=groupsT[groupsVI];
				stream.writeInt(groupsV);
				
			}
		}
		else
		{
			nullObjError("groups");
		}
		
		if(this.underGroupCDs!=null)
		{
			int[] underGroupCDsT=this.underGroupCDs;
			stream.writeLen(underGroupCDsT.length);
			for(int underGroupCDsVI=0,underGroupCDsVLen=underGroupCDsT.length;underGroupCDsVI<underGroupCDsVLen;++underGroupCDsVI)
			{
				int underGroupCDsV=underGroupCDsT[underGroupCDsVI];
				stream.writeInt(underGroupCDsV);
				
			}
		}
		else
		{
			nullObjError("underGroupCDs");
		}
		
		stream.writeInt(this.inGroupCD);
		
		if(this.canCancelSkillGroups!=null)
		{
			int[] canCancelSkillGroupsT=this.canCancelSkillGroups;
			stream.writeLen(canCancelSkillGroupsT.length);
			for(int canCancelSkillGroupsVI=0,canCancelSkillGroupsVLen=canCancelSkillGroupsT.length;canCancelSkillGroupsVI<canCancelSkillGroupsVLen;++canCancelSkillGroupsVI)
			{
				int canCancelSkillGroupsV=canCancelSkillGroupsT[canCancelSkillGroupsVI];
				stream.writeInt(canCancelSkillGroupsV);
				
			}
		}
		else
		{
			nullObjError("canCancelSkillGroups");
		}
		
		stream.writeInt(this.aiPriority);
		
		if(this.useConditions!=null)
		{
			int[][] useConditionsT=this.useConditions;
			stream.writeLen(useConditionsT.length);
			for(int useConditionsVI=0,useConditionsVLen=useConditionsT.length;useConditionsVI<useConditionsVLen;++useConditionsVI)
			{
				int[] useConditionsV=useConditionsT[useConditionsVI];
				if(useConditionsV!=null)
				{
					int[] useConditionsVT=useConditionsV;
					stream.writeLen(useConditionsVT.length);
					for(int useConditionsVVI=0,useConditionsVVLen=useConditionsVT.length;useConditionsVVI<useConditionsVVLen;++useConditionsVVI)
					{
						int useConditionsVV=useConditionsVT[useConditionsVVI];
						stream.writeInt(useConditionsVV);
						
					}
				}
				else
				{
					nullObjError("useConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("useConditions");
		}
		
	}
	
}
