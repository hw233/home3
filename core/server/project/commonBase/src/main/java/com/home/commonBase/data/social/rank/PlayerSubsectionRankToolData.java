package com.home.commonBase.data.social.rank;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 角色排行工具数据(generated by shine) */
public class PlayerSubsectionRankToolData extends FuncToolData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.PlayerSubsectionRankTool;
	
	/** 版本 */
	public int version;
	
	/** 小组index */
	public int subsectionSubIndex;
	
	/** 大组index */
	public int subsectionIndex;
	
	/** 匹配值 */
	public long value;
	
	/** 参数组 */
	public long[] args;
	
	public PlayerSubsectionRankToolData()
	{
		_dataID=BaseDataType.PlayerSubsectionRankTool;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PlayerSubsectionRankToolData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.version=stream.readInt();
		
		this.subsectionIndex=stream.readInt();
		
		this.subsectionSubIndex=stream.readInt();
		
		this.value=stream.readLong();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.length!=argsLen)
			{
				this.args=new long[argsLen];
			}
			long[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV;
				argsV=stream.readLong();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.version);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeLong(this.value);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			long[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				long argsV=argsT[argsVI];
				stream.writeLong(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.version=stream.readInt();
		
		this.subsectionIndex=stream.readInt();
		
		this.subsectionSubIndex=stream.readInt();
		
		this.value=stream.readLong();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.length!=argsLen)
			{
				this.args=new long[argsLen];
			}
			long[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV;
				argsV=stream.readLong();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.version);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeLong(this.value);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			long[] argsT=this.args;
			stream.writeLen(argsT.length);
			for(int argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
			{
				long argsV=argsT[argsVI];
				stream.writeLong(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof PlayerSubsectionRankToolData))
			return;
		
		PlayerSubsectionRankToolData mData=(PlayerSubsectionRankToolData)data;
		
		this.version=mData.version;
		this.subsectionIndex=mData.subsectionIndex;
		this.subsectionSubIndex=mData.subsectionSubIndex;
		this.value=mData.value;
		this.args=mData.args;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof PlayerSubsectionRankToolData))
			return;
		
		PlayerSubsectionRankToolData mData=(PlayerSubsectionRankToolData)data;
		
		this.version=mData.version;
		
		this.subsectionIndex=mData.subsectionIndex;
		
		this.subsectionSubIndex=mData.subsectionSubIndex;
		
		this.value=mData.value;
		
		if(mData.args!=null)
		{
			long[] argsR=mData.args;
			int argsLen=argsR.length;
			if(this.args==null || this.args.length!=argsLen)
			{
				this.args=new long[argsLen];
			}
			BytesControl.arrayCopy(mData.args,this.args,argsLen);
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		PlayerSubsectionRankToolData mData=(PlayerSubsectionRankToolData)data;
		if(this.version!=mData.version)
			return false;
		
		if(this.subsectionIndex!=mData.subsectionIndex)
			return false;
		
		if(this.subsectionSubIndex!=mData.subsectionSubIndex)
			return false;
		
		if(this.value!=mData.value)
			return false;
		
		if(mData.args!=null)
		{
			if(this.args==null)
				return false;
			if(this.args.length!=mData.args.length)
				return false;
			long[] argsT=this.args;
			long[] argsR=mData.args;
			int argsLen=argsT.length;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsU=argsT[argsI];
				long argsV=argsR[argsI];
				if(argsU!=argsV)
					return false;
				
			}
		}
		else
		{
			if(this.args!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("version");
		writer.sb.append(':');
		writer.sb.append(this.version);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("subsectionIndex");
		writer.sb.append(':');
		writer.sb.append(this.subsectionIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("subsectionSubIndex");
		writer.sb.append(':');
		writer.sb.append(this.subsectionSubIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("value");
		writer.sb.append(':');
		writer.sb.append(this.value);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("args");
		writer.sb.append(':');
		writer.sb.append("Array<long>");
		if(this.args!=null)
		{
			long[] argsT=this.args;
			int argsLen=argsT.length;
			writer.sb.append('(');
			writer.sb.append(argsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.append(argsI);
				writer.sb.append(':');
				writer.sb.append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.version=0;
		this.subsectionIndex=0;
		this.subsectionSubIndex=0;
		this.value=0L;
		this.args=null;
	}
	
}
