package com.home.commonBase.data.social.roleGroup;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.social.roleGroup.RoleGroupData;
import com.home.commonBase.data.social.roleGroup.RoleGroupSimpleData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.pool.DataPool;

/** 玩家群数据(generated by shine) */
public class RoleGroupToolData extends FuncToolData
{
	/** 简版信息组 */
	public LongObjectMap<RoleGroupSimpleData> simpleDatas;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.RoleGroupTool;
	
	public RoleGroupToolData()
	{
		_dataID=BaseDataType.RoleGroupTool;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RoleGroupToolData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int simpleDatasLen=stream.readLen();
		if(this.simpleDatas!=null)
		{
			this.simpleDatas.clear();
			this.simpleDatas.ensureCapacity(simpleDatasLen);
		}
		else
		{
			this.simpleDatas=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new,simpleDatasLen);
		}
		
		LongObjectMap<RoleGroupSimpleData> simpleDatasT=this.simpleDatas;
		for(int simpleDatasI=simpleDatasLen-1;simpleDatasI>=0;--simpleDatasI)
		{
			long simpleDatasK;
			RoleGroupSimpleData simpleDatasV;
			simpleDatasK=stream.readLong();
			
			BaseData simpleDatasVT=stream.readDataFullNotNull();
			if(simpleDatasVT!=null)
			{
				if(simpleDatasVT instanceof RoleGroupSimpleData)
				{
					simpleDatasV=(RoleGroupSimpleData)simpleDatasVT;
				}
				else
				{
					simpleDatasV=new RoleGroupSimpleData();
					if(!(simpleDatasVT.getClass().isAssignableFrom(RoleGroupSimpleData.class)))
					{
						stream.throwTypeReadError(RoleGroupSimpleData.class,simpleDatasVT.getClass());
					}
					simpleDatasV.shadowCopy(simpleDatasVT);
				}
			}
			else
			{
				simpleDatasV=null;
			}
			
			simpleDatasT.put(simpleDatasK,simpleDatasV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.simpleDatas!=null)
		{
			stream.writeLen(this.simpleDatas.size());
			if(!this.simpleDatas.isEmpty())
			{
				long simpleDatasKFreeValue=this.simpleDatas.getFreeValue();
				long[] simpleDatasKKeys=this.simpleDatas.getKeys();
				Object[] simpleDatasVValues=this.simpleDatas.getValues();
				for(int simpleDatasKI=simpleDatasKKeys.length-1;simpleDatasKI>=0;--simpleDatasKI)
				{
					long simpleDatasK=simpleDatasKKeys[simpleDatasKI];
					if(simpleDatasK!=simpleDatasKFreeValue)
					{
						RoleGroupSimpleData simpleDatasV=(RoleGroupSimpleData)simpleDatasVValues[simpleDatasKI];
						stream.writeLong(simpleDatasK);
						
						if(simpleDatasV!=null)
						{
							stream.writeDataFullNotNull(simpleDatasV);
						}
						else
						{
							nullObjError("simpleDatasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("simpleDatas");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int simpleDatasLen=stream.readLen();
		if(this.simpleDatas!=null)
		{
			this.simpleDatas.clear();
			this.simpleDatas.ensureCapacity(simpleDatasLen);
		}
		else
		{
			this.simpleDatas=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new,simpleDatasLen);
		}
		
		LongObjectMap<RoleGroupSimpleData> simpleDatasT=this.simpleDatas;
		for(int simpleDatasI=simpleDatasLen-1;simpleDatasI>=0;--simpleDatasI)
		{
			long simpleDatasK;
			RoleGroupSimpleData simpleDatasV;
			simpleDatasK=stream.readLong();
			
			simpleDatasV=(RoleGroupSimpleData)stream.readDataSimpleNotNull();
			
			simpleDatasT.put(simpleDatasK,simpleDatasV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.simpleDatas!=null)
		{
			stream.writeLen(this.simpleDatas.size());
			if(!this.simpleDatas.isEmpty())
			{
				long simpleDatasKFreeValue=this.simpleDatas.getFreeValue();
				long[] simpleDatasKKeys=this.simpleDatas.getKeys();
				Object[] simpleDatasVValues=this.simpleDatas.getValues();
				for(int simpleDatasKI=simpleDatasKKeys.length-1;simpleDatasKI>=0;--simpleDatasKI)
				{
					long simpleDatasK=simpleDatasKKeys[simpleDatasKI];
					if(simpleDatasK!=simpleDatasKFreeValue)
					{
						RoleGroupSimpleData simpleDatasV=(RoleGroupSimpleData)simpleDatasVValues[simpleDatasKI];
						stream.writeLong(simpleDatasK);
						
						if(simpleDatasV!=null)
						{
							stream.writeDataSimpleNotNull(simpleDatasV);
						}
						else
						{
							nullObjError("simpleDatasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("simpleDatas");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof RoleGroupToolData))
			return;
		
		RoleGroupToolData mData=(RoleGroupToolData)data;
		
		this.simpleDatas=mData.simpleDatas;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof RoleGroupToolData))
			return;
		
		RoleGroupToolData mData=(RoleGroupToolData)data;
		
		if(mData.simpleDatas!=null)
		{
			if(this.simpleDatas!=null)
			{
				this.simpleDatas.clear();
				this.simpleDatas.ensureCapacity(mData.simpleDatas.size());
			}
			else
			{
				this.simpleDatas=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new,mData.simpleDatas.size());
			}
			
			LongObjectMap<RoleGroupSimpleData> simpleDatasT=this.simpleDatas;
			if(!mData.simpleDatas.isEmpty())
			{
				long simpleDatasKFreeValue=mData.simpleDatas.getFreeValue();
				long[] simpleDatasKKeys=mData.simpleDatas.getKeys();
				Object[] simpleDatasVValues=mData.simpleDatas.getValues();
				for(int simpleDatasKI=simpleDatasKKeys.length-1;simpleDatasKI>=0;--simpleDatasKI)
				{
					long simpleDatasK=simpleDatasKKeys[simpleDatasKI];
					if(simpleDatasK!=simpleDatasKFreeValue)
					{
						RoleGroupSimpleData simpleDatasV=(RoleGroupSimpleData)simpleDatasVValues[simpleDatasKI];
						long simpleDatasW;
						RoleGroupSimpleData simpleDatasU;
						simpleDatasW=simpleDatasK;
						
						if(simpleDatasV!=null)
						{
							simpleDatasU=(RoleGroupSimpleData)simpleDatasV.clone();
						}
						else
						{
							simpleDatasU=null;
							nullObjError("simpleDatasU");
						}
						
						simpleDatasT.put(simpleDatasW,simpleDatasU);
					}
				}
			}
		}
		else
		{
			this.simpleDatas=null;
			nullObjError("simpleDatas");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		RoleGroupToolData mData=(RoleGroupToolData)data;
		if(mData.simpleDatas!=null)
		{
			if(this.simpleDatas==null)
				return false;
			if(this.simpleDatas.size()!=mData.simpleDatas.size())
				return false;
			LongObjectMap<RoleGroupSimpleData> simpleDatasR=mData.simpleDatas;
			if(!this.simpleDatas.isEmpty())
			{
				long simpleDatasKFreeValue=this.simpleDatas.getFreeValue();
				long[] simpleDatasKKeys=this.simpleDatas.getKeys();
				Object[] simpleDatasVValues=this.simpleDatas.getValues();
				for(int simpleDatasKI=simpleDatasKKeys.length-1;simpleDatasKI>=0;--simpleDatasKI)
				{
					long simpleDatasK=simpleDatasKKeys[simpleDatasKI];
					if(simpleDatasK!=simpleDatasKFreeValue)
					{
						RoleGroupSimpleData simpleDatasV=(RoleGroupSimpleData)simpleDatasVValues[simpleDatasKI];
						RoleGroupSimpleData simpleDatasU=simpleDatasR.get(simpleDatasK);
						if(simpleDatasU!=null)
						{
							if(simpleDatasV==null)
								return false;
							if(!simpleDatasV.dataEquals(simpleDatasU))
								return false;
						}
						else
						{
							if(simpleDatasV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.simpleDatas!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("simpleDatas");
		writer.sb.append(':');
		writer.sb.append("Map<long,RoleGroupSimpleData>");
		if(this.simpleDatas!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.simpleDatas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.simpleDatas.isEmpty())
			{
				long simpleDatasKFreeValue=this.simpleDatas.getFreeValue();
				long[] simpleDatasKKeys=this.simpleDatas.getKeys();
				Object[] simpleDatasVValues=this.simpleDatas.getValues();
				for(int simpleDatasKI=simpleDatasKKeys.length-1;simpleDatasKI>=0;--simpleDatasKI)
				{
					long simpleDatasK=simpleDatasKKeys[simpleDatasKI];
					if(simpleDatasK!=simpleDatasKFreeValue)
					{
						RoleGroupSimpleData simpleDatasV=(RoleGroupSimpleData)simpleDatasVValues[simpleDatasKI];
						writer.writeTabs();
						writer.sb.append(simpleDatasK);
						
						writer.sb.append(':');
						if(simpleDatasV!=null)
						{
							simpleDatasV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("RoleGroupSimpleData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.simpleDatas=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.simpleDatas=null;
	}
	
}
