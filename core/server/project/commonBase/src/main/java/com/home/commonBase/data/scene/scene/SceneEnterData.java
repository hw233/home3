package com.home.commonBase.data.scene.scene;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.role.SceneRoleData;
import com.home.commonBase.data.scene.scene.FieldItemBagBindData;
import com.home.commonBase.data.scene.unit.UnitData;
import com.home.commonBase.data.scene.unit.UnitSimpleData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 场景进入数据(generated by shine) */
public class SceneEnterData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.SceneEnter;
	
	/** 主角(可为空) */
	public UnitData hero;
	
	/** 场景角色组(副本类有效) */
	public LongObjectMap<SceneRoleData> roles;
	
	/** 自身绑定掉落包组 */
	public IntObjectMap<FieldItemBagBindData> selfBindFieldItemBags;
	
	/** 视野绑定单位数据 */
	public IntObjectMap<UnitSimpleData> bindVisionUnits;
	
	/** 单位数据 */
	public SList<UnitData> units;
	
	public SceneEnterData()
	{
		_dataID=BaseDataType.SceneEnter;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			BaseData heroT=stream.readDataFullNotNull();
			if(heroT!=null)
			{
				if(heroT instanceof UnitData)
				{
					this.hero=(UnitData)heroT;
				}
				else
				{
					this.hero=new UnitData();
					if(!(heroT.getClass().isAssignableFrom(UnitData.class)))
					{
						stream.throwTypeReadError(UnitData.class,heroT.getClass());
					}
					this.hero.shadowCopy(heroT);
				}
			}
			else
			{
				this.hero=null;
			}
		}
		else
		{
			this.hero=null;
		}
		
		int unitsLen=stream.readLen();
		if(this.units!=null)
		{
			this.units.clear();
			this.units.ensureCapacity(unitsLen);
		}
		else
		{
			this.units=new SList<UnitData>(UnitData[]::new,unitsLen);
		}
		
		SList<UnitData> unitsT=this.units;
		for(int unitsI=unitsLen-1;unitsI>=0;--unitsI)
		{
			UnitData unitsV;
			BaseData unitsVT=stream.readDataFullNotNull();
			if(unitsVT!=null)
			{
				if(unitsVT instanceof UnitData)
				{
					unitsV=(UnitData)unitsVT;
				}
				else
				{
					unitsV=new UnitData();
					if(!(unitsVT.getClass().isAssignableFrom(UnitData.class)))
					{
						stream.throwTypeReadError(UnitData.class,unitsVT.getClass());
					}
					unitsV.shadowCopy(unitsVT);
				}
			}
			else
			{
				unitsV=null;
			}
			
			unitsT.add(unitsV);
		}
		
		int rolesLen=stream.readLen();
		if(this.roles!=null)
		{
			this.roles.clear();
			this.roles.ensureCapacity(rolesLen);
		}
		else
		{
			this.roles=new LongObjectMap<SceneRoleData>(SceneRoleData[]::new,rolesLen);
		}
		
		LongObjectMap<SceneRoleData> rolesT=this.roles;
		for(int rolesI=rolesLen-1;rolesI>=0;--rolesI)
		{
			SceneRoleData rolesV;
			BaseData rolesVT=stream.readDataFullNotNull();
			if(rolesVT!=null)
			{
				if(rolesVT instanceof SceneRoleData)
				{
					rolesV=(SceneRoleData)rolesVT;
				}
				else
				{
					rolesV=new SceneRoleData();
					if(!(rolesVT.getClass().isAssignableFrom(SceneRoleData.class)))
					{
						stream.throwTypeReadError(SceneRoleData.class,rolesVT.getClass());
					}
					rolesV.shadowCopy(rolesVT);
				}
			}
			else
			{
				rolesV=null;
			}
			
			rolesT.put(rolesV.playerID,rolesV);
		}
		
		if(stream.readBoolean())
		{
			int selfBindFieldItemBagsLen=stream.readLen();
			if(this.selfBindFieldItemBags!=null)
			{
				this.selfBindFieldItemBags.clear();
				this.selfBindFieldItemBags.ensureCapacity(selfBindFieldItemBagsLen);
			}
			else
			{
				this.selfBindFieldItemBags=new IntObjectMap<FieldItemBagBindData>(FieldItemBagBindData[]::new,selfBindFieldItemBagsLen);
			}
			
			IntObjectMap<FieldItemBagBindData> selfBindFieldItemBagsT=this.selfBindFieldItemBags;
			for(int selfBindFieldItemBagsI=selfBindFieldItemBagsLen-1;selfBindFieldItemBagsI>=0;--selfBindFieldItemBagsI)
			{
				FieldItemBagBindData selfBindFieldItemBagsV;
				if(stream.readBoolean())
				{
					BaseData selfBindFieldItemBagsVT=stream.readDataFullNotNull();
					if(selfBindFieldItemBagsVT!=null)
					{
						if(selfBindFieldItemBagsVT instanceof FieldItemBagBindData)
						{
							selfBindFieldItemBagsV=(FieldItemBagBindData)selfBindFieldItemBagsVT;
						}
						else
						{
							selfBindFieldItemBagsV=new FieldItemBagBindData();
							if(!(selfBindFieldItemBagsVT.getClass().isAssignableFrom(FieldItemBagBindData.class)))
							{
								stream.throwTypeReadError(FieldItemBagBindData.class,selfBindFieldItemBagsVT.getClass());
							}
							selfBindFieldItemBagsV.shadowCopy(selfBindFieldItemBagsVT);
						}
					}
					else
					{
						selfBindFieldItemBagsV=null;
					}
				}
				else
				{
					selfBindFieldItemBagsV=null;
				}
				
				selfBindFieldItemBagsT.put(selfBindFieldItemBagsV.instanceID,selfBindFieldItemBagsV);
			}
		}
		else
		{
			this.selfBindFieldItemBags=null;
		}
		
		if(stream.readBoolean())
		{
			int bindVisionUnitsLen=stream.readLen();
			if(this.bindVisionUnits!=null)
			{
				this.bindVisionUnits.clear();
				this.bindVisionUnits.ensureCapacity(bindVisionUnitsLen);
			}
			else
			{
				this.bindVisionUnits=new IntObjectMap<UnitSimpleData>(UnitSimpleData[]::new,bindVisionUnitsLen);
			}
			
			IntObjectMap<UnitSimpleData> bindVisionUnitsT=this.bindVisionUnits;
			for(int bindVisionUnitsI=bindVisionUnitsLen-1;bindVisionUnitsI>=0;--bindVisionUnitsI)
			{
				int bindVisionUnitsK;
				UnitSimpleData bindVisionUnitsV;
				bindVisionUnitsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					BaseData bindVisionUnitsVT=stream.readDataFullNotNull();
					if(bindVisionUnitsVT!=null)
					{
						if(bindVisionUnitsVT instanceof UnitSimpleData)
						{
							bindVisionUnitsV=(UnitSimpleData)bindVisionUnitsVT;
						}
						else
						{
							bindVisionUnitsV=new UnitSimpleData();
							if(!(bindVisionUnitsVT.getClass().isAssignableFrom(UnitSimpleData.class)))
							{
								stream.throwTypeReadError(UnitSimpleData.class,bindVisionUnitsVT.getClass());
							}
							bindVisionUnitsV.shadowCopy(bindVisionUnitsVT);
						}
					}
					else
					{
						bindVisionUnitsV=null;
					}
				}
				else
				{
					bindVisionUnitsV=null;
				}
				
				bindVisionUnitsT.put(bindVisionUnitsK,bindVisionUnitsV);
			}
		}
		else
		{
			this.bindVisionUnits=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.hero!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.hero);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.units!=null)
		{
			stream.writeLen(this.units.size());
			if(!this.units.isEmpty())
			{
				Object[] unitsVValues=this.units.getValues();
				for(int unitsVI=0,unitsVLen=this.units.length();unitsVI<unitsVLen;++unitsVI)
				{
					UnitData unitsV=(UnitData)unitsVValues[unitsVI];
					if(unitsV!=null)
					{
						stream.writeDataFullNotNull(unitsV);
					}
					else
					{
						nullObjError("unitsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("units");
		}
		
		if(this.roles!=null)
		{
			stream.writeLen(this.roles.size());
			if(!this.roles.isEmpty())
			{
				Object[] rolesVValues=this.roles.getValues();
				for(int rolesVI=rolesVValues.length-1;rolesVI>=0;--rolesVI)
				{
					if(rolesVValues[rolesVI]!=null)
					{
						SceneRoleData rolesV=(SceneRoleData)rolesVValues[rolesVI];
						if(rolesV!=null)
						{
							stream.writeDataFullNotNull(rolesV);
						}
						else
						{
							nullObjError("rolesV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("roles");
		}
		
		if(this.selfBindFieldItemBags!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.selfBindFieldItemBags.size());
			if(!this.selfBindFieldItemBags.isEmpty())
			{
				Object[] selfBindFieldItemBagsVValues=this.selfBindFieldItemBags.getValues();
				for(int selfBindFieldItemBagsVI=selfBindFieldItemBagsVValues.length-1;selfBindFieldItemBagsVI>=0;--selfBindFieldItemBagsVI)
				{
					if(selfBindFieldItemBagsVValues[selfBindFieldItemBagsVI]!=null)
					{
						FieldItemBagBindData selfBindFieldItemBagsV=(FieldItemBagBindData)selfBindFieldItemBagsVValues[selfBindFieldItemBagsVI];
						if(selfBindFieldItemBagsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataFullNotNull(selfBindFieldItemBagsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.bindVisionUnits!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.bindVisionUnits.size());
			if(!this.bindVisionUnits.isEmpty())
			{
				int bindVisionUnitsKFreeValue=this.bindVisionUnits.getFreeValue();
				int[] bindVisionUnitsKKeys=this.bindVisionUnits.getKeys();
				Object[] bindVisionUnitsVValues=this.bindVisionUnits.getValues();
				for(int bindVisionUnitsKI=bindVisionUnitsKKeys.length-1;bindVisionUnitsKI>=0;--bindVisionUnitsKI)
				{
					int bindVisionUnitsK=bindVisionUnitsKKeys[bindVisionUnitsKI];
					if(bindVisionUnitsK!=bindVisionUnitsKFreeValue)
					{
						UnitSimpleData bindVisionUnitsV=(UnitSimpleData)bindVisionUnitsVValues[bindVisionUnitsKI];
						stream.writeInt(bindVisionUnitsK);
						
						if(bindVisionUnitsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataFullNotNull(bindVisionUnitsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		if(stream.readBoolean())
		{
			this.hero=(UnitData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.hero=null;
		}
		
		int unitsLen=stream.readLen();
		if(this.units!=null)
		{
			this.units.clear();
			this.units.ensureCapacity(unitsLen);
		}
		else
		{
			this.units=new SList<UnitData>(UnitData[]::new,unitsLen);
		}
		
		SList<UnitData> unitsT=this.units;
		for(int unitsI=unitsLen-1;unitsI>=0;--unitsI)
		{
			UnitData unitsV;
			unitsV=(UnitData)stream.readDataSimpleNotNull();
			
			unitsT.add(unitsV);
		}
		
		int rolesLen=stream.readLen();
		if(this.roles!=null)
		{
			this.roles.clear();
			this.roles.ensureCapacity(rolesLen);
		}
		else
		{
			this.roles=new LongObjectMap<SceneRoleData>(SceneRoleData[]::new,rolesLen);
		}
		
		LongObjectMap<SceneRoleData> rolesT=this.roles;
		for(int rolesI=rolesLen-1;rolesI>=0;--rolesI)
		{
			SceneRoleData rolesV;
			rolesV=(SceneRoleData)stream.readDataSimpleNotNull();
			
			rolesT.put(rolesV.playerID,rolesV);
		}
		
		if(stream.readBoolean())
		{
			int selfBindFieldItemBagsLen=stream.readLen();
			if(this.selfBindFieldItemBags!=null)
			{
				this.selfBindFieldItemBags.clear();
				this.selfBindFieldItemBags.ensureCapacity(selfBindFieldItemBagsLen);
			}
			else
			{
				this.selfBindFieldItemBags=new IntObjectMap<FieldItemBagBindData>(FieldItemBagBindData[]::new,selfBindFieldItemBagsLen);
			}
			
			IntObjectMap<FieldItemBagBindData> selfBindFieldItemBagsT=this.selfBindFieldItemBags;
			for(int selfBindFieldItemBagsI=selfBindFieldItemBagsLen-1;selfBindFieldItemBagsI>=0;--selfBindFieldItemBagsI)
			{
				FieldItemBagBindData selfBindFieldItemBagsV;
				if(stream.readBoolean())
				{
					selfBindFieldItemBagsV=(FieldItemBagBindData)stream.readDataSimpleNotNull();
				}
				else
				{
					selfBindFieldItemBagsV=null;
				}
				
				selfBindFieldItemBagsT.put(selfBindFieldItemBagsV.instanceID,selfBindFieldItemBagsV);
			}
		}
		else
		{
			this.selfBindFieldItemBags=null;
		}
		
		if(stream.readBoolean())
		{
			int bindVisionUnitsLen=stream.readLen();
			if(this.bindVisionUnits!=null)
			{
				this.bindVisionUnits.clear();
				this.bindVisionUnits.ensureCapacity(bindVisionUnitsLen);
			}
			else
			{
				this.bindVisionUnits=new IntObjectMap<UnitSimpleData>(UnitSimpleData[]::new,bindVisionUnitsLen);
			}
			
			IntObjectMap<UnitSimpleData> bindVisionUnitsT=this.bindVisionUnits;
			for(int bindVisionUnitsI=bindVisionUnitsLen-1;bindVisionUnitsI>=0;--bindVisionUnitsI)
			{
				int bindVisionUnitsK;
				UnitSimpleData bindVisionUnitsV;
				bindVisionUnitsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					bindVisionUnitsV=(UnitSimpleData)stream.readDataSimpleNotNull();
				}
				else
				{
					bindVisionUnitsV=null;
				}
				
				bindVisionUnitsT.put(bindVisionUnitsK,bindVisionUnitsV);
			}
		}
		else
		{
			this.bindVisionUnits=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.hero!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.hero);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.units!=null)
		{
			stream.writeLen(this.units.size());
			if(!this.units.isEmpty())
			{
				Object[] unitsVValues=this.units.getValues();
				for(int unitsVI=0,unitsVLen=this.units.length();unitsVI<unitsVLen;++unitsVI)
				{
					UnitData unitsV=(UnitData)unitsVValues[unitsVI];
					if(unitsV!=null)
					{
						stream.writeDataSimpleNotNull(unitsV);
					}
					else
					{
						nullObjError("unitsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("units");
		}
		
		if(this.roles!=null)
		{
			stream.writeLen(this.roles.size());
			if(!this.roles.isEmpty())
			{
				Object[] rolesVValues=this.roles.getValues();
				for(int rolesVI=rolesVValues.length-1;rolesVI>=0;--rolesVI)
				{
					if(rolesVValues[rolesVI]!=null)
					{
						SceneRoleData rolesV=(SceneRoleData)rolesVValues[rolesVI];
						if(rolesV!=null)
						{
							stream.writeDataSimpleNotNull(rolesV);
						}
						else
						{
							nullObjError("rolesV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("roles");
		}
		
		if(this.selfBindFieldItemBags!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.selfBindFieldItemBags.size());
			if(!this.selfBindFieldItemBags.isEmpty())
			{
				Object[] selfBindFieldItemBagsVValues=this.selfBindFieldItemBags.getValues();
				for(int selfBindFieldItemBagsVI=selfBindFieldItemBagsVValues.length-1;selfBindFieldItemBagsVI>=0;--selfBindFieldItemBagsVI)
				{
					if(selfBindFieldItemBagsVValues[selfBindFieldItemBagsVI]!=null)
					{
						FieldItemBagBindData selfBindFieldItemBagsV=(FieldItemBagBindData)selfBindFieldItemBagsVValues[selfBindFieldItemBagsVI];
						if(selfBindFieldItemBagsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(selfBindFieldItemBagsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.bindVisionUnits!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.bindVisionUnits.size());
			if(!this.bindVisionUnits.isEmpty())
			{
				int bindVisionUnitsKFreeValue=this.bindVisionUnits.getFreeValue();
				int[] bindVisionUnitsKKeys=this.bindVisionUnits.getKeys();
				Object[] bindVisionUnitsVValues=this.bindVisionUnits.getValues();
				for(int bindVisionUnitsKI=bindVisionUnitsKKeys.length-1;bindVisionUnitsKI>=0;--bindVisionUnitsKI)
				{
					int bindVisionUnitsK=bindVisionUnitsKKeys[bindVisionUnitsKI];
					if(bindVisionUnitsK!=bindVisionUnitsKFreeValue)
					{
						UnitSimpleData bindVisionUnitsV=(UnitSimpleData)bindVisionUnitsVValues[bindVisionUnitsKI];
						stream.writeInt(bindVisionUnitsK);
						
						if(bindVisionUnitsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(bindVisionUnitsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof SceneEnterData))
			return;
		
		SceneEnterData mData=(SceneEnterData)data;
		
		if(mData.hero!=null)
		{
			this.hero=(UnitData)mData.hero.clone();
		}
		else
		{
			this.hero=null;
		}
		
		if(mData.units!=null)
		{
			if(this.units!=null)
			{
				this.units.clear();
				this.units.ensureCapacity(mData.units.size());
			}
			else
			{
				this.units=new SList<UnitData>(UnitData[]::new,mData.units.size());
			}
			
			SList<UnitData> unitsT=this.units;
			if(!mData.units.isEmpty())
			{
				Object[] unitsVValues=mData.units.getValues();
				for(int unitsVI=0,unitsVLen=mData.units.length();unitsVI<unitsVLen;++unitsVI)
				{
					UnitData unitsV=(UnitData)unitsVValues[unitsVI];
					UnitData unitsU;
					if(unitsV!=null)
					{
						unitsU=(UnitData)unitsV.clone();
					}
					else
					{
						unitsU=null;
						nullObjError("unitsU");
					}
					
					unitsT.add(unitsU);
				}
			}
		}
		else
		{
			this.units=null;
			nullObjError("units");
		}
		
		if(mData.roles!=null)
		{
			if(this.roles!=null)
			{
				this.roles.clear();
				this.roles.ensureCapacity(mData.roles.size());
			}
			else
			{
				this.roles=new LongObjectMap<SceneRoleData>(SceneRoleData[]::new,mData.roles.size());
			}
			
			LongObjectMap<SceneRoleData> rolesT=this.roles;
			if(!mData.roles.isEmpty())
			{
				Object[] rolesVValues=mData.roles.getValues();
				for(int rolesVI=rolesVValues.length-1;rolesVI>=0;--rolesVI)
				{
					if(rolesVValues[rolesVI]!=null)
					{
						SceneRoleData rolesV=(SceneRoleData)rolesVValues[rolesVI];
						SceneRoleData rolesU;
						if(rolesV!=null)
						{
							rolesU=(SceneRoleData)rolesV.clone();
						}
						else
						{
							rolesU=null;
							nullObjError("rolesU");
						}
						
						rolesT.put(rolesU.playerID,rolesU);
					}
				}
			}
		}
		else
		{
			this.roles=null;
			nullObjError("roles");
		}
		
		if(mData.selfBindFieldItemBags!=null)
		{
			if(this.selfBindFieldItemBags!=null)
			{
				this.selfBindFieldItemBags.clear();
				this.selfBindFieldItemBags.ensureCapacity(mData.selfBindFieldItemBags.size());
			}
			else
			{
				this.selfBindFieldItemBags=new IntObjectMap<FieldItemBagBindData>(FieldItemBagBindData[]::new,mData.selfBindFieldItemBags.size());
			}
			
			IntObjectMap<FieldItemBagBindData> selfBindFieldItemBagsT=this.selfBindFieldItemBags;
			if(!mData.selfBindFieldItemBags.isEmpty())
			{
				Object[] selfBindFieldItemBagsVValues=mData.selfBindFieldItemBags.getValues();
				for(int selfBindFieldItemBagsVI=selfBindFieldItemBagsVValues.length-1;selfBindFieldItemBagsVI>=0;--selfBindFieldItemBagsVI)
				{
					if(selfBindFieldItemBagsVValues[selfBindFieldItemBagsVI]!=null)
					{
						FieldItemBagBindData selfBindFieldItemBagsV=(FieldItemBagBindData)selfBindFieldItemBagsVValues[selfBindFieldItemBagsVI];
						FieldItemBagBindData selfBindFieldItemBagsU;
						if(selfBindFieldItemBagsV!=null)
						{
							selfBindFieldItemBagsU=(FieldItemBagBindData)selfBindFieldItemBagsV.clone();
						}
						else
						{
							selfBindFieldItemBagsU=null;
						}
						
						selfBindFieldItemBagsT.put(selfBindFieldItemBagsU.instanceID,selfBindFieldItemBagsU);
					}
				}
			}
		}
		else
		{
			this.selfBindFieldItemBags=null;
		}
		
		if(mData.bindVisionUnits!=null)
		{
			if(this.bindVisionUnits!=null)
			{
				this.bindVisionUnits.clear();
				this.bindVisionUnits.ensureCapacity(mData.bindVisionUnits.size());
			}
			else
			{
				this.bindVisionUnits=new IntObjectMap<UnitSimpleData>(UnitSimpleData[]::new,mData.bindVisionUnits.size());
			}
			
			IntObjectMap<UnitSimpleData> bindVisionUnitsT=this.bindVisionUnits;
			if(!mData.bindVisionUnits.isEmpty())
			{
				int bindVisionUnitsKFreeValue=mData.bindVisionUnits.getFreeValue();
				int[] bindVisionUnitsKKeys=mData.bindVisionUnits.getKeys();
				Object[] bindVisionUnitsVValues=mData.bindVisionUnits.getValues();
				for(int bindVisionUnitsKI=bindVisionUnitsKKeys.length-1;bindVisionUnitsKI>=0;--bindVisionUnitsKI)
				{
					int bindVisionUnitsK=bindVisionUnitsKKeys[bindVisionUnitsKI];
					if(bindVisionUnitsK!=bindVisionUnitsKFreeValue)
					{
						UnitSimpleData bindVisionUnitsV=(UnitSimpleData)bindVisionUnitsVValues[bindVisionUnitsKI];
						int bindVisionUnitsW;
						UnitSimpleData bindVisionUnitsU;
						bindVisionUnitsW=bindVisionUnitsK;
						
						if(bindVisionUnitsV!=null)
						{
							bindVisionUnitsU=(UnitSimpleData)bindVisionUnitsV.clone();
						}
						else
						{
							bindVisionUnitsU=null;
						}
						
						bindVisionUnitsT.put(bindVisionUnitsW,bindVisionUnitsU);
					}
				}
			}
		}
		else
		{
			this.bindVisionUnits=null;
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof SceneEnterData))
			return;
		
		SceneEnterData mData=(SceneEnterData)data;
		
		this.hero=mData.hero;
		this.units=mData.units;
		this.roles=mData.roles;
		this.selfBindFieldItemBags=mData.selfBindFieldItemBags;
		this.bindVisionUnits=mData.bindVisionUnits;
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		SceneEnterData mData=(SceneEnterData)data;
		if(mData.hero!=null)
		{
			if(this.hero==null)
				return false;
			if(!this.hero.dataEquals(mData.hero))
				return false;
		}
		else
		{
			if(this.hero!=null)
				return false;
		}
		
		if(mData.units!=null)
		{
			if(this.units==null)
				return false;
			if(this.units.size()!=mData.units.size())
				return false;
			SList<UnitData> unitsT=this.units;
			SList<UnitData> unitsR=mData.units;
			int unitsLen=unitsT.size();
			for(int unitsI=0;unitsI<unitsLen;++unitsI)
			{
				UnitData unitsU=unitsT.get(unitsI);
				UnitData unitsV=unitsR.get(unitsI);
				if(unitsV!=null)
				{
					if(unitsU==null)
						return false;
					if(!unitsU.dataEquals(unitsV))
						return false;
				}
				else
				{
					if(unitsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.units!=null)
				return false;
		}
		
		if(mData.roles!=null)
		{
			if(this.roles==null)
				return false;
			if(this.roles.size()!=mData.roles.size())
				return false;
			LongObjectMap<SceneRoleData> rolesR=mData.roles;
			if(!this.roles.isEmpty())
			{
				long rolesKFreeValue=this.roles.getFreeValue();
				long[] rolesKKeys=this.roles.getKeys();
				Object[] rolesVValues=this.roles.getValues();
				for(int rolesKI=rolesKKeys.length-1;rolesKI>=0;--rolesKI)
				{
					long rolesK=rolesKKeys[rolesKI];
					if(rolesK!=rolesKFreeValue)
					{
						SceneRoleData rolesV=(SceneRoleData)rolesVValues[rolesKI];
						SceneRoleData rolesU=rolesR.get(rolesK);
						if(rolesU!=null)
						{
							if(rolesV==null)
								return false;
							if(!rolesV.dataEquals(rolesU))
								return false;
						}
						else
						{
							if(rolesV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.roles!=null)
				return false;
		}
		
		if(mData.selfBindFieldItemBags!=null)
		{
			if(this.selfBindFieldItemBags==null)
				return false;
			if(this.selfBindFieldItemBags.size()!=mData.selfBindFieldItemBags.size())
				return false;
			IntObjectMap<FieldItemBagBindData> selfBindFieldItemBagsR=mData.selfBindFieldItemBags;
			if(!this.selfBindFieldItemBags.isEmpty())
			{
				int selfBindFieldItemBagsKFreeValue=this.selfBindFieldItemBags.getFreeValue();
				int[] selfBindFieldItemBagsKKeys=this.selfBindFieldItemBags.getKeys();
				Object[] selfBindFieldItemBagsVValues=this.selfBindFieldItemBags.getValues();
				for(int selfBindFieldItemBagsKI=selfBindFieldItemBagsKKeys.length-1;selfBindFieldItemBagsKI>=0;--selfBindFieldItemBagsKI)
				{
					int selfBindFieldItemBagsK=selfBindFieldItemBagsKKeys[selfBindFieldItemBagsKI];
					if(selfBindFieldItemBagsK!=selfBindFieldItemBagsKFreeValue)
					{
						FieldItemBagBindData selfBindFieldItemBagsV=(FieldItemBagBindData)selfBindFieldItemBagsVValues[selfBindFieldItemBagsKI];
						FieldItemBagBindData selfBindFieldItemBagsU=selfBindFieldItemBagsR.get(selfBindFieldItemBagsK);
						if(selfBindFieldItemBagsU!=null)
						{
							if(selfBindFieldItemBagsV==null)
								return false;
							if(!selfBindFieldItemBagsV.dataEquals(selfBindFieldItemBagsU))
								return false;
						}
						else
						{
							if(selfBindFieldItemBagsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.selfBindFieldItemBags!=null)
				return false;
		}
		
		if(mData.bindVisionUnits!=null)
		{
			if(this.bindVisionUnits==null)
				return false;
			if(this.bindVisionUnits.size()!=mData.bindVisionUnits.size())
				return false;
			IntObjectMap<UnitSimpleData> bindVisionUnitsR=mData.bindVisionUnits;
			if(!this.bindVisionUnits.isEmpty())
			{
				int bindVisionUnitsKFreeValue=this.bindVisionUnits.getFreeValue();
				int[] bindVisionUnitsKKeys=this.bindVisionUnits.getKeys();
				Object[] bindVisionUnitsVValues=this.bindVisionUnits.getValues();
				for(int bindVisionUnitsKI=bindVisionUnitsKKeys.length-1;bindVisionUnitsKI>=0;--bindVisionUnitsKI)
				{
					int bindVisionUnitsK=bindVisionUnitsKKeys[bindVisionUnitsKI];
					if(bindVisionUnitsK!=bindVisionUnitsKFreeValue)
					{
						UnitSimpleData bindVisionUnitsV=(UnitSimpleData)bindVisionUnitsVValues[bindVisionUnitsKI];
						UnitSimpleData bindVisionUnitsU=bindVisionUnitsR.get(bindVisionUnitsK);
						if(bindVisionUnitsU!=null)
						{
							if(bindVisionUnitsV==null)
								return false;
							if(!bindVisionUnitsV.dataEquals(bindVisionUnitsU))
								return false;
						}
						else
						{
							if(bindVisionUnitsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.bindVisionUnits!=null)
				return false;
		}
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SceneEnterData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("hero");
		writer.sb.append(':');
		if(this.hero!=null)
		{
			this.hero.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UnitData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("units");
		writer.sb.append(':');
		writer.sb.append("List<UnitData>");
		if(this.units!=null)
		{
			SList<UnitData> unitsT=this.units;
			int unitsLen=unitsT.size();
			writer.sb.append('(');
			writer.sb.append(unitsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int unitsI=0;unitsI<unitsLen;++unitsI)
			{
				UnitData unitsV=unitsT.get(unitsI);
				writer.writeTabs();
				writer.sb.append(unitsI);
				writer.sb.append(':');
				if(unitsV!=null)
				{
					unitsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("UnitData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("roles");
		writer.sb.append(':');
		writer.sb.append("Map<long,SceneRoleData>");
		if(this.roles!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.roles.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.roles.isEmpty())
			{
				long rolesKFreeValue=this.roles.getFreeValue();
				long[] rolesKKeys=this.roles.getKeys();
				Object[] rolesVValues=this.roles.getValues();
				for(int rolesKI=rolesKKeys.length-1;rolesKI>=0;--rolesKI)
				{
					long rolesK=rolesKKeys[rolesKI];
					if(rolesK!=rolesKFreeValue)
					{
						SceneRoleData rolesV=(SceneRoleData)rolesVValues[rolesKI];
						writer.writeTabs();
						writer.sb.append(rolesK);
						
						writer.sb.append(':');
						if(rolesV!=null)
						{
							rolesV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("SceneRoleData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("selfBindFieldItemBags");
		writer.sb.append(':');
		writer.sb.append("Map<int,FieldItemBagBindData>");
		if(this.selfBindFieldItemBags!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.selfBindFieldItemBags.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.selfBindFieldItemBags.isEmpty())
			{
				int selfBindFieldItemBagsKFreeValue=this.selfBindFieldItemBags.getFreeValue();
				int[] selfBindFieldItemBagsKKeys=this.selfBindFieldItemBags.getKeys();
				Object[] selfBindFieldItemBagsVValues=this.selfBindFieldItemBags.getValues();
				for(int selfBindFieldItemBagsKI=selfBindFieldItemBagsKKeys.length-1;selfBindFieldItemBagsKI>=0;--selfBindFieldItemBagsKI)
				{
					int selfBindFieldItemBagsK=selfBindFieldItemBagsKKeys[selfBindFieldItemBagsKI];
					if(selfBindFieldItemBagsK!=selfBindFieldItemBagsKFreeValue)
					{
						FieldItemBagBindData selfBindFieldItemBagsV=(FieldItemBagBindData)selfBindFieldItemBagsVValues[selfBindFieldItemBagsKI];
						writer.writeTabs();
						writer.sb.append(selfBindFieldItemBagsK);
						
						writer.sb.append(':');
						if(selfBindFieldItemBagsV!=null)
						{
							selfBindFieldItemBagsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("FieldItemBagBindData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("bindVisionUnits");
		writer.sb.append(':');
		writer.sb.append("Map<int,UnitSimpleData>");
		if(this.bindVisionUnits!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.bindVisionUnits.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.bindVisionUnits.isEmpty())
			{
				int bindVisionUnitsKFreeValue=this.bindVisionUnits.getFreeValue();
				int[] bindVisionUnitsKKeys=this.bindVisionUnits.getKeys();
				Object[] bindVisionUnitsVValues=this.bindVisionUnits.getValues();
				for(int bindVisionUnitsKI=bindVisionUnitsKKeys.length-1;bindVisionUnitsKI>=0;--bindVisionUnitsKI)
				{
					int bindVisionUnitsK=bindVisionUnitsKKeys[bindVisionUnitsKI];
					if(bindVisionUnitsK!=bindVisionUnitsKFreeValue)
					{
						UnitSimpleData bindVisionUnitsV=(UnitSimpleData)bindVisionUnitsVValues[bindVisionUnitsKI];
						writer.writeTabs();
						writer.sb.append(bindVisionUnitsK);
						
						writer.sb.append(':');
						if(bindVisionUnitsV!=null)
						{
							bindVisionUnitsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("UnitSimpleData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.units=new SList<UnitData>(UnitData[]::new);
		this.roles=new LongObjectMap<SceneRoleData>(SceneRoleData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.hero=null;
		this.units=null;
		this.roles=null;
		this.selfBindFieldItemBags=null;
		this.bindVisionUnits=null;
	}
	
}
