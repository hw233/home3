package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.config.game.LanguageConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.collection.IntObjectMap;

/** 成就表(generated by shine) */
public class AchievementConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<AchievementConfig> _dic;
	
	/** id */
	public int id;
	
	/** 名字 */
	public String name="";
	
	/** 类型 */
	public int type;
	
	/** 前置成就组 */
	public int[] pres;
	
	/** 后置成就组 */
	public IntList afters;
	
	/** 任务目标 */
	public int taskID;
	
	/** 奖励id */
	public int rewardID;
	
	/** 名字原值 */
	private String _name;
	
	/** 获取 */
	public static AchievementConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<AchievementConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<AchievementConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.type=stream.readInt();
		
		this.taskID=stream.readInt();
		
		int presLen=stream.readLen();
		if(this.pres==null || this.pres.length!=presLen)
		{
			this.pres=new int[presLen];
		}
		int[] presT=this.pres;
		for(int presI=0;presI<presLen;++presI)
		{
			int presV;
			presV=stream.readInt();
			
			presT[presI]=presV;
		}
		
		this.rewardID=stream.readInt();
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		afters=new IntList();
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;
		
		AchievementConfig[] values;
		AchievementConfig v;
		
		for(int i=(values=_dic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				if(v.pres.length>0)
				{
					for(int v2:v.pres)
					{
						_dic.get(v2).afters.add(v.id);
					}
				}
			}
		}
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.taskID);
		
		if(this.pres!=null)
		{
			int[] presT=this.pres;
			stream.writeLen(presT.length);
			for(int presVI=0,presVLen=presT.length;presVI<presVLen;++presVI)
			{
				int presV=presT[presVI];
				stream.writeInt(presV);
				
			}
		}
		else
		{
			nullObjError("pres");
		}
		
		stream.writeInt(this.rewardID);
		
	}
	
	/** 生成刷新配置 */
	@Override
	protected void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
	}
	
}
