package com.home.commonBase.data.item;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.item.ItemData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 道具容器数据(generated by shine) */
public class ItemContainerData extends FuncToolData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ItemContainer;
	
	/** 开启格子数(0为无限) */
	public int gridNum;
	
	/** 道具组 */
	public SList<ItemData> items;
	
	public ItemContainerData()
	{
		_dataID=BaseDataType.ItemContainer;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ItemContainerData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>(ItemData[]::new,itemsLen);
			}
			
			SList<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				ItemData itemsV;
				if(stream.readBoolean())
				{
					BaseData itemsVT=stream.readDataFullNotNull();
					if(itemsVT!=null)
					{
						if(itemsVT instanceof ItemData)
						{
							itemsV=(ItemData)itemsVT;
						}
						else
						{
							itemsV=new ItemData();
							if(!(itemsVT.getClass().isAssignableFrom(ItemData.class)))
							{
								stream.throwTypeReadError(ItemData.class,itemsVT.getClass());
							}
							itemsV.shadowCopy(itemsVT);
						}
					}
					else
					{
						itemsV=null;
					}
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.add(itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
		this.gridNum=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				Object[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(itemsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.gridNum);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>(ItemData[]::new,itemsLen);
			}
			
			SList<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				ItemData itemsV;
				if(stream.readBoolean())
				{
					itemsV=(ItemData)stream.readDataSimpleNotNull();
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.add(itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
		this.gridNum=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				Object[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(itemsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.gridNum);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof ItemContainerData))
			return;
		
		ItemContainerData mData=(ItemContainerData)data;
		
		this.items=mData.items;
		this.gridNum=mData.gridNum;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof ItemContainerData))
			return;
		
		ItemContainerData mData=(ItemContainerData)data;
		
		if(mData.items!=null)
		{
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(mData.items.size());
			}
			else
			{
				this.items=new SList<ItemData>(ItemData[]::new,mData.items.size());
			}
			
			SList<ItemData> itemsT=this.items;
			if(!mData.items.isEmpty())
			{
				Object[] itemsVValues=mData.items.getValues();
				for(int itemsVI=0,itemsVLen=mData.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=(ItemData)itemsVValues[itemsVI];
					ItemData itemsU;
					if(itemsV!=null)
					{
						itemsU=(ItemData)itemsV.clone();
					}
					else
					{
						itemsU=null;
					}
					
					itemsT.add(itemsU);
				}
			}
		}
		else
		{
			this.items=null;
		}
		
		this.gridNum=mData.gridNum;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		ItemContainerData mData=(ItemContainerData)data;
		if(mData.items!=null)
		{
			if(this.items==null)
				return false;
			if(this.items.size()!=mData.items.size())
				return false;
			SList<ItemData> itemsT=this.items;
			SList<ItemData> itemsR=mData.items;
			int itemsLen=itemsT.size();
			for(int itemsI=0;itemsI<itemsLen;++itemsI)
			{
				ItemData itemsU=itemsT.get(itemsI);
				ItemData itemsV=itemsR.get(itemsI);
				if(itemsV!=null)
				{
					if(itemsU==null)
						return false;
					if(!itemsU.dataEquals(itemsV))
						return false;
				}
				else
				{
					if(itemsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.items!=null)
				return false;
		}
		
		if(this.gridNum!=mData.gridNum)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("items");
		writer.sb.append(':');
		writer.sb.append("List<ItemData>");
		if(this.items!=null)
		{
			SList<ItemData> itemsT=this.items;
			int itemsLen=itemsT.size();
			writer.sb.append('(');
			writer.sb.append(itemsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int itemsI=0;itemsI<itemsLen;++itemsI)
			{
				ItemData itemsV=itemsT.get(itemsI);
				writer.writeTabs();
				writer.sb.append(itemsI);
				writer.sb.append(':');
				if(itemsV!=null)
				{
					itemsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ItemData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gridNum");
		writer.sb.append(':');
		writer.sb.append(this.gridNum);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.items=null;
		this.gridNum=0;
	}
	
}
