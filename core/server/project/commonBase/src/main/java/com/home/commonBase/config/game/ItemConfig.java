package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.config.game.LanguageConfig;
import com.home.commonBase.constlist.generate.ItemType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.DIntData;
import com.home.shine.dataEx.TimeExpression;
import com.home.shine.support.CronExpression;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;
import com.home.shine.utils.TimeUtils;

/** 道具表(generated by shine) */
public class ItemConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<ItemConfig> _dic;
	
	/** 道具id */
	public int id;
	
	/** 名字 */
	public String name="";
	
	/** 类型 */
	public int type;
	
	/** 第二类型 */
	public int secondType;
	
	/** 单组叠加上限 */
	public int singlePlusMax;
	
	/** 背包容纳上限 */
	public int totalPlusMax;
	
	/** 物品等级(基础) */
	public int itemLevel;
	
	/** 使用限制等级 */
	public int limitLevel;
	
	/** 使用限制职业组 */
	public int[] limitVocations;
	
	/** 是否获得绑定  */
	public boolean bindByGet;
	
	/** 是否使用绑定  */
	public boolean bindByUse;
	
	/** 是否可交易(拍卖行,面交) */
	public boolean canTrade;
	
	/** 是否新获得时出现红点 */
	public boolean needRedPoint;
	
	/** 整理序 */
	public int sortIndex;
	
	/** 有效时间 */
	public String enableTime="";
	
	/** 装备是否唯一(equip用) */
	public boolean isUnique;
	
	/** 出售价格(npc卖店)(基础) */
	public int sellPrice;
	
	/** 使用条件(equip/tool用) */
	public int[][] useConditions;
	
	/** 属性部分(equip用)(基础) */
	public DIntData[] baseAttributes;
	
	/** 装备功能(equip用) */
	public int[][] equipActions;
	
	/** 使用功能(tool用) */
	public int[][] useActions;
	
	/** 是否消耗数目(tool用) */
	public boolean useCostItemNum;
	
	/** 是否跳过进包阶段(直接使用,tool用) */
	public boolean passEnterBag;
	
	/** 交易价格上限 */
	public int tradePriceMax;
	
	/** 交易价格下限 */
	public int tradePriceMin;
	
	/** 交易默认价格 */
	public int tradeDefaultPrice;
	
	/** 读条ID */
	public int progressBarID;
	
	/** 名字原值 */
	private String _name;
	
	/** 有效时间(时间表达式) */
	public TimeExpression enableTimeT;
	
	/** 获取 */
	public static ItemConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<ItemConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<ItemConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.type=stream.readInt();
		
		this.secondType=stream.readInt();
		
		this.singlePlusMax=stream.readInt();
		
		this.totalPlusMax=stream.readInt();
		
		this.itemLevel=stream.readInt();
		
		this.limitLevel=stream.readInt();
		
		int limitVocationsLen=stream.readLen();
		if(this.limitVocations==null || this.limitVocations.length!=limitVocationsLen)
		{
			this.limitVocations=new int[limitVocationsLen];
		}
		int[] limitVocationsT=this.limitVocations;
		for(int limitVocationsI=0;limitVocationsI<limitVocationsLen;++limitVocationsI)
		{
			int limitVocationsV;
			limitVocationsV=stream.readInt();
			
			limitVocationsT[limitVocationsI]=limitVocationsV;
		}
		
		this.bindByGet=stream.readBoolean();
		
		this.bindByUse=stream.readBoolean();
		
		this.canTrade=stream.readBoolean();
		
		this.sellPrice=stream.readInt();
		
		this.needRedPoint=stream.readBoolean();
		
		this.sortIndex=stream.readInt();
		
		this.enableTime=stream.readUTF();
		
		this.isUnique=stream.readBoolean();
		
		int baseAttributesLen=stream.readLen();
		if(this.baseAttributes==null || this.baseAttributes.length!=baseAttributesLen)
		{
			this.baseAttributes=new DIntData[baseAttributesLen];
		}
		DIntData[] baseAttributesT=this.baseAttributes;
		for(int baseAttributesI=0;baseAttributesI<baseAttributesLen;++baseAttributesI)
		{
			DIntData baseAttributesV;
			baseAttributesV=new DIntData();
			baseAttributesV.readBytesSimple(stream);
			
			baseAttributesT[baseAttributesI]=baseAttributesV;
		}
		
		int equipActionsLen=stream.readLen();
		if(this.equipActions==null || this.equipActions.length!=equipActionsLen)
		{
			this.equipActions=new int[equipActionsLen][];
		}
		int[][] equipActionsT=this.equipActions;
		for(int equipActionsI=0;equipActionsI<equipActionsLen;++equipActionsI)
		{
			int[] equipActionsV;
			int equipActionsVLen=stream.readLen();
			equipActionsV=new int[equipActionsVLen];
			int[] equipActionsVT=equipActionsV;
			for(int equipActionsVI=0;equipActionsVI<equipActionsVLen;++equipActionsVI)
			{
				int equipActionsVV;
				equipActionsVV=stream.readInt();
				
				equipActionsVT[equipActionsVI]=equipActionsVV;
			}
			
			equipActionsT[equipActionsI]=equipActionsV;
		}
		
		int useConditionsLen=stream.readLen();
		if(this.useConditions==null || this.useConditions.length!=useConditionsLen)
		{
			this.useConditions=new int[useConditionsLen][];
		}
		int[][] useConditionsT=this.useConditions;
		for(int useConditionsI=0;useConditionsI<useConditionsLen;++useConditionsI)
		{
			int[] useConditionsV;
			int useConditionsVLen=stream.readLen();
			useConditionsV=new int[useConditionsVLen];
			int[] useConditionsVT=useConditionsV;
			for(int useConditionsVI=0;useConditionsVI<useConditionsVLen;++useConditionsVI)
			{
				int useConditionsVV;
				useConditionsVV=stream.readInt();
				
				useConditionsVT[useConditionsVI]=useConditionsVV;
			}
			
			useConditionsT[useConditionsI]=useConditionsV;
		}
		
		int useActionsLen=stream.readLen();
		if(this.useActions==null || this.useActions.length!=useActionsLen)
		{
			this.useActions=new int[useActionsLen][];
		}
		int[][] useActionsT=this.useActions;
		for(int useActionsI=0;useActionsI<useActionsLen;++useActionsI)
		{
			int[] useActionsV;
			int useActionsVLen=stream.readLen();
			useActionsV=new int[useActionsVLen];
			int[] useActionsVT=useActionsV;
			for(int useActionsVI=0;useActionsVI<useActionsVLen;++useActionsVI)
			{
				int useActionsVV;
				useActionsVV=stream.readInt();
				
				useActionsVT[useActionsVI]=useActionsVV;
			}
			
			useActionsT[useActionsI]=useActionsV;
		}
		
		this.passEnterBag=stream.readBoolean();
		
		this.useCostItemNum=stream.readBoolean();
		
		this.progressBarID=stream.readInt();
		
		this.tradeDefaultPrice=stream.readInt();
		
		this.tradePriceMin=stream.readInt();
		
		this.tradePriceMax=stream.readInt();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 生成刷新配置 */
	@Override
	protected void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
		enableTimeT=new TimeExpression(enableTime);
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.secondType);
		
		stream.writeInt(this.singlePlusMax);
		
		stream.writeInt(this.totalPlusMax);
		
		stream.writeInt(this.itemLevel);
		
		stream.writeInt(this.limitLevel);
		
		if(this.limitVocations!=null)
		{
			int[] limitVocationsT=this.limitVocations;
			stream.writeLen(limitVocationsT.length);
			for(int limitVocationsVI=0,limitVocationsVLen=limitVocationsT.length;limitVocationsVI<limitVocationsVLen;++limitVocationsVI)
			{
				int limitVocationsV=limitVocationsT[limitVocationsVI];
				stream.writeInt(limitVocationsV);
				
			}
		}
		else
		{
			nullObjError("limitVocations");
		}
		
		stream.writeBoolean(this.bindByGet);
		
		stream.writeBoolean(this.bindByUse);
		
		stream.writeBoolean(this.canTrade);
		
		stream.writeInt(this.sellPrice);
		
		stream.writeBoolean(this.needRedPoint);
		
		stream.writeInt(this.sortIndex);
		
		stream.writeUTF(this.enableTime);
		
		stream.writeBoolean(this.isUnique);
		
		if(this.baseAttributes!=null)
		{
			DIntData[] baseAttributesT=this.baseAttributes;
			stream.writeLen(baseAttributesT.length);
			for(int baseAttributesVI=0,baseAttributesVLen=baseAttributesT.length;baseAttributesVI<baseAttributesVLen;++baseAttributesVI)
			{
				DIntData baseAttributesV=baseAttributesT[baseAttributesVI];
				if(baseAttributesV!=null)
				{
					baseAttributesV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("baseAttributesV");
				}
				
			}
		}
		else
		{
			nullObjError("baseAttributes");
		}
		
		if(this.equipActions!=null)
		{
			int[][] equipActionsT=this.equipActions;
			stream.writeLen(equipActionsT.length);
			for(int equipActionsVI=0,equipActionsVLen=equipActionsT.length;equipActionsVI<equipActionsVLen;++equipActionsVI)
			{
				int[] equipActionsV=equipActionsT[equipActionsVI];
				if(equipActionsV!=null)
				{
					int[] equipActionsVT=equipActionsV;
					stream.writeLen(equipActionsVT.length);
					for(int equipActionsVVI=0,equipActionsVVLen=equipActionsVT.length;equipActionsVVI<equipActionsVVLen;++equipActionsVVI)
					{
						int equipActionsVV=equipActionsVT[equipActionsVVI];
						stream.writeInt(equipActionsVV);
						
					}
				}
				else
				{
					nullObjError("equipActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("equipActions");
		}
		
		if(this.useConditions!=null)
		{
			int[][] useConditionsT=this.useConditions;
			stream.writeLen(useConditionsT.length);
			for(int useConditionsVI=0,useConditionsVLen=useConditionsT.length;useConditionsVI<useConditionsVLen;++useConditionsVI)
			{
				int[] useConditionsV=useConditionsT[useConditionsVI];
				if(useConditionsV!=null)
				{
					int[] useConditionsVT=useConditionsV;
					stream.writeLen(useConditionsVT.length);
					for(int useConditionsVVI=0,useConditionsVVLen=useConditionsVT.length;useConditionsVVI<useConditionsVVLen;++useConditionsVVI)
					{
						int useConditionsVV=useConditionsVT[useConditionsVVI];
						stream.writeInt(useConditionsVV);
						
					}
				}
				else
				{
					nullObjError("useConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("useConditions");
		}
		
		if(this.useActions!=null)
		{
			int[][] useActionsT=this.useActions;
			stream.writeLen(useActionsT.length);
			for(int useActionsVI=0,useActionsVLen=useActionsT.length;useActionsVI<useActionsVLen;++useActionsVI)
			{
				int[] useActionsV=useActionsT[useActionsVI];
				if(useActionsV!=null)
				{
					int[] useActionsVT=useActionsV;
					stream.writeLen(useActionsVT.length);
					for(int useActionsVVI=0,useActionsVVLen=useActionsVT.length;useActionsVVI<useActionsVVLen;++useActionsVVI)
					{
						int useActionsVV=useActionsVT[useActionsVVI];
						stream.writeInt(useActionsVV);
						
					}
				}
				else
				{
					nullObjError("useActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("useActions");
		}
		
		stream.writeBoolean(this.passEnterBag);
		
		stream.writeBoolean(this.useCostItemNum);
		
		stream.writeInt(this.progressBarID);
		
		stream.writeInt(this.tradeDefaultPrice);
		
		stream.writeInt(this.tradePriceMin);
		
		stream.writeInt(this.tradePriceMax);
		
	}
	
}
