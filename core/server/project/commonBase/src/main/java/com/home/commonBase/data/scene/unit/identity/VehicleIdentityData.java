package com.home.commonBase.data.scene.unit.identity;
import com.home.commonBase.config.game.VehicleConfig;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.unit.identity.FightUnitIdentityData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.pool.DataPool;

/** 载具身份数据(generated by shine) */
public class VehicleIdentityData extends FightUnitIdentityData
{
	/** 驾驶组 */
	public IntList drivers;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.VehicleIdentity;
	
	public VehicleIdentityData()
	{
		_dataID=BaseDataType.VehicleIdentity;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "VehicleIdentityData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int driversLen=stream.readLen();
		if(this.drivers!=null)
		{
			this.drivers.clear();
			this.drivers.ensureCapacity(driversLen);
		}
		else
		{
			this.drivers=new IntList(driversLen);
		}
		
		IntList driversT=this.drivers;
		for(int driversI=driversLen-1;driversI>=0;--driversI)
		{
			int driversV;
			driversV=stream.readInt();
			
			driversT.add(driversV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.drivers!=null)
		{
			stream.writeLen(this.drivers.size());
			if(!this.drivers.isEmpty())
			{
				int[] driversVValues=this.drivers.getValues();
				for(int driversVI=0,driversVLen=this.drivers.length();driversVI<driversVLen;++driversVI)
				{
					int driversV=driversVValues[driversVI];
					stream.writeInt(driversV);
					
				}
			}
		}
		else
		{
			nullObjError("drivers");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int driversLen=stream.readLen();
		if(this.drivers!=null)
		{
			this.drivers.clear();
			this.drivers.ensureCapacity(driversLen);
		}
		else
		{
			this.drivers=new IntList(driversLen);
		}
		
		IntList driversT=this.drivers;
		for(int driversI=driversLen-1;driversI>=0;--driversI)
		{
			int driversV;
			driversV=stream.readInt();
			
			driversT.add(driversV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.drivers!=null)
		{
			stream.writeLen(this.drivers.size());
			if(!this.drivers.isEmpty())
			{
				int[] driversVValues=this.drivers.getValues();
				for(int driversVI=0,driversVLen=this.drivers.length();driversVI<driversVLen;++driversVI)
				{
					int driversV=driversVValues[driversVI];
					stream.writeInt(driversV);
					
				}
			}
		}
		else
		{
			nullObjError("drivers");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof VehicleIdentityData))
			return;
		
		VehicleIdentityData mData=(VehicleIdentityData)data;
		
		this.drivers=mData.drivers;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof VehicleIdentityData))
			return;
		
		VehicleIdentityData mData=(VehicleIdentityData)data;
		
		if(mData.drivers!=null)
		{
			if(this.drivers!=null)
			{
				this.drivers.clear();
				this.drivers.ensureCapacity(mData.drivers.size());
			}
			else
			{
				this.drivers=new IntList(mData.drivers.size());
			}
			
			IntList driversT=this.drivers;
			if(!mData.drivers.isEmpty())
			{
				int[] driversVValues=mData.drivers.getValues();
				for(int driversVI=0,driversVLen=mData.drivers.length();driversVI<driversVLen;++driversVI)
				{
					int driversV=driversVValues[driversVI];
					int driversU;
					driversU=driversV;
					
					driversT.add(driversU);
				}
			}
		}
		else
		{
			this.drivers=null;
			nullObjError("drivers");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		VehicleIdentityData mData=(VehicleIdentityData)data;
		if(mData.drivers!=null)
		{
			if(this.drivers==null)
				return false;
			if(this.drivers.size()!=mData.drivers.size())
				return false;
			IntList driversT=this.drivers;
			IntList driversR=mData.drivers;
			int driversLen=driversT.size();
			for(int driversI=0;driversI<driversLen;++driversI)
			{
				int driversU=driversT.get(driversI);
				int driversV=driversR.get(driversI);
				if(driversU!=driversV)
					return false;
				
			}
		}
		else
		{
			if(this.drivers!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("drivers");
		writer.sb.append(':');
		writer.sb.append("List<int>");
		if(this.drivers!=null)
		{
			IntList driversT=this.drivers;
			int driversLen=driversT.size();
			writer.sb.append('(');
			writer.sb.append(driversLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int driversI=0;driversI<driversLen;++driversI)
			{
				int driversV=driversT.get(driversI);
				writer.writeTabs();
				writer.sb.append(driversI);
				writer.sb.append(':');
				writer.sb.append(driversV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.drivers=new IntList();
	}
	
	@Override
	public int getFightUnitID()
	{
		return VehicleConfig.get(id).fightUnitID;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.drivers=null;
	}
	
}
