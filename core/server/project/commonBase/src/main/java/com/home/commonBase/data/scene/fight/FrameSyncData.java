package com.home.commonBase.data.scene.fight;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.fight.FrameSyncCommandData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 帧同步数据(generated by shine) */
public class FrameSyncData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.FrameSync;
	
	/** 帧序号 */
	public int index;
	
	/** 指令组 */
	public SList<FrameSyncCommandData> commands;
	
	public FrameSyncData()
	{
		_dataID=BaseDataType.FrameSync;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FrameSyncData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		if(stream.readBoolean())
		{
			int commandsLen=stream.readLen();
			if(this.commands!=null)
			{
				this.commands.clear();
				this.commands.ensureCapacity(commandsLen);
			}
			else
			{
				this.commands=new SList<FrameSyncCommandData>(FrameSyncCommandData[]::new,commandsLen);
			}
			
			SList<FrameSyncCommandData> commandsT=this.commands;
			for(int commandsI=commandsLen-1;commandsI>=0;--commandsI)
			{
				FrameSyncCommandData commandsV;
				if(stream.readBoolean())
				{
					BaseData commandsVT=stream.readDataFullNotNull();
					if(commandsVT!=null)
					{
						if(commandsVT instanceof FrameSyncCommandData)
						{
							commandsV=(FrameSyncCommandData)commandsVT;
						}
						else
						{
							commandsV=new FrameSyncCommandData();
							if(!(commandsVT.getClass().isAssignableFrom(FrameSyncCommandData.class)))
							{
								stream.throwTypeReadError(FrameSyncCommandData.class,commandsVT.getClass());
							}
							commandsV.shadowCopy(commandsVT);
						}
					}
					else
					{
						commandsV=null;
					}
				}
				else
				{
					commandsV=null;
				}
				
				commandsT.add(commandsV);
			}
		}
		else
		{
			this.commands=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.index);
		
		if(this.commands!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.commands.size());
			if(!this.commands.isEmpty())
			{
				Object[] commandsVValues=this.commands.getValues();
				for(int commandsVI=0,commandsVLen=this.commands.length();commandsVI<commandsVLen;++commandsVI)
				{
					FrameSyncCommandData commandsV=(FrameSyncCommandData)commandsVValues[commandsVI];
					if(commandsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(commandsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.index=stream.readInt();
		
		if(stream.readBoolean())
		{
			int commandsLen=stream.readLen();
			if(this.commands!=null)
			{
				this.commands.clear();
				this.commands.ensureCapacity(commandsLen);
			}
			else
			{
				this.commands=new SList<FrameSyncCommandData>(FrameSyncCommandData[]::new,commandsLen);
			}
			
			SList<FrameSyncCommandData> commandsT=this.commands;
			for(int commandsI=commandsLen-1;commandsI>=0;--commandsI)
			{
				FrameSyncCommandData commandsV;
				if(stream.readBoolean())
				{
					commandsV=(FrameSyncCommandData)stream.readDataSimpleNotNull();
				}
				else
				{
					commandsV=null;
				}
				
				commandsT.add(commandsV);
			}
		}
		else
		{
			this.commands=null;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.index);
		
		if(this.commands!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.commands.size());
			if(!this.commands.isEmpty())
			{
				Object[] commandsVValues=this.commands.getValues();
				for(int commandsVI=0,commandsVLen=this.commands.length();commandsVI<commandsVLen;++commandsVI)
				{
					FrameSyncCommandData commandsV=(FrameSyncCommandData)commandsVValues[commandsVI];
					if(commandsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(commandsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof FrameSyncData))
			return;
		
		FrameSyncData mData=(FrameSyncData)data;
		
		this.index=mData.index;
		this.commands=mData.commands;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof FrameSyncData))
			return;
		
		FrameSyncData mData=(FrameSyncData)data;
		
		this.index=mData.index;
		
		if(mData.commands!=null)
		{
			if(this.commands!=null)
			{
				this.commands.clear();
				this.commands.ensureCapacity(mData.commands.size());
			}
			else
			{
				this.commands=new SList<FrameSyncCommandData>(FrameSyncCommandData[]::new,mData.commands.size());
			}
			
			SList<FrameSyncCommandData> commandsT=this.commands;
			if(!mData.commands.isEmpty())
			{
				Object[] commandsVValues=mData.commands.getValues();
				for(int commandsVI=0,commandsVLen=mData.commands.length();commandsVI<commandsVLen;++commandsVI)
				{
					FrameSyncCommandData commandsV=(FrameSyncCommandData)commandsVValues[commandsVI];
					FrameSyncCommandData commandsU;
					if(commandsV!=null)
					{
						commandsU=(FrameSyncCommandData)commandsV.clone();
					}
					else
					{
						commandsU=null;
					}
					
					commandsT.add(commandsU);
				}
			}
		}
		else
		{
			this.commands=null;
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		FrameSyncData mData=(FrameSyncData)data;
		if(this.index!=mData.index)
			return false;
		
		if(mData.commands!=null)
		{
			if(this.commands==null)
				return false;
			if(this.commands.size()!=mData.commands.size())
				return false;
			SList<FrameSyncCommandData> commandsT=this.commands;
			SList<FrameSyncCommandData> commandsR=mData.commands;
			int commandsLen=commandsT.size();
			for(int commandsI=0;commandsI<commandsLen;++commandsI)
			{
				FrameSyncCommandData commandsU=commandsT.get(commandsI);
				FrameSyncCommandData commandsV=commandsR.get(commandsI);
				if(commandsV!=null)
				{
					if(commandsU==null)
						return false;
					if(!commandsU.dataEquals(commandsV))
						return false;
				}
				else
				{
					if(commandsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.commands!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("index");
		writer.sb.append(':');
		writer.sb.append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("commands");
		writer.sb.append(':');
		writer.sb.append("List<FrameSyncCommandData>");
		if(this.commands!=null)
		{
			SList<FrameSyncCommandData> commandsT=this.commands;
			int commandsLen=commandsT.size();
			writer.sb.append('(');
			writer.sb.append(commandsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int commandsI=0;commandsI<commandsLen;++commandsI)
			{
				FrameSyncCommandData commandsV=commandsT.get(commandsI);
				writer.writeTabs();
				writer.sb.append(commandsI);
				writer.sb.append(':');
				if(commandsV!=null)
				{
					commandsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("FrameSyncCommandData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.index=0;
		this.commands=null;
	}
	
}
