package com.home.commonBase.part.player.data;
import com.home.commonBase.constlist.generate.PlayerPartDataType;
import com.home.commonBase.data.social.chat.ChatChannelData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.pool.DataPool;

/** 社交数据(generated by shine) */
public class SocialPartData extends BaseData
{
	/** 多频道组 */
	public IntObjectMap<LongObjectMap<ChatChannelData>> multiChannels;
	
	/** 单一频道组 */
	public IntObjectMap<ChatChannelData> singleChannels;
	
	/** 聊天发送序号 */
	public int chatSendIndex;
	
	/** 数据类型ID */
	public static final int dataID=PlayerPartDataType.Social;
	
	public SocialPartData()
	{
		_dataID=PlayerPartDataType.Social;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SocialPartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int singleChannelsLen=stream.readLen();
		if(this.singleChannels!=null)
		{
			this.singleChannels.clear();
			this.singleChannels.ensureCapacity(singleChannelsLen);
		}
		else
		{
			this.singleChannels=new IntObjectMap<ChatChannelData>(ChatChannelData[]::new,singleChannelsLen);
		}
		
		IntObjectMap<ChatChannelData> singleChannelsT=this.singleChannels;
		for(int singleChannelsI=singleChannelsLen-1;singleChannelsI>=0;--singleChannelsI)
		{
			int singleChannelsK;
			ChatChannelData singleChannelsV;
			singleChannelsK=stream.readInt();
			
			BaseData singleChannelsVT=stream.readDataFullNotNull();
			if(singleChannelsVT!=null)
			{
				if(singleChannelsVT instanceof ChatChannelData)
				{
					singleChannelsV=(ChatChannelData)singleChannelsVT;
				}
				else
				{
					singleChannelsV=new ChatChannelData();
					if(!(singleChannelsVT.getClass().isAssignableFrom(ChatChannelData.class)))
					{
						stream.throwTypeReadError(ChatChannelData.class,singleChannelsVT.getClass());
					}
					singleChannelsV.shadowCopy(singleChannelsVT);
				}
			}
			else
			{
				singleChannelsV=null;
			}
			
			singleChannelsT.put(singleChannelsK,singleChannelsV);
		}
		
		int multiChannelsLen=stream.readLen();
		if(this.multiChannels!=null)
		{
			this.multiChannels.clear();
			this.multiChannels.ensureCapacity(multiChannelsLen);
		}
		else
		{
			this.multiChannels=new IntObjectMap<LongObjectMap<ChatChannelData>>(LongObjectMap[]::new,multiChannelsLen);
		}
		
		IntObjectMap<LongObjectMap<ChatChannelData>> multiChannelsT=this.multiChannels;
		for(int multiChannelsI=multiChannelsLen-1;multiChannelsI>=0;--multiChannelsI)
		{
			int multiChannelsK;
			LongObjectMap<ChatChannelData> multiChannelsV;
			multiChannelsK=stream.readInt();
			
			int multiChannelsVLen=stream.readLen();
			multiChannelsV=new LongObjectMap<ChatChannelData>(ChatChannelData[]::new,multiChannelsVLen);
			LongObjectMap<ChatChannelData> multiChannelsVT=multiChannelsV;
			for(int multiChannelsVI=multiChannelsVLen-1;multiChannelsVI>=0;--multiChannelsVI)
			{
				long multiChannelsVK;
				ChatChannelData multiChannelsVV;
				multiChannelsVK=stream.readLong();
				
				BaseData multiChannelsVVT=stream.readDataFullNotNull();
				if(multiChannelsVVT!=null)
				{
					if(multiChannelsVVT instanceof ChatChannelData)
					{
						multiChannelsVV=(ChatChannelData)multiChannelsVVT;
					}
					else
					{
						multiChannelsVV=new ChatChannelData();
						if(!(multiChannelsVVT.getClass().isAssignableFrom(ChatChannelData.class)))
						{
							stream.throwTypeReadError(ChatChannelData.class,multiChannelsVVT.getClass());
						}
						multiChannelsVV.shadowCopy(multiChannelsVVT);
					}
				}
				else
				{
					multiChannelsVV=null;
				}
				
				multiChannelsVT.put(multiChannelsVK,multiChannelsVV);
			}
			
			multiChannelsT.put(multiChannelsK,multiChannelsV);
		}
		
		this.chatSendIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.singleChannels!=null)
		{
			stream.writeLen(this.singleChannels.size());
			if(!this.singleChannels.isEmpty())
			{
				int singleChannelsKFreeValue=this.singleChannels.getFreeValue();
				int[] singleChannelsKKeys=this.singleChannels.getKeys();
				Object[] singleChannelsVValues=this.singleChannels.getValues();
				for(int singleChannelsKI=singleChannelsKKeys.length-1;singleChannelsKI>=0;--singleChannelsKI)
				{
					int singleChannelsK=singleChannelsKKeys[singleChannelsKI];
					if(singleChannelsK!=singleChannelsKFreeValue)
					{
						ChatChannelData singleChannelsV=(ChatChannelData)singleChannelsVValues[singleChannelsKI];
						stream.writeInt(singleChannelsK);
						
						if(singleChannelsV!=null)
						{
							stream.writeDataFullNotNull(singleChannelsV);
						}
						else
						{
							nullObjError("singleChannelsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("singleChannels");
		}
		
		if(this.multiChannels!=null)
		{
			stream.writeLen(this.multiChannels.size());
			if(!this.multiChannels.isEmpty())
			{
				int multiChannelsKFreeValue=this.multiChannels.getFreeValue();
				int[] multiChannelsKKeys=this.multiChannels.getKeys();
				Object[] multiChannelsVValues=this.multiChannels.getValues();
				for(int multiChannelsKI=multiChannelsKKeys.length-1;multiChannelsKI>=0;--multiChannelsKI)
				{
					int multiChannelsK=multiChannelsKKeys[multiChannelsKI];
					if(multiChannelsK!=multiChannelsKFreeValue)
					{
						LongObjectMap<ChatChannelData> multiChannelsV=(LongObjectMap<ChatChannelData>)multiChannelsVValues[multiChannelsKI];
						stream.writeInt(multiChannelsK);
						
						if(multiChannelsV!=null)
						{
							stream.writeLen(multiChannelsV.size());
							if(!multiChannelsV.isEmpty())
							{
								long multiChannelsVKFreeValue=multiChannelsV.getFreeValue();
								long[] multiChannelsVKKeys=multiChannelsV.getKeys();
								Object[] multiChannelsVVValues=multiChannelsV.getValues();
								for(int multiChannelsVKI=multiChannelsVKKeys.length-1;multiChannelsVKI>=0;--multiChannelsVKI)
								{
									long multiChannelsVK=multiChannelsVKKeys[multiChannelsVKI];
									if(multiChannelsVK!=multiChannelsVKFreeValue)
									{
										ChatChannelData multiChannelsVV=(ChatChannelData)multiChannelsVVValues[multiChannelsVKI];
										stream.writeLong(multiChannelsVK);
										
										if(multiChannelsVV!=null)
										{
											stream.writeDataFullNotNull(multiChannelsVV);
										}
										else
										{
											nullObjError("multiChannelsVV");
										}
										
									}
								}
							}
						}
						else
						{
							nullObjError("multiChannelsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("multiChannels");
		}
		
		stream.writeInt(this.chatSendIndex);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		int singleChannelsLen=stream.readLen();
		if(this.singleChannels!=null)
		{
			this.singleChannels.clear();
			this.singleChannels.ensureCapacity(singleChannelsLen);
		}
		else
		{
			this.singleChannels=new IntObjectMap<ChatChannelData>(ChatChannelData[]::new,singleChannelsLen);
		}
		
		IntObjectMap<ChatChannelData> singleChannelsT=this.singleChannels;
		for(int singleChannelsI=singleChannelsLen-1;singleChannelsI>=0;--singleChannelsI)
		{
			int singleChannelsK;
			ChatChannelData singleChannelsV;
			singleChannelsK=stream.readInt();
			
			singleChannelsV=(ChatChannelData)stream.readDataSimpleNotNull();
			
			singleChannelsT.put(singleChannelsK,singleChannelsV);
		}
		
		int multiChannelsLen=stream.readLen();
		if(this.multiChannels!=null)
		{
			this.multiChannels.clear();
			this.multiChannels.ensureCapacity(multiChannelsLen);
		}
		else
		{
			this.multiChannels=new IntObjectMap<LongObjectMap<ChatChannelData>>(LongObjectMap[]::new,multiChannelsLen);
		}
		
		IntObjectMap<LongObjectMap<ChatChannelData>> multiChannelsT=this.multiChannels;
		for(int multiChannelsI=multiChannelsLen-1;multiChannelsI>=0;--multiChannelsI)
		{
			int multiChannelsK;
			LongObjectMap<ChatChannelData> multiChannelsV;
			multiChannelsK=stream.readInt();
			
			int multiChannelsVLen=stream.readLen();
			multiChannelsV=new LongObjectMap<ChatChannelData>(ChatChannelData[]::new,multiChannelsVLen);
			LongObjectMap<ChatChannelData> multiChannelsVT=multiChannelsV;
			for(int multiChannelsVI=multiChannelsVLen-1;multiChannelsVI>=0;--multiChannelsVI)
			{
				long multiChannelsVK;
				ChatChannelData multiChannelsVV;
				multiChannelsVK=stream.readLong();
				
				multiChannelsVV=(ChatChannelData)stream.readDataSimpleNotNull();
				
				multiChannelsVT.put(multiChannelsVK,multiChannelsVV);
			}
			
			multiChannelsT.put(multiChannelsK,multiChannelsV);
		}
		
		this.chatSendIndex=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.singleChannels!=null)
		{
			stream.writeLen(this.singleChannels.size());
			if(!this.singleChannels.isEmpty())
			{
				int singleChannelsKFreeValue=this.singleChannels.getFreeValue();
				int[] singleChannelsKKeys=this.singleChannels.getKeys();
				Object[] singleChannelsVValues=this.singleChannels.getValues();
				for(int singleChannelsKI=singleChannelsKKeys.length-1;singleChannelsKI>=0;--singleChannelsKI)
				{
					int singleChannelsK=singleChannelsKKeys[singleChannelsKI];
					if(singleChannelsK!=singleChannelsKFreeValue)
					{
						ChatChannelData singleChannelsV=(ChatChannelData)singleChannelsVValues[singleChannelsKI];
						stream.writeInt(singleChannelsK);
						
						if(singleChannelsV!=null)
						{
							stream.writeDataSimpleNotNull(singleChannelsV);
						}
						else
						{
							nullObjError("singleChannelsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("singleChannels");
		}
		
		if(this.multiChannels!=null)
		{
			stream.writeLen(this.multiChannels.size());
			if(!this.multiChannels.isEmpty())
			{
				int multiChannelsKFreeValue=this.multiChannels.getFreeValue();
				int[] multiChannelsKKeys=this.multiChannels.getKeys();
				Object[] multiChannelsVValues=this.multiChannels.getValues();
				for(int multiChannelsKI=multiChannelsKKeys.length-1;multiChannelsKI>=0;--multiChannelsKI)
				{
					int multiChannelsK=multiChannelsKKeys[multiChannelsKI];
					if(multiChannelsK!=multiChannelsKFreeValue)
					{
						LongObjectMap<ChatChannelData> multiChannelsV=(LongObjectMap<ChatChannelData>)multiChannelsVValues[multiChannelsKI];
						stream.writeInt(multiChannelsK);
						
						if(multiChannelsV!=null)
						{
							stream.writeLen(multiChannelsV.size());
							if(!multiChannelsV.isEmpty())
							{
								long multiChannelsVKFreeValue=multiChannelsV.getFreeValue();
								long[] multiChannelsVKKeys=multiChannelsV.getKeys();
								Object[] multiChannelsVVValues=multiChannelsV.getValues();
								for(int multiChannelsVKI=multiChannelsVKKeys.length-1;multiChannelsVKI>=0;--multiChannelsVKI)
								{
									long multiChannelsVK=multiChannelsVKKeys[multiChannelsVKI];
									if(multiChannelsVK!=multiChannelsVKFreeValue)
									{
										ChatChannelData multiChannelsVV=(ChatChannelData)multiChannelsVVValues[multiChannelsVKI];
										stream.writeLong(multiChannelsVK);
										
										if(multiChannelsVV!=null)
										{
											stream.writeDataSimpleNotNull(multiChannelsVV);
										}
										else
										{
											nullObjError("multiChannelsVV");
										}
										
									}
								}
							}
						}
						else
						{
							nullObjError("multiChannelsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("multiChannels");
		}
		
		stream.writeInt(this.chatSendIndex);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof SocialPartData))
			return;
		
		SocialPartData mData=(SocialPartData)data;
		
		this.singleChannels=mData.singleChannels;
		this.multiChannels=mData.multiChannels;
		this.chatSendIndex=mData.chatSendIndex;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof SocialPartData))
			return;
		
		SocialPartData mData=(SocialPartData)data;
		
		if(mData.singleChannels!=null)
		{
			if(this.singleChannels!=null)
			{
				this.singleChannels.clear();
				this.singleChannels.ensureCapacity(mData.singleChannels.size());
			}
			else
			{
				this.singleChannels=new IntObjectMap<ChatChannelData>(ChatChannelData[]::new,mData.singleChannels.size());
			}
			
			IntObjectMap<ChatChannelData> singleChannelsT=this.singleChannels;
			if(!mData.singleChannels.isEmpty())
			{
				int singleChannelsKFreeValue=mData.singleChannels.getFreeValue();
				int[] singleChannelsKKeys=mData.singleChannels.getKeys();
				Object[] singleChannelsVValues=mData.singleChannels.getValues();
				for(int singleChannelsKI=singleChannelsKKeys.length-1;singleChannelsKI>=0;--singleChannelsKI)
				{
					int singleChannelsK=singleChannelsKKeys[singleChannelsKI];
					if(singleChannelsK!=singleChannelsKFreeValue)
					{
						ChatChannelData singleChannelsV=(ChatChannelData)singleChannelsVValues[singleChannelsKI];
						int singleChannelsW;
						ChatChannelData singleChannelsU;
						singleChannelsW=singleChannelsK;
						
						if(singleChannelsV!=null)
						{
							singleChannelsU=(ChatChannelData)singleChannelsV.clone();
						}
						else
						{
							singleChannelsU=null;
							nullObjError("singleChannelsU");
						}
						
						singleChannelsT.put(singleChannelsW,singleChannelsU);
					}
				}
			}
		}
		else
		{
			this.singleChannels=null;
			nullObjError("singleChannels");
		}
		
		if(mData.multiChannels!=null)
		{
			if(this.multiChannels!=null)
			{
				this.multiChannels.clear();
				this.multiChannels.ensureCapacity(mData.multiChannels.size());
			}
			else
			{
				this.multiChannels=new IntObjectMap<LongObjectMap<ChatChannelData>>(LongObjectMap[]::new,mData.multiChannels.size());
			}
			
			IntObjectMap<LongObjectMap<ChatChannelData>> multiChannelsT=this.multiChannels;
			if(!mData.multiChannels.isEmpty())
			{
				int multiChannelsKFreeValue=mData.multiChannels.getFreeValue();
				int[] multiChannelsKKeys=mData.multiChannels.getKeys();
				Object[] multiChannelsVValues=mData.multiChannels.getValues();
				for(int multiChannelsKI=multiChannelsKKeys.length-1;multiChannelsKI>=0;--multiChannelsKI)
				{
					int multiChannelsK=multiChannelsKKeys[multiChannelsKI];
					if(multiChannelsK!=multiChannelsKFreeValue)
					{
						LongObjectMap<ChatChannelData> multiChannelsV=(LongObjectMap<ChatChannelData>)multiChannelsVValues[multiChannelsKI];
						int multiChannelsW;
						LongObjectMap<ChatChannelData> multiChannelsU;
						multiChannelsW=multiChannelsK;
						
						if(multiChannelsV!=null)
						{
							multiChannelsU=new LongObjectMap<ChatChannelData>(ChatChannelData[]::new,multiChannelsV.size());
							LongObjectMap<ChatChannelData> multiChannelsUT=multiChannelsU;
							if(!multiChannelsV.isEmpty())
							{
								long multiChannelsUKFreeValue=multiChannelsV.getFreeValue();
								long[] multiChannelsUKKeys=multiChannelsV.getKeys();
								Object[] multiChannelsUVValues=multiChannelsV.getValues();
								for(int multiChannelsUKI=multiChannelsUKKeys.length-1;multiChannelsUKI>=0;--multiChannelsUKI)
								{
									long multiChannelsUK=multiChannelsUKKeys[multiChannelsUKI];
									if(multiChannelsUK!=multiChannelsUKFreeValue)
									{
										ChatChannelData multiChannelsUV=(ChatChannelData)multiChannelsUVValues[multiChannelsUKI];
										long multiChannelsUW;
										ChatChannelData multiChannelsUU;
										multiChannelsUW=multiChannelsUK;
										
										if(multiChannelsUV!=null)
										{
											multiChannelsUU=(ChatChannelData)multiChannelsUV.clone();
										}
										else
										{
											multiChannelsUU=null;
											nullObjError("multiChannelsUU");
										}
										
										multiChannelsUT.put(multiChannelsUW,multiChannelsUU);
									}
								}
							}
						}
						else
						{
							multiChannelsU=null;
							nullObjError("multiChannelsU");
						}
						
						multiChannelsT.put(multiChannelsW,multiChannelsU);
					}
				}
			}
		}
		else
		{
			this.multiChannels=null;
			nullObjError("multiChannels");
		}
		
		this.chatSendIndex=mData.chatSendIndex;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		SocialPartData mData=(SocialPartData)data;
		if(mData.singleChannels!=null)
		{
			if(this.singleChannels==null)
				return false;
			if(this.singleChannels.size()!=mData.singleChannels.size())
				return false;
			IntObjectMap<ChatChannelData> singleChannelsR=mData.singleChannels;
			if(!this.singleChannels.isEmpty())
			{
				int singleChannelsKFreeValue=this.singleChannels.getFreeValue();
				int[] singleChannelsKKeys=this.singleChannels.getKeys();
				Object[] singleChannelsVValues=this.singleChannels.getValues();
				for(int singleChannelsKI=singleChannelsKKeys.length-1;singleChannelsKI>=0;--singleChannelsKI)
				{
					int singleChannelsK=singleChannelsKKeys[singleChannelsKI];
					if(singleChannelsK!=singleChannelsKFreeValue)
					{
						ChatChannelData singleChannelsV=(ChatChannelData)singleChannelsVValues[singleChannelsKI];
						ChatChannelData singleChannelsU=singleChannelsR.get(singleChannelsK);
						if(singleChannelsU!=null)
						{
							if(singleChannelsV==null)
								return false;
							if(!singleChannelsV.dataEquals(singleChannelsU))
								return false;
						}
						else
						{
							if(singleChannelsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.singleChannels!=null)
				return false;
		}
		
		if(mData.multiChannels!=null)
		{
			if(this.multiChannels==null)
				return false;
			if(this.multiChannels.size()!=mData.multiChannels.size())
				return false;
			IntObjectMap<LongObjectMap<ChatChannelData>> multiChannelsR=mData.multiChannels;
			if(!this.multiChannels.isEmpty())
			{
				int multiChannelsKFreeValue=this.multiChannels.getFreeValue();
				int[] multiChannelsKKeys=this.multiChannels.getKeys();
				Object[] multiChannelsVValues=this.multiChannels.getValues();
				for(int multiChannelsKI=multiChannelsKKeys.length-1;multiChannelsKI>=0;--multiChannelsKI)
				{
					int multiChannelsK=multiChannelsKKeys[multiChannelsKI];
					if(multiChannelsK!=multiChannelsKFreeValue)
					{
						LongObjectMap<ChatChannelData> multiChannelsV=(LongObjectMap<ChatChannelData>)multiChannelsVValues[multiChannelsKI];
						LongObjectMap<ChatChannelData> multiChannelsU=multiChannelsR.get(multiChannelsK);
						if(multiChannelsU!=null)
						{
							if(multiChannelsV==null)
								return false;
							if(multiChannelsV.size()!=multiChannelsU.size())
								return false;
							LongObjectMap<ChatChannelData> multiChannelsVR=multiChannelsU;
							if(!multiChannelsV.isEmpty())
							{
								long multiChannelsVKFreeValue=multiChannelsV.getFreeValue();
								long[] multiChannelsVKKeys=multiChannelsV.getKeys();
								Object[] multiChannelsVVValues=multiChannelsV.getValues();
								for(int multiChannelsVKI=multiChannelsVKKeys.length-1;multiChannelsVKI>=0;--multiChannelsVKI)
								{
									long multiChannelsVK=multiChannelsVKKeys[multiChannelsVKI];
									if(multiChannelsVK!=multiChannelsVKFreeValue)
									{
										ChatChannelData multiChannelsVV=(ChatChannelData)multiChannelsVVValues[multiChannelsVKI];
										ChatChannelData multiChannelsVU=multiChannelsVR.get(multiChannelsVK);
										if(multiChannelsVU!=null)
										{
											if(multiChannelsVV==null)
												return false;
											if(!multiChannelsVV.dataEquals(multiChannelsVU))
												return false;
										}
										else
										{
											if(multiChannelsVV!=null)
												return false;
										}
										
									}
								}
							}
						}
						else
						{
							if(multiChannelsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.multiChannels!=null)
				return false;
		}
		
		if(this.chatSendIndex!=mData.chatSendIndex)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("singleChannels");
		writer.sb.append(':');
		writer.sb.append("Map<int,ChatChannelData>");
		if(this.singleChannels!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.singleChannels.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.singleChannels.isEmpty())
			{
				int singleChannelsKFreeValue=this.singleChannels.getFreeValue();
				int[] singleChannelsKKeys=this.singleChannels.getKeys();
				Object[] singleChannelsVValues=this.singleChannels.getValues();
				for(int singleChannelsKI=singleChannelsKKeys.length-1;singleChannelsKI>=0;--singleChannelsKI)
				{
					int singleChannelsK=singleChannelsKKeys[singleChannelsKI];
					if(singleChannelsK!=singleChannelsKFreeValue)
					{
						ChatChannelData singleChannelsV=(ChatChannelData)singleChannelsVValues[singleChannelsKI];
						writer.writeTabs();
						writer.sb.append(singleChannelsK);
						
						writer.sb.append(':');
						if(singleChannelsV!=null)
						{
							singleChannelsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ChatChannelData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("multiChannels");
		writer.sb.append(':');
		writer.sb.append("Map<int,LongObjectMap<ChatChannelData>>");
		if(this.multiChannels!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.multiChannels.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.multiChannels.isEmpty())
			{
				int multiChannelsKFreeValue=this.multiChannels.getFreeValue();
				int[] multiChannelsKKeys=this.multiChannels.getKeys();
				Object[] multiChannelsVValues=this.multiChannels.getValues();
				for(int multiChannelsKI=multiChannelsKKeys.length-1;multiChannelsKI>=0;--multiChannelsKI)
				{
					int multiChannelsK=multiChannelsKKeys[multiChannelsKI];
					if(multiChannelsK!=multiChannelsKFreeValue)
					{
						LongObjectMap<ChatChannelData> multiChannelsV=(LongObjectMap<ChatChannelData>)multiChannelsVValues[multiChannelsKI];
						writer.writeTabs();
						writer.sb.append(multiChannelsK);
						
						writer.sb.append(':');
						writer.sb.append("Map<long,ChatChannelData>");
						if(multiChannelsV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(multiChannelsV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!multiChannelsV.isEmpty())
							{
								long multiChannelsVKFreeValue=multiChannelsV.getFreeValue();
								long[] multiChannelsVKKeys=multiChannelsV.getKeys();
								Object[] multiChannelsVVValues=multiChannelsV.getValues();
								for(int multiChannelsVKI=multiChannelsVKKeys.length-1;multiChannelsVKI>=0;--multiChannelsVKI)
								{
									long multiChannelsVK=multiChannelsVKKeys[multiChannelsVKI];
									if(multiChannelsVK!=multiChannelsVKFreeValue)
									{
										ChatChannelData multiChannelsVV=(ChatChannelData)multiChannelsVVValues[multiChannelsVKI];
										writer.writeTabs();
										writer.sb.append(multiChannelsVK);
										
										writer.sb.append(':');
										if(multiChannelsVV!=null)
										{
											multiChannelsVV.writeDataString(writer);
										}
										else
										{
											writer.sb.append("ChatChannelData=null");
										}
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("chatSendIndex");
		writer.sb.append(':');
		writer.sb.append(this.chatSendIndex);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.singleChannels=new IntObjectMap<ChatChannelData>(ChatChannelData[]::new);
		this.multiChannels=new IntObjectMap<LongObjectMap<ChatChannelData>>(LongObjectMap[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.singleChannels=null;
		this.multiChannels=null;
		this.chatSendIndex=0;
	}
	
}
