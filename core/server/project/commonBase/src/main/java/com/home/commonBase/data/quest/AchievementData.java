package com.home.commonBase.data.quest;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.quest.TaskData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 成就数据(generated by shine) */
public class AchievementData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Achievement;
	
	/** 成就ID */
	public int id;
	
	/** 任务目标数据 */
	public TaskData task;
	
	public AchievementData()
	{
		_dataID=BaseDataType.Achievement;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AchievementData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		BaseData taskT=stream.readDataFullNotNull();
		if(taskT!=null)
		{
			if(taskT instanceof TaskData)
			{
				this.task=(TaskData)taskT;
			}
			else
			{
				this.task=new TaskData();
				if(!(taskT.getClass().isAssignableFrom(TaskData.class)))
				{
					stream.throwTypeReadError(TaskData.class,taskT.getClass());
				}
				this.task.shadowCopy(taskT);
			}
		}
		else
		{
			this.task=null;
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		if(this.task!=null)
		{
			stream.writeDataFullNotNull(this.task);
		}
		else
		{
			nullObjError("task");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.task=(TaskData)stream.readDataSimpleNotNull();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		if(this.task!=null)
		{
			stream.writeDataSimpleNotNull(this.task);
		}
		else
		{
			nullObjError("task");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof AchievementData))
			return;
		
		AchievementData mData=(AchievementData)data;
		
		this.id=mData.id;
		this.task=mData.task;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof AchievementData))
			return;
		
		AchievementData mData=(AchievementData)data;
		
		this.id=mData.id;
		
		if(mData.task!=null)
		{
			this.task=(TaskData)mData.task.clone();
		}
		else
		{
			this.task=null;
			nullObjError("task");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		AchievementData mData=(AchievementData)data;
		if(this.id!=mData.id)
			return false;
		
		if(mData.task!=null)
		{
			if(this.task==null)
				return false;
			if(!this.task.dataEquals(mData.task))
				return false;
		}
		else
		{
			if(this.task!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("task");
		writer.sb.append(':');
		if(this.task!=null)
		{
			this.task.writeDataString(writer);
		}
		else
		{
			writer.sb.append("TaskData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.task=new TaskData();
		this.task.initDefault();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.id=0;
		this.task=null;
	}
	
	@Override
	public void clear()
	{
		task=null;
	}
	
}
