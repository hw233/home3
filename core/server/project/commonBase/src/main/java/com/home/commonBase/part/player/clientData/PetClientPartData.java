package com.home.commonBase.part.player.clientData;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.constlist.generate.PlayerPartClientDataType;
import com.home.commonBase.data.role.PetUseData;
import com.home.commonBase.part.player.data.PetPartData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 宠物(generated by shine) */
public class PetClientPartData extends BaseClientPartData
{
	/** 宠物字典 */
	public IntObjectMap<PetUseData> petDic;
	
	/** 数据类型ID */
	public static final int dataID=PlayerPartClientDataType.Pet;
	
	public PetClientPartData()
	{
		_dataID=PlayerPartClientDataType.Pet;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PetClientPartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int petDicLen=stream.readLen();
		if(this.petDic!=null)
		{
			this.petDic.clear();
			this.petDic.ensureCapacity(petDicLen);
		}
		else
		{
			this.petDic=new IntObjectMap<PetUseData>(PetUseData[]::new,petDicLen);
		}
		
		IntObjectMap<PetUseData> petDicT=this.petDic;
		for(int petDicI=petDicLen-1;petDicI>=0;--petDicI)
		{
			PetUseData petDicV;
			BaseData petDicVT=stream.readDataFullNotNull();
			if(petDicVT!=null)
			{
				if(petDicVT instanceof PetUseData)
				{
					petDicV=(PetUseData)petDicVT;
				}
				else
				{
					petDicV=new PetUseData();
					if(!(petDicVT.getClass().isAssignableFrom(PetUseData.class)))
					{
						stream.throwTypeReadError(PetUseData.class,petDicVT.getClass());
					}
					petDicV.shadowCopy(petDicVT);
				}
			}
			else
			{
				petDicV=null;
			}
			
			petDicT.put(petDicV.mIndex,petDicV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.petDic!=null)
		{
			stream.writeLen(this.petDic.size());
			if(!this.petDic.isEmpty())
			{
				Object[] petDicVValues=this.petDic.getValues();
				for(int petDicVI=petDicVValues.length-1;petDicVI>=0;--petDicVI)
				{
					if(petDicVValues[petDicVI]!=null)
					{
						PetUseData petDicV=(PetUseData)petDicVValues[petDicVI];
						if(petDicV!=null)
						{
							stream.writeDataFullNotNull(petDicV);
						}
						else
						{
							nullObjError("petDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("petDic");
		}
		
		stream.endWriteObj();
	}
	
	/** 从服务器数据上复制数据(潜拷,因InitClient会copy) */
	@Override
	protected void toCopyFromServer(BaseData data)
	{
		super.toCopyFromServer(data);
		if(!(data instanceof PetPartData))
			return;
		
		PetPartData mData=(PetPartData)data;
		
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int petDicLen=stream.readLen();
		if(this.petDic!=null)
		{
			this.petDic.clear();
			this.petDic.ensureCapacity(petDicLen);
		}
		else
		{
			this.petDic=new IntObjectMap<PetUseData>(PetUseData[]::new,petDicLen);
		}
		
		IntObjectMap<PetUseData> petDicT=this.petDic;
		for(int petDicI=petDicLen-1;petDicI>=0;--petDicI)
		{
			PetUseData petDicV;
			petDicV=(PetUseData)stream.readDataSimpleNotNull();
			
			petDicT.put(petDicV.mIndex,petDicV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.petDic!=null)
		{
			stream.writeLen(this.petDic.size());
			if(!this.petDic.isEmpty())
			{
				Object[] petDicVValues=this.petDic.getValues();
				for(int petDicVI=petDicVValues.length-1;petDicVI>=0;--petDicVI)
				{
					if(petDicVValues[petDicVI]!=null)
					{
						PetUseData petDicV=(PetUseData)petDicVValues[petDicVI];
						if(petDicV!=null)
						{
							stream.writeDataSimpleNotNull(petDicV);
						}
						else
						{
							nullObjError("petDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("petDic");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof PetClientPartData))
			return;
		
		PetClientPartData mData=(PetClientPartData)data;
		
		this.petDic=mData.petDic;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof PetClientPartData))
			return;
		
		PetClientPartData mData=(PetClientPartData)data;
		
		if(mData.petDic!=null)
		{
			if(this.petDic!=null)
			{
				this.petDic.clear();
				this.petDic.ensureCapacity(mData.petDic.size());
			}
			else
			{
				this.petDic=new IntObjectMap<PetUseData>(PetUseData[]::new,mData.petDic.size());
			}
			
			IntObjectMap<PetUseData> petDicT=this.petDic;
			if(!mData.petDic.isEmpty())
			{
				Object[] petDicVValues=mData.petDic.getValues();
				for(int petDicVI=petDicVValues.length-1;petDicVI>=0;--petDicVI)
				{
					if(petDicVValues[petDicVI]!=null)
					{
						PetUseData petDicV=(PetUseData)petDicVValues[petDicVI];
						PetUseData petDicU;
						if(petDicV!=null)
						{
							petDicU=(PetUseData)petDicV.clone();
						}
						else
						{
							petDicU=null;
							nullObjError("petDicU");
						}
						
						petDicT.put(petDicU.mIndex,petDicU);
					}
				}
			}
		}
		else
		{
			this.petDic=null;
			nullObjError("petDic");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		PetClientPartData mData=(PetClientPartData)data;
		if(mData.petDic!=null)
		{
			if(this.petDic==null)
				return false;
			if(this.petDic.size()!=mData.petDic.size())
				return false;
			IntObjectMap<PetUseData> petDicR=mData.petDic;
			if(!this.petDic.isEmpty())
			{
				int petDicKFreeValue=this.petDic.getFreeValue();
				int[] petDicKKeys=this.petDic.getKeys();
				Object[] petDicVValues=this.petDic.getValues();
				for(int petDicKI=petDicKKeys.length-1;petDicKI>=0;--petDicKI)
				{
					int petDicK=petDicKKeys[petDicKI];
					if(petDicK!=petDicKFreeValue)
					{
						PetUseData petDicV=(PetUseData)petDicVValues[petDicKI];
						PetUseData petDicU=petDicR.get(petDicK);
						if(petDicU!=null)
						{
							if(petDicV==null)
								return false;
							if(!petDicV.dataEquals(petDicU))
								return false;
						}
						else
						{
							if(petDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.petDic!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("petDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,PetUseData>");
		if(this.petDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.petDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.petDic.isEmpty())
			{
				int petDicKFreeValue=this.petDic.getFreeValue();
				int[] petDicKKeys=this.petDic.getKeys();
				Object[] petDicVValues=this.petDic.getValues();
				for(int petDicKI=petDicKKeys.length-1;petDicKI>=0;--petDicKI)
				{
					int petDicK=petDicKKeys[petDicKI];
					if(petDicK!=petDicKFreeValue)
					{
						PetUseData petDicV=(PetUseData)petDicVValues[petDicKI];
						writer.writeTabs();
						writer.sb.append(petDicK);
						
						writer.sb.append(':');
						if(petDicV!=null)
						{
							petDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("PetUseData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.petDic=new IntObjectMap<PetUseData>(PetUseData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.petDic=null;
	}
	
}
