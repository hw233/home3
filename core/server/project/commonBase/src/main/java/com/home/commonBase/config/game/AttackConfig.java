package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.config.game.enumT.SkillInfluenceTypeConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 技能攻击表(generated by shine) */
public class AttackConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<AttackConfig> _dic;
	
	/** 攻击id */
	public int id;
	
	/** 是否为增益 */
	public boolean isGain;
	
	/** 是否跳过伤害阶段 */
	public boolean passDamage;
	
	/** 影响类型 */
	public int[] influenceType;
	
	/** 目标影响类型转 */
	public boolean[] influenceTypeT;
	
	/** 是否可暴击 */
	public boolean canCrit;
	
	/** 是否可闪避 */
	public boolean canDodge;
	
	/** 击杀方式 */
	public int killType;
	
	/** 所在攻击组 */
	public int[] groups;
	
	/** 是否可反伤 */
	public boolean canReDamage;
	
	/** 是否击中浮空 */
	public boolean canAttackBlow;
	
	/** 是否击中倒地 */
	public boolean canAttackDown;
	
	/** 是否可攻击倒地目标 */
	public boolean canAttackLie;
	
	/** 获取 */
	public static AttackConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<AttackConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<AttackConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int influenceTypeLen=stream.readLen();
		if(this.influenceType==null || this.influenceType.length!=influenceTypeLen)
		{
			this.influenceType=new int[influenceTypeLen];
		}
		int[] influenceTypeT=this.influenceType;
		for(int influenceTypeI=0;influenceTypeI<influenceTypeLen;++influenceTypeI)
		{
			int influenceTypeV;
			influenceTypeV=stream.readInt();
			
			influenceTypeT[influenceTypeI]=influenceTypeV;
		}
		
		this.isGain=stream.readBoolean();
		
		this.passDamage=stream.readBoolean();
		
		this.canCrit=stream.readBoolean();
		
		this.canDodge=stream.readBoolean();
		
		this.canReDamage=stream.readBoolean();
		
		int groupsLen=stream.readLen();
		if(this.groups==null || this.groups.length!=groupsLen)
		{
			this.groups=new int[groupsLen];
		}
		int[] groupsT=this.groups;
		for(int groupsI=0;groupsI<groupsLen;++groupsI)
		{
			int groupsV;
			groupsV=stream.readInt();
			
			groupsT[groupsI]=groupsV;
		}
		
		this.killType=stream.readInt();
		
		this.canAttackBlow=stream.readBoolean();
		
		this.canAttackDown=stream.readBoolean();
		
		this.canAttackLie=stream.readBoolean();
		
	}
	
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		influenceTypeT=SkillInfluenceTypeConfig.getInfluenceSet(influenceType);
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 是否包含某组 */
	public boolean hasGroup(int groupID)
	{
		int[] groups;
		
		for(int i=(groups=this.groups).length-1;i>=0;--i)
		{
			if(groups[i]==groupID)
				return true;
		}
		
		return false;
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.influenceType!=null)
		{
			int[] influenceTypeT=this.influenceType;
			stream.writeLen(influenceTypeT.length);
			for(int influenceTypeVI=0,influenceTypeVLen=influenceTypeT.length;influenceTypeVI<influenceTypeVLen;++influenceTypeVI)
			{
				int influenceTypeV=influenceTypeT[influenceTypeVI];
				stream.writeInt(influenceTypeV);
				
			}
		}
		else
		{
			nullObjError("influenceType");
		}
		
		stream.writeBoolean(this.isGain);
		
		stream.writeBoolean(this.passDamage);
		
		stream.writeBoolean(this.canCrit);
		
		stream.writeBoolean(this.canDodge);
		
		stream.writeBoolean(this.canReDamage);
		
		if(this.groups!=null)
		{
			int[] groupsT=this.groups;
			stream.writeLen(groupsT.length);
			for(int groupsVI=0,groupsVLen=groupsT.length;groupsVI<groupsVLen;++groupsVI)
			{
				int groupsV=groupsT[groupsVI];
				stream.writeInt(groupsV);
				
			}
		}
		else
		{
			nullObjError("groups");
		}
		
		stream.writeInt(this.killType);
		
		stream.writeBoolean(this.canAttackBlow);
		
		stream.writeBoolean(this.canAttackDown);
		
		stream.writeBoolean(this.canAttackLie);
		
	}
	
}
