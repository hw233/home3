package com.home.commonBase.data.scene.scene;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 场景位置数据(generated by shine) */
public class SceneLocationData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.SceneLocation;
	
	/** 场景ID(必选参,剩下的都是可选参) */
	public int sceneID;
	
	/** 线ID */
	public int lineID=-1;
	
	/** 所在游戏服ID */
	public int gameID=-1;
	
	/** 执行器号 */
	public int executorIndex=-1;
	
	/** 实例ID */
	public int instanceID=-1;
	
	public SceneLocationData()
	{
		_dataID=BaseDataType.SceneLocation;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SceneLocationData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.sceneID=stream.readInt();
		
		this.lineID=stream.readInt();
		
		this.gameID=stream.readInt();
		
		this.executorIndex=stream.readInt();
		
		this.instanceID=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.sceneID);
		
		stream.writeInt(this.lineID);
		
		stream.writeInt(this.gameID);
		
		stream.writeInt(this.executorIndex);
		
		stream.writeInt(this.instanceID);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.sceneID=stream.readInt();
		
		this.lineID=stream.readInt();
		
		this.gameID=stream.readInt();
		
		this.executorIndex=stream.readInt();
		
		this.instanceID=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.sceneID);
		
		stream.writeInt(this.lineID);
		
		stream.writeInt(this.gameID);
		
		stream.writeInt(this.executorIndex);
		
		stream.writeInt(this.instanceID);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof SceneLocationData))
			return;
		
		SceneLocationData mData=(SceneLocationData)data;
		
		this.sceneID=mData.sceneID;
		this.lineID=mData.lineID;
		this.gameID=mData.gameID;
		this.executorIndex=mData.executorIndex;
		this.instanceID=mData.instanceID;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof SceneLocationData))
			return;
		
		SceneLocationData mData=(SceneLocationData)data;
		
		this.sceneID=mData.sceneID;
		
		this.lineID=mData.lineID;
		
		this.gameID=mData.gameID;
		
		this.executorIndex=mData.executorIndex;
		
		this.instanceID=mData.instanceID;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		SceneLocationData mData=(SceneLocationData)data;
		if(this.sceneID!=mData.sceneID)
			return false;
		
		if(this.lineID!=mData.lineID)
			return false;
		
		if(this.gameID!=mData.gameID)
			return false;
		
		if(this.executorIndex!=mData.executorIndex)
			return false;
		
		if(this.instanceID!=mData.instanceID)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("sceneID");
		writer.sb.append(':');
		writer.sb.append(this.sceneID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("lineID");
		writer.sb.append(':');
		writer.sb.append(this.lineID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("gameID");
		writer.sb.append(':');
		writer.sb.append(this.gameID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("executorIndex");
		writer.sb.append(':');
		writer.sb.append(this.executorIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("instanceID");
		writer.sb.append(':');
		writer.sb.append(this.instanceID);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.sceneID=0;
		this.lineID=0;
		this.gameID=0;
		this.executorIndex=0;
		this.instanceID=0;
	}
	
}
