package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;

/** 机器人测试模式(generated by shine) */
public class RobotTestModeConfig extends BaseConfig
{
	/** 存储集合 */
	private static RobotTestModeConfig[] _dic;
	
	/** id */
	public int id;
	
	/** 描述 */
	public String describe="";
	
	/** bool参数组 */
	public boolean[] bools;
	
	/** 场景ID组 */
	public int[] sceneIDs;
	
	/** int参数组 */
	public int[] ints;
	
	/** 获取 */
	public static RobotTestModeConfig get(int id)
	{
		return id>=0 && id<_dic.length ? _dic[id] : null;
	}
	
	/** 设置字典 */
	public static void setDic(RobotTestModeConfig[] dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static RobotTestModeConfig[] getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.describe=stream.readUTF();
		
		int boolsLen=stream.readLen();
		if(this.bools==null || this.bools.length!=boolsLen)
		{
			this.bools=new boolean[boolsLen];
		}
		boolean[] boolsT=this.bools;
		for(int boolsI=0;boolsI<boolsLen;++boolsI)
		{
			boolean boolsV;
			boolsV=stream.readBoolean();
			
			boolsT[boolsI]=boolsV;
		}
		
		int intsLen=stream.readLen();
		if(this.ints==null || this.ints.length!=intsLen)
		{
			this.ints=new int[intsLen];
		}
		int[] intsT=this.ints;
		for(int intsI=0;intsI<intsLen;++intsI)
		{
			int intsV;
			intsV=stream.readInt();
			
			intsT[intsI]=intsV;
		}
		
		int sceneIDsLen=stream.readLen();
		if(this.sceneIDs==null || this.sceneIDs.length!=sceneIDsLen)
		{
			this.sceneIDs=new int[sceneIDsLen];
		}
		int[] sceneIDsT=this.sceneIDs;
		for(int sceneIDsI=0;sceneIDsI<sceneIDsLen;++sceneIDsI)
		{
			int sceneIDsV;
			sceneIDsV=stream.readInt();
			
			sceneIDsT[sceneIDsI]=sceneIDsV;
		}
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.describe);
		
		if(this.bools!=null)
		{
			boolean[] boolsT=this.bools;
			stream.writeLen(boolsT.length);
			for(int boolsVI=0,boolsVLen=boolsT.length;boolsVI<boolsVLen;++boolsVI)
			{
				boolean boolsV=boolsT[boolsVI];
				stream.writeBoolean(boolsV);
				
			}
		}
		else
		{
			nullObjError("bools");
		}
		
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			stream.writeLen(intsT.length);
			for(int intsVI=0,intsVLen=intsT.length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			nullObjError("ints");
		}
		
		if(this.sceneIDs!=null)
		{
			int[] sceneIDsT=this.sceneIDs;
			stream.writeLen(sceneIDsT.length);
			for(int sceneIDsVI=0,sceneIDsVLen=sceneIDsT.length;sceneIDsVI<sceneIDsVLen;++sceneIDsVI)
			{
				int sceneIDsV=sceneIDsT[sceneIDsVI];
				stream.writeInt(sceneIDsV);
				
			}
		}
		else
		{
			nullObjError("sceneIDs");
		}
		
	}
	
}
