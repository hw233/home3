package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.dataEx.TimeExpression;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 活动表(generated by shine) */
public class ActivityConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<ActivityConfig> _dic;
	
	/** 活动id */
	public int id;
	
	/** 开启时间 */
	public String startTime="";
	
	/** 关闭时间 */
	public String endTime="";
	
	/** 生效条件 */
	public int[][] enableConditions;
	
	/** 重置时间 */
	public String resetTime="";
	
	/** 参与条件 */
	public int[][] joinConditions;
	
	/** 全部次数完成奖励 */
	public int rewardComplete;
	
	/** 单次奖励 */
	public int rewardOnce;
	
	/** 参与次数 */
	public int joinCount;
	
	/** 开启时间(时间表达式) */
	public TimeExpression startTimeT;
	
	/** 关闭时间(时间表达式) */
	public TimeExpression endTimeT;
	
	/** 重置时间(时间表达式) */
	public TimeExpression resetTimeT;
	
	/** 获取 */
	public static ActivityConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<ActivityConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<ActivityConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readShort();
		
		this.startTime=stream.readUTF();
		
		this.endTime=stream.readUTF();
		
		this.resetTime=stream.readUTF();
		
		int enableConditionsLen=stream.readLen();
		if(this.enableConditions==null || this.enableConditions.length!=enableConditionsLen)
		{
			this.enableConditions=new int[enableConditionsLen][];
		}
		int[][] enableConditionsT=this.enableConditions;
		for(int enableConditionsI=0;enableConditionsI<enableConditionsLen;++enableConditionsI)
		{
			int[] enableConditionsV;
			int enableConditionsVLen=stream.readLen();
			enableConditionsV=new int[enableConditionsVLen];
			int[] enableConditionsVT=enableConditionsV;
			for(int enableConditionsVI=0;enableConditionsVI<enableConditionsVLen;++enableConditionsVI)
			{
				int enableConditionsVV;
				enableConditionsVV=stream.readInt();
				
				enableConditionsVT[enableConditionsVI]=enableConditionsVV;
			}
			
			enableConditionsT[enableConditionsI]=enableConditionsV;
		}
		
		int joinConditionsLen=stream.readLen();
		if(this.joinConditions==null || this.joinConditions.length!=joinConditionsLen)
		{
			this.joinConditions=new int[joinConditionsLen][];
		}
		int[][] joinConditionsT=this.joinConditions;
		for(int joinConditionsI=0;joinConditionsI<joinConditionsLen;++joinConditionsI)
		{
			int[] joinConditionsV;
			int joinConditionsVLen=stream.readLen();
			joinConditionsV=new int[joinConditionsVLen];
			int[] joinConditionsVT=joinConditionsV;
			for(int joinConditionsVI=0;joinConditionsVI<joinConditionsVLen;++joinConditionsVI)
			{
				int joinConditionsVV;
				joinConditionsVV=stream.readInt();
				
				joinConditionsVT[joinConditionsVI]=joinConditionsVV;
			}
			
			joinConditionsT[joinConditionsI]=joinConditionsV;
		}
		
		this.joinCount=stream.readInt();
		
		this.rewardOnce=stream.readInt();
		
		this.rewardComplete=stream.readInt();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 生成刷新配置 */
	@Override
	protected void generateRefresh()
	{
		startTimeT=new TimeExpression(startTime);
		
		endTimeT=new TimeExpression(endTime);
		
		resetTimeT=new TimeExpression(resetTime);
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeShort(this.id);
		
		stream.writeUTF(this.startTime);
		
		stream.writeUTF(this.endTime);
		
		stream.writeUTF(this.resetTime);
		
		if(this.enableConditions!=null)
		{
			int[][] enableConditionsT=this.enableConditions;
			stream.writeLen(enableConditionsT.length);
			for(int enableConditionsVI=0,enableConditionsVLen=enableConditionsT.length;enableConditionsVI<enableConditionsVLen;++enableConditionsVI)
			{
				int[] enableConditionsV=enableConditionsT[enableConditionsVI];
				if(enableConditionsV!=null)
				{
					int[] enableConditionsVT=enableConditionsV;
					stream.writeLen(enableConditionsVT.length);
					for(int enableConditionsVVI=0,enableConditionsVVLen=enableConditionsVT.length;enableConditionsVVI<enableConditionsVVLen;++enableConditionsVVI)
					{
						int enableConditionsVV=enableConditionsVT[enableConditionsVVI];
						stream.writeInt(enableConditionsVV);
						
					}
				}
				else
				{
					nullObjError("enableConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("enableConditions");
		}
		
		if(this.joinConditions!=null)
		{
			int[][] joinConditionsT=this.joinConditions;
			stream.writeLen(joinConditionsT.length);
			for(int joinConditionsVI=0,joinConditionsVLen=joinConditionsT.length;joinConditionsVI<joinConditionsVLen;++joinConditionsVI)
			{
				int[] joinConditionsV=joinConditionsT[joinConditionsVI];
				if(joinConditionsV!=null)
				{
					int[] joinConditionsVT=joinConditionsV;
					stream.writeLen(joinConditionsVT.length);
					for(int joinConditionsVVI=0,joinConditionsVVLen=joinConditionsVT.length;joinConditionsVVI<joinConditionsVVLen;++joinConditionsVVI)
					{
						int joinConditionsVV=joinConditionsVT[joinConditionsVVI];
						stream.writeInt(joinConditionsVV);
						
					}
				}
				else
				{
					nullObjError("joinConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("joinConditions");
		}
		
		stream.writeInt(this.joinCount);
		
		stream.writeInt(this.rewardOnce);
		
		stream.writeInt(this.rewardComplete);
		
	}
	
}
