package com.home.commonBase.config.game.enumT;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.constlist.generate.SceneForceType;
import com.home.commonBase.constlist.generate.UnitAgainstType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;

/** 场景势力类型(generated by shine) */
public class SceneForceTypeConfig extends BaseConfig
{
	/** 存储集合 */
	private static SceneForceTypeConfig[] _dic;
	
	/** 敌对势力组 */
	public int[] enemies;
	
	/** 敌对势力组T */
	public int[] againstSet;
	
	/** id */
	public int id;
	
	/** 友好势力组 */
	public int[] friends;
	
	/** 获取 */
	public static SceneForceTypeConfig get(int id)
	{
		return id>=0 && id<_dic.length ? _dic[id] : null;
	}
	
	/** 设置字典 */
	public static void setDic(SceneForceTypeConfig[] dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static SceneForceTypeConfig[] getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int enemiesLen=stream.readLen();
		if(this.enemies==null || this.enemies.length!=enemiesLen)
		{
			this.enemies=new int[enemiesLen];
		}
		int[] enemiesT=this.enemies;
		for(int enemiesI=0;enemiesI<enemiesLen;++enemiesI)
		{
			int enemiesV;
			enemiesV=stream.readInt();
			
			enemiesT[enemiesI]=enemiesV;
		}
		
		int friendsLen=stream.readLen();
		if(this.friends==null || this.friends.length!=friendsLen)
		{
			this.friends=new int[friendsLen];
		}
		int[] friendsT=this.friends;
		for(int friendsI=0;friendsI<friendsLen;++friendsI)
		{
			int friendsV;
			friendsV=stream.readInt();
			
			friendsT[friendsI]=friendsV;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.enemies!=null)
		{
			int[] enemiesT=this.enemies;
			stream.writeLen(enemiesT.length);
			for(int enemiesVI=0,enemiesVLen=enemiesT.length;enemiesVI<enemiesVLen;++enemiesVI)
			{
				int enemiesV=enemiesT[enemiesVI];
				stream.writeInt(enemiesV);
				
			}
		}
		else
		{
			nullObjError("enemies");
		}
		
		if(this.friends!=null)
		{
			int[] friendsT=this.friends;
			stream.writeLen(friendsT.length);
			for(int friendsVI=0,friendsVLen=friendsT.length;friendsVI<friendsVLen;++friendsVI)
			{
				int friendsV=friendsT[friendsVI];
				stream.writeInt(friendsV);
				
			}
		}
		else
		{
			nullObjError("friends");
		}
		
	}
	
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		againstSet=new int[SceneForceType.size];
		
		for(int v:friends)
		{
			againstSet[v]=UnitAgainstType.Friend;
		}
		
		for(int v:enemies)
		{
			againstSet[v]=UnitAgainstType.Enemy;
		}
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
}
