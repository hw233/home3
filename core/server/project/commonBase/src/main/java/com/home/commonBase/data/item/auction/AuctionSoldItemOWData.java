package com.home.commonBase.data.item.auction;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.PlayerFuncWorkData;
import com.home.commonBase.data.role.RoleSimpleShowData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 更新出售物品数目(generated by shine) */
public class AuctionSoldItemOWData extends PlayerFuncWorkData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.AuctionSoldItemOW;
	
	/** 实例ID */
	public long instanceID;
	
	/** 是否售罄 */
	public boolean isSoldOut;
	
	/** 出售数目 */
	public int num;
	
	/** 购买者 */
	public RoleSimpleShowData consumer;
	
	public AuctionSoldItemOWData()
	{
		_dataID=BaseDataType.AuctionSoldItemOW;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AuctionSoldItemOWData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.instanceID=stream.readLong();
		
		BaseData consumerT=stream.readDataFullNotNull();
		if(consumerT!=null)
		{
			if(consumerT instanceof RoleSimpleShowData)
			{
				this.consumer=(RoleSimpleShowData)consumerT;
			}
			else
			{
				this.consumer=new RoleSimpleShowData();
				if(!(consumerT.getClass().isAssignableFrom(RoleSimpleShowData.class)))
				{
					stream.throwTypeReadError(RoleSimpleShowData.class,consumerT.getClass());
				}
				this.consumer.shadowCopy(consumerT);
			}
		}
		else
		{
			this.consumer=null;
		}
		
		this.num=stream.readInt();
		
		this.isSoldOut=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeLong(this.instanceID);
		
		if(this.consumer!=null)
		{
			stream.writeDataFullNotNull(this.consumer);
		}
		else
		{
			nullObjError("consumer");
		}
		
		stream.writeInt(this.num);
		
		stream.writeBoolean(this.isSoldOut);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.instanceID=stream.readLong();
		
		this.consumer=(RoleSimpleShowData)stream.readDataSimpleNotNull();
		
		this.num=stream.readInt();
		
		this.isSoldOut=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeLong(this.instanceID);
		
		if(this.consumer!=null)
		{
			stream.writeDataSimpleNotNull(this.consumer);
		}
		else
		{
			nullObjError("consumer");
		}
		
		stream.writeInt(this.num);
		
		stream.writeBoolean(this.isSoldOut);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof AuctionSoldItemOWData))
			return;
		
		AuctionSoldItemOWData mData=(AuctionSoldItemOWData)data;
		
		this.instanceID=mData.instanceID;
		this.consumer=mData.consumer;
		this.num=mData.num;
		this.isSoldOut=mData.isSoldOut;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof AuctionSoldItemOWData))
			return;
		
		AuctionSoldItemOWData mData=(AuctionSoldItemOWData)data;
		
		this.instanceID=mData.instanceID;
		
		if(mData.consumer!=null)
		{
			this.consumer=(RoleSimpleShowData)mData.consumer.clone();
		}
		else
		{
			this.consumer=null;
			nullObjError("consumer");
		}
		
		this.num=mData.num;
		
		this.isSoldOut=mData.isSoldOut;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		AuctionSoldItemOWData mData=(AuctionSoldItemOWData)data;
		if(this.instanceID!=mData.instanceID)
			return false;
		
		if(mData.consumer!=null)
		{
			if(this.consumer==null)
				return false;
			if(!this.consumer.dataEquals(mData.consumer))
				return false;
		}
		else
		{
			if(this.consumer!=null)
				return false;
		}
		
		if(this.num!=mData.num)
			return false;
		
		if(this.isSoldOut!=mData.isSoldOut)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("instanceID");
		writer.sb.append(':');
		writer.sb.append(this.instanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("consumer");
		writer.sb.append(':');
		if(this.consumer!=null)
		{
			this.consumer.writeDataString(writer);
		}
		else
		{
			writer.sb.append("RoleSimpleShowData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("num");
		writer.sb.append(':');
		writer.sb.append(this.num);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isSoldOut");
		writer.sb.append(':');
		writer.sb.append(this.isSoldOut);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.consumer=new RoleSimpleShowData();
		this.consumer.initDefault();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.instanceID=0L;
		this.consumer=null;
		this.num=0;
		this.isSoldOut=false;
	}
	
}
