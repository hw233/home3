package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 客户端登陆服务器地址信息(generated by shine) */
public class ClientLoginServerInfoData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ClientLoginServerInfo;
	
	/** 令牌 */
	public int token;
	
	/** 地址 */
	public String host="";
	
	/** 端口 */
	public int port;
	
	public ClientLoginServerInfoData()
	{
		_dataID=BaseDataType.ClientLoginServerInfo;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ClientLoginServerInfoData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.token=stream.readInt();
		
		this.host=stream.readUTF();
		
		this.port=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.token);
		
		stream.writeUTF(this.host);
		
		stream.writeInt(this.port);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.token=stream.readInt();
		
		this.host=stream.readUTF();
		
		this.port=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.token);
		
		stream.writeUTF(this.host);
		
		stream.writeInt(this.port);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ClientLoginServerInfoData))
			return;
		
		ClientLoginServerInfoData mData=(ClientLoginServerInfoData)data;
		
		this.token=mData.token;
		this.host=mData.host;
		this.port=mData.port;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ClientLoginServerInfoData))
			return;
		
		ClientLoginServerInfoData mData=(ClientLoginServerInfoData)data;
		
		this.token=mData.token;
		
		this.host=mData.host;
		
		this.port=mData.port;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ClientLoginServerInfoData mData=(ClientLoginServerInfoData)data;
		if(this.token!=mData.token)
			return false;
		
		if(!this.host.equals(mData.host))
			return false;
		
		if(this.port!=mData.port)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("token");
		writer.sb.append(':');
		writer.sb.append(this.token);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("host");
		writer.sb.append(':');
		writer.sb.append(this.host);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("port");
		writer.sb.append(':');
		writer.sb.append(this.port);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	public static ClientLoginServerInfoData create(int token,String host,int port)
	{
		ClientLoginServerInfoData re=new ClientLoginServerInfoData();
		re.token=token;
		re.host=host;
		re.port=port;
		return re;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.token=0;
		this.host="";
		this.port=0;
	}
	
}
