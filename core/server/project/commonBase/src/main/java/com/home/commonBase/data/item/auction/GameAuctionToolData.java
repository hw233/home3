package com.home.commonBase.data.item.auction;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class GameAuctionToolData extends FuncToolData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.GameAuctionTool;
	
	/** 物品价格字典 */
	public IntIntMap itemPriceDic;
	
	public GameAuctionToolData()
	{
		_dataID=BaseDataType.GameAuctionTool;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "GameAuctionToolData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int itemPriceDicLen=stream.readLen();
		if(this.itemPriceDic!=null)
		{
			this.itemPriceDic.clear();
			this.itemPriceDic.ensureCapacity(itemPriceDicLen);
		}
		else
		{
			this.itemPriceDic=new IntIntMap(itemPriceDicLen);
		}
		
		IntIntMap itemPriceDicT=this.itemPriceDic;
		for(int itemPriceDicI=itemPriceDicLen-1;itemPriceDicI>=0;--itemPriceDicI)
		{
			int itemPriceDicK;
			int itemPriceDicV;
			itemPriceDicK=stream.readInt();
			
			itemPriceDicV=stream.readInt();
			
			itemPriceDicT.put(itemPriceDicK,itemPriceDicV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.itemPriceDic!=null)
		{
			stream.writeLen(this.itemPriceDic.size());
			if(!this.itemPriceDic.isEmpty())
			{
				int itemPriceDicKFreeValue=this.itemPriceDic.getFreeValue();
				int[] itemPriceDicKTable=this.itemPriceDic.getTable();
				for(int itemPriceDicKI=itemPriceDicKTable.length-2;itemPriceDicKI>=0;itemPriceDicKI-=2)
				{
					if(itemPriceDicKTable[itemPriceDicKI]!=itemPriceDicKFreeValue)
					{
						int itemPriceDicK=itemPriceDicKTable[itemPriceDicKI];
						int itemPriceDicV=itemPriceDicKTable[itemPriceDicKI+1];
						stream.writeInt(itemPriceDicK);
						
						stream.writeInt(itemPriceDicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("itemPriceDic");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int itemPriceDicLen=stream.readLen();
		if(this.itemPriceDic!=null)
		{
			this.itemPriceDic.clear();
			this.itemPriceDic.ensureCapacity(itemPriceDicLen);
		}
		else
		{
			this.itemPriceDic=new IntIntMap(itemPriceDicLen);
		}
		
		IntIntMap itemPriceDicT=this.itemPriceDic;
		for(int itemPriceDicI=itemPriceDicLen-1;itemPriceDicI>=0;--itemPriceDicI)
		{
			int itemPriceDicK;
			int itemPriceDicV;
			itemPriceDicK=stream.readInt();
			
			itemPriceDicV=stream.readInt();
			
			itemPriceDicT.put(itemPriceDicK,itemPriceDicV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.itemPriceDic!=null)
		{
			stream.writeLen(this.itemPriceDic.size());
			if(!this.itemPriceDic.isEmpty())
			{
				int itemPriceDicKFreeValue=this.itemPriceDic.getFreeValue();
				int[] itemPriceDicKTable=this.itemPriceDic.getTable();
				for(int itemPriceDicKI=itemPriceDicKTable.length-2;itemPriceDicKI>=0;itemPriceDicKI-=2)
				{
					if(itemPriceDicKTable[itemPriceDicKI]!=itemPriceDicKFreeValue)
					{
						int itemPriceDicK=itemPriceDicKTable[itemPriceDicKI];
						int itemPriceDicV=itemPriceDicKTable[itemPriceDicKI+1];
						stream.writeInt(itemPriceDicK);
						
						stream.writeInt(itemPriceDicV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("itemPriceDic");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof GameAuctionToolData))
			return;
		
		GameAuctionToolData mData=(GameAuctionToolData)data;
		
		this.itemPriceDic=mData.itemPriceDic;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof GameAuctionToolData))
			return;
		
		GameAuctionToolData mData=(GameAuctionToolData)data;
		
		if(mData.itemPriceDic!=null)
		{
			if(this.itemPriceDic!=null)
			{
				this.itemPriceDic.clear();
				this.itemPriceDic.ensureCapacity(mData.itemPriceDic.size());
			}
			else
			{
				this.itemPriceDic=new IntIntMap(mData.itemPriceDic.size());
			}
			
			IntIntMap itemPriceDicT=this.itemPriceDic;
			if(!mData.itemPriceDic.isEmpty())
			{
				int itemPriceDicKFreeValue=mData.itemPriceDic.getFreeValue();
				int[] itemPriceDicKTable=mData.itemPriceDic.getTable();
				for(int itemPriceDicKI=itemPriceDicKTable.length-2;itemPriceDicKI>=0;itemPriceDicKI-=2)
				{
					if(itemPriceDicKTable[itemPriceDicKI]!=itemPriceDicKFreeValue)
					{
						int itemPriceDicK=itemPriceDicKTable[itemPriceDicKI];
						int itemPriceDicV=itemPriceDicKTable[itemPriceDicKI+1];
						int itemPriceDicW;
						int itemPriceDicU;
						itemPriceDicW=itemPriceDicK;
						
						itemPriceDicU=itemPriceDicV;
						
						itemPriceDicT.put(itemPriceDicW,itemPriceDicU);
					}
				}
			}
		}
		else
		{
			this.itemPriceDic=null;
			nullObjError("itemPriceDic");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		GameAuctionToolData mData=(GameAuctionToolData)data;
		if(mData.itemPriceDic!=null)
		{
			if(this.itemPriceDic==null)
				return false;
			if(this.itemPriceDic.size()!=mData.itemPriceDic.size())
				return false;
			IntIntMap itemPriceDicR=mData.itemPriceDic;
			if(!this.itemPriceDic.isEmpty())
			{
				int itemPriceDicKFreeValue=this.itemPriceDic.getFreeValue();
				int[] itemPriceDicKTable=this.itemPriceDic.getTable();
				for(int itemPriceDicKI=itemPriceDicKTable.length-2;itemPriceDicKI>=0;itemPriceDicKI-=2)
				{
					if(itemPriceDicKTable[itemPriceDicKI]!=itemPriceDicKFreeValue)
					{
						int itemPriceDicK=itemPriceDicKTable[itemPriceDicKI];
						int itemPriceDicV=itemPriceDicKTable[itemPriceDicKI+1];
						int itemPriceDicU=itemPriceDicR.get(itemPriceDicK);
						if(itemPriceDicV!=itemPriceDicU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.itemPriceDic!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("itemPriceDic");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.itemPriceDic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.itemPriceDic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.itemPriceDic.isEmpty())
			{
				int itemPriceDicKFreeValue=this.itemPriceDic.getFreeValue();
				int[] itemPriceDicKTable=this.itemPriceDic.getTable();
				for(int itemPriceDicKI=itemPriceDicKTable.length-2;itemPriceDicKI>=0;itemPriceDicKI-=2)
				{
					if(itemPriceDicKTable[itemPriceDicKI]!=itemPriceDicKFreeValue)
					{
						int itemPriceDicK=itemPriceDicKTable[itemPriceDicKI];
						int itemPriceDicV=itemPriceDicKTable[itemPriceDicKI+1];
						writer.writeTabs();
						writer.sb.append(itemPriceDicK);
						
						writer.sb.append(':');
						writer.sb.append(itemPriceDicV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.itemPriceDic=new IntIntMap();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.itemPriceDic=null;
	}
	
}
