package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 单位外观表(generated by shine) */
public class FacadeConfig extends BaseConfig
{
	/** 显示ID */
	public int id;
	
	/** 变身优先级 */
	public int proirity;
	
	/** 部件组 */
	public DIntData[] parts;
	
	/** 模型ID */
	public int modelID;
	
	/** 存储集合 */
	private static IntObjectMap<FacadeConfig> _dic;
	
	/** 获取 */
	public static FacadeConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<FacadeConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<FacadeConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.modelID=stream.readInt();
		
		int partsLen=stream.readLen();
		if(this.parts==null || this.parts.length!=partsLen)
		{
			this.parts=new DIntData[partsLen];
		}
		DIntData[] partsT=this.parts;
		for(int partsI=0;partsI<partsLen;++partsI)
		{
			DIntData partsV;
			partsV=new DIntData();
			partsV.readBytesSimple(stream);
			
			partsT[partsI]=partsV;
		}
		
		this.proirity=stream.readInt();
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.modelID);
		
		if(this.parts!=null)
		{
			DIntData[] partsT=this.parts;
			stream.writeLen(partsT.length);
			for(int partsVI=0,partsVLen=partsT.length;partsVI<partsVLen;++partsVI)
			{
				DIntData partsV=partsT[partsVI];
				if(partsV!=null)
				{
					partsV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("partsV");
				}
				
			}
		}
		else
		{
			nullObjError("parts");
		}
		
		stream.writeInt(this.proirity);
		
	}
	
}
