package com.home.commonBase.data.system;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.system.ClientOfflineWorkData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 客户端离线事务组消息(generated by shine) */
public class ClientOfflineWorkListData extends BaseData
{
	/** 当前发送序号 */
	public int index;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.ClientOfflineWorkList;
	
	/** 客户端随机种子序号 */
	public int clientRandomSeedIndex;
	
	/** 数据组 */
	public SList<ClientOfflineWorkData> list;
	
	public ClientOfflineWorkListData()
	{
		_dataID=BaseDataType.ClientOfflineWorkList;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ClientOfflineWorkListData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		int listLen=stream.readLen();
		if(this.list!=null)
		{
			this.list.clear();
			this.list.ensureCapacity(listLen);
		}
		else
		{
			this.list=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new,listLen);
		}
		
		SList<ClientOfflineWorkData> listT=this.list;
		for(int listI=listLen-1;listI>=0;--listI)
		{
			ClientOfflineWorkData listV;
			BaseData listVT=stream.readDataFullNotNull();
			if(listVT!=null)
			{
				if(listVT instanceof ClientOfflineWorkData)
				{
					listV=(ClientOfflineWorkData)listVT;
				}
				else
				{
					listV=new ClientOfflineWorkData();
					if(!(listVT.getClass().isAssignableFrom(ClientOfflineWorkData.class)))
					{
						stream.throwTypeReadError(ClientOfflineWorkData.class,listVT.getClass());
					}
					listV.shadowCopy(listVT);
				}
			}
			else
			{
				listV=null;
			}
			
			listT.add(listV);
		}
		
		this.clientRandomSeedIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.index);
		
		if(this.list!=null)
		{
			stream.writeLen(this.list.size());
			if(!this.list.isEmpty())
			{
				Object[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					ClientOfflineWorkData listV=(ClientOfflineWorkData)listVValues[listVI];
					if(listV!=null)
					{
						stream.writeDataFullNotNull(listV);
					}
					else
					{
						nullObjError("listV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("list");
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.index=stream.readInt();
		
		int listLen=stream.readLen();
		if(this.list!=null)
		{
			this.list.clear();
			this.list.ensureCapacity(listLen);
		}
		else
		{
			this.list=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new,listLen);
		}
		
		SList<ClientOfflineWorkData> listT=this.list;
		for(int listI=listLen-1;listI>=0;--listI)
		{
			ClientOfflineWorkData listV;
			listV=(ClientOfflineWorkData)stream.readDataSimpleNotNull();
			
			listT.add(listV);
		}
		
		this.clientRandomSeedIndex=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.index);
		
		if(this.list!=null)
		{
			stream.writeLen(this.list.size());
			if(!this.list.isEmpty())
			{
				Object[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					ClientOfflineWorkData listV=(ClientOfflineWorkData)listVValues[listVI];
					if(listV!=null)
					{
						stream.writeDataSimpleNotNull(listV);
					}
					else
					{
						nullObjError("listV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("list");
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof ClientOfflineWorkListData))
			return;
		
		ClientOfflineWorkListData mData=(ClientOfflineWorkListData)data;
		
		this.index=mData.index;
		this.list=mData.list;
		this.clientRandomSeedIndex=mData.clientRandomSeedIndex;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof ClientOfflineWorkListData))
			return;
		
		ClientOfflineWorkListData mData=(ClientOfflineWorkListData)data;
		
		this.index=mData.index;
		
		if(mData.list!=null)
		{
			if(this.list!=null)
			{
				this.list.clear();
				this.list.ensureCapacity(mData.list.size());
			}
			else
			{
				this.list=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new,mData.list.size());
			}
			
			SList<ClientOfflineWorkData> listT=this.list;
			if(!mData.list.isEmpty())
			{
				Object[] listVValues=mData.list.getValues();
				for(int listVI=0,listVLen=mData.list.length();listVI<listVLen;++listVI)
				{
					ClientOfflineWorkData listV=(ClientOfflineWorkData)listVValues[listVI];
					ClientOfflineWorkData listU;
					if(listV!=null)
					{
						listU=(ClientOfflineWorkData)listV.clone();
					}
					else
					{
						listU=null;
						nullObjError("listU");
					}
					
					listT.add(listU);
				}
			}
		}
		else
		{
			this.list=null;
			nullObjError("list");
		}
		
		this.clientRandomSeedIndex=mData.clientRandomSeedIndex;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		ClientOfflineWorkListData mData=(ClientOfflineWorkListData)data;
		if(this.index!=mData.index)
			return false;
		
		if(mData.list!=null)
		{
			if(this.list==null)
				return false;
			if(this.list.size()!=mData.list.size())
				return false;
			SList<ClientOfflineWorkData> listT=this.list;
			SList<ClientOfflineWorkData> listR=mData.list;
			int listLen=listT.size();
			for(int listI=0;listI<listLen;++listI)
			{
				ClientOfflineWorkData listU=listT.get(listI);
				ClientOfflineWorkData listV=listR.get(listI);
				if(listV!=null)
				{
					if(listU==null)
						return false;
					if(!listU.dataEquals(listV))
						return false;
				}
				else
				{
					if(listU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.list!=null)
				return false;
		}
		
		if(this.clientRandomSeedIndex!=mData.clientRandomSeedIndex)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("index");
		writer.sb.append(':');
		writer.sb.append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("list");
		writer.sb.append(':');
		writer.sb.append("List<ClientOfflineWorkData>");
		if(this.list!=null)
		{
			SList<ClientOfflineWorkData> listT=this.list;
			int listLen=listT.size();
			writer.sb.append('(');
			writer.sb.append(listLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int listI=0;listI<listLen;++listI)
			{
				ClientOfflineWorkData listV=listT.get(listI);
				writer.writeTabs();
				writer.sb.append(listI);
				writer.sb.append(':');
				if(listV!=null)
				{
					listV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ClientOfflineWorkData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeedIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientRandomSeedIndex);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.list=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.index=0;
		this.list=null;
		this.clientRandomSeedIndex=0;
	}
	
}
