package com.home.commonBase.data.scene.role;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.pool.DataPool;

/** 玩家属性数据(generated by shine) */
public class RoleAttributeData extends BaseData
{
	/** 属性组 */
	public IntIntMap attributes;
	
	/** 数据类型ID */
	public static final int dataID=BaseDataType.RoleAttribute;
	
	public RoleAttributeData()
	{
		_dataID=BaseDataType.RoleAttribute;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RoleAttributeData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int attributesLen=stream.readLen();
		if(this.attributes!=null)
		{
			this.attributes.clear();
			this.attributes.ensureCapacity(attributesLen);
		}
		else
		{
			this.attributes=new IntIntMap(attributesLen);
		}
		
		IntIntMap attributesT=this.attributes;
		for(int attributesI=attributesLen-1;attributesI>=0;--attributesI)
		{
			int attributesK;
			int attributesV;
			attributesK=stream.readInt();
			
			attributesV=stream.readInt();
			
			attributesT.put(attributesK,attributesV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.attributes!=null)
		{
			stream.writeLen(this.attributes.size());
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKTable=this.attributes.getTable();
				for(int attributesKI=attributesKTable.length-2;attributesKI>=0;attributesKI-=2)
				{
					if(attributesKTable[attributesKI]!=attributesKFreeValue)
					{
						int attributesK=attributesKTable[attributesKI];
						int attributesV=attributesKTable[attributesKI+1];
						stream.writeInt(attributesK);
						
						stream.writeInt(attributesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("attributes");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		int attributesLen=stream.readLen();
		if(this.attributes!=null)
		{
			this.attributes.clear();
			this.attributes.ensureCapacity(attributesLen);
		}
		else
		{
			this.attributes=new IntIntMap(attributesLen);
		}
		
		IntIntMap attributesT=this.attributes;
		for(int attributesI=attributesLen-1;attributesI>=0;--attributesI)
		{
			int attributesK;
			int attributesV;
			attributesK=stream.readInt();
			
			attributesV=stream.readInt();
			
			attributesT.put(attributesK,attributesV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.attributes!=null)
		{
			stream.writeLen(this.attributes.size());
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKTable=this.attributes.getTable();
				for(int attributesKI=attributesKTable.length-2;attributesKI>=0;attributesKI-=2)
				{
					if(attributesKTable[attributesKI]!=attributesKFreeValue)
					{
						int attributesK=attributesKTable[attributesKI];
						int attributesV=attributesKTable[attributesKI+1];
						stream.writeInt(attributesK);
						
						stream.writeInt(attributesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("attributes");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof RoleAttributeData))
			return;
		
		RoleAttributeData mData=(RoleAttributeData)data;
		
		this.attributes=mData.attributes;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof RoleAttributeData))
			return;
		
		RoleAttributeData mData=(RoleAttributeData)data;
		
		if(mData.attributes!=null)
		{
			if(this.attributes!=null)
			{
				this.attributes.clear();
				this.attributes.ensureCapacity(mData.attributes.size());
			}
			else
			{
				this.attributes=new IntIntMap(mData.attributes.size());
			}
			
			IntIntMap attributesT=this.attributes;
			if(!mData.attributes.isEmpty())
			{
				int attributesKFreeValue=mData.attributes.getFreeValue();
				int[] attributesKTable=mData.attributes.getTable();
				for(int attributesKI=attributesKTable.length-2;attributesKI>=0;attributesKI-=2)
				{
					if(attributesKTable[attributesKI]!=attributesKFreeValue)
					{
						int attributesK=attributesKTable[attributesKI];
						int attributesV=attributesKTable[attributesKI+1];
						int attributesW;
						int attributesU;
						attributesW=attributesK;
						
						attributesU=attributesV;
						
						attributesT.put(attributesW,attributesU);
					}
				}
			}
		}
		else
		{
			this.attributes=null;
			nullObjError("attributes");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		RoleAttributeData mData=(RoleAttributeData)data;
		if(mData.attributes!=null)
		{
			if(this.attributes==null)
				return false;
			if(this.attributes.size()!=mData.attributes.size())
				return false;
			IntIntMap attributesR=mData.attributes;
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKTable=this.attributes.getTable();
				for(int attributesKI=attributesKTable.length-2;attributesKI>=0;attributesKI-=2)
				{
					if(attributesKTable[attributesKI]!=attributesKFreeValue)
					{
						int attributesK=attributesKTable[attributesKI];
						int attributesV=attributesKTable[attributesKI+1];
						int attributesU=attributesR.get(attributesK);
						if(attributesV!=attributesU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.attributes!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("attributes");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.attributes!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.attributes.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKTable=this.attributes.getTable();
				for(int attributesKI=attributesKTable.length-2;attributesKI>=0;attributesKI-=2)
				{
					if(attributesKTable[attributesKI]!=attributesKFreeValue)
					{
						int attributesK=attributesKTable[attributesKI];
						int attributesV=attributesKTable[attributesKI+1];
						writer.writeTabs();
						writer.sb.append(attributesK);
						
						writer.sb.append(':');
						writer.sb.append(attributesV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.attributes=new IntIntMap();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.attributes=null;
	}
	
}
