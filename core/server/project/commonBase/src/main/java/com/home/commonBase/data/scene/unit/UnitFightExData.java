package com.home.commonBase.data.scene.unit;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.scene.fight.SkillTargetData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 附加战斗数据(generated by shine) */
public class UnitFightExData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.UnitFightEx;
	
	/** 当前技能等级 */
	public int currentSkillLevel=0;
	
	/** 当前技能ID(-1为没有释放技能) */
	public int currentSkillID=-1;
	
	/** 当前技能步 */
	public int currentSkillStep;
	
	/** 当前技能目标 */
	public SkillTargetData currentTarget;
	
	/** 当前技能读条时间经过 */
	public int currentSkillBarTimePass;
	
	/** 当前技能读条ID */
	public int currentSkillBarID=-1;
	
	/** 当前步时间经过 */
	public int currentSkillStepTimePass;
	
	public UnitFightExData()
	{
		_dataID=BaseDataType.UnitFightEx;
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.currentSkillID=stream.readInt();
		
		this.currentSkillLevel=stream.readInt();
		
		if(stream.readBoolean())
		{
			BaseData currentTargetT=stream.readDataFullNotNull();
			if(currentTargetT!=null)
			{
				if(currentTargetT instanceof SkillTargetData)
				{
					this.currentTarget=(SkillTargetData)currentTargetT;
				}
				else
				{
					this.currentTarget=new SkillTargetData();
					if(!(currentTargetT.getClass().isAssignableFrom(SkillTargetData.class)))
					{
						stream.throwTypeReadError(SkillTargetData.class,currentTargetT.getClass());
					}
					this.currentTarget.shadowCopy(currentTargetT);
				}
			}
			else
			{
				this.currentTarget=null;
			}
		}
		else
		{
			this.currentTarget=null;
		}
		
		this.currentSkillStep=stream.readInt();
		
		this.currentSkillStepTimePass=stream.readInt();
		
		this.currentSkillBarID=stream.readInt();
		
		this.currentSkillBarTimePass=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.currentSkillID);
		
		stream.writeInt(this.currentSkillLevel);
		
		if(this.currentTarget!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.currentTarget);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.currentSkillStep);
		
		stream.writeInt(this.currentSkillStepTimePass);
		
		stream.writeInt(this.currentSkillBarID);
		
		stream.writeInt(this.currentSkillBarTimePass);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.currentSkillID=stream.readInt();
		
		this.currentSkillLevel=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.currentTarget=(SkillTargetData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.currentTarget=null;
		}
		
		this.currentSkillStep=stream.readInt();
		
		this.currentSkillStepTimePass=stream.readInt();
		
		this.currentSkillBarID=stream.readInt();
		
		this.currentSkillBarTimePass=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.currentSkillID);
		
		stream.writeInt(this.currentSkillLevel);
		
		if(this.currentTarget!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.currentTarget);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.currentSkillStep);
		
		stream.writeInt(this.currentSkillStepTimePass);
		
		stream.writeInt(this.currentSkillBarID);
		
		stream.writeInt(this.currentSkillBarTimePass);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof UnitFightExData))
			return;
		
		UnitFightExData mData=(UnitFightExData)data;
		
		this.currentSkillID=mData.currentSkillID;
		this.currentSkillLevel=mData.currentSkillLevel;
		this.currentTarget=mData.currentTarget;
		this.currentSkillStep=mData.currentSkillStep;
		this.currentSkillStepTimePass=mData.currentSkillStepTimePass;
		this.currentSkillBarID=mData.currentSkillBarID;
		this.currentSkillBarTimePass=mData.currentSkillBarTimePass;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof UnitFightExData))
			return;
		
		UnitFightExData mData=(UnitFightExData)data;
		
		this.currentSkillID=mData.currentSkillID;
		
		this.currentSkillLevel=mData.currentSkillLevel;
		
		if(mData.currentTarget!=null)
		{
			this.currentTarget=(SkillTargetData)mData.currentTarget.clone();
		}
		else
		{
			this.currentTarget=null;
		}
		
		this.currentSkillStep=mData.currentSkillStep;
		
		this.currentSkillStepTimePass=mData.currentSkillStepTimePass;
		
		this.currentSkillBarID=mData.currentSkillBarID;
		
		this.currentSkillBarTimePass=mData.currentSkillBarTimePass;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		UnitFightExData mData=(UnitFightExData)data;
		if(this.currentSkillID!=mData.currentSkillID)
			return false;
		
		if(this.currentSkillLevel!=mData.currentSkillLevel)
			return false;
		
		if(mData.currentTarget!=null)
		{
			if(this.currentTarget==null)
				return false;
			if(!this.currentTarget.dataEquals(mData.currentTarget))
				return false;
		}
		else
		{
			if(this.currentTarget!=null)
				return false;
		}
		
		if(this.currentSkillStep!=mData.currentSkillStep)
			return false;
		
		if(this.currentSkillStepTimePass!=mData.currentSkillStepTimePass)
			return false;
		
		if(this.currentSkillBarID!=mData.currentSkillBarID)
			return false;
		
		if(this.currentSkillBarTimePass!=mData.currentSkillBarTimePass)
			return false;
		
		return true;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UnitFightExData";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("currentSkillID");
		writer.sb.append(':');
		writer.sb.append(this.currentSkillID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentSkillLevel");
		writer.sb.append(':');
		writer.sb.append(this.currentSkillLevel);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentTarget");
		writer.sb.append(':');
		if(this.currentTarget!=null)
		{
			this.currentTarget.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentSkillStep");
		writer.sb.append(':');
		writer.sb.append(this.currentSkillStep);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentSkillStepTimePass");
		writer.sb.append(':');
		writer.sb.append(this.currentSkillStepTimePass);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentSkillBarID");
		writer.sb.append(':');
		writer.sb.append(this.currentSkillBarID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("currentSkillBarTimePass");
		writer.sb.append(':');
		writer.sb.append(this.currentSkillBarTimePass);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.currentSkillID=0;
		this.currentSkillLevel=0;
		this.currentTarget=null;
		this.currentSkillStep=0;
		this.currentSkillStepTimePass=0;
		this.currentSkillBarID=0;
		this.currentSkillBarTimePass=0;
	}
	
	@Override
	public void clear()
	{
		this.currentSkillID=-1;
		this.currentSkillLevel=0;
		this.currentTarget=null;
		this.currentSkillStep=0;
	}
	
}
