package com.home.commonBase.config.game.enumT;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.constlist.generate.MapBlockType;
import com.home.commonBase.constlist.generate.MapMoveType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;

/** 地图格子阻挡类型类型(generated by shine) */
public class MapBlockTypeConfig extends BaseConfig
{
	/** 存储集合 */
	private static MapBlockTypeConfig[] _dic;
	
	/** id */
	public int id;
	
	/** 驾驶地面减速度(动摩擦系数*重力加速度) */
	public float groundFriction;
	
	/** 允许移动方式 */
	public int[] allowMoveType;
	
	/** 允许字典组(key:MapBlockType) */
	public static boolean[][] allowDic;
	
	/** 允许字典组(key:MapMoveType) */
	public static boolean[][] allowDicT;
	
	/** 驾驶地面减速度(动摩擦系数*重力加速度)子弹 */
	public static float[] groundFrictionDic;
	
	/** 获取 */
	public static MapBlockTypeConfig get(int id)
	{
		return id>=0 && id<_dic.length ? _dic[id] : null;
	}
	
	/** 设置字典 */
	public static void setDic(MapBlockTypeConfig[] dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static MapBlockTypeConfig[] getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int allowMoveTypeLen=stream.readLen();
		if(this.allowMoveType==null || this.allowMoveType.length!=allowMoveTypeLen)
		{
			this.allowMoveType=new int[allowMoveTypeLen];
		}
		int[] allowMoveTypeT=this.allowMoveType;
		for(int allowMoveTypeI=0;allowMoveTypeI<allowMoveTypeLen;++allowMoveTypeI)
		{
			int allowMoveTypeV;
			allowMoveTypeV=stream.readInt();
			
			allowMoveTypeT[allowMoveTypeI]=allowMoveTypeV;
		}
		
		this.groundFriction=stream.readFloat();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.allowMoveType!=null)
		{
			int[] allowMoveTypeT=this.allowMoveType;
			stream.writeLen(allowMoveTypeT.length);
			for(int allowMoveTypeVI=0,allowMoveTypeVLen=allowMoveTypeT.length;allowMoveTypeVI<allowMoveTypeVLen;++allowMoveTypeVI)
			{
				int allowMoveTypeV=allowMoveTypeT[allowMoveTypeVI];
				stream.writeInt(allowMoveTypeV);
				
			}
		}
		else
		{
			nullObjError("allowMoveType");
		}
		
		stream.writeFloat(this.groundFriction);
		
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		if(allowDic!=null)
			return;
		
		allowDic=new boolean[MapBlockType.size][];
		allowDicT=new boolean[MapMoveType.size][];
		
		for(MapMoveTypeConfig v:MapMoveTypeConfig.getDic())
		{
			if(v!=null)
			{
				allowDicT[v.id]=new boolean[MapBlockType.size];
			}
		}
		
		for(MapBlockTypeConfig v:_dic)
		{
			if(v!=null)
			{
				boolean[] arr=allowDic[v.id]=new boolean[MapMoveType.size];
				
				for(int v2:v.allowMoveType)
				{
					arr[v2]=true;
					allowDicT[v2][v.id]=true;
				}
			}
		}
		
		groundFrictionDic=new float[MapBlockType.size];
		
		for(MapBlockTypeConfig v:_dic)
		{
			if(v!=null)
			{
				groundFrictionDic[v.id]=v.groundFriction;
			}
		}
	}
	
}
