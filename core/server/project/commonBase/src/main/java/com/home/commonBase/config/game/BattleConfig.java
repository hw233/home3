package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 副本基础表(generated by shine) */
public class BattleConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<BattleConfig> _dic;
	
	/** 副本ID */
	public int id;
	
	/** 副本进入阶段最长等待时间(s) */
	public int enterStateTime;
	
	/** 副本准备阶段最长等待时间(321倒计时)(s) */
	public int preStateTime;
	
	/** 副本过程持续时间(s) */
	public int runningStateTime;
	
	/** 副本完成阶段时间(出结果前)(s) */
	public int overStateTime;
	
	/** 是否独立当前属性buffCD */
	public boolean isIndependent;
	
	/** 副本结算阶段时间(s) */
	public int resultStateTime;
	
	/** 最长保留时间(s)(服务器用) */
	public int maxKeepTime;
	
	/** 获取 */
	public static BattleConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<BattleConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<BattleConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.enterStateTime=stream.readInt();
		
		this.preStateTime=stream.readInt();
		
		this.runningStateTime=stream.readInt();
		
		this.overStateTime=stream.readInt();
		
		this.resultStateTime=stream.readInt();
		
		this.isIndependent=stream.readBoolean();
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		if(runningStateTime>0)
		{
			//求和
			maxKeepTime=enterStateTime+preStateTime+runningStateTime+overStateTime+resultStateTime;
		}
		else
		{
			maxKeepTime=0;
		}
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.enterStateTime);
		
		stream.writeInt(this.preStateTime);
		
		stream.writeInt(this.runningStateTime);
		
		stream.writeInt(this.overStateTime);
		
		stream.writeInt(this.resultStateTime);
		
		stream.writeBoolean(this.isIndependent);
		
	}
	
}
