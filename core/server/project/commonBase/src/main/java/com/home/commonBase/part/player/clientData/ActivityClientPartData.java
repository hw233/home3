package com.home.commonBase.part.player.clientData;
import com.home.commonBase.baseData.BaseClientPartData;
import com.home.commonBase.constlist.generate.PlayerPartClientDataType;
import com.home.commonBase.data.activity.ActivityData;
import com.home.commonBase.part.player.data.ActivityPartData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** (generated by shine) */
public class ActivityClientPartData extends BaseClientPartData
{
	/** 数据组 */
	public IntObjectMap<ActivityData> datas;
	
	/** 数据类型ID */
	public static final int dataID=PlayerPartClientDataType.Activity;
	
	public ActivityClientPartData()
	{
		_dataID=PlayerPartClientDataType.Activity;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int datasLen=stream.readLen();
		if(this.datas!=null)
		{
			this.datas.clear();
			this.datas.ensureCapacity(datasLen);
		}
		else
		{
			this.datas=new IntObjectMap<ActivityData>(ActivityData[]::new,datasLen);
		}
		
		IntObjectMap<ActivityData> datasT=this.datas;
		for(int datasI=datasLen-1;datasI>=0;--datasI)
		{
			ActivityData datasV;
			datasV=(ActivityData)stream.readDataSimpleNotNull();
			
			datasT.put(datasV.id,datasV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.datas!=null)
		{
			stream.writeLen(this.datas.size());
			if(!this.datas.isEmpty())
			{
				Object[] datasVValues=this.datas.getValues();
				for(int datasVI=datasVValues.length-1;datasVI>=0;--datasVI)
				{
					if(datasVValues[datasVI]!=null)
					{
						ActivityData datasV=(ActivityData)datasVValues[datasVI];
						if(datasV!=null)
						{
							stream.writeDataSimpleNotNull(datasV);
						}
						else
						{
							nullObjError("datasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("datas");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof ActivityClientPartData))
			return;
		
		ActivityClientPartData mData=(ActivityClientPartData)data;
		
		this.datas=mData.datas;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof ActivityClientPartData))
			return;
		
		ActivityClientPartData mData=(ActivityClientPartData)data;
		
		if(mData.datas!=null)
		{
			if(this.datas!=null)
			{
				this.datas.clear();
				this.datas.ensureCapacity(mData.datas.size());
			}
			else
			{
				this.datas=new IntObjectMap<ActivityData>(ActivityData[]::new,mData.datas.size());
			}
			
			IntObjectMap<ActivityData> datasT=this.datas;
			if(!mData.datas.isEmpty())
			{
				Object[] datasVValues=mData.datas.getValues();
				for(int datasVI=datasVValues.length-1;datasVI>=0;--datasVI)
				{
					if(datasVValues[datasVI]!=null)
					{
						ActivityData datasV=(ActivityData)datasVValues[datasVI];
						ActivityData datasU;
						if(datasV!=null)
						{
							datasU=(ActivityData)datasV.clone();
						}
						else
						{
							datasU=null;
							nullObjError("datasU");
						}
						
						datasT.put(datasU.id,datasU);
					}
				}
			}
		}
		else
		{
			this.datas=null;
			nullObjError("datas");
		}
		
	}
	
	/** 从服务器数据上复制数据(潜拷,因InitClient会copy) */
	@Override
	protected void toCopyFromServer(BaseData data)
	{
		super.toCopyFromServer(data);
		if(!(data instanceof ActivityPartData))
			return;
		
		ActivityPartData mData=(ActivityPartData)data;
		
		this.datas=mData.datas;
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ActivityClientPartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int datasLen=stream.readLen();
		if(this.datas!=null)
		{
			this.datas.clear();
			this.datas.ensureCapacity(datasLen);
		}
		else
		{
			this.datas=new IntObjectMap<ActivityData>(ActivityData[]::new,datasLen);
		}
		
		IntObjectMap<ActivityData> datasT=this.datas;
		for(int datasI=datasLen-1;datasI>=0;--datasI)
		{
			ActivityData datasV;
			BaseData datasVT=stream.readDataFullNotNull();
			if(datasVT!=null)
			{
				if(datasVT instanceof ActivityData)
				{
					datasV=(ActivityData)datasVT;
				}
				else
				{
					datasV=new ActivityData();
					if(!(datasVT.getClass().isAssignableFrom(ActivityData.class)))
					{
						stream.throwTypeReadError(ActivityData.class,datasVT.getClass());
					}
					datasV.shadowCopy(datasVT);
				}
			}
			else
			{
				datasV=null;
			}
			
			datasT.put(datasV.id,datasV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.datas!=null)
		{
			stream.writeLen(this.datas.size());
			if(!this.datas.isEmpty())
			{
				Object[] datasVValues=this.datas.getValues();
				for(int datasVI=datasVValues.length-1;datasVI>=0;--datasVI)
				{
					if(datasVValues[datasVI]!=null)
					{
						ActivityData datasV=(ActivityData)datasVValues[datasVI];
						if(datasV!=null)
						{
							stream.writeDataFullNotNull(datasV);
						}
						else
						{
							nullObjError("datasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("datas");
		}
		
		stream.endWriteObj();
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		ActivityClientPartData mData=(ActivityClientPartData)data;
		if(mData.datas!=null)
		{
			if(this.datas==null)
				return false;
			if(this.datas.size()!=mData.datas.size())
				return false;
			IntObjectMap<ActivityData> datasR=mData.datas;
			if(!this.datas.isEmpty())
			{
				int datasKFreeValue=this.datas.getFreeValue();
				int[] datasKKeys=this.datas.getKeys();
				Object[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.length-1;datasKI>=0;--datasKI)
				{
					int datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						ActivityData datasV=(ActivityData)datasVValues[datasKI];
						ActivityData datasU=datasR.get(datasK);
						if(datasU!=null)
						{
							if(datasV==null)
								return false;
							if(!datasV.dataEquals(datasU))
								return false;
						}
						else
						{
							if(datasV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.datas!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("datas");
		writer.sb.append(':');
		writer.sb.append("Map<int,ActivityData>");
		if(this.datas!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.datas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.datas.isEmpty())
			{
				int datasKFreeValue=this.datas.getFreeValue();
				int[] datasKKeys=this.datas.getKeys();
				Object[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.length-1;datasKI>=0;--datasKI)
				{
					int datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						ActivityData datasV=(ActivityData)datasVValues[datasKI];
						writer.writeTabs();
						writer.sb.append(datasK);
						
						writer.sb.append(':');
						if(datasV!=null)
						{
							datasV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("ActivityData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.datas=new IntObjectMap<ActivityData>(ActivityData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.datas=null;
	}
	
}
