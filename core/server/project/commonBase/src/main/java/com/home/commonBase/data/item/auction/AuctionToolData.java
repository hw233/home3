package com.home.commonBase.data.item.auction;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.data.item.auction.AuctionItemRecordData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.pool.DataPool;

/** 拍卖行工具数据(generated by shine) */
public class AuctionToolData extends FuncToolData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.AuctionTool;
	
	/** 物品交易记录组 */
	public IntObjectMap<AuctionItemRecordData> itemRecords;
	
	public AuctionToolData()
	{
		_dataID=BaseDataType.AuctionTool;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AuctionToolData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int itemRecordsLen=stream.readLen();
		if(this.itemRecords!=null)
		{
			this.itemRecords.clear();
			this.itemRecords.ensureCapacity(itemRecordsLen);
		}
		else
		{
			this.itemRecords=new IntObjectMap<AuctionItemRecordData>(AuctionItemRecordData[]::new,itemRecordsLen);
		}
		
		IntObjectMap<AuctionItemRecordData> itemRecordsT=this.itemRecords;
		for(int itemRecordsI=itemRecordsLen-1;itemRecordsI>=0;--itemRecordsI)
		{
			AuctionItemRecordData itemRecordsV;
			BaseData itemRecordsVT=stream.readDataFullNotNull();
			if(itemRecordsVT!=null)
			{
				if(itemRecordsVT instanceof AuctionItemRecordData)
				{
					itemRecordsV=(AuctionItemRecordData)itemRecordsVT;
				}
				else
				{
					itemRecordsV=new AuctionItemRecordData();
					if(!(itemRecordsVT.getClass().isAssignableFrom(AuctionItemRecordData.class)))
					{
						stream.throwTypeReadError(AuctionItemRecordData.class,itemRecordsVT.getClass());
					}
					itemRecordsV.shadowCopy(itemRecordsVT);
				}
			}
			else
			{
				itemRecordsV=null;
			}
			
			itemRecordsT.put(itemRecordsV.id,itemRecordsV);
		}
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.itemRecords!=null)
		{
			stream.writeLen(this.itemRecords.size());
			if(!this.itemRecords.isEmpty())
			{
				Object[] itemRecordsVValues=this.itemRecords.getValues();
				for(int itemRecordsVI=itemRecordsVValues.length-1;itemRecordsVI>=0;--itemRecordsVI)
				{
					if(itemRecordsVValues[itemRecordsVI]!=null)
					{
						AuctionItemRecordData itemRecordsV=(AuctionItemRecordData)itemRecordsVValues[itemRecordsVI];
						if(itemRecordsV!=null)
						{
							stream.writeDataFullNotNull(itemRecordsV);
						}
						else
						{
							nullObjError("itemRecordsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("itemRecords");
		}
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int itemRecordsLen=stream.readLen();
		if(this.itemRecords!=null)
		{
			this.itemRecords.clear();
			this.itemRecords.ensureCapacity(itemRecordsLen);
		}
		else
		{
			this.itemRecords=new IntObjectMap<AuctionItemRecordData>(AuctionItemRecordData[]::new,itemRecordsLen);
		}
		
		IntObjectMap<AuctionItemRecordData> itemRecordsT=this.itemRecords;
		for(int itemRecordsI=itemRecordsLen-1;itemRecordsI>=0;--itemRecordsI)
		{
			AuctionItemRecordData itemRecordsV;
			itemRecordsV=(AuctionItemRecordData)stream.readDataSimpleNotNull();
			
			itemRecordsT.put(itemRecordsV.id,itemRecordsV);
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.itemRecords!=null)
		{
			stream.writeLen(this.itemRecords.size());
			if(!this.itemRecords.isEmpty())
			{
				Object[] itemRecordsVValues=this.itemRecords.getValues();
				for(int itemRecordsVI=itemRecordsVValues.length-1;itemRecordsVI>=0;--itemRecordsVI)
				{
					if(itemRecordsVValues[itemRecordsVI]!=null)
					{
						AuctionItemRecordData itemRecordsV=(AuctionItemRecordData)itemRecordsVValues[itemRecordsVI];
						if(itemRecordsV!=null)
						{
							stream.writeDataSimpleNotNull(itemRecordsV);
						}
						else
						{
							nullObjError("itemRecordsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("itemRecords");
		}
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		super.toShadowCopy(data);
		
		if(!(data instanceof AuctionToolData))
			return;
		
		AuctionToolData mData=(AuctionToolData)data;
		
		this.itemRecords=mData.itemRecords;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		super.toCopy(data);
		
		if(!(data instanceof AuctionToolData))
			return;
		
		AuctionToolData mData=(AuctionToolData)data;
		
		if(mData.itemRecords!=null)
		{
			if(this.itemRecords!=null)
			{
				this.itemRecords.clear();
				this.itemRecords.ensureCapacity(mData.itemRecords.size());
			}
			else
			{
				this.itemRecords=new IntObjectMap<AuctionItemRecordData>(AuctionItemRecordData[]::new,mData.itemRecords.size());
			}
			
			IntObjectMap<AuctionItemRecordData> itemRecordsT=this.itemRecords;
			if(!mData.itemRecords.isEmpty())
			{
				Object[] itemRecordsVValues=mData.itemRecords.getValues();
				for(int itemRecordsVI=itemRecordsVValues.length-1;itemRecordsVI>=0;--itemRecordsVI)
				{
					if(itemRecordsVValues[itemRecordsVI]!=null)
					{
						AuctionItemRecordData itemRecordsV=(AuctionItemRecordData)itemRecordsVValues[itemRecordsVI];
						AuctionItemRecordData itemRecordsU;
						if(itemRecordsV!=null)
						{
							itemRecordsU=(AuctionItemRecordData)itemRecordsV.clone();
						}
						else
						{
							itemRecordsU=null;
							nullObjError("itemRecordsU");
						}
						
						itemRecordsT.put(itemRecordsU.id,itemRecordsU);
					}
				}
			}
		}
		else
		{
			this.itemRecords=null;
			nullObjError("itemRecords");
		}
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		if(!super.toDataEquals(data))
			return false;
		
		AuctionToolData mData=(AuctionToolData)data;
		if(mData.itemRecords!=null)
		{
			if(this.itemRecords==null)
				return false;
			if(this.itemRecords.size()!=mData.itemRecords.size())
				return false;
			IntObjectMap<AuctionItemRecordData> itemRecordsR=mData.itemRecords;
			if(!this.itemRecords.isEmpty())
			{
				int itemRecordsKFreeValue=this.itemRecords.getFreeValue();
				int[] itemRecordsKKeys=this.itemRecords.getKeys();
				Object[] itemRecordsVValues=this.itemRecords.getValues();
				for(int itemRecordsKI=itemRecordsKKeys.length-1;itemRecordsKI>=0;--itemRecordsKI)
				{
					int itemRecordsK=itemRecordsKKeys[itemRecordsKI];
					if(itemRecordsK!=itemRecordsKFreeValue)
					{
						AuctionItemRecordData itemRecordsV=(AuctionItemRecordData)itemRecordsVValues[itemRecordsKI];
						AuctionItemRecordData itemRecordsU=itemRecordsR.get(itemRecordsK);
						if(itemRecordsU!=null)
						{
							if(itemRecordsV==null)
								return false;
							if(!itemRecordsV.dataEquals(itemRecordsU))
								return false;
						}
						else
						{
							if(itemRecordsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.itemRecords!=null)
				return false;
		}
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("itemRecords");
		writer.sb.append(':');
		writer.sb.append("Map<int,AuctionItemRecordData>");
		if(this.itemRecords!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.itemRecords.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.itemRecords.isEmpty())
			{
				int itemRecordsKFreeValue=this.itemRecords.getFreeValue();
				int[] itemRecordsKKeys=this.itemRecords.getKeys();
				Object[] itemRecordsVValues=this.itemRecords.getValues();
				for(int itemRecordsKI=itemRecordsKKeys.length-1;itemRecordsKI>=0;--itemRecordsKI)
				{
					int itemRecordsK=itemRecordsKKeys[itemRecordsKI];
					if(itemRecordsK!=itemRecordsKFreeValue)
					{
						AuctionItemRecordData itemRecordsV=(AuctionItemRecordData)itemRecordsVValues[itemRecordsKI];
						writer.writeTabs();
						writer.sb.append(itemRecordsK);
						
						writer.sb.append(':');
						if(itemRecordsV!=null)
						{
							itemRecordsV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("AuctionItemRecordData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		super.initDefault();
		
		this.itemRecords=new IntObjectMap<AuctionItemRecordData>(AuctionItemRecordData[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.itemRecords=null;
	}
	
}
