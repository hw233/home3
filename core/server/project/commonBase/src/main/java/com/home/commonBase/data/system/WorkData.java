package com.home.commonBase.data.system;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 基础事务数据(用dataID区分)(generated by shine) */
public class WorkData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.Work;
	
	/** 事务类型(见WorkType)(离线,在线,立即) */
	public int workType;
	
	/** 实例ID */
	public long workInstanceID;
	
	/** 发起者索引(type+id) */
	public int senderIndex;
	
	/** 发送者携带ID(做其他业务回执用) */
	public int senderCarryID;
	
	/** 时间戳 */
	public long timestamp;
	
	public long lastCheckTime;
	
	public WorkData prev;
	
	public WorkData next;
	
	public WorkData()
	{
		_dataID=BaseDataType.Work;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "WorkData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.timestamp=stream.readLong();
		
		this.workInstanceID=stream.readLong();
		
		this.workType=stream.readInt();
		
		this.senderIndex=stream.readInt();
		
		this.senderCarryID=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.timestamp);
		
		stream.writeLong(this.workInstanceID);
		
		stream.writeInt(this.workType);
		
		stream.writeInt(this.senderIndex);
		
		stream.writeInt(this.senderCarryID);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.timestamp=stream.readLong();
		
		this.workInstanceID=stream.readLong();
		
		this.workType=stream.readInt();
		
		this.senderIndex=stream.readInt();
		
		this.senderCarryID=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.timestamp);
		
		stream.writeLong(this.workInstanceID);
		
		stream.writeInt(this.workType);
		
		stream.writeInt(this.senderIndex);
		
		stream.writeInt(this.senderCarryID);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof WorkData))
			return;
		
		WorkData mData=(WorkData)data;
		
		this.timestamp=mData.timestamp;
		this.workInstanceID=mData.workInstanceID;
		this.workType=mData.workType;
		this.senderIndex=mData.senderIndex;
		this.senderCarryID=mData.senderCarryID;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof WorkData))
			return;
		
		WorkData mData=(WorkData)data;
		
		this.timestamp=mData.timestamp;
		
		this.workInstanceID=mData.workInstanceID;
		
		this.workType=mData.workType;
		
		this.senderIndex=mData.senderIndex;
		
		this.senderCarryID=mData.senderCarryID;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		WorkData mData=(WorkData)data;
		if(this.timestamp!=mData.timestamp)
			return false;
		
		if(this.workInstanceID!=mData.workInstanceID)
			return false;
		
		if(this.workType!=mData.workType)
			return false;
		
		if(this.senderIndex!=mData.senderIndex)
			return false;
		
		if(this.senderCarryID!=mData.senderCarryID)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("timestamp");
		writer.sb.append(':');
		writer.sb.append(this.timestamp);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("workInstanceID");
		writer.sb.append(':');
		writer.sb.append(this.workInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("workType");
		writer.sb.append(':');
		writer.sb.append(this.workType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("senderIndex");
		writer.sb.append(':');
		writer.sb.append(this.senderIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("senderCarryID");
		writer.sb.append(':');
		writer.sb.append(this.senderCarryID);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	public WorkCompleteData createCompleteData()
	{
		WorkCompleteData re=new WorkCompleteData();
		re.workInstanceID=this.workInstanceID;
		re.senderIndex=this.senderIndex;
		return re;
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.timestamp=0L;
		this.workInstanceID=0L;
		this.workType=0;
		this.senderIndex=0;
		this.senderCarryID=0;
	}
	
}
