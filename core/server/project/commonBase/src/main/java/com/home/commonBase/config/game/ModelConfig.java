package com.home.commonBase.config.game;
import com.home.commonBase.config.base.BaseConfig;
import com.home.commonBase.dataEx.scene.SRect;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SMap;

/** 单位模型表(generated by shine) */
public class ModelConfig extends BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<ModelConfig> _dic;
	
	/** 触碰半径 */
	public float collideRadius;
	
	/** 默认碰撞矩形(2D) */
	public float[] defaultHitRect;
	
	/** 单位高度 */
	public float height;
	
	/** 默认碰撞矩形转 */
	public SRect defaultHitRectT;
	
	/** 模型id */
	public int id;
	
	/** 获取 */
	public static ModelConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/** 设置字典 */
	public static void setDic(IntObjectMap<ModelConfig> dic)
	{
		_dic=dic;
	}
	
	/** 获取全部 */
	public static IntObjectMap<ModelConfig> getDic()
	{
		return _dic;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.collideRadius=stream.readFloat();
		
		int defaultHitRectLen=stream.readLen();
		if(this.defaultHitRect==null || this.defaultHitRect.length!=defaultHitRectLen)
		{
			this.defaultHitRect=new float[defaultHitRectLen];
		}
		float[] defaultHitRectT=this.defaultHitRect;
		for(int defaultHitRectI=0;defaultHitRectI<defaultHitRectLen;++defaultHitRectI)
		{
			float defaultHitRectV;
			defaultHitRectV=stream.readFloat();
			
			defaultHitRectT[defaultHitRectI]=defaultHitRectV;
		}
		
		this.height=stream.readFloat();
		
	}
	
	/** 读完表后处理 */
	@Override
	protected void afterReadConfig()
	{
		super.afterReadConfig();
		
		defaultHitRectT=SRect.createByConfig(defaultHitRect);
	}
	
	/** 读完所有表后处理 */
	public static void afterReadConfigAll()
	{
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeFloat(this.collideRadius);
		
		if(this.defaultHitRect!=null)
		{
			float[] defaultHitRectT=this.defaultHitRect;
			stream.writeLen(defaultHitRectT.length);
			for(int defaultHitRectVI=0,defaultHitRectVLen=defaultHitRectT.length;defaultHitRectVI<defaultHitRectVLen;++defaultHitRectVI)
			{
				float defaultHitRectV=defaultHitRectT[defaultHitRectVI];
				stream.writeFloat(defaultHitRectV);
				
			}
		}
		else
		{
			nullObjError("defaultHitRect");
		}
		
		stream.writeFloat(this.height);
		
	}
	
}
