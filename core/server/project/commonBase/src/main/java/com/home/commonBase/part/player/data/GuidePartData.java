package com.home.commonBase.part.player.data;
import com.home.commonBase.constlist.generate.PlayerPartDataType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 引导模块(generated by shine) */
public class GuidePartData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=PlayerPartDataType.Guide;
	
	/** 主引导步 */
	public int mainStep;
	
	public GuidePartData()
	{
		_dataID=PlayerPartDataType.Guide;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "GuidePartData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.mainStep=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.mainStep);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		this.mainStep=stream.readInt();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.mainStep);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof GuidePartData))
			return;
		
		GuidePartData mData=(GuidePartData)data;
		
		this.mainStep=mData.mainStep;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof GuidePartData))
			return;
		
		GuidePartData mData=(GuidePartData)data;
		
		this.mainStep=mData.mainStep;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		GuidePartData mData=(GuidePartData)data;
		if(this.mainStep!=mData.mainStep)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("mainStep");
		writer.sb.append(':');
		writer.sb.append(this.mainStep);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.mainStep=0;
	}
	
}
