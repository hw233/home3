package com.home.commonBase.data.login;
import com.home.commonBase.constlist.generate.BaseDataType;
import com.home.commonBase.data.social.roleGroup.RoleGroupSimpleData;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.LongObjectMap;
import com.home.shine.support.pool.DataPool;

/** 逻辑服登陆到逻辑服消息(发过去)(generated by shine) */
public class GameLoginToGameData extends BaseData
{
	/** 数据类型ID */
	public static final int dataID=BaseDataType.GameLoginToGame;
	
	/** 登录限制 */
	public boolean isLoginLimit;
	
	/** 玩家群数据组(key1:funcID,key2:groupID) */
	public IntObjectMap<LongObjectMap<RoleGroupSimpleData>> roleGroups;
	
	public GameLoginToGameData()
	{
		_dataID=BaseDataType.GameLoginToGame;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "GameLoginToGameData";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int roleGroupsLen=stream.readLen();
		if(this.roleGroups!=null)
		{
			this.roleGroups.clear();
			this.roleGroups.ensureCapacity(roleGroupsLen);
		}
		else
		{
			this.roleGroups=new IntObjectMap<LongObjectMap<RoleGroupSimpleData>>(LongObjectMap[]::new,roleGroupsLen);
		}
		
		IntObjectMap<LongObjectMap<RoleGroupSimpleData>> roleGroupsT=this.roleGroups;
		for(int roleGroupsI=roleGroupsLen-1;roleGroupsI>=0;--roleGroupsI)
		{
			int roleGroupsK;
			LongObjectMap<RoleGroupSimpleData> roleGroupsV;
			roleGroupsK=stream.readInt();
			
			int roleGroupsVLen=stream.readLen();
			roleGroupsV=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new,roleGroupsVLen);
			LongObjectMap<RoleGroupSimpleData> roleGroupsVT=roleGroupsV;
			for(int roleGroupsVI=roleGroupsVLen-1;roleGroupsVI>=0;--roleGroupsVI)
			{
				long roleGroupsVK;
				RoleGroupSimpleData roleGroupsVV;
				roleGroupsVK=stream.readLong();
				
				BaseData roleGroupsVVT=stream.readDataFullNotNull();
				if(roleGroupsVVT!=null)
				{
					if(roleGroupsVVT instanceof RoleGroupSimpleData)
					{
						roleGroupsVV=(RoleGroupSimpleData)roleGroupsVVT;
					}
					else
					{
						roleGroupsVV=new RoleGroupSimpleData();
						if(!(roleGroupsVVT.getClass().isAssignableFrom(RoleGroupSimpleData.class)))
						{
							stream.throwTypeReadError(RoleGroupSimpleData.class,roleGroupsVVT.getClass());
						}
						roleGroupsVV.shadowCopy(roleGroupsVVT);
					}
				}
				else
				{
					roleGroupsVV=null;
				}
				
				roleGroupsVT.put(roleGroupsVK,roleGroupsVV);
			}
			
			roleGroupsT.put(roleGroupsK,roleGroupsV);
		}
		
		this.isLoginLimit=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.roleGroups!=null)
		{
			stream.writeLen(this.roleGroups.size());
			if(!this.roleGroups.isEmpty())
			{
				int roleGroupsKFreeValue=this.roleGroups.getFreeValue();
				int[] roleGroupsKKeys=this.roleGroups.getKeys();
				Object[] roleGroupsVValues=this.roleGroups.getValues();
				for(int roleGroupsKI=roleGroupsKKeys.length-1;roleGroupsKI>=0;--roleGroupsKI)
				{
					int roleGroupsK=roleGroupsKKeys[roleGroupsKI];
					if(roleGroupsK!=roleGroupsKFreeValue)
					{
						LongObjectMap<RoleGroupSimpleData> roleGroupsV=(LongObjectMap<RoleGroupSimpleData>)roleGroupsVValues[roleGroupsKI];
						stream.writeInt(roleGroupsK);
						
						if(roleGroupsV!=null)
						{
							stream.writeLen(roleGroupsV.size());
							if(!roleGroupsV.isEmpty())
							{
								long roleGroupsVKFreeValue=roleGroupsV.getFreeValue();
								long[] roleGroupsVKKeys=roleGroupsV.getKeys();
								Object[] roleGroupsVVValues=roleGroupsV.getValues();
								for(int roleGroupsVKI=roleGroupsVKKeys.length-1;roleGroupsVKI>=0;--roleGroupsVKI)
								{
									long roleGroupsVK=roleGroupsVKKeys[roleGroupsVKI];
									if(roleGroupsVK!=roleGroupsVKFreeValue)
									{
										RoleGroupSimpleData roleGroupsVV=(RoleGroupSimpleData)roleGroupsVVValues[roleGroupsVKI];
										stream.writeLong(roleGroupsVK);
										
										if(roleGroupsVV!=null)
										{
											stream.writeDataFullNotNull(roleGroupsVV);
										}
										else
										{
											nullObjError("roleGroupsVV");
										}
										
									}
								}
							}
						}
						else
						{
							nullObjError("roleGroupsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("roleGroups");
		}
		
		stream.writeBoolean(this.isLoginLimit);
		
		stream.endWriteObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		int roleGroupsLen=stream.readLen();
		if(this.roleGroups!=null)
		{
			this.roleGroups.clear();
			this.roleGroups.ensureCapacity(roleGroupsLen);
		}
		else
		{
			this.roleGroups=new IntObjectMap<LongObjectMap<RoleGroupSimpleData>>(LongObjectMap[]::new,roleGroupsLen);
		}
		
		IntObjectMap<LongObjectMap<RoleGroupSimpleData>> roleGroupsT=this.roleGroups;
		for(int roleGroupsI=roleGroupsLen-1;roleGroupsI>=0;--roleGroupsI)
		{
			int roleGroupsK;
			LongObjectMap<RoleGroupSimpleData> roleGroupsV;
			roleGroupsK=stream.readInt();
			
			int roleGroupsVLen=stream.readLen();
			roleGroupsV=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new,roleGroupsVLen);
			LongObjectMap<RoleGroupSimpleData> roleGroupsVT=roleGroupsV;
			for(int roleGroupsVI=roleGroupsVLen-1;roleGroupsVI>=0;--roleGroupsVI)
			{
				long roleGroupsVK;
				RoleGroupSimpleData roleGroupsVV;
				roleGroupsVK=stream.readLong();
				
				roleGroupsVV=(RoleGroupSimpleData)stream.readDataSimpleNotNull();
				
				roleGroupsVT.put(roleGroupsVK,roleGroupsVV);
			}
			
			roleGroupsT.put(roleGroupsK,roleGroupsV);
		}
		
		this.isLoginLimit=stream.readBoolean();
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.roleGroups!=null)
		{
			stream.writeLen(this.roleGroups.size());
			if(!this.roleGroups.isEmpty())
			{
				int roleGroupsKFreeValue=this.roleGroups.getFreeValue();
				int[] roleGroupsKKeys=this.roleGroups.getKeys();
				Object[] roleGroupsVValues=this.roleGroups.getValues();
				for(int roleGroupsKI=roleGroupsKKeys.length-1;roleGroupsKI>=0;--roleGroupsKI)
				{
					int roleGroupsK=roleGroupsKKeys[roleGroupsKI];
					if(roleGroupsK!=roleGroupsKFreeValue)
					{
						LongObjectMap<RoleGroupSimpleData> roleGroupsV=(LongObjectMap<RoleGroupSimpleData>)roleGroupsVValues[roleGroupsKI];
						stream.writeInt(roleGroupsK);
						
						if(roleGroupsV!=null)
						{
							stream.writeLen(roleGroupsV.size());
							if(!roleGroupsV.isEmpty())
							{
								long roleGroupsVKFreeValue=roleGroupsV.getFreeValue();
								long[] roleGroupsVKKeys=roleGroupsV.getKeys();
								Object[] roleGroupsVVValues=roleGroupsV.getValues();
								for(int roleGroupsVKI=roleGroupsVKKeys.length-1;roleGroupsVKI>=0;--roleGroupsVKI)
								{
									long roleGroupsVK=roleGroupsVKKeys[roleGroupsVKI];
									if(roleGroupsVK!=roleGroupsVKFreeValue)
									{
										RoleGroupSimpleData roleGroupsVV=(RoleGroupSimpleData)roleGroupsVVValues[roleGroupsVKI];
										stream.writeLong(roleGroupsVK);
										
										if(roleGroupsVV!=null)
										{
											stream.writeDataSimpleNotNull(roleGroupsVV);
										}
										else
										{
											nullObjError("roleGroupsVV");
										}
										
									}
								}
							}
						}
						else
						{
							nullObjError("roleGroupsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("roleGroups");
		}
		
		stream.writeBoolean(this.isLoginLimit);
		
	}
	
	/** 复制(潜拷贝) */
	@Override
	protected void toShadowCopy(BaseData data)
	{
		if(!(data instanceof GameLoginToGameData))
			return;
		
		GameLoginToGameData mData=(GameLoginToGameData)data;
		
		this.roleGroups=mData.roleGroups;
		this.isLoginLimit=mData.isLoginLimit;
	}
	
	/** 复制(深拷贝) */
	@Override
	protected void toCopy(BaseData data)
	{
		if(!(data instanceof GameLoginToGameData))
			return;
		
		GameLoginToGameData mData=(GameLoginToGameData)data;
		
		if(mData.roleGroups!=null)
		{
			if(this.roleGroups!=null)
			{
				this.roleGroups.clear();
				this.roleGroups.ensureCapacity(mData.roleGroups.size());
			}
			else
			{
				this.roleGroups=new IntObjectMap<LongObjectMap<RoleGroupSimpleData>>(LongObjectMap[]::new,mData.roleGroups.size());
			}
			
			IntObjectMap<LongObjectMap<RoleGroupSimpleData>> roleGroupsT=this.roleGroups;
			if(!mData.roleGroups.isEmpty())
			{
				int roleGroupsKFreeValue=mData.roleGroups.getFreeValue();
				int[] roleGroupsKKeys=mData.roleGroups.getKeys();
				Object[] roleGroupsVValues=mData.roleGroups.getValues();
				for(int roleGroupsKI=roleGroupsKKeys.length-1;roleGroupsKI>=0;--roleGroupsKI)
				{
					int roleGroupsK=roleGroupsKKeys[roleGroupsKI];
					if(roleGroupsK!=roleGroupsKFreeValue)
					{
						LongObjectMap<RoleGroupSimpleData> roleGroupsV=(LongObjectMap<RoleGroupSimpleData>)roleGroupsVValues[roleGroupsKI];
						int roleGroupsW;
						LongObjectMap<RoleGroupSimpleData> roleGroupsU;
						roleGroupsW=roleGroupsK;
						
						if(roleGroupsV!=null)
						{
							roleGroupsU=new LongObjectMap<RoleGroupSimpleData>(RoleGroupSimpleData[]::new,roleGroupsV.size());
							LongObjectMap<RoleGroupSimpleData> roleGroupsUT=roleGroupsU;
							if(!roleGroupsV.isEmpty())
							{
								long roleGroupsUKFreeValue=roleGroupsV.getFreeValue();
								long[] roleGroupsUKKeys=roleGroupsV.getKeys();
								Object[] roleGroupsUVValues=roleGroupsV.getValues();
								for(int roleGroupsUKI=roleGroupsUKKeys.length-1;roleGroupsUKI>=0;--roleGroupsUKI)
								{
									long roleGroupsUK=roleGroupsUKKeys[roleGroupsUKI];
									if(roleGroupsUK!=roleGroupsUKFreeValue)
									{
										RoleGroupSimpleData roleGroupsUV=(RoleGroupSimpleData)roleGroupsUVValues[roleGroupsUKI];
										long roleGroupsUW;
										RoleGroupSimpleData roleGroupsUU;
										roleGroupsUW=roleGroupsUK;
										
										if(roleGroupsUV!=null)
										{
											roleGroupsUU=(RoleGroupSimpleData)roleGroupsUV.clone();
										}
										else
										{
											roleGroupsUU=null;
											nullObjError("roleGroupsUU");
										}
										
										roleGroupsUT.put(roleGroupsUW,roleGroupsUU);
									}
								}
							}
						}
						else
						{
							roleGroupsU=null;
							nullObjError("roleGroupsU");
						}
						
						roleGroupsT.put(roleGroupsW,roleGroupsU);
					}
				}
			}
		}
		else
		{
			this.roleGroups=null;
			nullObjError("roleGroups");
		}
		
		this.isLoginLimit=mData.isLoginLimit;
		
	}
	
	/** 是否数据一致 */
	@Override
	protected boolean toDataEquals(BaseData data)
	{
		GameLoginToGameData mData=(GameLoginToGameData)data;
		if(mData.roleGroups!=null)
		{
			if(this.roleGroups==null)
				return false;
			if(this.roleGroups.size()!=mData.roleGroups.size())
				return false;
			IntObjectMap<LongObjectMap<RoleGroupSimpleData>> roleGroupsR=mData.roleGroups;
			if(!this.roleGroups.isEmpty())
			{
				int roleGroupsKFreeValue=this.roleGroups.getFreeValue();
				int[] roleGroupsKKeys=this.roleGroups.getKeys();
				Object[] roleGroupsVValues=this.roleGroups.getValues();
				for(int roleGroupsKI=roleGroupsKKeys.length-1;roleGroupsKI>=0;--roleGroupsKI)
				{
					int roleGroupsK=roleGroupsKKeys[roleGroupsKI];
					if(roleGroupsK!=roleGroupsKFreeValue)
					{
						LongObjectMap<RoleGroupSimpleData> roleGroupsV=(LongObjectMap<RoleGroupSimpleData>)roleGroupsVValues[roleGroupsKI];
						LongObjectMap<RoleGroupSimpleData> roleGroupsU=roleGroupsR.get(roleGroupsK);
						if(roleGroupsU!=null)
						{
							if(roleGroupsV==null)
								return false;
							if(roleGroupsV.size()!=roleGroupsU.size())
								return false;
							LongObjectMap<RoleGroupSimpleData> roleGroupsVR=roleGroupsU;
							if(!roleGroupsV.isEmpty())
							{
								long roleGroupsVKFreeValue=roleGroupsV.getFreeValue();
								long[] roleGroupsVKKeys=roleGroupsV.getKeys();
								Object[] roleGroupsVVValues=roleGroupsV.getValues();
								for(int roleGroupsVKI=roleGroupsVKKeys.length-1;roleGroupsVKI>=0;--roleGroupsVKI)
								{
									long roleGroupsVK=roleGroupsVKKeys[roleGroupsVKI];
									if(roleGroupsVK!=roleGroupsVKFreeValue)
									{
										RoleGroupSimpleData roleGroupsVV=(RoleGroupSimpleData)roleGroupsVVValues[roleGroupsVKI];
										RoleGroupSimpleData roleGroupsVU=roleGroupsVR.get(roleGroupsVK);
										if(roleGroupsVU!=null)
										{
											if(roleGroupsVV==null)
												return false;
											if(!roleGroupsVV.dataEquals(roleGroupsVU))
												return false;
										}
										else
										{
											if(roleGroupsVV!=null)
												return false;
										}
										
									}
								}
							}
						}
						else
						{
							if(roleGroupsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.roleGroups!=null)
				return false;
		}
		
		if(this.isLoginLimit!=mData.isLoginLimit)
			return false;
		
		return true;
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.append("roleGroups");
		writer.sb.append(':');
		writer.sb.append("Map<int,LongObjectMap<RoleGroupSimpleData>>");
		if(this.roleGroups!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.roleGroups.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.roleGroups.isEmpty())
			{
				int roleGroupsKFreeValue=this.roleGroups.getFreeValue();
				int[] roleGroupsKKeys=this.roleGroups.getKeys();
				Object[] roleGroupsVValues=this.roleGroups.getValues();
				for(int roleGroupsKI=roleGroupsKKeys.length-1;roleGroupsKI>=0;--roleGroupsKI)
				{
					int roleGroupsK=roleGroupsKKeys[roleGroupsKI];
					if(roleGroupsK!=roleGroupsKFreeValue)
					{
						LongObjectMap<RoleGroupSimpleData> roleGroupsV=(LongObjectMap<RoleGroupSimpleData>)roleGroupsVValues[roleGroupsKI];
						writer.writeTabs();
						writer.sb.append(roleGroupsK);
						
						writer.sb.append(':');
						writer.sb.append("Map<long,RoleGroupSimpleData>");
						if(roleGroupsV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(roleGroupsV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!roleGroupsV.isEmpty())
							{
								long roleGroupsVKFreeValue=roleGroupsV.getFreeValue();
								long[] roleGroupsVKKeys=roleGroupsV.getKeys();
								Object[] roleGroupsVVValues=roleGroupsV.getValues();
								for(int roleGroupsVKI=roleGroupsVKKeys.length-1;roleGroupsVKI>=0;--roleGroupsVKI)
								{
									long roleGroupsVK=roleGroupsVKKeys[roleGroupsVKI];
									if(roleGroupsVK!=roleGroupsVKFreeValue)
									{
										RoleGroupSimpleData roleGroupsVV=(RoleGroupSimpleData)roleGroupsVVValues[roleGroupsVKI];
										writer.writeTabs();
										writer.sb.append(roleGroupsVK);
										
										writer.sb.append(':');
										if(roleGroupsVV!=null)
										{
											roleGroupsVV.writeDataString(writer);
										}
										else
										{
											writer.sb.append("RoleGroupSimpleData=null");
										}
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isLoginLimit");
		writer.sb.append(':');
		writer.sb.append(this.isLoginLimit);
		
		writer.writeEnter();
	}
	
	/** 初始化初值 */
	@Override
	public void initDefault()
	{
		this.roleGroups=new IntObjectMap<LongObjectMap<RoleGroupSimpleData>>(LongObjectMap[]::new);
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		this.roleGroups=null;
		this.isLoginLimit=false;
	}
	
}
