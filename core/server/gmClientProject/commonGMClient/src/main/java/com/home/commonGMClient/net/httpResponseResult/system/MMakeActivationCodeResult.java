package com.home.commonGMClient.net.httpResponseResult.system;
import com.home.commonGMClient.constlist.generate.ManagerHttpResponseResultType;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.collection.SList;

/** 生成激活码返回(generated by shine) */
public class MMakeActivationCodeResult extends BaseData
{
	/** 激活码组 */
	public String[] codeArr;
	
	/** 数据类型ID */
	public static final int dataID=ManagerHttpResponseResultType.MMakeActivationCode;
	
	public MMakeActivationCodeResult()
	{
		_dataID=ManagerHttpResponseResultType.MMakeActivationCode;
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		int codeArrLen=stream.readLen();
		if(this.codeArr==null || this.codeArr.length!=codeArrLen)
		{
			this.codeArr=new String[codeArrLen];
		}
		String[] codeArrT=this.codeArr;
		for(int codeArrI=0;codeArrI<codeArrLen;++codeArrI)
		{
			String codeArrV;
			codeArrV=stream.readUTF();
			
			codeArrT[codeArrI]=codeArrV;
		}
		
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.codeArr!=null)
		{
			String[] codeArrT=this.codeArr;
			stream.writeLen(codeArrT.length);
			for(int codeArrVI=0,codeArrVLen=codeArrT.length;codeArrVI<codeArrVLen;++codeArrVI)
			{
				String codeArrV=codeArrT[codeArrVI];
				stream.writeUTF(codeArrV);
				
			}
		}
		else
		{
			nullObjError("codeArr");
		}
		
	}
	
}
