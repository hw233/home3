package com.home.commonClient.net.response.system;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.base.GameResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 客户端热更配置消息(generated by shine) */
public class ClientHotfixConfigResponse extends GameResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.ClientHotfixConfig;
	
	/** 热更数据 */
	public byte[] bytes;
	
	public ClientHotfixConfigResponse()
	{
		_dataID=GameResponseType.ClientHotfixConfig;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "ClientHotfixConfigResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int bytesLen=stream.readLen();
		this.bytes=stream.readByteArr(bytesLen);
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int bytesLen=stream.readLen();
		this.bytes=stream.readByteArr(bytesLen);
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("bytes");
		writer.sb.append(':');
		writer.sb.append("Array<byte>");
		if(this.bytes!=null)
		{
			byte[] bytesT=this.bytes;
			int bytesLen=bytesT.length;
			writer.sb.append('(');
			writer.sb.append(bytesLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int bytesI=0;bytesI<bytesLen;++bytesI)
			{
				byte bytesV=bytesT[bytesI];
				writer.writeTabs();
				writer.sb.append(bytesI);
				writer.sb.append(':');
				writer.sb.append(bytesV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.bytes=null;
	}
	
}
