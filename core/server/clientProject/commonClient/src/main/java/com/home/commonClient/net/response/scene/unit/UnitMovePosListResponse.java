package com.home.commonClient.net.response.scene.unit;
import com.home.commonBase.data.scene.base.PosData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.response.scene.base.UnitSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 单位移动点组消息(generated by shine) */
public class UnitMovePosListResponse extends UnitSResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.UnitMovePosList;
	
	/** 移动类型 */
	public int type;
	
	/** 服务器首点移动时间(同步用) */
	public int moveTime;
	
	/** 位置组 */
	public SList<PosData> targets;
	
	public UnitMovePosListResponse()
	{
		_dataID=GameResponseType.UnitMovePosList;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		scene.getFightUnitAbs(instanceID).move.onServerMovePosList(type,targets);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "UnitMovePosListResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.type=stream.readInt();
		
		int targetsLen=stream.readLen();
		if(this.targets!=null)
		{
			this.targets.clear();
			this.targets.ensureCapacity(targetsLen);
		}
		else
		{
			this.targets=new SList<PosData>(PosData[]::new,targetsLen);
		}
		
		SList<PosData> targetsT=this.targets;
		for(int targetsI=targetsLen-1;targetsI>=0;--targetsI)
		{
			PosData targetsV;
			targetsV=new PosData();
			targetsV.readBytesFull(stream);
			
			targetsT.add(targetsV);
		}
		
		this.moveTime=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.type=stream.readInt();
		
		int targetsLen=stream.readLen();
		if(this.targets!=null)
		{
			this.targets.clear();
			this.targets.ensureCapacity(targetsLen);
		}
		else
		{
			this.targets=new SList<PosData>(PosData[]::new,targetsLen);
		}
		
		SList<PosData> targetsT=this.targets;
		for(int targetsI=targetsLen-1;targetsI>=0;--targetsI)
		{
			PosData targetsV;
			targetsV=new PosData();
			targetsV.readBytesSimple(stream);
			
			targetsT.add(targetsV);
		}
		
		this.moveTime=stream.readInt();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("targets");
		writer.sb.append(':');
		writer.sb.append("List<PosData>");
		if(this.targets!=null)
		{
			SList<PosData> targetsT=this.targets;
			int targetsLen=targetsT.size();
			writer.sb.append('(');
			writer.sb.append(targetsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int targetsI=0;targetsI<targetsLen;++targetsI)
			{
				PosData targetsV=targetsT.get(targetsI);
				writer.writeTabs();
				writer.sb.append(targetsI);
				writer.sb.append(':');
				if(targetsV!=null)
				{
					targetsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("PosData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("moveTime");
		writer.sb.append(':');
		writer.sb.append(this.moveTime);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.type=0;
		this.targets=null;
		this.moveTime=0;
	}
	
}
