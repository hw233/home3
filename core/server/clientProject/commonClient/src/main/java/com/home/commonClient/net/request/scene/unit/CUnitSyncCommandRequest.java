package com.home.commonClient.net.request.scene.unit;
import com.home.commonBase.data.scene.base.PosDirData;
import com.home.commonClient.constlist.generate.GameRequestType;
import com.home.commonClient.net.request.scene.base.CUnitRRequest;
import com.home.commonClient.net.request.scene.base.SceneRRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 单位同步参数指令(generated by shine) */
public class CUnitSyncCommandRequest extends CUnitRRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.CUnitSyncCommand;
	
	/** 当前位置 */
	public PosDirData posDir;
	
	/** 指令 */
	public int type;
	
	/** 整形参数组 */
	public int[] ints;
	
	/** float参数组 */
	public float[] floats;
	
	public CUnitSyncCommandRequest()
	{
		_dataID=GameRequestType.CUnitSyncCommand;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		PosDirData posDirTemp=posDir;
		if(posDirTemp!=null)
		{
			this.posDir=new PosDirData();
			this.posDir.copy(posDirTemp);
		}
		else
		{
			this.posDir=null;
		}
		
		int[] intsTemp=ints;
		if(intsTemp!=null)
		{
			int[] intsR=intsTemp;
			int intsLen=intsR.length;
			this.ints=new int[intsLen];
			BytesControl.arrayCopy(intsTemp,this.ints,intsLen);
		}
		else
		{
			this.ints=null;
		}
		
		float[] floatsTemp=floats;
		if(floatsTemp!=null)
		{
			float[] floatsR=floatsTemp;
			int floatsLen=floatsR.length;
			this.floats=new float[floatsLen];
			BytesControl.arrayCopy(floatsTemp,this.floats,floatsLen);
		}
		else
		{
			this.floats=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "CUnitSyncCommandRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("posDir");
		writer.sb.append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("type");
		writer.sb.append(':');
		writer.sb.append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("ints");
		writer.sb.append(':');
		writer.sb.append("Array<int>");
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			int intsLen=intsT.length;
			writer.sb.append('(');
			writer.sb.append(intsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int intsI=0;intsI<intsLen;++intsI)
			{
				int intsV=intsT[intsI];
				writer.writeTabs();
				writer.sb.append(intsI);
				writer.sb.append(':');
				writer.sb.append(intsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("floats");
		writer.sb.append(':');
		writer.sb.append("Array<float>");
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			int floatsLen=floatsT.length;
			writer.sb.append('(');
			writer.sb.append(floatsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int floatsI=0;floatsI<floatsLen;++floatsI)
			{
				float floatsV=floatsT[floatsI];
				writer.writeTabs();
				writer.sb.append(floatsI);
				writer.sb.append(':');
				writer.sb.append(floatsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.posDir!=null)
		{
			stream.writeBoolean(true);
			this.posDir.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			stream.writeBoolean(true);
			int[] intsT=this.ints;
			stream.writeLen(intsT.length);
			for(int intsVI=0,intsVLen=intsT.length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.floats!=null)
		{
			stream.writeBoolean(true);
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.length);
			for(int floatsVI=0,floatsVLen=floatsT.length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.posDir!=null)
		{
			stream.writeBoolean(true);
			this.posDir.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			stream.writeBoolean(true);
			int[] intsT=this.ints;
			stream.writeLen(intsT.length);
			for(int intsVI=0,intsVLen=intsT.length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.floats!=null)
		{
			stream.writeBoolean(true);
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.length);
			for(int floatsVI=0,floatsVLen=floatsT.length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.posDir!=null)
		{
			this.posDir.release(pool);
			this.posDir=null;
		}
		this.type=0;
	}
	
	/** 创建实例 */
	public static CUnitSyncCommandRequest create(int instanceID,PosDirData posDir,int type,int[] ints,float[] floats)
	{
		CUnitSyncCommandRequest re=(CUnitSyncCommandRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.posDir=posDir;
		re.type=type;
		re.ints=ints;
		re.floats=floats;
		return re;
	}
	
}
