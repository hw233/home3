package com.home.commonClient.net.response.func.rank;
import com.home.commonBase.data.social.rank.RankData;
import com.home.commonBase.data.system.KeyData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.base.GameResponse;
import com.home.commonClient.net.response.func.base.FuncSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.IntSet;
import com.home.shine.support.pool.DataPool;

/** 功能-回复查询每页排行(generated by shine) */
public class FuncReGetPageShowResponse extends FuncSResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.FuncReGetPageShow;
	
	/** 参数 */
	public int arg;
	
	/** 页码 */
	public int page;
	
	/** 数据组 */
	public IntObjectMap<KeyData> dic;
	
	/** 改变页码组 */
	public IntSet changePageSet;
	
	public FuncReGetPageShowResponse()
	{
		_dataID=GameResponseType.FuncReGetPageShow;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		me.func.getPageShowTool(funcID).onReceivePage(page,dic,changePageSet);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncReGetPageShowResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.page=stream.readInt();
		
		this.arg=stream.readInt();
		
		if(stream.readBoolean())
		{
			int dicLen=stream.readLen();
			if(this.dic!=null)
			{
				this.dic.clear();
				this.dic.ensureCapacity(dicLen);
			}
			else
			{
				this.dic=new IntObjectMap<KeyData>(KeyData[]::new,dicLen);
			}
			
			IntObjectMap<KeyData> dicT=this.dic;
			for(int dicI=dicLen-1;dicI>=0;--dicI)
			{
				int dicK;
				KeyData dicV;
				dicK=stream.readInt();
				
				if(stream.readBoolean())
				{
					BaseData dicVT=stream.readDataFullNotNull();
					if(dicVT!=null)
					{
						if(dicVT instanceof KeyData)
						{
							dicV=(KeyData)dicVT;
						}
						else
						{
							dicV=new KeyData();
							if(!(dicVT.getClass().isAssignableFrom(KeyData.class)))
							{
								stream.throwTypeReadError(KeyData.class,dicVT.getClass());
							}
							dicV.shadowCopy(dicVT);
						}
					}
					else
					{
						dicV=null;
					}
				}
				else
				{
					dicV=null;
				}
				
				dicT.put(dicK,dicV);
			}
		}
		else
		{
			this.dic=null;
		}
		
		if(stream.readBoolean())
		{
			int changePageSetLen=stream.readLen();
			if(this.changePageSet!=null)
			{
				this.changePageSet.clear();
				this.changePageSet.ensureCapacity(changePageSetLen);
			}
			else
			{
				this.changePageSet=new IntSet(changePageSetLen);
			}
			
			IntSet changePageSetT=this.changePageSet;
			for(int changePageSetI=changePageSetLen-1;changePageSetI>=0;--changePageSetI)
			{
				int changePageSetV;
				changePageSetV=stream.readInt();
				
				changePageSetT.add(changePageSetV);
			}
		}
		else
		{
			this.changePageSet=null;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.page=stream.readInt();
		
		this.arg=stream.readInt();
		
		if(stream.readBoolean())
		{
			int dicLen=stream.readLen();
			if(this.dic!=null)
			{
				this.dic.clear();
				this.dic.ensureCapacity(dicLen);
			}
			else
			{
				this.dic=new IntObjectMap<KeyData>(KeyData[]::new,dicLen);
			}
			
			IntObjectMap<KeyData> dicT=this.dic;
			for(int dicI=dicLen-1;dicI>=0;--dicI)
			{
				int dicK;
				KeyData dicV;
				dicK=stream.readInt();
				
				if(stream.readBoolean())
				{
					dicV=(KeyData)stream.readDataSimpleNotNull();
				}
				else
				{
					dicV=null;
				}
				
				dicT.put(dicK,dicV);
			}
		}
		else
		{
			this.dic=null;
		}
		
		if(stream.readBoolean())
		{
			int changePageSetLen=stream.readLen();
			if(this.changePageSet!=null)
			{
				this.changePageSet.clear();
				this.changePageSet.ensureCapacity(changePageSetLen);
			}
			else
			{
				this.changePageSet=new IntSet(changePageSetLen);
			}
			
			IntSet changePageSetT=this.changePageSet;
			for(int changePageSetI=changePageSetLen-1;changePageSetI>=0;--changePageSetI)
			{
				int changePageSetV;
				changePageSetV=stream.readInt();
				
				changePageSetT.add(changePageSetV);
			}
		}
		else
		{
			this.changePageSet=null;
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("page");
		writer.sb.append(':');
		writer.sb.append(this.page);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg");
		writer.sb.append(':');
		writer.sb.append(this.arg);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("dic");
		writer.sb.append(':');
		writer.sb.append("Map<int,KeyData>");
		if(this.dic!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.dic.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.dic.isEmpty())
			{
				int dicKFreeValue=this.dic.getFreeValue();
				int[] dicKKeys=this.dic.getKeys();
				Object[] dicVValues=this.dic.getValues();
				for(int dicKI=dicKKeys.length-1;dicKI>=0;--dicKI)
				{
					int dicK=dicKKeys[dicKI];
					if(dicK!=dicKFreeValue)
					{
						KeyData dicV=(KeyData)dicVValues[dicKI];
						writer.writeTabs();
						writer.sb.append(dicK);
						
						writer.sb.append(':');
						if(dicV!=null)
						{
							dicV.writeDataString(writer);
						}
						else
						{
							writer.sb.append("KeyData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("changePageSet");
		writer.sb.append(':');
		writer.sb.append("Set<int>");
		if(this.changePageSet!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.changePageSet.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.changePageSet.isEmpty())
			{
				int changePageSetVFreeValue=this.changePageSet.getFreeValue();
				int[] changePageSetVKeys=this.changePageSet.getKeys();
				for(int changePageSetVI=changePageSetVKeys.length-1;changePageSetVI>=0;--changePageSetVI)
				{
					int changePageSetV=changePageSetVKeys[changePageSetVI];
					if(changePageSetV!=changePageSetVFreeValue)
					{
						writer.writeTabs();
						writer.sb.append(changePageSetV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.page=0;
		this.arg=0;
		this.dic=null;
		this.changePageSet=null;
	}
	
}
