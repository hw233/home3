package com.home.commonClient.part.player.part;
import com.home.commonBase.config.game.CostConfig;
import com.home.commonBase.config.game.ItemConfig;
import com.home.commonBase.config.game.RewardConfig;
import com.home.commonBase.constlist.generate.CallWayType;
import com.home.commonBase.constlist.generate.ClientRandomSeedType;
import com.home.commonBase.data.item.ItemData;
import com.home.commonBase.data.item.UseItemArgData;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.part.player.clientData.BagClientPartData;
import com.home.commonClient.control.LogicExecutor;
import com.home.commonClient.part.player.base.PlayerBasePart;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.data.DIntData;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.collection.SList;

/** 背包(generated by shine) */
public class BagPart extends PlayerBasePart
{
	/** 数据 */
	private BagClientPartData _d;
	
	private IntIntMap _tempMap=new IntIntMap();
	
	/** 临时物品组 */
	private SList<ItemData> _tempItems=new SList<ItemData>();
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(BagClientPartData)data;
	}
	
	/** 获取数据 */
	public BagClientPartData getPartData()
	{
		return _d;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new BagClientPartData();
	}
	
	public ItemData createItemByType(int type)
	{
		ItemData re;
		
		LogicExecutor executor;
		
		if((executor=me.system.getExecutor())!=null)
		{
			re=executor.createItemData(type);
		}
		else
		{
			re=BaseC.factory.createItemData();
			re.initIdentityByType(type);
		}
		
		return re;
	}
	
	public ItemData createItem(int id,int num)
	{
		ItemConfig config=ItemConfig.get(id);
		
		ItemData data=createItemByType(config.type);
		data.id=id;
		data.num=num;
		data.config=config;
		//失效时间
		data.disableTime=config.enableTimeT.getNextTime();
		
		//额外初始化
		BaseC.logic.initItem(data,id);
		
		return data;
	}
	
	public void releaseItem(ItemData data)
	{
		LogicExecutor executor;
		
		if((executor=me.system.getExecutor())!=null)
		{
			executor.releaseItemData(data);
		}
	}
	
	public ItemData getItem(int index)
	{
		Ctrl.throwError("must override");
		return null;
	}
	
	public boolean hasFreeGrid(int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean hasItemPlace(ItemData data)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean hasItemPlace(int id,int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean hasItemPlace(SList<ItemData> list)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有物品位置 */
	public boolean hasItemPlace(DIntData[] dataArr)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public int getItemNum(int itemID)
	{
		Ctrl.throwError("must override");
		return 0;
	}
	
	public boolean addItem(ItemData data,int way)
	{
		int num=data.num;
		
		if(toAddItem(data,way))
		{
			toLogAddItem(data.id,num,way);
			return true;
		}
		
		return false;
	}
	
	protected boolean toAddItem(ItemData data,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean addItem(int id,int way)
	{
		return addItem(id,1,way);
	}
	
	public boolean addItem(int id,int num,int way)
	{
		if(toAddItem(id,num,way))
		{
			toLogAddItem(id,num,way);
			return true;
		}
		
		return false;
	}
	
	protected boolean toAddItem(int id,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean addNewItemToIndex(int index,ItemData data,int way)
	{
		if(toAddNewItemToIndex(index,data,way))
		{
			toLogAddItem(data.id,data.num,way);
			return true;
		}
		
		return false;
	}
	
	protected boolean toAddNewItemToIndex(int index,ItemData data,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	private void toLogTempMap(int way)
	{
		//		int free=_tempMap.getFreeValue();
		//		long[] tab=_tempMap.getTable();
		//		long entry;
		//		int key;
		//
		//		for(int i=(tab.length) - 1;i >= 0;--i)
		//		{
		//			if((key=((int)(entry=tab[i])))!=free)
		//			{
		//				toLogAddItem(key,(int)(entry >>> 32),way);
		//			}
		//		}
		//
		//		_tempMap.clear();
	}
	
	private void toLogTempMapToMail(int way)
	{
		//		int free=_tempMap.getFreeValue();
		//		long[] tab=_tempMap.getTable();
		//		long entry;
		//		int key;
		//
		//		for(int i=(tab.length) - 1;i >= 0;--i)
		//		{
		//			if((key=((int)(entry=tab[i])))!=free)
		//			{
		//				toLogAddItemToMail(key,(int)(entry >>> 32),way);
		//			}
		//		}
		//
		//		_tempMap.clear();
	}
	
	public boolean addItems(SList<ItemData> list,int way)
	{
		_tempMap.clear();
		ItemData data;
		for(int i=list.size()-1;i>=0;--i)
		{
			_tempMap.addValue((data=list.get(i)).id,data.num);
		}
		
		if(toAddItems(list,way))
		{
			toLogTempMap(way);
			return true;
		}
		else
		{
			_tempMap.clear();
			return false;
		}
	}
	
	public void addItemsAbs(SList<ItemData> list,int way)
	{
		_tempMap.clear();
		ItemData data;
		for(int i=list.size()-1;i>=0;--i)
		{
			_tempMap.addValue((data=list.get(i)).id,data.num);
		}
		
		if(toAddItems(list,way))
		{
			toLogTempMap(way);
		}
		else
		{
			Ctrl.throwError("不该出现背包空间不足");
			// me.mail.addMailForItem(list,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected boolean toAddItems(SList<ItemData> list,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean addItems(DIntData[] list,int way)
	{
		_tempMap.clear();
		for(int i=list.length-1;i>=0;--i)
		{
			_tempMap.addValue(list[i].key,list[i].value);
		}
		
		if(toAddItems(list,way))
		{
			toLogTempMap(way);
			return true;
		}
		else
		{
			_tempMap.clear();
			return false;
		}
	}
	
	public void addItemsAbs(DIntData[] list,int way)
	{
		_tempMap.clear();
		for(int i=list.length-1;i>=0;--i)
		{
			_tempMap.addValue(list[i].key,list[i].value);
		}
		
		if(toAddItems(list,way))
		{
			toLogTempMap(way);
		}
		else
		{
			Ctrl.throwError("不该出现背包空间不足");
			// me.mail.addMailForItem(list,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected boolean toAddItems(DIntData[] list,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean containsItem(int id)
	{
		return containsItem(id,1);
	}
	
	public boolean containsItem(int id,int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 是否有指定物品组(不考虑id重复) */
	public boolean containsItems(DIntData[] items)
	{
		for(DIntData v:items)
		{
			if(!containsItem(v.key,v.value))
				return false;
		}
		
		return true;
	}
	
	/** 是否有指定物品组(不考虑id重复) */
	public boolean containsItems(DIntData[] items,int num)
	{
		for(DIntData v:items)
		{
			if(!containsItem(v.key,v.value*num))
				return false;
		}
		
		return true;
	}
	
	public boolean removeItem(int id,int way)
	{
		return removeItem(id,1,way);
	}
	
	public boolean removeItem(int id,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean removeItemByIndex(int index,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean removeItemByIndex(int index,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/** 移除道具组(会回收) */
	public boolean removeItems(DIntData[] items,int num,int way)
	{
		if(toRemoveItems(items,num,way))
		{
			for(DIntData v:items)
			{
				toLogRemoveItem(v.key,v.value*num,way);
			}
			
			return true;
		}
		
		return false;
	}
	
	protected boolean toRemoveItems(DIntData[] items,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public void cleanUp()
	{
	
	}
	
	public void printBag()
	{
	
	}
	
	public boolean hasRewardPlace(int rewardID)
	{
		return hasFreeGrid(RewardConfig.get(rewardID).needGrid);
	}
	
	public boolean addReward(int rewardID,int way)
	{
		RewardConfig config=RewardConfig.get(rewardID);
		
		//格子数不足
		if(!hasFreeGrid(config.needGrid))
		{
			return false;
		}
		
		//添加物品ok
		if(!addItems(config.items,way))
		{
			me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
			return false;
		}
		
		if(config.randomListID>0)
		{
			randomItemList(_tempItems,config.randomListID);
			
			if(!addItems(_tempItems,way))
			{
				_tempItems.clear();
				
				me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
				return false;
			}
		}
		
		me.role.addCurrencies(config.currency,way);
		
		onAddReward(way,rewardID,_tempItems.isEmpty() ? null : _tempItems);
		
		_tempItems.clear();
		
		return true;
	}
	
	public void addRewardAbs(int rewardID,int way)
	{
		RewardConfig config=RewardConfig.get(rewardID);
		
		me.role.addCurrencies(config.currency,way);
		
		addItemsAbs(config.items,way);
		
		if(config.randomListID>0)
		{
			randomItemList(_tempItems,config.randomListID);
			
			addItemsAbs(_tempItems,way);
		}
		
		onAddReward(way,rewardID,_tempItems.isEmpty() ? null : _tempItems);
		
		_tempItems.clear();
	}
	
	/** 是否有某cost的所需 */
	public boolean hasCost(int costID)
	{
		CostConfig config=CostConfig.get(costID);
		
		if(!me.role.hasCurrencies(config.currency))
			return false;
		
		if(!containsItems(config.items))
			return false;
		
		return true;
	}
	
	/** 是否有某cost num次的所需 */
	public boolean hasCost(int costID,int num)
	{
		CostConfig config=CostConfig.get(costID);
		
		if(!me.role.hasCurrencies(config.currency,num))
			return false;
		
		if(!containsItems(config.items,num))
			return false;
		
		return true;
	}
	
	public ItemData randomItem(int randomItemConfigID)
	{
		return BaseC.logic.randomItem(randomItemConfigID,me, ClientRandomSeedType.Client);
	}
	
	public void randomItemList(SList<ItemData> list,int randItemListConfigID)
	{
		BaseC.logic.randomItemList(list,randItemListConfigID,me);
	}
	
	public boolean checkItemUseConditions(ItemData data,int num,UseItemArgData arg,boolean needNotice)
	{
		int[][] conditions;
		
		if((conditions=data.config.useConditions)!=null)
		{
			for(int[] v : conditions)
			{
				if(!checkOneItemUseCondition(v,needNotice))
				{
					return false;
				}
			}
		}
		
		for(int[] v : data.config.useActions)
		{
			if(!checkOneItemUseConditionForAction(v,num,arg,needNotice))
			{
				return false;
			}
		}
		
		return true;
	}
	
	public void toUseItem(ItemData data,int num,UseItemArgData arg)
	{
		int[][] actions;
		
		if((actions=data.config.useActions)!=null)
		{
			doItemUseActions(actions,num,arg);
		}
		
		toLogRemoveItem(data.id,num,CallWayType.UseItem);
		
		onItemUse(data.id,num,data,arg);
	}
	
	public void toUseItem(int id,int num,UseItemArgData arg,int way)
	{
		int[][] actions;
		
		if((actions=ItemConfig.get(id).useActions)!=null)
		{
			doItemUseActions(actions,num,arg);
		}
		
		toLogRemoveItem(id,num,way);
		
		onItemUse(id,num,null,arg);
	}
	
	protected void doItemUseActions(int[][] actions,int num,UseItemArgData arg)
	{
		for(int[] v : actions)
		{
			doOneItemUseAction(v,num,arg);
		}
	}
	
	protected void onItemUse(int id,int num,ItemData itemData,UseItemArgData arg)
	{
	
	}
	
	protected boolean checkOneItemUseCondition(int[] args,boolean needNotice)
	{
		return me.role.checkOneRoleCondition(args,needNotice);
	}
	
	protected boolean checkOneItemUseConditionForAction(int[] args,int num,UseItemArgData arg,boolean needNotice)
	{
		return me.role.checkOneRoleConditionForAction(args,num);
	}
	
	protected void doOneItemUseAction(int[] args,int num,UseItemArgData arg)
	{
		if(!CommonSetting.isClientDriveLogic)
			return;
		
		me.role.doOneRoleAction(args,num,CallWayType.UseItem);
	}
	
	public boolean useItemByID(int id)
	{
		return useItemByID(id,null);
	}
	
	public boolean useItemByID(int id,UseItemArgData arg)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public boolean useItemByIndex(int index)
	{
		return useItemByIndex(index,1,null);
	}
	
	public boolean useItemByIndex(int index,UseItemArgData arg)
	{
		return useItemByIndex(index,1,arg);
	}
	
	public boolean useItemByIndex(int index,int num,UseItemArgData arg)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public int getRedPointCount()
	{
		return 0;
	}
	
	public void removeRedPoint(int index)
	{
	
	}
	
	protected void toLogAddItem(int id,int num,int way)
	{
		//GameC.log.playerAddItem(me,id,num,way);
	}
	
	protected void toLogRemoveItem(int id,int num,int way)
	{
		//GameC.log.playerRemoveItem(me,id,num,way);
	}
	
	protected void toLogAddItemToMail(int id,int num,int way)
	{
		//GameC.log.playerAddItemToMail(me,id,num,way);
	}
	
	public void useItemResult(int id,int num,Boolean result)
	{
	
	}
	
	public void onAddReward(int way,int rewarID,SList<ItemData> randomItemDatas)
	{
		//RewardShowData data=new RewardShowData();
		//data.config=RewardConfig.get(rewarID);
		//
		//if(randomItemDatas==null)
		//	randomItemDatas=new SList<ItemData>();
		//
		//data.items=randomItemDatas;
		//
		//foreach(DIntData v in data.config.items)
		//{
		//	data.items.add(createItem(v.key,v.value));
		//}
		//
		//data.currency=new IntIntMap();
		//
		//foreach(var v in data.config.currency)
		//{
		//	data.currency.addValue(v.key,v.value);
		//}
		//
		//me.dispatch(GameEventType.AddReward,data);
	}
	
	public boolean sellItem(int index,int num,int itemID)
	{
		//need override
		return false;
	}
	
}
