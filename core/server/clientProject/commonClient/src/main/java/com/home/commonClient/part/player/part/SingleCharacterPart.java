package com.home.commonClient.part.player.part;
import com.home.commonBase.part.player.clientData.SingleCharacterClientPartData;
import com.home.commonClient.global.ClientC;
import com.home.commonClient.logic.unit.CharacterUseLogic;
import com.home.commonClient.part.player.part.CharacterPart;
import com.home.shine.data.BaseData;

/** (generated by shine) */
public class SingleCharacterPart extends CharacterPart
{
	/** 数据 */
	private SingleCharacterClientPartData _d;
	
	/** 主角色 */
	private CharacterUseLogic _hero;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(SingleCharacterClientPartData)data;
	}
	
	/** 获取数据 */
	public SingleCharacterClientPartData getPartData()
	{
		return _d;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		super.construct();
		
		_hero=ClientC.factory.createCharacterUseLogic();
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		super.beforeMakeData();
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		super.init();
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		super.dispose();
		
		_hero.dispose();
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		super.afterReadData();
		
		initUseLogicByUseData(_hero,_d.hero,false,true);
		_hero.setIsWorking(true);
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		super.onSecond(delay);
		
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	@Override
	public void onDaily()
	{
		super.onDaily();
		
	}
	
	/** 配置表更新后(配置替换) */
	@Override
	public void onReloadConfig()
	{
		super.onReloadConfig();
		
		if(_hero!=null)
		{
			_hero.getFightLogic().reloadConfig();
		}
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		super.onFunctionOpen(id);
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		super.onFunctionClose(id);
		
	}
	
	@Override
	public CharacterUseLogic getCurrentCharacterUseLogic()
	{
		return _hero;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new SingleCharacterClientPartData();
	}
	
}
