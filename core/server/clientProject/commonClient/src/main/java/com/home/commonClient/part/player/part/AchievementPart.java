package com.home.commonClient.part.player.part;
import com.home.commonBase.config.game.AchievementConfig;
import com.home.commonBase.constlist.generate.FunctionType;
import com.home.commonBase.constlist.generate.GameEventType;
import com.home.commonBase.data.quest.AchievementCompleteData;
import com.home.commonBase.data.quest.AchievementData;
import com.home.commonBase.data.quest.TaskData;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.part.player.clientData.AchievementClientPartData;
import com.home.commonClient.net.request.quest.GetAchievementRewardRequest;
import com.home.commonClient.part.player.base.PlayerBasePart;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;

/** 成就(generated by shine) */
public class AchievementPart extends PlayerBasePart
{
	/** 数据 */
	private AchievementClientPartData _d;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(AchievementClientPartData)data;
	}
	
	/** 获取数据 */
	public AchievementClientPartData getPartData()
	{
		return _d;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		me.quest.registTaskRefreshFunc(FunctionType.Achievement,this::taskRefresh);
		me.quest.registTaskCompleteFunc(FunctionType.Achievement,this::taskComplete);
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		AchievementData[] values;
		AchievementData v;
		
		for(int i=(values=_d.runningDatas.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				//重新构造
				me.quest.reMakeTask(v.task,FunctionType.Achievement,v.id);
				//添加执行目标
				me.quest.addRunningTask(v.task);
			}
		}
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new AchievementClientPartData();
	}
	
	private AchievementData createAchievementData()
	{
		// LogicExecutor executor;
		//
		// if((executor=me.getExecutor())!=null)
		// {
		// 	return executor.achievementDataPool.getOne();
		// }
		
		return new AchievementData();
	}
	
	private void releaseAchievementData(AchievementData data)
	{
		//TODO:池化
		
		// LogicExecutor executor;
		//
		// if((executor=me.getExecutor())!=null)
		// {
		// 	executor.achievementDataPool.back(data);
		// }
	}
	
	public AchievementData getRunningAchievement(int id)
	{
		return _d.runningDatas.get(id);
	}
	
	public AchievementCompleteData getCompleteAchievement(int id)
	{
		return _d.completeDatas.get(id);
	}
	
	private void taskRefresh(TaskData data)
	{
		AchievementData aData=_d.runningDatas.get(data.mainID);
		
		if(aData==null)
		{
			Ctrl.throwError("不该找不到成就");
			return;
		}
		
		me.dispatch(GameEventType.RefreshAchievement,aData.id);
	}
	
	private void taskComplete(TaskData data)
	{
		AchievementData aData=_d.runningDatas.get(data.mainID);
		
		if(aData==null)
		{
			Ctrl.throwError("不该找不到成就");
			return;
		}
		
		if(CommonSetting.isClientDriveLogic)
		{
			//回收
			me.quest.releaseTask(data);
			
			toComplete(aData.id);
		}
	}
	
	private void toComplete(int id)
	{
		//双移除
		_d.runningDatas.remove(id);
		
		AchievementCompleteData cData=new AchievementCompleteData();
		cData.id=id;
		cData.hasGotReward=false;
		cData.time=me.getTimeMillis();
		
		_d.completeDatas.put(id,cData);
		
		me.dispatch(GameEventType.RefreshAchievement,id);
		me.dispatch(GameEventType.CompleteAchievement,id);
		
		onAchievementComplete(id);
	}
	
	protected void onAchievementComplete(int id)
	{
	
	}
	
	public void onAchievementCompleteByServer(int id)
	{
		AchievementData aData=_d.runningDatas.get(id);
		
		if(aData==null)
		{
			return;
		}
		
		toComplete(id);
	}
	
	public void onAcceptAchievementByServer(AchievementData data)
	{
		_d.runningDatas.put(data.id,data);
		me.quest.reMakeTask(data.task,FunctionType.Achievement,data.id);
		me.quest.addRunningTask(data.task);
	}
	
	public void getReward(int id)
	{
		AchievementCompleteData cData=_d.completeDatas.get(id);
		
		if(cData==null)
		{
			me.warnLog("领取成就奖励时,找不到完成成就",id);
			return;
		}
		
		if(cData.hasGotReward)
		{
			me.warnLog("领取成就奖励时,已经领过",id);
			return;
		}
		
		AchievementConfig config=AchievementConfig.get(id);
		
		if(config.rewardID>0)
		{
			if(!me.bag.hasRewardPlace(config.rewardID))
			{
				me.warnLog("领取成就奖励时,背包空间不足",id);
				return;
			}
		}
		
		me.send(GetAchievementRewardRequest.create(id));
	}
	
	public void onGetReward(int id)
	{
		AchievementCompleteData cData=_d.completeDatas.get(id);
		
		if(cData==null)
		{
			me.warnLog("收到领取成就奖励时,找不到完成成就",id);
			return;
		}
		
		cData.hasGotReward=true;
		
		me.dispatch(GameEventType.RefreshAchievement,id);
		me.dispatch(GameEventType.GetAchievementReward,id);
	}
	
}
