package com.home.commonClient.net.request.scene.unit;
import com.home.commonBase.data.scene.fight.SkillTargetData;
import com.home.commonClient.constlist.generate.GameRequestType;
import com.home.commonClient.net.request.scene.base.CUnitRRequest;
import com.home.commonClient.net.request.scene.base.SceneRRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.pool.DataPool;

/** 控制单位使用Attack(客户端驱动attack时用)(generated by shine) */
public class CUnitAttackRequest extends CUnitRRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.CUnitAttack;
	
	/** 攻击ID */
	public int attackID;
	
	/** 攻击等级 */
	public int attackLevel;
	
	/** 目标数据 */
	public SkillTargetData targetData;
	
	/** 目标组 */
	public IntList targets;
	
	/** 是否子弹第一次攻击 */
	public boolean isBulletFirstHit;
	
	public CUnitAttackRequest()
	{
		_dataID=GameRequestType.CUnitAttack;
		setDontCopy();
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SkillTargetData targetDataTemp=targetData;
		if(targetDataTemp!=null)
		{
			this.targetData=(SkillTargetData)targetDataTemp.clone();
		}
		else
		{
			this.targetData=null;
			nullObjError("targetData");
		}
		
		IntList targetsTemp=targets;
		if(targetsTemp!=null)
		{
			this.targets=new IntList(targetsTemp.size());
			IntList targetsT=this.targets;
			if(!targetsTemp.isEmpty())
			{
				int[] targetsVValues=targetsTemp.getValues();
				for(int targetsVI=0,targetsVLen=targetsTemp.length();targetsVI<targetsVLen;++targetsVI)
				{
					int targetsV=targetsVValues[targetsVI];
					int targetsU;
					targetsU=targetsV;
					
					targetsT.add(targetsU);
				}
			}
		}
		else
		{
			this.targets=null;
			nullObjError("targets");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "CUnitAttackRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("attackID");
		writer.sb.append(':');
		writer.sb.append(this.attackID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("attackLevel");
		writer.sb.append(':');
		writer.sb.append(this.attackLevel);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("targetData");
		writer.sb.append(':');
		if(this.targetData!=null)
		{
			this.targetData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("targets");
		writer.sb.append(':');
		writer.sb.append("List<int>");
		if(this.targets!=null)
		{
			IntList targetsT=this.targets;
			int targetsLen=targetsT.size();
			writer.sb.append('(');
			writer.sb.append(targetsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int targetsI=0;targetsI<targetsLen;++targetsI)
			{
				int targetsV=targetsT.get(targetsI);
				writer.writeTabs();
				writer.sb.append(targetsI);
				writer.sb.append(':');
				writer.sb.append(targetsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isBulletFirstHit");
		writer.sb.append(':');
		writer.sb.append(this.isBulletFirstHit);
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.attackID);
		
		stream.writeInt(this.attackLevel);
		
		if(this.targetData!=null)
		{
			stream.writeDataFullNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		if(this.targets!=null)
		{
			stream.writeLen(this.targets.size());
			if(!this.targets.isEmpty())
			{
				int[] targetsVValues=this.targets.getValues();
				for(int targetsVI=0,targetsVLen=this.targets.length();targetsVI<targetsVLen;++targetsVI)
				{
					int targetsV=targetsVValues[targetsVI];
					stream.writeInt(targetsV);
					
				}
			}
		}
		else
		{
			nullObjError("targets");
		}
		
		stream.writeBoolean(this.isBulletFirstHit);
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.attackID);
		
		stream.writeInt(this.attackLevel);
		
		if(this.targetData!=null)
		{
			stream.writeDataSimpleNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		if(this.targets!=null)
		{
			stream.writeLen(this.targets.size());
			if(!this.targets.isEmpty())
			{
				int[] targetsVValues=this.targets.getValues();
				for(int targetsVI=0,targetsVLen=this.targets.length();targetsVI<targetsVLen;++targetsVI)
				{
					int targetsV=targetsVValues[targetsVI];
					stream.writeInt(targetsV);
					
				}
			}
		}
		else
		{
			nullObjError("targets");
		}
		
		stream.writeBoolean(this.isBulletFirstHit);
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.attackID=0;
		this.attackLevel=0;
		this.targetData=null;
		this.targets=null;
		this.isBulletFirstHit=false;
	}
	
	/** 创建实例 */
	public static CUnitAttackRequest create(int instanceID,int attackID,int attackLevel,SkillTargetData targetData,IntList targets,boolean isBulletFirstHit)
	{
		CUnitAttackRequest re=(CUnitAttackRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.attackID=attackID;
		re.attackLevel=attackLevel;
		re.targetData=targetData;
		re.targets=targets;
		re.isBulletFirstHit=isBulletFirstHit;
		return re;
	}
	
}
