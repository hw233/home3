package com.home.commonClient.net.response.login;
import com.home.commonBase.constlist.generate.RobotFlowStepType;
import com.home.commonBase.data.login.PlayerLoginData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.base.GameResponse;
import com.home.commonClient.net.request.login.PlayerLoginRequest;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 回复角色列表消息(generated by shine) */
public class RePlayerListResponse extends GameResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.RePlayerList;
	
	/** 角色列表 */
	public SList<PlayerLoginData> roles;
	
	/** 服务器出生码 */
	public int serverBornCode;
	
	public RePlayerListResponse()
	{
		_dataID=GameResponseType.RePlayerList;
	}
	
	/** 执行 */
	protected void execute()
	{
		me.system.onRePlayerList(roles);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RePlayerListResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int rolesLen=stream.readLen();
		if(this.roles!=null)
		{
			this.roles.clear();
			this.roles.ensureCapacity(rolesLen);
		}
		else
		{
			this.roles=new SList<PlayerLoginData>(PlayerLoginData[]::new,rolesLen);
		}
		
		SList<PlayerLoginData> rolesT=this.roles;
		for(int rolesI=rolesLen-1;rolesI>=0;--rolesI)
		{
			PlayerLoginData rolesV;
			BaseData rolesVT=stream.readDataFullNotNull();
			if(rolesVT!=null)
			{
				if(rolesVT instanceof PlayerLoginData)
				{
					rolesV=(PlayerLoginData)rolesVT;
				}
				else
				{
					rolesV=new PlayerLoginData();
					if(!(rolesVT.getClass().isAssignableFrom(PlayerLoginData.class)))
					{
						stream.throwTypeReadError(PlayerLoginData.class,rolesVT.getClass());
					}
					rolesV.shadowCopy(rolesVT);
				}
			}
			else
			{
				rolesV=null;
			}
			
			rolesT.add(rolesV);
		}
		
		this.serverBornCode=stream.readInt();
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int rolesLen=stream.readLen();
		if(this.roles!=null)
		{
			this.roles.clear();
			this.roles.ensureCapacity(rolesLen);
		}
		else
		{
			this.roles=new SList<PlayerLoginData>(PlayerLoginData[]::new,rolesLen);
		}
		
		SList<PlayerLoginData> rolesT=this.roles;
		for(int rolesI=rolesLen-1;rolesI>=0;--rolesI)
		{
			PlayerLoginData rolesV;
			rolesV=(PlayerLoginData)stream.readDataSimpleNotNull();
			
			rolesT.add(rolesV);
		}
		
		this.serverBornCode=stream.readInt();
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("roles");
		writer.sb.append(':');
		writer.sb.append("List<PlayerLoginData>");
		if(this.roles!=null)
		{
			SList<PlayerLoginData> rolesT=this.roles;
			int rolesLen=rolesT.size();
			writer.sb.append('(');
			writer.sb.append(rolesLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int rolesI=0;rolesI<rolesLen;++rolesI)
			{
				PlayerLoginData rolesV=rolesT.get(rolesI);
				writer.writeTabs();
				writer.sb.append(rolesI);
				writer.sb.append(':');
				if(rolesV!=null)
				{
					rolesV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("PlayerLoginData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("serverBornCode");
		writer.sb.append(':');
		writer.sb.append(this.serverBornCode);
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.roles=null;
		this.serverBornCode=0;
	}
	
}
