package com.home.commonClient.part.player.part;
import com.home.commonBase.config.game.RewardConfig;
import com.home.commonBase.constlist.generate.FunctionType;
import com.home.commonBase.data.item.ItemData;
import com.home.commonBase.global.CommonSetting;
import com.home.commonBase.part.player.clientData.SingleBagClientPartData;
import com.home.commonBase.tool.func.BaseItemContainerTool;
import com.home.commonClient.part.player.part.BagPart;
import com.home.commonClient.tool.func.IPlayerFuncTool;
import com.home.commonClient.tool.func.PlayerItemContainerTool;
import com.home.commonClient.tool.func.PlayerItemDicContainerTool;
import com.home.shine.data.BaseData;
import com.home.shine.data.DIntData;

/** (generated by shine) */
public class SingleBagPart extends BagPart
{
	/** 数据 */
	private SingleBagClientPartData _d;
	
	/** 主背包 */
	private BaseItemContainerTool _mainBag;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(SingleBagClientPartData)data;
	}
	
	/** 获取数据 */
	public SingleBagClientPartData getPartData()
	{
		return _d;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		super.construct();
		
		if(CommonSetting.useDicBag)
		{
			_mainBag=new PlayerItemDicContainerTool(FunctionType.MainBag);
		}
		else
		{
			_mainBag=new PlayerItemContainerTool(FunctionType.MainBag);
		}
		
		me.func.registFuncTool((IPlayerFuncTool)_mainBag);
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		super.beforeMakeData();
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		super.init();
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		super.dispose();
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		super.afterReadData();
		
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		super.onSecond(delay);
		
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	@Override
	public void onDaily()
	{
		super.onDaily();
		
	}
	
	/** 配置表更新后(配置替换) */
	@Override
	public void onReloadConfig()
	{
		super.onReloadConfig();
		
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		super.onFunctionOpen(id);
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		super.onFunctionClose(id);
		
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new SingleBagClientPartData();
	}
	
	/** 是否有物品位置 */
	@Override
	public boolean hasItemPlace(DIntData[] dataArr)
	{
		return _mainBag.hasItemPlace(dataArr);
	}
	
	/** 是否有某奖励的位置 */
	public boolean hasRewardPlace(int rewardID)
	{
		return this.hasFreeGrid(RewardConfig.get(rewardID).needGrid);
	}
	
	@Override
	protected boolean toRemoveItems(DIntData[] items,int num,int way)
	{
		return _mainBag.removeItems(items,num,way);
	}
	
	/** 是否有 */
	@Override
	public boolean hasFreeGrid(int num)
	{
		return this._mainBag.hasFreeGrid(num);
	}
	
	@Override
	public boolean hasItemPlace(ItemData data)
	{
		return this._mainBag.hasItemPlace(data);
	}
	
	@Override
	public boolean hasItemPlace(int id,int num)
	{
		return this._mainBag.hasItemPlace(id,num);
	}
	
}
