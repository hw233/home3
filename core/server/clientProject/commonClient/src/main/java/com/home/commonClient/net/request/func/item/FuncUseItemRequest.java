package com.home.commonClient.net.request.func.item;
import com.home.commonBase.data.item.UseItemArgData;
import com.home.commonClient.constlist.generate.GameRequestType;
import com.home.commonClient.net.request.func.base.FuncRRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 使用物品消息(generated by shine) */
public class FuncUseItemRequest extends FuncRRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.FuncUseItem;
	
	/** 格子序号 */
	public int index;
	
	/** 数目 */
	public int num;
	
	/** 道具ID(检验用) */
	public int itemID;
	
	/** 额外使用参数 */
	public UseItemArgData arg;
	
	public FuncUseItemRequest()
	{
		_dataID=GameRequestType.FuncUseItem;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		UseItemArgData argTemp=arg;
		if(argTemp!=null)
		{
			this.arg=(UseItemArgData)argTemp.clone();
		}
		else
		{
			this.arg=null;
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncUseItemRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("index");
		writer.sb.append(':');
		writer.sb.append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("num");
		writer.sb.append(':');
		writer.sb.append(this.num);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("itemID");
		writer.sb.append(':');
		writer.sb.append(this.itemID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("arg");
		writer.sb.append(':');
		if(this.arg!=null)
		{
			this.arg.writeDataString(writer);
		}
		else
		{
			writer.sb.append("UseItemArgData=null");
		}
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.index);
		
		stream.writeInt(this.num);
		
		stream.writeInt(this.itemID);
		
		if(this.arg!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.arg);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.index);
		
		stream.writeInt(this.num);
		
		stream.writeInt(this.itemID);
		
		if(this.arg!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.arg);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.index=0;
		this.num=0;
		this.itemID=0;
		if(this.arg!=null)
		{
			this.arg.release(pool);
			this.arg=null;
		}
	}
	
	/** 创建实例 */
	public static FuncUseItemRequest create(int funcID,int index,int num,int itemID,UseItemArgData arg)
	{
		FuncUseItemRequest re=(FuncUseItemRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.index=index;
		re.num=num;
		re.itemID=itemID;
		re.arg=arg;
		return re;
	}
	
}
