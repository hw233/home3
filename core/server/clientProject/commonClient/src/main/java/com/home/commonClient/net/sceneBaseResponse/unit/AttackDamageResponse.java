package com.home.commonClient.net.sceneBaseResponse.unit;
import com.home.commonBase.data.scene.fight.DamageOneData;
import com.home.commonBase.data.scene.fight.SkillTargetData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.constlist.generate.SceneBaseResponseType;
import com.home.commonClient.net.sceneBaseResponse.base.SceneSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 攻击伤害数据(generated by shine) */
public class AttackDamageResponse extends SceneSResponse
{
	/** 数据类型ID */
	public static final int dataID=SceneBaseResponseType.AttackDamage;
	
	/** 来源单位 */
	public int fromInstanceID;
	
	/** 目标数据 */
	public SkillTargetData target;
	
	/** 攻击ID */
	public int id;
	
	/** 攻击等级 */
	public int level;
	
	/** 伤害数据组 */
	public SList<DamageOneData> damageDatas;
	
	public AttackDamageResponse()
	{
		_dataID=SceneBaseResponseType.AttackDamage;
	}
	
	/** 执行 */
	protected void execute()
	{
		//TODO:机器人跳过伤害表现
		//scene.fight.onAttackDamageFromServer(fromInstanceID,id,level,target,damageDatas);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AttackDamageResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.fromInstanceID=stream.readInt();
		
		BaseData targetT=stream.readDataFullNotNull();
		if(targetT!=null)
		{
			if(targetT instanceof SkillTargetData)
			{
				this.target=(SkillTargetData)targetT;
			}
			else
			{
				this.target=new SkillTargetData();
				if(!(targetT.getClass().isAssignableFrom(SkillTargetData.class)))
				{
					stream.throwTypeReadError(SkillTargetData.class,targetT.getClass());
				}
				this.target.shadowCopy(targetT);
			}
		}
		else
		{
			this.target=null;
		}
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		if(stream.readBoolean())
		{
			int damageDatasLen=stream.readLen();
			if(this.damageDatas!=null)
			{
				this.damageDatas.clear();
				this.damageDatas.ensureCapacity(damageDatasLen);
			}
			else
			{
				this.damageDatas=new SList<DamageOneData>(DamageOneData[]::new,damageDatasLen);
			}
			
			SList<DamageOneData> damageDatasT=this.damageDatas;
			for(int damageDatasI=damageDatasLen-1;damageDatasI>=0;--damageDatasI)
			{
				DamageOneData damageDatasV;
				if(stream.readBoolean())
				{
					BaseData damageDatasVT=stream.readDataFullNotNull();
					if(damageDatasVT!=null)
					{
						if(damageDatasVT instanceof DamageOneData)
						{
							damageDatasV=(DamageOneData)damageDatasVT;
						}
						else
						{
							damageDatasV=new DamageOneData();
							if(!(damageDatasVT.getClass().isAssignableFrom(DamageOneData.class)))
							{
								stream.throwTypeReadError(DamageOneData.class,damageDatasVT.getClass());
							}
							damageDatasV.shadowCopy(damageDatasVT);
						}
					}
					else
					{
						damageDatasV=null;
					}
				}
				else
				{
					damageDatasV=null;
				}
				
				damageDatasT.add(damageDatasV);
			}
		}
		else
		{
			this.damageDatas=null;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.fromInstanceID=stream.readInt();
		
		this.target=(SkillTargetData)stream.readDataSimpleNotNull();
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		if(stream.readBoolean())
		{
			int damageDatasLen=stream.readLen();
			if(this.damageDatas!=null)
			{
				this.damageDatas.clear();
				this.damageDatas.ensureCapacity(damageDatasLen);
			}
			else
			{
				this.damageDatas=new SList<DamageOneData>(DamageOneData[]::new,damageDatasLen);
			}
			
			SList<DamageOneData> damageDatasT=this.damageDatas;
			for(int damageDatasI=damageDatasLen-1;damageDatasI>=0;--damageDatasI)
			{
				DamageOneData damageDatasV;
				if(stream.readBoolean())
				{
					damageDatasV=(DamageOneData)stream.readDataSimpleNotNull();
				}
				else
				{
					damageDatasV=null;
				}
				
				damageDatasT.add(damageDatasV);
			}
		}
		else
		{
			this.damageDatas=null;
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("fromInstanceID");
		writer.sb.append(':');
		writer.sb.append(this.fromInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("target");
		writer.sb.append(':');
		if(this.target!=null)
		{
			this.target.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("id");
		writer.sb.append(':');
		writer.sb.append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("level");
		writer.sb.append(':');
		writer.sb.append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("damageDatas");
		writer.sb.append(':');
		writer.sb.append("List<DamageOneData>");
		if(this.damageDatas!=null)
		{
			SList<DamageOneData> damageDatasT=this.damageDatas;
			int damageDatasLen=damageDatasT.size();
			writer.sb.append('(');
			writer.sb.append(damageDatasLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int damageDatasI=0;damageDatasI<damageDatasLen;++damageDatasI)
			{
				DamageOneData damageDatasV=damageDatasT.get(damageDatasI);
				writer.writeTabs();
				writer.sb.append(damageDatasI);
				writer.sb.append(':');
				if(damageDatasV!=null)
				{
					damageDatasV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("DamageOneData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.fromInstanceID=0;
		this.target=null;
		this.id=0;
		this.level=0;
		this.damageDatas=null;
	}
	
}
