package com.home.commonClient.part.player;
import com.home.commonBase.config.game.InfoCodeConfig;
import com.home.commonBase.constlist.generate.RobotFlowStepType;
import com.home.commonBase.constlist.system.PartCallPhaseType;
import com.home.commonBase.global.BaseC;
import com.home.commonBase.logic.LogicEntity;
import com.home.commonBase.part.player.clientData.AchievementClientPartData;
import com.home.commonBase.part.player.clientData.ActivityClientPartData;
import com.home.commonBase.part.player.clientData.BagClientPartData;
import com.home.commonBase.part.player.clientData.CharacterClientPartData;
import com.home.commonBase.part.player.clientData.EquipClientPartData;
import com.home.commonBase.part.player.clientData.FriendClientPartData;
import com.home.commonBase.part.player.clientData.FuncClientPartData;
import com.home.commonBase.part.player.clientData.GuideClientPartData;
import com.home.commonBase.part.player.clientData.MailClientPartData;
import com.home.commonBase.part.player.clientData.PetClientPartData;
import com.home.commonBase.part.player.clientData.QuestClientPartData;
import com.home.commonBase.part.player.clientData.RoleClientPartData;
import com.home.commonBase.part.player.clientData.SceneClientPartData;
import com.home.commonBase.part.player.clientData.SocialClientPartData;
import com.home.commonBase.part.player.clientData.SystemClientPartData;
import com.home.commonBase.part.player.clientData.TeamClientPartData;
import com.home.commonBase.part.player.clientData.UnionClientPartData;
import com.home.commonBase.part.player.list.PlayerClientListData;
import com.home.commonClient.control.LogicExecutor;
import com.home.commonClient.global.ClientC;
import com.home.commonClient.global.ClientGlobal;
import com.home.commonClient.net.base.CenterRequest;
import com.home.commonClient.net.request.login.PlayerExitRequest;
import com.home.commonClient.net.request.system.CenterTransClientToGameRequest;
import com.home.commonClient.net.request.system.ClientGMRequest;
import com.home.commonClient.part.player.base.PlayerBasePart;
import com.home.commonClient.part.player.part.AchievementPart;
import com.home.commonClient.part.player.part.ActivityPart;
import com.home.commonClient.part.player.part.BagPart;
import com.home.commonClient.part.player.part.CharacterPart;
import com.home.commonClient.part.player.part.EquipPart;
import com.home.commonClient.part.player.part.FriendPart;
import com.home.commonClient.part.player.part.FuncPart;
import com.home.commonClient.part.player.part.GuidePart;
import com.home.commonClient.part.player.part.MailPart;
import com.home.commonClient.part.player.part.PetPart;
import com.home.commonClient.part.player.part.QuestPart;
import com.home.commonClient.part.player.part.RolePart;
import com.home.commonClient.part.player.part.ScenePart;
import com.home.commonClient.part.player.part.SocialPart;
import com.home.commonClient.part.player.part.SystemPart;
import com.home.commonClient.part.player.part.TeamPart;
import com.home.commonClient.part.player.part.UnionPart;
import com.home.commonClient.server.ClientServer;
import com.home.shine.control.DateControl;
import com.home.shine.control.ThreadControl;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.net.base.BaseRequest;
import com.home.shine.net.socket.BaseSocket;

/** 玩家数据主体(generated by shine) */
public class Player extends LogicEntity
{
	protected PlayerBasePart[] _list;
	
	/** 当前代码调用阶段 */
	private int _phase=PartCallPhaseType.None;
	
	private int _secondTick=0;
	
	/** 系统 */
	public SystemPart system;
	
	/** 玩家 */
	public RolePart role;
	
	/** 场景 */
	public ScenePart scene;
	
	/** 角色 */
	public CharacterPart character;
	
	/** 背包 */
	public BagPart bag;
	
	/** 通用功能 */
	public FuncPart func;
	
	/** 社交 */
	public SocialPart social;
	
	/** 邮件 */
	public MailPart mail;
	
	/** 任务 */
	public QuestPart quest;
	
	/** 装备 */
	public EquipPart equip;
	
	/** 好友 */
	public FriendPart friend;
	
	/** 组队 */
	public TeamPart team;
	
	/** 工会 */
	public UnionPart guild;
	
	/** 成就 */
	public AchievementPart achievement;
	
	/** 活动 */
	public ActivityPart activity;
	
	/** 引导 */
	public GuidePart guide;
	
	/** 工会 */
	public UnionPart union;
	
	/** 宠物 */
	public PetPart pet;
	
	public Player()
	{
	
	}
	
	/** 注册部件 */
	protected void registParts()
	{
		_list=new PlayerBasePart[17];
		int i=0;
		
		system=new SystemPart();
		system.setMe(this);
		_list[i++]=system;
		
		func=new FuncPart();
		func.setMe(this);
		_list[i++]=func;
		
		activity=new ActivityPart();
		activity.setMe(this);
		_list[i++]=activity;
		
		role=new RolePart();
		role.setMe(this);
		_list[i++]=role;
		
		scene=new ScenePart();
		scene.setMe(this);
		_list[i++]=scene;
		
		character=new CharacterPart();
		character.setMe(this);
		_list[i++]=character;
		
		social=new SocialPart();
		social.setMe(this);
		_list[i++]=social;
		
		bag=new BagPart();
		bag.setMe(this);
		_list[i++]=bag;
		
		mail=new MailPart();
		mail.setMe(this);
		_list[i++]=mail;
		
		quest=new QuestPart();
		quest.setMe(this);
		_list[i++]=quest;
		
		guide=new GuidePart();
		guide.setMe(this);
		_list[i++]=guide;
		
		friend=new FriendPart();
		friend.setMe(this);
		_list[i++]=friend;
		
		equip=new EquipPart();
		equip.setMe(this);
		_list[i++]=equip;
		
		team=new TeamPart();
		team.setMe(this);
		_list[i++]=team;
		
		union=new UnionPart();
		union.setMe(this);
		_list[i++]=union;
		
		achievement=new AchievementPart();
		achievement.setMe(this);
		_list[i++]=achievement;
		
		pet=new PetPart();
		pet.setMe(this);
		_list[i++]=pet;
		
	}
	
	/** 创建列表数据 */
	public PlayerClientListData createListData()
	{
		return new PlayerClientListData();
	}
	
	/** 从列表数据读取 */
	public void readListData(PlayerClientListData listData)
	{
		this.system.setData(listData.system);
		this.func.setData(listData.func);
		this.activity.setData(listData.activity);
		this.role.setData(listData.role);
		this.scene.setData(listData.scene);
		this.character.setData(listData.character);
		this.social.setData(listData.social);
		this.bag.setData(listData.bag);
		this.mail.setData(listData.mail);
		this.quest.setData(listData.quest);
		this.guide.setData(listData.guide);
		this.friend.setData(listData.friend);
		this.equip.setData(listData.equip);
		this.team.setData(listData.team);
		this.union.setData(listData.union);
		this.achievement.setData(listData.achievement);
		this.pet.setData(listData.pet);
	}
	
	/** 写列表数据(深拷) */
	public void writeListData(PlayerClientListData listData)
	{
		listData.system=(SystemClientPartData)this.system.makePartData();
		listData.func=(FuncClientPartData)this.func.makePartData();
		listData.activity=(ActivityClientPartData)this.activity.makePartData();
		listData.role=(RoleClientPartData)this.role.makePartData();
		listData.scene=(SceneClientPartData)this.scene.makePartData();
		listData.character=(CharacterClientPartData)this.character.makePartData();
		listData.social=(SocialClientPartData)this.social.makePartData();
		listData.bag=(BagClientPartData)this.bag.makePartData();
		listData.mail=(MailClientPartData)this.mail.makePartData();
		listData.quest=(QuestClientPartData)this.quest.makePartData();
		listData.guide=(GuideClientPartData)this.guide.makePartData();
		listData.friend=(FriendClientPartData)this.friend.makePartData();
		listData.equip=(EquipClientPartData)this.equip.makePartData();
		listData.team=(TeamClientPartData)this.team.makePartData();
		listData.union=(UnionClientPartData)this.union.makePartData();
		listData.achievement=(AchievementClientPartData)this.achievement.makePartData();
		listData.pet=(PetClientPartData)this.pet.makePartData();
	}
	
	/** 获取当前阶段 */
	public int getPhase()
	{
		return _phase;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	public void construct()
	{
		_phase=PartCallPhaseType.Construct;
		
		registParts();
		
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].construct();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 初次构造数据(只为new出Data,跟onCreate不是一回事) */
	public void newInitData()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].newInitData();
		}
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	public void init()
	{
		_phase=PartCallPhaseType.Init;
		
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].init();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 析构(回池前调用,与init成对) */
	public void dispose()
	{
		_phase=PartCallPhaseType.Dispose;
		
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			try
			{
				list[vI].dispose();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}
		
		_phase=PartCallPhaseType.None;
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	public void afterReadData()
	{
		role.afterReadDataFirst();
		
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].afterReadData();
		}
		
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].afterReadDataSecond();
		}
	}
	
	/** 每秒调用 */
	public void onSecond(int delay)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onSecond(delay);
		}
	}
	
	/** 每天调用(上线时如隔天也会调用,) */
	public void onDaily()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onDaily();
		}
	}
	
	/** 配置表更新后(配置替换) */
	public void onReloadConfig()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onReloadConfig();
		}
	}
	
	/** 活动开启 */
	public void onActivityOpen(int id,boolean atTime)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityOpen(id,atTime);
		}
	}
	
	/** 活动关闭 */
	public void onActivityClose(int id,boolean atTime)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityClose(id,atTime);
		}
	}
	
	/** 活动重置 */
	public void onActivityReset(int id,boolean atTime)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onActivityReset(id,atTime);
		}
	}
	
	/** 登出(每次角色登出或切出时调用) */
	public void onLeave()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onLeave();
		}
	}
	
	/** 被动退出 */
	public void exitPassive()
	{
		if(system.isLeftGame)
			return;
		
		system.isLeftGame=true;
		
		log("被动下线");
		
		onLeave();
		
		//挤掉
		if(BaseC.constlist.robotTestMode_needLoginCrowed(ClientGlobal.mode))
		{
			//再登录
			system.waitRandomAndLogin();
		}
		else
		{
			if(ClientGlobal.needKeepClient)
			{
				system.getTimeDriver().setTimeOut(()->
				{
					//再登录
					system.startLogin();
					
				},2000);//等2秒
			}
			else
			{
				removeClient();
			}
		}
	}
	
	/** 主动退出 */
	public void exitInitialtive(boolean needRemove)
	{
		if(system.isLeftGame)
			return;
		
		system.isLeftGame=true;
		
		log("主动下线");
		
		send(new PlayerExitRequest());
		
		onLeave();
		
		if(needRemove)
		{
			removeClient();
		}
	}
	
	/** 移除此客户端 */
	public void removeClient()
	{
		String uid=role.uid;
		
		//移除
		system.getExecutor().playerExit(this);
		
		dispose();
		
		ThreadControl.addMainFunc(()->
		{
			ClientC.main.onRemoveClient(uid);
		});
	}
	
	/** 创建server */
	public ClientServer createClientServer()
	{
		return new ClientServer(this);
	}
	
	/** 获取连接 */
	public BaseSocket getSocket()
	{
		return system.getSocket();
	}
	
	/** 开始游戏 */
	public void onStart()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onStart();
		}
		
		recordStep(RobotFlowStepType.LoginOver);
		
		ClientC.behaviour.onStart(this);
	}
	
	/** 每帧调用(离线也调用) */
	public void onFrame(int delay)
	{
		if(!system.inited())
			return;
		
		system.onFrame(delay);
		scene.onFrame(delay);
		
		int time;
		
		if((time=(_secondTick+=delay))>=1000)
		{
			_secondTick=0;
			
			onSecond(time);
		}
	}
	
	/** 发送消息 */
	public void send(BaseRequest request)
	{
		if(request instanceof CenterRequest)
		{
			sendCenter((CenterRequest)request);
		}
		else
		{
			sendToGame(request);
		}
	}
	
	/** 发送到中心服消息 */
	public void sendCenter(CenterRequest request)
	{
		request.preSend();
		CenterTransClientToGameRequest cr=new CenterTransClientToGameRequest();
		cr.setData(request);
		sendToGame(cr);
	}
	
	/** 消息发到game */
	private void sendToGame(BaseRequest request)
	{
		BaseSocket socket;
		
		if((socket=system.getSocket())!=null)
		{
			socket.send(request);
		}
	}
	
	/** 发送gm指令 */
	public void sendGM(String cmd)
	{
		send(ClientGMRequest.create(cmd));
	}
	
	/** 记录步 */
	public void recordStep(int step)
	{
		system.recordStep(step);
	}
	
	/** 消息派发 */
	public void dispatch(int type)
	{
		dispatch(type,null);
	}
	
	/** 消息派发 */
	public void dispatch(int type,Object data)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onEvent(type,data);
		}
	}
	
	/** 获取当前时间戳 */
	public long getTimeSeconds()
	{
		return DateControl.getTimeSeconds();
	}
	
	/** 添加待办事务(如是在主线程通过GetPlayer系列取出的Player然后addFunc,则一定会被执行) */
	public void addFunc(Runnable func)
	{
		getExecutor().addFunc(func);
	}
	
	/** 获取执行器 */
	public LogicExecutor getExecutor()
	{
		return system.getExecutor();
	}
	
	/** 升级(升级多次也只调用一次) */
	public void onLevelUp(int oldLevel)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0, vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onLevelUp(oldLevel);
		}
	}
	
	/** 显示信息码 */
	public void showInfoCode(int code)
	{
		InfoCodeConfig config=InfoCodeConfig.get(code);
		
		Ctrl.print("客户端显示信息码",code,config.text);
	}
	
	/** 显示信息码 */
	public void showInfoCode(int code,String...args)
	{
		InfoCodeConfig config=InfoCodeConfig.get(code);
		
		Ctrl.print("客户端显示信息码",code,config.text,args);
	}
	
	/** 写描述信息 */
	public void writeInfo(StringBuilder sb)
	{
		sb.append("uid:");
		sb.append(role.uid);
		sb.append(" playerID:");
		sb.append(role.playerID);
		sb.append(" 名字:");
		sb.append(role.name);
	}
	
	@Override
	protected void sendWarnLog(String str)
	{
	
	}
	
	/** 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到)) */
	public void onNewCreate()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.length;vI<vLen;++vI)
		{
			list[vI].onNewCreate();
		}
	}
	
}
