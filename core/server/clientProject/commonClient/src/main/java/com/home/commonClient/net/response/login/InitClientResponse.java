package com.home.commonClient.net.response.login;
import com.home.commonBase.part.player.list.PlayerClientListData;
import com.home.commonBase.part.player.list.PlayerListData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.base.GameResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 初始化客户端消息(ClientListData)(此处需要使用copy,因工具已改为潜拷,为了逻辑层避开深拷问题)(generated by shine) */
public class InitClientResponse extends GameResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.InitClient;
	
	/** 配置热更数据 */
	public byte[] configHotfix;
	
	/** 客户端列表数据 */
	public BaseData listData;
	
	public InitClientResponse()
	{
		_dataID=GameResponseType.InitClient;
		setLongMessage();
	}
	
	/** 执行 */
	protected void execute()
	{
		me.system.setInited(true);
		//读数据
		me.readListData((PlayerClientListData)listData);
		//读后
		me.afterReadData();
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "InitClientResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		BaseData listDataT=stream.readDataFullNotNull();
		if(listDataT!=null)
		{
			if(listDataT instanceof BaseData)
			{
				this.listData=(BaseData)listDataT;
			}
			else
			{
				this.listData=new BaseData();
				if(!(listDataT.getClass().isAssignableFrom(BaseData.class)))
				{
					stream.throwTypeReadError(BaseData.class,listDataT.getClass());
				}
				this.listData.shadowCopy(listDataT);
			}
		}
		else
		{
			this.listData=null;
		}
		
		if(stream.readBoolean())
		{
			int configHotfixLen=stream.readLen();
			this.configHotfix=stream.readByteArr(configHotfixLen);
		}
		else
		{
			this.configHotfix=null;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.listData=(BaseData)stream.readDataSimpleNotNull();
		
		if(stream.readBoolean())
		{
			int configHotfixLen=stream.readLen();
			this.configHotfix=stream.readByteArr(configHotfixLen);
		}
		else
		{
			this.configHotfix=null;
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("listData");
		writer.sb.append(':');
		if(this.listData!=null)
		{
			this.listData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("BaseData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("configHotfix");
		writer.sb.append(':');
		writer.sb.append("Array<byte>");
		if(this.configHotfix!=null)
		{
			byte[] configHotfixT=this.configHotfix;
			int configHotfixLen=configHotfixT.length;
			writer.sb.append('(');
			writer.sb.append(configHotfixLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int configHotfixI=0;configHotfixI<configHotfixLen;++configHotfixI)
			{
				byte configHotfixV=configHotfixT[configHotfixI];
				writer.writeTabs();
				writer.sb.append(configHotfixI);
				writer.sb.append(':');
				writer.sb.append(configHotfixV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.listData=null;
		this.configHotfix=null;
	}
	
}
