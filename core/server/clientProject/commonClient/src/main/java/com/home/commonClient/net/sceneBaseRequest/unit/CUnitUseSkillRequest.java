package com.home.commonClient.net.sceneBaseRequest.unit;
import com.home.commonBase.data.scene.base.PosDirData;
import com.home.commonBase.data.scene.fight.SkillTargetData;
import com.home.commonClient.constlist.generate.GameRequestType;
import com.home.commonClient.constlist.generate.SceneBaseRequestType;
import com.home.commonClient.net.sceneBaseRequest.base.CUnitRRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 玩家单位使用技能(generated by shine) */
public class CUnitUseSkillRequest extends CUnitRRequest
{
	/** 数据类型ID */
	public static final int dataID=SceneBaseRequestType.CUnitUseSkill;
	
	/** 技能ID */
	public int skillID;
	
	/** 目标数据 */
	public SkillTargetData targetData;
	
	/** 是否强制当前技能 */
	public boolean isSuspend;
	
	/** 当前单位位置数据 */
	public PosDirData posDir;
	
	public CUnitUseSkillRequest()
	{
		_dataID=SceneBaseRequestType.CUnitUseSkill;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SkillTargetData targetDataTemp=targetData;
		if(targetDataTemp!=null)
		{
			this.targetData=(SkillTargetData)targetDataTemp.clone();
		}
		else
		{
			this.targetData=null;
			nullObjError("targetData");
		}
		
		PosDirData posDirTemp=posDir;
		if(posDirTemp!=null)
		{
			this.posDir=new PosDirData();
			this.posDir.copy(posDirTemp);
		}
		else
		{
			this.posDir=null;
			nullObjError("posDir");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "CUnitUseSkillRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("skillID");
		writer.sb.append(':');
		writer.sb.append(this.skillID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("targetData");
		writer.sb.append(':');
		if(this.targetData!=null)
		{
			this.targetData.writeDataString(writer);
		}
		else
		{
			writer.sb.append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("posDir");
		writer.sb.append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("isSuspend");
		writer.sb.append(':');
		writer.sb.append(this.isSuspend);
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.skillID);
		
		if(this.targetData!=null)
		{
			stream.writeDataFullNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		if(this.posDir!=null)
		{
			this.posDir.writeBytesFull(stream);
		}
		else
		{
			nullObjError("posDir");
		}
		
		stream.writeBoolean(this.isSuspend);
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.skillID);
		
		if(this.targetData!=null)
		{
			stream.writeDataSimpleNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		if(this.posDir!=null)
		{
			this.posDir.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("posDir");
		}
		
		stream.writeBoolean(this.isSuspend);
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.skillID=0;
		this.targetData.release(pool);
		this.targetData=null;
		this.posDir.release(pool);
		this.posDir=null;
		this.isSuspend=false;
	}
	
	/** 创建实例 */
	public static CUnitUseSkillRequest create(int instanceID,int skillID,SkillTargetData targetData,PosDirData posDir,boolean isSuspend)
	{
		CUnitUseSkillRequest re=(CUnitUseSkillRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.skillID=skillID;
		re.targetData=targetData;
		re.posDir=posDir;
		re.isSuspend=isSuspend;
		return re;
	}
	
}
