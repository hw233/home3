package com.home.commonClient.net.httpRequest;
import com.home.commonBase.constlist.generate.RobotFlowStepType;
import com.home.commonBase.data.login.ClientLoginData;
import com.home.commonClient.constlist.generate.LoginHttpRequestType;
import com.home.commonClient.global.ClientC;
import com.home.commonClient.net.base.LoginHttpRequest;
import com.home.commonClient.net.httpResponseResult.ClientLoginResult;
import com.home.commonClient.part.player.Player;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.ctrl.Ctrl;

/** 客户端登录(自有登录)(generated by shine) */
public class ClientLoginHttpRequest extends LoginHttpRequest
{
	/** 数据类型ID */
	public static final int dataID=LoginHttpRequestType.ClientLogin;
	
	/** 返回值 */
	protected ClientLoginResult _re;
	
	/** c层msg版本号 */
	public int cMsgVersion;
	
	/** g层msg版本号 */
	public int gMsgVersion;
	
	/** 登录数据 */
	public ClientLoginData data;
	
	public ClientLoginHttpRequest()
	{
		_dataID=LoginHttpRequestType.ClientLogin;
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		ClientLoginData dataTemp=data;
		if(dataTemp!=null)
		{
			this.data=(ClientLoginData)dataTemp.clone();
		}
		else
		{
			this.data=null;
			nullObjError("data");
		}
		
	}
	
	/** 执行 */
	@Override
	protected void toRead()
	{
		_re=new ClientLoginResult();
		readResult(_re,_resultStream);
	}
	
	/** 执行 */
	protected void onComplete()
	{
		Player me=ClientC.main.getPlayerByUID(data.uid);
		
		me.recordStep(RobotFlowStepType.ReClientLogin);
		
		if(_result==-1 || _re==null)
		{
			if(_result!=-1)
			{
				Ctrl.print("http错误码:",_result);
			}
			
			me.system.onLoginHttpFailed();
			
			return;
		}
		
		me.system.onLoginHttpSuccess(_re.data);
	}
	
	/** 获取结果 */
	public ClientLoginResult getResult()
	{
		return _re;
	}
	
	/** 同步执行 */
	public ClientLoginResult sendMSync()
	{
		doSendSync();
		return _re;
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.cMsgVersion);
		
		stream.writeInt(this.gMsgVersion);
		
		if(this.data!=null)
		{
			stream.writeDataFullNotNull(this.data);
		}
		else
		{
			nullObjError("data");
		}
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		stream.writeInt(this.cMsgVersion);
		
		stream.writeInt(this.gMsgVersion);
		
		if(this.data!=null)
		{
			stream.writeDataSimpleNotNull(this.data);
		}
		else
		{
			nullObjError("data");
		}
		
	}
	
	/** 创建实例 */
	public static ClientLoginHttpRequest create(int cMsgVersion,int gMsgVersion,ClientLoginData data)
	{
		ClientLoginHttpRequest re=new ClientLoginHttpRequest();
		re.cMsgVersion=cMsgVersion;
		re.gMsgVersion=gMsgVersion;
		re.data=data;
		return re;
	}
	
}
