package com.home.commonClient.part.player.part;
import com.home.commonBase.constlist.generate.GameEventType;
import com.home.commonBase.constlist.generate.InfoCodeType;
import com.home.commonBase.data.social.friend.ApplyAddFriendData;
import com.home.commonBase.data.social.friend.ContactData;
import com.home.commonBase.data.social.friend.FriendData;
import com.home.commonBase.global.Global;
import com.home.commonBase.part.player.clientData.FriendClientPartData;
import com.home.commonClient.net.request.social.friend.AgreeAddFriendRequest;
import com.home.commonClient.part.player.base.PlayerBasePart;
import com.home.shine.data.BaseData;
import com.home.shine.utils.OtherUtils;
import java.util.Comparator;

/** 好友(generated by shine) */
public class FriendPart extends PlayerBasePart
{
	/** 数据 */
	private FriendClientPartData _d;
	
	private Comparator<ApplyAddFriendData> _applyComparator;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(FriendClientPartData)data;
	}
	
	/** 获取数据 */
	public FriendClientPartData getPartData()
	{
		return _d;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		_applyComparator=this::compareApplyAddFriend;
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		if(!_d.blackList.isEmpty())
		{
			ContactData[] values;
			ContactData v;
			
			for(int i=(values=_d.blackList.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//唯一实例
					v.data=me.social.addPlayerRoleSocial(v.playerID,v.data);
				}
			}
		}
		
		if(!_d.friends.isEmpty())
		{
			FriendData[] values1;
			FriendData v1;
			
			for(int i1=(values1=_d.friends.getValues()).length-1;i1>=0;--i1)
			{
				if((v1=values1[i1])!=null)
				{
					//唯一实例
					v1.data=me.social.addPlayerRoleSocial(v1.playerID,v1.data);
				}
			}
		}
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	@Override
	public void onStart()
	{
		//好友没满
		if(!isFriendListFull())
		{
			ApplyAddFriendData[] values;
			ApplyAddFriendData v;
			
			for(int i=(values=_d.applyDic.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//同意
					agreeApplyFriend(v.playerID);
				}
			}
		}
	}
	
	private int compareApplyAddFriend(ApplyAddFriendData arg1,ApplyAddFriendData arg2)
	{
		if(arg1.applyTime<arg2.applyTime)
			return -1;
		
		if(arg1.applyTime==arg2.applyTime)
			return 0;
		
		return 1;
	}
	
	/** 好友列表是否已满 */
	public boolean isFriendListFull()
	{
		return Global.friendMaxNum>0 && _d.friends.size()>=Global.friendMaxNum;
	}
	
	/** 黑名单列表是否已满 */
	public boolean isBlackListFull()
	{
		return Global.friendBlackListMaxNum>0 && _d.blackList.size()>=Global.friendBlackListMaxNum;
	}
	
	/** 是否为好友 */
	public boolean isFriend(long playerID)
	{
		return _d.friends.contains(playerID);
	}
	
	/** 获取好友数据 */
	public FriendData getFriend(long playerID)
	{
		return _d.friends.get(playerID);
	}
	
	/** 添加好友 */
	public void onAddFriend(FriendData data)
	{
		data.data=me.social.addPlayerRoleSocial(data.playerID,data.data);//唯一实例
		
		_d.friends.put(data.playerID,data);
		
		me.dispatch(GameEventType.AddFriend,data.playerID);
		
		if(_d.applyDic.remove(data.playerID)!=null)
		{
			me.dispatch(GameEventType.RefreshApplyFriendList);
		}
	}
	
	/** 移除好友 */
	public void onRemoveFriend(long playerID)
	{
		_d.friends.remove(playerID);
		
		me.dispatch(GameEventType.RemoveFriend,playerID);
	}
	
	/** 申请添加好友 */
	public void onApplyAddFriend(ApplyAddFriendData data)
	{
		//快捷方式
		OtherUtils.putObjInDicWithMax(data.playerID,data,_d.applyDic,Global.applyAddFriendMaxNum,_applyComparator);
		
		me.dispatch(GameEventType.ReceiveApplyFriend,data.playerID);
		me.dispatch(GameEventType.RefreshApplyFriendList);
	}
	
	/** 添加黑名单 */
	public void onAddBlackList(ContactData data)
	{
		data.data=me.social.addPlayerRoleSocial(data.playerID,data.data);//唯一实例
		
		_d.blackList.put(data.playerID,data);
		
		me.dispatch(GameEventType.AddFriendBlackList);
	}
	
	/** 移除黑名单 */
	public void onRemoveBlackList(long playerID)
	{
		_d.blackList.remove(playerID);
		
		me.dispatch(GameEventType.RemoveFriendBlackList);
	}
	
	/** 同意添加好友 */
	public void agreeApplyFriend(long playerID)
	{
		//好友列表已满
		if(isFriendListFull())
		{
			me.showInfoCode(InfoCodeType.Friend_friendListIsFull);
			return;
		}
		
		//已是好友
		if(_d.friends.contains(playerID))
		{
			me.showInfoCode(InfoCodeType.Friend_targetIsAlreadyFriend);
			return;
		}
		
		if(_d.applyDic.remove(playerID)!=null)
		{
			me.dispatch(GameEventType.RefreshApplyFriendList);
		}
		
		me.send(AgreeAddFriendRequest.create(playerID));
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new FriendClientPartData();
	}
	
	@Override
	public void onEvent(int type,Object data)
	{
		switch(type)
		{
			//接收好友邀请
			case GameEventType.ReceiveApplyFriend:
			{
				long playerID=(long)data;
				
				//没满,并且不是好友
				if(!me.friend.isFriendListFull() && !me.friend.isFriend(playerID))
				{
					me.friend.agreeApplyFriend(playerID);
				}
			}
				break;
		}
	}
	
}
