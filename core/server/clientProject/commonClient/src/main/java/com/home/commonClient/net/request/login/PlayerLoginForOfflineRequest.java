package com.home.commonClient.net.request.login;
import com.home.commonBase.data.system.ClientOfflineWorkData;
import com.home.commonClient.constlist.generate.GameRequestType;
import com.home.commonClient.net.request.login.PlayerLoginRequest;
import com.home.shine.bytes.BytesWriteStream;
import com.home.shine.control.BytesControl;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 离线角色登录消息(generated by shine) */
public class PlayerLoginForOfflineRequest extends PlayerLoginRequest
{
	/** 数据类型ID */
	public static final int dataID=GameRequestType.PlayerLoginForOffline;
	
	/** 离线记录组 */
	public SList<ClientOfflineWorkData> records;
	
	/** 当前客户端种子序号 */
	public int clientRandomSeedIndex;
	
	public PlayerLoginForOfflineRequest()
	{
		_dataID=GameRequestType.PlayerLoginForOffline;
		setLongMessage();
	}
	
	@Override
	protected void copyData()
	{
		super.copyData();
		SList<ClientOfflineWorkData> recordsTemp=records;
		if(recordsTemp!=null)
		{
			this.records=new SList<ClientOfflineWorkData>(ClientOfflineWorkData[]::new,recordsTemp.size());
			SList<ClientOfflineWorkData> recordsT=this.records;
			if(!recordsTemp.isEmpty())
			{
				Object[] recordsVValues=recordsTemp.getValues();
				for(int recordsVI=0,recordsVLen=recordsTemp.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=(ClientOfflineWorkData)recordsVValues[recordsVI];
					ClientOfflineWorkData recordsU;
					if(recordsV!=null)
					{
						recordsU=(ClientOfflineWorkData)recordsV.clone();
					}
					else
					{
						recordsU=null;
						nullObjError("recordsU");
					}
					
					recordsT.add(recordsU);
				}
			}
		}
		else
		{
			this.records=null;
			nullObjError("records");
		}
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "PlayerLoginForOfflineRequest";
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("records");
		writer.sb.append(':');
		writer.sb.append("List<ClientOfflineWorkData>");
		if(this.records!=null)
		{
			SList<ClientOfflineWorkData> recordsT=this.records;
			int recordsLen=recordsT.size();
			writer.sb.append('(');
			writer.sb.append(recordsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int recordsI=0;recordsI<recordsLen;++recordsI)
			{
				ClientOfflineWorkData recordsV=recordsT.get(recordsI);
				writer.writeTabs();
				writer.sb.append(recordsI);
				writer.sb.append(':');
				if(recordsV!=null)
				{
					recordsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ClientOfflineWorkData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("clientRandomSeedIndex");
		writer.sb.append(':');
		writer.sb.append(this.clientRandomSeedIndex);
		
		writer.writeEnter();
	}
	
	/** 写入字节流(完整版) */
	@Override
	protected void toWriteBytesFull(BytesWriteStream stream)
	{
		super.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.records!=null)
		{
			stream.writeLen(this.records.size());
			if(!this.records.isEmpty())
			{
				Object[] recordsVValues=this.records.getValues();
				for(int recordsVI=0,recordsVLen=this.records.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=(ClientOfflineWorkData)recordsVValues[recordsVI];
					if(recordsV!=null)
					{
						stream.writeDataFullNotNull(recordsV);
					}
					else
					{
						nullObjError("recordsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("records");
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
		stream.endWriteObj();
	}
	
	/** 写入字节流(简版) */
	@Override
	protected void toWriteBytesSimple(BytesWriteStream stream)
	{
		super.toWriteBytesSimple(stream);
		
		if(this.records!=null)
		{
			stream.writeLen(this.records.size());
			if(!this.records.isEmpty())
			{
				Object[] recordsVValues=this.records.getValues();
				for(int recordsVI=0,recordsVLen=this.records.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=(ClientOfflineWorkData)recordsVValues[recordsVI];
					if(recordsV!=null)
					{
						stream.writeDataSimpleNotNull(recordsV);
					}
					else
					{
						nullObjError("recordsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("records");
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		if(this.records!=null)
		{
			if(!this.records.isEmpty())
			{
				Object[] recordsVValues=this.records.getValues();
				for(int recordsVI=0,recordsVLen=this.records.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=(ClientOfflineWorkData)recordsVValues[recordsVI];
					recordsV.release(pool);
					recordsV=null;
					recordsVValues[recordsVI]=null;
				}
			}
			this.records.justClearSize();
		}
		this.clientRandomSeedIndex=0;
	}
	
	/** 创建实例 */
	public static PlayerLoginForOfflineRequest create(long playerID,SList<ClientOfflineWorkData> records,int clientRandomSeedIndex)
	{
		PlayerLoginForOfflineRequest re=(PlayerLoginForOfflineRequest)BytesControl.createRequest(dataID);
		re.playerID=playerID;
		re.records=records;
		re.clientRandomSeedIndex=clientRandomSeedIndex;
		return re;
	}
	
}
