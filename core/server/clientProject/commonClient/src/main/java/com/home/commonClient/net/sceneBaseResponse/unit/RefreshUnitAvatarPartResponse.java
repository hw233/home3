package com.home.commonClient.net.sceneBaseResponse.unit;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.constlist.generate.SceneBaseResponseType;
import com.home.commonClient.net.sceneBaseResponse.base.UnitSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntIntMap;
import com.home.shine.support.pool.DataPool;

/** 刷新单位显示部件数据(generated by shine) */
public class RefreshUnitAvatarPartResponse extends UnitSResponse
{
	/** 数据类型ID */
	public static final int dataID=SceneBaseResponseType.RefreshUnitAvatarPart;
	
	/** 改变组 */
	public IntIntMap parts;
	
	public RefreshUnitAvatarPartResponse()
	{
		_dataID=SceneBaseResponseType.RefreshUnitAvatarPart;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		scene.getFightUnitAbs(instanceID).getUnitData().fightDataLogic.avatar.setAvatarPartByServer(parts);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "RefreshUnitAvatarPartResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int partsLen=stream.readLen();
		if(this.parts!=null)
		{
			this.parts.clear();
			this.parts.ensureCapacity(partsLen);
		}
		else
		{
			this.parts=new IntIntMap(partsLen);
		}
		
		IntIntMap partsT=this.parts;
		for(int partsI=partsLen-1;partsI>=0;--partsI)
		{
			int partsK;
			int partsV;
			partsK=stream.readInt();
			
			partsV=stream.readInt();
			
			partsT.put(partsK,partsV);
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int partsLen=stream.readLen();
		if(this.parts!=null)
		{
			this.parts.clear();
			this.parts.ensureCapacity(partsLen);
		}
		else
		{
			this.parts=new IntIntMap(partsLen);
		}
		
		IntIntMap partsT=this.parts;
		for(int partsI=partsLen-1;partsI>=0;--partsI)
		{
			int partsK;
			int partsV;
			partsK=stream.readInt();
			
			partsV=stream.readInt();
			
			partsT.put(partsK,partsV);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("parts");
		writer.sb.append(':');
		writer.sb.append("Map<int,int>");
		if(this.parts!=null)
		{
			writer.sb.append('(');
			writer.sb.append(this.parts.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.parts.isEmpty())
			{
				int partsKFreeValue=this.parts.getFreeValue();
				int[] partsKTable=this.parts.getTable();
				for(int partsKI=partsKTable.length-2;partsKI>=0;partsKI-=2)
				{
					if(partsKTable[partsKI]!=partsKFreeValue)
					{
						int partsK=partsKTable[partsKI];
						int partsV=partsKTable[partsKI+1];
						writer.writeTabs();
						writer.sb.append(partsK);
						
						writer.sb.append(':');
						writer.sb.append(partsV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.parts=null;
	}
	
}
