package com.home.commonClient.net.response.func.item;
import com.home.commonBase.data.item.ItemData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.response.func.base.FuncSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 推送整理物品消息(generated by shine) */
public class FuncSendCleanUpItemResponse extends FuncSResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.FuncSendCleanUpItem;
	
	/** 道具组 */
	public SList<ItemData> items;
	
	public FuncSendCleanUpItemResponse()
	{
		_dataID=GameResponseType.FuncSendCleanUpItem;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		me.func.getItemContainerTool(funcID).onCleanUpByServer(items);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncSendCleanUpItemResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>(ItemData[]::new,itemsLen);
			}
			
			SList<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				ItemData itemsV;
				if(stream.readBoolean())
				{
					BaseData itemsVT=stream.readDataFullNotNull();
					if(itemsVT!=null)
					{
						if(itemsVT instanceof ItemData)
						{
							itemsV=(ItemData)itemsVT;
						}
						else
						{
							itemsV=new ItemData();
							if(!(itemsVT.getClass().isAssignableFrom(ItemData.class)))
							{
								stream.throwTypeReadError(ItemData.class,itemsVT.getClass());
							}
							itemsV.shadowCopy(itemsVT);
						}
					}
					else
					{
						itemsV=null;
					}
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.add(itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>(ItemData[]::new,itemsLen);
			}
			
			SList<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				ItemData itemsV;
				if(stream.readBoolean())
				{
					itemsV=(ItemData)stream.readDataSimpleNotNull();
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.add(itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("items");
		writer.sb.append(':');
		writer.sb.append("List<ItemData>");
		if(this.items!=null)
		{
			SList<ItemData> itemsT=this.items;
			int itemsLen=itemsT.size();
			writer.sb.append('(');
			writer.sb.append(itemsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int itemsI=0;itemsI<itemsLen;++itemsI)
			{
				ItemData itemsV=itemsT.get(itemsI);
				writer.writeTabs();
				writer.sb.append(itemsI);
				writer.sb.append(':');
				if(itemsV!=null)
				{
					itemsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("ItemData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.items=null;
	}
	
}
