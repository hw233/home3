package com.home.commonClient.net.response.func.auction;
import com.home.commonBase.data.item.auction.AuctionItemData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.response.func.base.FuncSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 返回拍卖行查询结果(generated by shine) */
public class FuncAuctionReQueryResponse extends FuncSResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.FuncAuctionReQuery;
	
	/** 结果页码 */
	public int page;
	
	/** 结果组 */
	public SList<AuctionItemData> resultList;
	
	public FuncAuctionReQueryResponse()
	{
		_dataID=GameResponseType.FuncAuctionReQuery;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "FuncAuctionReQueryResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.page=stream.readInt();
		
		int resultListLen=stream.readLen();
		if(this.resultList!=null)
		{
			this.resultList.clear();
			this.resultList.ensureCapacity(resultListLen);
		}
		else
		{
			this.resultList=new SList<AuctionItemData>(AuctionItemData[]::new,resultListLen);
		}
		
		SList<AuctionItemData> resultListT=this.resultList;
		for(int resultListI=resultListLen-1;resultListI>=0;--resultListI)
		{
			AuctionItemData resultListV;
			BaseData resultListVT=stream.readDataFullNotNull();
			if(resultListVT!=null)
			{
				if(resultListVT instanceof AuctionItemData)
				{
					resultListV=(AuctionItemData)resultListVT;
				}
				else
				{
					resultListV=new AuctionItemData();
					if(!(resultListVT.getClass().isAssignableFrom(AuctionItemData.class)))
					{
						stream.throwTypeReadError(AuctionItemData.class,resultListVT.getClass());
					}
					resultListV.shadowCopy(resultListVT);
				}
			}
			else
			{
				resultListV=null;
			}
			
			resultListT.add(resultListV);
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.page=stream.readInt();
		
		int resultListLen=stream.readLen();
		if(this.resultList!=null)
		{
			this.resultList.clear();
			this.resultList.ensureCapacity(resultListLen);
		}
		else
		{
			this.resultList=new SList<AuctionItemData>(AuctionItemData[]::new,resultListLen);
		}
		
		SList<AuctionItemData> resultListT=this.resultList;
		for(int resultListI=resultListLen-1;resultListI>=0;--resultListI)
		{
			AuctionItemData resultListV;
			resultListV=(AuctionItemData)stream.readDataSimpleNotNull();
			
			resultListT.add(resultListV);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("page");
		writer.sb.append(':');
		writer.sb.append(this.page);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("resultList");
		writer.sb.append(':');
		writer.sb.append("List<AuctionItemData>");
		if(this.resultList!=null)
		{
			SList<AuctionItemData> resultListT=this.resultList;
			int resultListLen=resultListT.size();
			writer.sb.append('(');
			writer.sb.append(resultListLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int resultListI=0;resultListI<resultListLen;++resultListI)
			{
				AuctionItemData resultListV=resultListT.get(resultListI);
				writer.writeTabs();
				writer.sb.append(resultListI);
				writer.sb.append(':');
				if(resultListV!=null)
				{
					resultListV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("AuctionItemData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.page=0;
		this.resultList=null;
	}
	
}
