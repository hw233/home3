package com.home.commonClient.part.player.part;
import com.home.commonBase.data.role.PetUseData;
import com.home.commonBase.global.Global;
import com.home.commonBase.part.player.clientData.PetClientPartData;
import com.home.commonClient.global.ClientC;
import com.home.commonClient.logic.unit.PetUseLogic;
import com.home.commonClient.part.player.base.PlayerBasePart;
import com.home.shine.data.BaseData;
import com.home.shine.support.collection.IntObjectMap;

/** 宠物(generated by shine) */
public class PetPart extends PlayerBasePart
{
	/** 数据 */
	private PetClientPartData _d;
	
	private IntObjectMap<PetUseLogic> _petDic=new IntObjectMap<PetUseLogic>();
	
	private IntObjectMap<PetUseLogic> _petDicByID;
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(PetClientPartData)data;
	}
	
	/** 获取数据 */
	public PetClientPartData getPartData()
	{
		return _d;
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new PetClientPartData();
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		_petDic.forEachValueAndClear(v->
		{
			v.dispose();
			//me.getExecutor().petUseLogicPool.back(v);
		});
		
		if(Global.isPetUnique)
		{
			_petDicByID.clear();
		}
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		PetUseData[] values;
		PetUseData v;
		
		for(int i=(values=_d.petDic.getValues()).length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				//PetUseLogic logic=GameC.pool.petUseLogicPool.getOne();
				PetUseLogic logic=ClientC.factory.createPetUseLogic();
				initPetUseLogicByUseData(logic,v);
			}
		}
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	public void initPetUseLogicByUseData(PetUseLogic logic,PetUseData useData)
	{
		me.character.initUseLogicByUseData(logic,useData,false,Global.isPetNeedEquip);
		
		_petDic.put(logic.index,logic);
		
		if(Global.isPetUnique)
		{
			if(_petDicByID.contains(useData.id))
			{
				me.errorLog("已存在的宠物数据");
			}
			
			_petDicByID.put(useData.id,logic);
		}
	}
	
}
