package com.home.commonClient.net.response.scene.scene;
import com.home.commonBase.data.scene.unit.UnitData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.response.scene.base.SceneSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.data.BaseData;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.IntList;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** AOI灯塔刷新消息(删除一组+添加一组)(generated by shine) */
public class AOITowerRefreshResponse extends SceneSResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.AOITowerRefresh;
	
	/** 移除单位组 */
	public IntList removeUnits;
	
	/** 添加单位组 */
	public SList<UnitData> addUnits;
	
	public AOITowerRefreshResponse()
	{
		_dataID=GameResponseType.AOITowerRefresh;
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "AOITowerRefreshResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int removeUnitsLen=stream.readLen();
		if(this.removeUnits!=null)
		{
			this.removeUnits.clear();
			this.removeUnits.ensureCapacity(removeUnitsLen);
		}
		else
		{
			this.removeUnits=new IntList(removeUnitsLen);
		}
		
		IntList removeUnitsT=this.removeUnits;
		for(int removeUnitsI=removeUnitsLen-1;removeUnitsI>=0;--removeUnitsI)
		{
			int removeUnitsV;
			removeUnitsV=stream.readInt();
			
			removeUnitsT.add(removeUnitsV);
		}
		
		int addUnitsLen=stream.readLen();
		if(this.addUnits!=null)
		{
			this.addUnits.clear();
			this.addUnits.ensureCapacity(addUnitsLen);
		}
		else
		{
			this.addUnits=new SList<UnitData>(UnitData[]::new,addUnitsLen);
		}
		
		SList<UnitData> addUnitsT=this.addUnits;
		for(int addUnitsI=addUnitsLen-1;addUnitsI>=0;--addUnitsI)
		{
			UnitData addUnitsV;
			BaseData addUnitsVT=stream.readDataFullNotNull();
			if(addUnitsVT!=null)
			{
				if(addUnitsVT instanceof UnitData)
				{
					addUnitsV=(UnitData)addUnitsVT;
				}
				else
				{
					addUnitsV=new UnitData();
					if(!(addUnitsVT.getClass().isAssignableFrom(UnitData.class)))
					{
						stream.throwTypeReadError(UnitData.class,addUnitsVT.getClass());
					}
					addUnitsV.shadowCopy(addUnitsVT);
				}
			}
			else
			{
				addUnitsV=null;
			}
			
			addUnitsT.add(addUnitsV);
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int removeUnitsLen=stream.readLen();
		if(this.removeUnits!=null)
		{
			this.removeUnits.clear();
			this.removeUnits.ensureCapacity(removeUnitsLen);
		}
		else
		{
			this.removeUnits=new IntList(removeUnitsLen);
		}
		
		IntList removeUnitsT=this.removeUnits;
		for(int removeUnitsI=removeUnitsLen-1;removeUnitsI>=0;--removeUnitsI)
		{
			int removeUnitsV;
			removeUnitsV=stream.readInt();
			
			removeUnitsT.add(removeUnitsV);
		}
		
		int addUnitsLen=stream.readLen();
		if(this.addUnits!=null)
		{
			this.addUnits.clear();
			this.addUnits.ensureCapacity(addUnitsLen);
		}
		else
		{
			this.addUnits=new SList<UnitData>(UnitData[]::new,addUnitsLen);
		}
		
		SList<UnitData> addUnitsT=this.addUnits;
		for(int addUnitsI=addUnitsLen-1;addUnitsI>=0;--addUnitsI)
		{
			UnitData addUnitsV;
			addUnitsV=(UnitData)stream.readDataSimpleNotNull();
			
			addUnitsT.add(addUnitsV);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("removeUnits");
		writer.sb.append(':');
		writer.sb.append("List<int>");
		if(this.removeUnits!=null)
		{
			IntList removeUnitsT=this.removeUnits;
			int removeUnitsLen=removeUnitsT.size();
			writer.sb.append('(');
			writer.sb.append(removeUnitsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int removeUnitsI=0;removeUnitsI<removeUnitsLen;++removeUnitsI)
			{
				int removeUnitsV=removeUnitsT.get(removeUnitsI);
				writer.writeTabs();
				writer.sb.append(removeUnitsI);
				writer.sb.append(':');
				writer.sb.append(removeUnitsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("addUnits");
		writer.sb.append(':');
		writer.sb.append("List<UnitData>");
		if(this.addUnits!=null)
		{
			SList<UnitData> addUnitsT=this.addUnits;
			int addUnitsLen=addUnitsT.size();
			writer.sb.append('(');
			writer.sb.append(addUnitsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int addUnitsI=0;addUnitsI<addUnitsLen;++addUnitsI)
			{
				UnitData addUnitsV=addUnitsT.get(addUnitsI);
				writer.writeTabs();
				writer.sb.append(addUnitsI);
				writer.sb.append(':');
				if(addUnitsV!=null)
				{
					addUnitsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("UnitData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		int[] values1=removeUnits.getValues();
		
		for(int i1=0,len1=removeUnits.size();i1<len1;++i1)
		{
			scene.removeUnit(values1[i1]);
		}
		
		UnitData[] values=addUnits.getValues();
		
		for(int i=0,len=addUnits.size();i<len;++i)
		{
			scene.addUnit(values[i]);
		}
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.removeUnits=null;
		this.addUnits=null;
	}
	
}
