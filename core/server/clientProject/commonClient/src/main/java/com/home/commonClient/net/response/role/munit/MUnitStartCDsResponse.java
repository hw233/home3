package com.home.commonClient.net.response.role.munit;
import com.home.commonBase.data.scene.base.CDData;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.base.GameResponse;
import com.home.commonClient.net.response.role.munit.MUnitSResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.collection.SList;
import com.home.shine.support.pool.DataPool;

/** 玩家单位开始CD组(generated by shine) */
public class MUnitStartCDsResponse extends MUnitSResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.MUnitStartCDs;
	
	/** 冷却组 */
	public SList<CDData> cds;
	
	public MUnitStartCDsResponse()
	{
		_dataID=GameResponseType.MUnitStartCDs;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		mLogic.getFightLogic().cd.startCDsByServer(cds);
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "MUnitStartCDsResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int cdsLen=stream.readLen();
		if(this.cds!=null)
		{
			this.cds.clear();
			this.cds.ensureCapacity(cdsLen);
		}
		else
		{
			this.cds=new SList<CDData>(CDData[]::new,cdsLen);
		}
		
		SList<CDData> cdsT=this.cds;
		for(int cdsI=cdsLen-1;cdsI>=0;--cdsI)
		{
			CDData cdsV;
			cdsV=new CDData();
			cdsV.readBytesFull(stream);
			
			cdsT.add(cdsV);
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		int cdsLen=stream.readLen();
		if(this.cds!=null)
		{
			this.cds.clear();
			this.cds.ensureCapacity(cdsLen);
		}
		else
		{
			this.cds=new SList<CDData>(CDData[]::new,cdsLen);
		}
		
		SList<CDData> cdsT=this.cds;
		for(int cdsI=cdsLen-1;cdsI>=0;--cdsI)
		{
			CDData cdsV;
			cdsV=new CDData();
			cdsV.readBytesSimple(stream);
			
			cdsT.add(cdsV);
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("cds");
		writer.sb.append(':');
		writer.sb.append("List<CDData>");
		if(this.cds!=null)
		{
			SList<CDData> cdsT=this.cds;
			int cdsLen=cdsT.size();
			writer.sb.append('(');
			writer.sb.append(cdsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int cdsI=0;cdsI<cdsLen;++cdsI)
			{
				CDData cdsV=cdsT.get(cdsI);
				writer.writeTabs();
				writer.sb.append(cdsI);
				writer.sb.append(':');
				if(cdsV!=null)
				{
					cdsV.writeDataString(writer);
				}
				else
				{
					writer.sb.append("CDData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.cds=null;
	}
	
}
