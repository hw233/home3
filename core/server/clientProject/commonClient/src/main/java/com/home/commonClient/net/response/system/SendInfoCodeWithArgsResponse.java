package com.home.commonClient.net.response.system;
import com.home.commonClient.constlist.generate.GameResponseType;
import com.home.commonClient.net.base.GameResponse;
import com.home.shine.bytes.BytesReadStream;
import com.home.shine.support.DataWriter;
import com.home.shine.support.pool.DataPool;

/** 推送带参信息码消息(generated by shine) */
public class SendInfoCodeWithArgsResponse extends GameResponse
{
	/** 数据类型ID */
	public static final int dataID=GameResponseType.SendInfoCodeWithArgs;
	
	/** 码 */
	public int code;
	
	/** 参数组 */
	public String[] args;
	
	public SendInfoCodeWithArgsResponse()
	{
		_dataID=GameResponseType.SendInfoCodeWithArgs;
	}
	
	/** 执行 */
	@Override
	protected void execute()
	{
		
	}
	
	/** 获取数据类名 */
	@Override
	public String getDataClassName()
	{
		return "SendInfoCodeWithArgsResponse";
	}
	
	/** 读取字节流(完整版) */
	@Override
	protected void toReadBytesFull(BytesReadStream stream)
	{
		super.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.code=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.length!=argsLen)
		{
			this.args=new String[argsLen];
		}
		String[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			String argsV;
			argsV=stream.readUTF();
			
			argsT[argsI]=argsV;
		}
		
		stream.endReadObj();
	}
	
	/** 读取字节流(简版) */
	@Override
	protected void toReadBytesSimple(BytesReadStream stream)
	{
		super.toReadBytesSimple(stream);
		
		this.code=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.length!=argsLen)
		{
			this.args=new String[argsLen];
		}
		String[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			String argsV;
			argsV=stream.readUTF();
			
			argsT[argsI]=argsV;
		}
		
	}
	
	/** 转文本输出 */
	@Override
	protected void toWriteDataString(DataWriter writer)
	{
		super.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.append("code");
		writer.sb.append(':');
		writer.sb.append(this.code);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.append("args");
		writer.sb.append(':');
		writer.sb.append("Array<String>");
		if(this.args!=null)
		{
			String[] argsT=this.args;
			int argsLen=argsT.length;
			writer.sb.append('(');
			writer.sb.append(argsLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				String argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.append(argsI);
				writer.sb.append(':');
				writer.sb.append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.append("=null");
		}
		
		writer.writeEnter();
	}
	
	/** 回池 */
	@Override
	protected void toRelease(DataPool pool)
	{
		super.toRelease(pool);
		
		this.code=0;
		this.args=null;
	}
	
}
