package com.home.commonClient.part.player.part;
import com.home.commonBase.constlist.generate.FuncToolType;
import com.home.commonBase.data.func.FuncToolData;
import com.home.commonBase.part.player.clientData.FuncClientPartData;
import com.home.commonBase.tool.func.BaseItemContainerTool;
import com.home.commonBase.tool.func.FuncTool;
import com.home.commonClient.net.request.func.match.FuncApplyMatchRequest;
import com.home.commonClient.part.player.base.PlayerBasePart;
import com.home.commonClient.tool.func.IPlayerFuncTool;
import com.home.commonClient.tool.func.PlayerItemContainerTool;
import com.home.commonClient.tool.func.PlayerItemDicContainerTool;
import com.home.commonClient.tool.func.PlayerPageShowTool;
import com.home.commonClient.tool.func.PlayerRankTool;
import com.home.commonClient.tool.func.PlayerRoleGroupTool;
import com.home.shine.ctrl.Ctrl;
import com.home.shine.data.BaseData;
import com.home.shine.global.ShineSetting;
import com.home.shine.support.collection.IntObjectMap;
import com.home.shine.support.collection.SList;

/** 通用功能(generated by shine) */
public class FuncPart extends PlayerBasePart
{
	/** 数据 */
	private FuncClientPartData _d;
	
	/** 功能插件字典 */
	private IntObjectMap<FuncTool>[] _funcToolDic=new IntObjectMap[FuncToolType.size];
	
	/** 功能插件列表 */
	private SList<FuncTool> _funcToolList=new SList<>(FuncTool[]::new);
	
	/** 功能插件列表 */
	private SList<IPlayerFuncTool> _playerFuncToolList=new SList<>(IPlayerFuncTool[]::new);
	
	@Override
	public void setData(BaseData data)
	{
		super.setData(data);
		
		_d=(FuncClientPartData)data;
	}
	
	/** 获取数据 */
	public FuncClientPartData getPartData()
	{
		return _d;
	}
	
	/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
	@Override
	public void construct()
	{
		
	}
	
	/** 构造数据前 */
	@Override
	protected void beforeMakeData()
	{
		
	}
	
	/** 初始化(创建后刚调用,与dispose成对) */
	@Override
	public void init()
	{
		_funcToolList.forEach(v->
		{
			v.init();
		});
	}
	
	/** 析构(回池前调用,与init成对) */
	@Override
	public void dispose()
	{
		_funcToolList.forEach(v->
		{
			v.dispose();
		});
	}
	
	/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
	@Override
	public void afterReadData()
	{
		_d.funcTools.forEach((k,v)->
		{
			if(v!=null)
			{
				v.forEach((k1,v1)->
				{
					FuncTool funcTool=getFuncTool(k,k1);
					
					if(funcTool!=null)
					{
						funcTool.setData(v1);
					}
					else
					{
						Ctrl.errorLog("找不到功能插件type:",k,"funcID:",k1);
					}
				});
			}
		});
	}
	
	/** 每秒调用 */
	@Override
	public void onSecond(int delay)
	{
		FuncTool[] values=_funcToolList.getValues();
		
		for(int i=0,len=_funcToolList.size();i<len;++i)
		{
			values[i].onSecond(delay);
		}
	}
	
	/** 功能开启(id:功能ID) */
	@Override
	public void onFunctionOpen(int id)
	{
		
	}
	
	/** 功能关闭(id:功能ID) */
	@Override
	public void onFunctionClose(int id)
	{
		
	}
	
	public boolean isFunctionOpen(int id)
	{
		//TODO:功能开启
		return true;
	}
	
	@Override
	public void onStart()
	{
		IPlayerFuncTool[] values=_playerFuncToolList.getValues();
		
		for(int i=0,len=_playerFuncToolList.size();i<len;++i)
		{
			values[i].onStart();
		}
	}
	
	/** 获取功能插件组(没有就创建) */
	public IntObjectMap<FuncTool> getFuncToolDic(int type)
	{
		IntObjectMap<FuncTool> dic=_funcToolDic[type];
		
		if(dic==null)
		{
			return _funcToolDic[type]=new IntObjectMap<>();
		}
		else
		{
			return dic;
		}
	}
	
	public FuncTool registFuncTool(IPlayerFuncTool tool)
	{
		toRegistFuncTool(tool);
		
		return (FuncTool) tool;
	}
	
	private void toRegistFuncTool(IPlayerFuncTool tool)
	{
		FuncTool fTool=(FuncTool)tool;
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(fTool.getType());
		
		int funcID=fTool.getFuncID();
		
		if(ShineSetting.openCheck)
		{
			if(dic.contains(funcID))
			{
				Ctrl.throwError("已经存在功能插件:",fTool.getType(),funcID);
			}
		}
		
		//设置主角
		tool.setMe(me);
		
		dic.put(funcID,fTool);
		_funcToolList.add(fTool);
		_playerFuncToolList.add(tool);
		fTool.construct();
	}
	
	public void addFuncTool(IPlayerFuncTool tool,FuncToolData data)
	{
		FuncTool fTool=(FuncTool)tool;
		
		fTool.isAdded=true;
		toRegistFuncTool(tool);
		fTool.setData(data);
		tool.afterReadDataSecond();
	}
	
	public void removeFuncTool(FuncTool tool)
	{
		if(!tool.isAdded)
		{
			Ctrl.throwError("不可删除非added的FuncTool");
			return;
		}
		
		_funcToolList.removeObj(tool);
		_playerFuncToolList.removeObj((IPlayerFuncTool)tool);
		
		IntObjectMap<FuncTool> dic=getFuncToolDic(tool.getType());
		dic.remove(tool.getFuncID());
	}
	
	public FuncTool getFuncTool(int type,int funcID)
	{
		return getFuncToolDic(type).get(funcID);
	}
	
	public PlayerRankTool getRankTool(int funcID)
	{
		return (PlayerRankTool)getFuncTool(FuncToolType.Rank,funcID);
	}
	
	public PlayerPageShowTool getPageShowTool(int funcID)
	{
		return (PlayerPageShowTool)getFuncTool(FuncToolType.PageShow,funcID);
	}
	
	public BaseItemContainerTool getBaseItemContainerTool(int funcID)
	{
		FuncTool funcTool=getFuncTool(FuncToolType.ItemContainer,funcID);
		
		if(funcTool==null)
			funcTool=getFuncTool(FuncToolType.ItemDicContainer,funcID);
		
		return (BaseItemContainerTool)funcTool;
	}
	
	public PlayerItemContainerTool getItemContainerTool(int funcID)
	{
		return (PlayerItemContainerTool)getFuncTool(FuncToolType.ItemContainer,funcID);
	}
	
	public PlayerItemDicContainerTool getItemDicContainerTool(int funcID)
	{
		return (PlayerItemDicContainerTool)getFuncTool(FuncToolType.ItemDicContainer,funcID);
	}
	
	public PlayerRoleGroupTool getRoleGroupTool(int funcID)
	{
		return (PlayerRoleGroupTool)getFuncTool(FuncToolType.RoleGroup,funcID);
	}
	
	/** 匹配超时 */
	public void onMatchTimeOut(int funcID)
	{
		//继续再匹配
		me.send(FuncApplyMatchRequest.create(funcID));
	}
	
	@Override
	protected BaseData createPartData()
	{
		return new FuncClientPartData();
	}
	
	@Override
	public void onEvent(int type,Object data)
	{
		IPlayerFuncTool[] values=_playerFuncToolList.getValues();
		
		for(int i=0,len=_playerFuncToolList.size();i<len;++i)
		{
			values[i].onEvent(type,data);
		}
	}
	
}
