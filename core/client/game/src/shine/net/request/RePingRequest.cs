using ShineEngine;

namespace ShineEngine
{
	/// <summary>
	/// ping包回复(第二步)(generated by shine)
	/// </summary>
	public class RePingRequest:ShineRequest
	{
		/// <summary>
		/// 数据类型ID
		/// </summary>
		public const int dataID=ShineRequestType.RePing;
		
		public int index;
		
		public RePingRequest()
		{
			_dataID=ShineRequestType.RePing;
		}
		
		/// <summary>
		/// 获取数据类名
		/// </summary>
		public override string getDataClassName()
		{
			return "RePingRequest";
		}
		
		/// <summary>
		/// 写入字节流(完整版)
		/// </summary>
		protected override void toWriteBytesFull(BytesWriteStream stream)
		{
			base.toWriteBytesFull(stream);
			
			stream.startWriteObj();
			
			stream.writeInt(this.index);
			
			stream.endWriteObj();
		}
		
		/// <summary>
		/// 写入字节流(简版)
		/// </summary>
		protected override void toWriteBytesSimple(BytesWriteStream stream)
		{
			base.toWriteBytesSimple(stream);
			
			stream.writeInt(this.index);
			
		}
		
		/// <summary>
		/// 转文本输出
		/// </summary>
		protected override void toWriteDataString(DataWriter writer)
		{
			base.toWriteDataString(writer);
			
			writer.writeTabs();
			writer.sb.Append("index");
			writer.sb.Append(':');
			writer.sb.Append(this.index);
			
			writer.writeEnter();
		}
		
		/// <summary>
		/// 回池
		/// </summary>
		protected override void toRelease(DataPool pool)
		{
			base.toRelease(pool);
			
			this.index=0;
		}
		
		protected override void copyData()
		{
			base.copyData();
		}
		
		/// <summary>
		/// 创建实例
		/// </summary>
		public static RePingRequest create(int index)
		{
			RePingRequest re=(RePingRequest)BytesControl.createRequest(dataID);
			re.index=index;
			return re;
		}
		
	}
}
