using ShineEngine;

/// <summary>
/// 重连消息(generated by shine)
/// </summary>
public class SocketReconnectRequest:ShineRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=ShineRequestType.SocketReconnect;
	
	/// <summary>
	/// 源socketID
	/// </summary>
	public int socketID;
	
	/// <summary>
	/// 令牌
	/// </summary>
	public int token;
	
	/// <summary>
	/// 最后收包索引
	/// </summary>
	public int lastReceiveIndex;
	
	public SocketReconnectRequest()
	{
		_dataID=ShineRequestType.SocketReconnect;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "SocketReconnectRequest";
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.socketID);
		
		stream.writeInt(this.token);
		
		stream.writeInt(this.lastReceiveIndex);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.socketID);
		
		stream.writeInt(this.token);
		
		stream.writeInt(this.lastReceiveIndex);
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("socketID");
		writer.sb.Append(':');
		writer.sb.Append(this.socketID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("token");
		writer.sb.Append(':');
		writer.sb.Append(this.token);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("lastReceiveIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.lastReceiveIndex);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.socketID=0;
		this.token=0;
		this.lastReceiveIndex=0;
	}
	
	protected override void copyData()
	{
		base.copyData();
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static SocketReconnectRequest create(int socketID,int token,int lastReceiveIndex)
	{
		SocketReconnectRequest re=(SocketReconnectRequest)BytesControl.createRequest(dataID);
		re.socketID=socketID;
		re.token=token;
		re.lastReceiveIndex=lastReceiveIndex;
		return re;
	}
	
}
