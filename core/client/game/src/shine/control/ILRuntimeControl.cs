using AppDomain = ILRuntime.Runtime.Enviorment.AppDomain;
using ILRuntime.Runtime.Intepreter;
using Object = UnityEngine.Object;
using ShineEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

namespace ShineEngine
{
	/// <summary>
	/// (generated by shine)
	/// </summary>
	public class ILRuntimeControl
	{
		public static ILRuntimeControl instance;
		
		public ILRuntimeControl()
		{
			instance=this;


		}
		
		public void initSGenerateList(List<Type> list)
		{
			list.Add(typeof(int));
			list.Add(typeof(float));
			list.Add(typeof(double));
			list.Add(typeof(long));
			list.Add(typeof(object));
			list.Add(typeof(string));
			list.Add(typeof(Array));
			list.Add(typeof(Vector2));
			list.Add(typeof(Vector3));
			list.Add(typeof(Quaternion));
			list.Add(typeof(GameObject));
			list.Add(typeof(Object));
			// list.Add(typeof(Double));
			list.Add(typeof(Transform));
			list.Add(typeof(RectTransform));
			list.Add(typeof(Time));
//			list.Add(typeof(Debug));
			//所有DLL内的类型的真实C#类型都是ILTypeInstance
			list.Add(typeof(List<ILTypeInstance>));
		}
		
		public virtual void initCGenerateList(List<Type> list)
		{

		}
		
		public virtual void initGGenerateList(List<Type> list)
		{

		}
		
		protected virtual void initGenerateAdapters(AppDomain appdomain)
		{
			
		}
		
		protected virtual void initOtherAdapters(AppDomain appdomain)
		{
			appdomain.RegisterCrossBindingAdaptor(new MonoBehaviourAdapter());
			appdomain.RegisterCrossBindingAdaptor(new BaseDataAdapter());
			appdomain.RegisterCrossBindingAdaptor(new BaseRequestAdapter());
			appdomain.RegisterCrossBindingAdaptor(new BaseResponseAdapter());
			appdomain.RegisterCrossBindingAdaptor(new BytesHttpRequestAdapter());
			appdomain.RegisterCrossBindingAdaptor(new DataMakerAdapter());
			appdomain.RegisterCrossBindingAdaptor(new UIContainerAdapter());
			appdomain.RegisterCrossBindingAdaptor(new UIElementAdapter());
			appdomain.RegisterCrossBindingAdaptor(new UIModelAdapter());
			appdomain.RegisterCrossBindingAdaptor(new PoolObjectAdapter());
		}
		
		protected virtual void initConfigAdapters(AppDomain appdomain)
		{

		}
		
		protected virtual void initDataAdapters(AppDomain appdomain)
		{

		}
		
		protected virtual void initDelegate(AppDomain appdomain)
		{
			appdomain.DelegateManager.RegisterFunctionDelegate<BaseData>();
			appdomain.DelegateManager.RegisterFunctionDelegate<BaseDataAdapter.Adaptor>();
			appdomain.DelegateManager.RegisterFunctionDelegate<ILTypeInstance>();
			appdomain.DelegateManager.RegisterFunctionDelegate<int,BaseResponse>();
			appdomain.DelegateManager.RegisterFunctionDelegate<BaseDataAdapter.Adaptor,BaseDataAdapter.Adaptor,int>();
			appdomain.DelegateManager.RegisterFunctionDelegate<AudioSource>();
			appdomain.DelegateManager.RegisterFunctionDelegate<int,ILTypeInstance>();
			appdomain.DelegateManager.RegisterFunctionDelegate<UIObject>();
			appdomain.DelegateManager.RegisterFunctionDelegate<PoolObjectAdapter.Adaptor>();
			appdomain.DelegateManager.RegisterFunctionDelegate<SList<ILTypeInstance>>();


			appdomain.DelegateManager.RegisterMethodDelegate<object>();
			appdomain.DelegateManager.RegisterMethodDelegate<bool>();
			appdomain.DelegateManager.RegisterMethodDelegate<float>();
			appdomain.DelegateManager.RegisterMethodDelegate<int>();
			appdomain.DelegateManager.RegisterMethodDelegate<double>();
			appdomain.DelegateManager.RegisterMethodDelegate<long>();
			appdomain.DelegateManager.RegisterMethodDelegate<KeyCode,bool>();
			appdomain.DelegateManager.RegisterMethodDelegate<Touch,bool>();
			appdomain.DelegateManager.RegisterMethodDelegate<ILTypeInstance>();
			appdomain.DelegateManager.RegisterMethodDelegate<BaseDataAdapter.Adaptor>();
			appdomain.DelegateManager.RegisterMethodDelegate<GameObject>();
			appdomain.DelegateManager.RegisterMethodDelegate<int,ILTypeInstance>();
			appdomain.DelegateManager.RegisterMethodDelegate<int,BaseDataAdapter.Adaptor>();
			appdomain.DelegateManager.RegisterMethodDelegate<int,int>();
			appdomain.DelegateManager.RegisterMethodDelegate<int,bool>();
			appdomain.DelegateManager.RegisterMethodDelegate<float,float>();
			appdomain.DelegateManager.RegisterMethodDelegate<Vector3>();
			appdomain.DelegateManager.RegisterMethodDelegate<PointerEventData>();


			appdomain.DelegateManager.RegisterDelegateConvertor<Comparison<BaseDataAdapter.Adaptor>>(act =>
			{
				return new Comparison<BaseDataAdapter.Adaptor>((x, y) =>
				{
					return ((Func<BaseDataAdapter.Adaptor, BaseDataAdapter.Adaptor, int>)act)(x, y);
				});
			});
		}
		
		public void initILRuntime(AppDomain appdomain)
		{
			//TODO:回头弄好ILRuntime
			// CLRBindings.Initialize(appdomain);
			initGenerateAdapters(appdomain);
			initOtherAdapters(appdomain);
			initConfigAdapters(appdomain);
			initDataAdapters(appdomain);
			initDelegate(appdomain);
		}
		
		public virtual void initCAdapters(SList<ILClassInfo> list)
		{

		}
		
		public virtual void initGAdapters(SList<ILClassInfo> list)
		{

		}
		
		public void initSAdapters(SList<ILClassInfo> list)
		{
			ILClassInfo cls;

			list.add(cls=new ILClassInfo("MonoBehaviour"));
			cls.addMethod("Start",null,VisitType.Private,false);
			cls.addMethod("Update",null,VisitType.Private,false);
			cls.addMethod("FixedUpdate",null,VisitType.Private,false);
			cls.addMethod("OnGUI",null,VisitType.Private,false);
			cls.addMethod("OnDestroy",null,VisitType.Private,false);

			list.add(cls=new ILClassInfo("BaseData"));
			cls.addMethod("toReadBytesFull",VisitType.Protected,"BytesReadStream","stream");
			cls.addMethod("toWriteBytesFull",VisitType.Protected,"BytesWriteStream","stream");
			cls.addMethod("toReadBytesSimple",VisitType.Protected,"BytesReadStream","stream");
			cls.addMethod("toWriteBytesSimple",VisitType.Protected,"BytesWriteStream","stream");
			cls.addMethod("toCopy",VisitType.Protected,"BaseData","data");
			cls.addMethod("toShadowCopy",VisitType.Protected,"BaseData","data");
			cls.addMethod("toDataEquals","bool",VisitType.Protected,true,"BaseData","data");
			cls.addMethod("getDataClassName","string",VisitType.Public,true);
			cls.addMethod("toWriteDataString",VisitType.Protected,"DataWriter","writer");
			cls.addMethod("initDefault",VisitType.Public);
			cls.addMethod("beforeWrite",VisitType.Protected);
			cls.addMethod("afterRead",VisitType.Protected);

			list.add(cls=new ILClassInfo("BaseRequest"));
			cls.addMethod("copyData",VisitType.Protected);
			cls.addMethod("toWriteBytesSimple",VisitType.Protected,"BytesWriteStream","stream");
			cls.addMethod("doWriteToStream",VisitType.Protected,"BytesWriteStream","stream");
			cls.addMethod("doWriteBytesSimple",VisitType.Protected,"BytesWriteStream","stream");


			list.add(cls=new ILClassInfo("BaseResponse"));
			cls.addMethod("toReadBytesSimple",VisitType.Protected,"BytesReadStream","stream");
			cls.addMethod("readFromStream","BaseResponse",VisitType.Public,true,"BytesReadStream","stream");
			cls.addMethod("preExecute",VisitType.Protected);
			cls.addMethod("execute",null,VisitType.Protected,false);

			list.add(cls=new ILClassInfo("BytesHttpRequest"));
			cls.addMethod("copyData",VisitType.Protected);
			cls.addMethod("toWriteBytesSimple",VisitType.Protected,"BytesWriteStream","stream");
			cls.addMethod("toRead",null,VisitType.Protected,false);
			cls.addMethod("onComplete",null,VisitType.Protected,false);

			list.add(new ILClassInfo("DataMaker"));

			list.add(cls=new ILClassInfo("DebugControl"));
			cls.addMethod("init",VisitType.Public);
			cls.addMethod("dispose",VisitType.Public);
			cls.addMethod("onPrint",VisitType.Public,"string","str");

			list.add(cls=new ILClassInfo("UIContainer"));
			cls.addMethod("init",VisitType.Public,"GameObject","obj");

			list.add(cls=new ILClassInfo("UIElement"));
			cls.addMethod("init",VisitType.Public,"GameObject","obj");

			list.add(cls=new ILClassInfo("UIModel"));
			cls.addMethod("init",VisitType.Public,"GameObject","obj");

			list.add(cls=new ILClassInfo("PoolObject"));
			cls.addMethod("clear",null,VisitType.Public,false);
		}
		
	}
}
