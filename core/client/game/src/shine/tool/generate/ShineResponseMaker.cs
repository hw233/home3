using ShineEngine;
using System;

/// <summary>
/// (generated by shine)
/// </summary>
public class ShineResponseMaker:DataMaker
{
	public ShineResponseMaker()
	{
		offSet=ShineResponseType.off;
		list=new Func<BaseData>[ShineResponseType.count-offSet];
		list[ShineResponseType.Ping-offSet]=createPingResponse;
		list[ShineResponseType.RePing-offSet]=createRePingResponse;
		list[ShineResponseType.SocketConnectSuccess-offSet]=createSocketConnectSuccessResponse;
		list[ShineResponseType.SocketReconnect-offSet]=createSocketReconnectResponse;
		list[ShineResponseType.SocketReconnectSuccess-offSet]=createSocketReconnectSuccessResponse;
		list[ShineResponseType.AckPing-offSet]=createAckPingResponse;
		list[ShineResponseType.SocketReconnectFailed-offSet]=createSocketReconnectFailedResponse;
	}
	
	private BaseData createPingResponse()
	{
		return new PingResponse();
	}
	
	private BaseData createRePingResponse()
	{
		return new RePingResponse();
	}
	
	private BaseData createSocketConnectSuccessResponse()
	{
		return new SocketConnectSuccessResponse();
	}
	
	private BaseData createSocketReconnectResponse()
	{
		return new SocketReconnectResponse();
	}
	
	private BaseData createSocketReconnectSuccessResponse()
	{
		return new SocketReconnectSuccessResponse();
	}
	
	private BaseData createAckPingResponse()
	{
		return new AckPingResponse();
	}
	
	private BaseData createSocketReconnectFailedResponse()
	{
		return new SocketReconnectFailedResponse();
	}
	
}
