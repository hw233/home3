using ShineEngine;
using System;

/// <summary>
/// (generated by shine)
/// </summary>
public class ShineRequestMaker:DataMaker
{
	public ShineRequestMaker()
	{
		offSet=ShineRequestType.off;
		list=new Func<BaseData>[ShineRequestType.count-offSet];
		list[ShineRequestType.Ping-offSet]=createPingRequest;
		list[ShineRequestType.RePing-offSet]=createRePingRequest;
		list[ShineRequestType.SocketConnectSuccess-offSet]=createSocketConnectSuccessRequest;
		list[ShineRequestType.SocketReconnect-offSet]=createSocketReconnectRequest;
		list[ShineRequestType.SocketReconnectSuccess-offSet]=createSocketReconnectSuccessRequest;
		list[ShineRequestType.AckPing-offSet]=createAckPingRequest;
		list[ShineRequestType.SocketReconnectFailed-offSet]=createSocketReconnectFailedRequest;
		list[ShineRequestType.SocketClose-offSet]=createSocketCloseRequest;
	}
	
	private BaseData createPingRequest()
	{
		return new PingRequest();
	}
	
	private BaseData createRePingRequest()
	{
		return new RePingRequest();
	}
	
	private BaseData createSocketConnectSuccessRequest()
	{
		return new SocketConnectSuccessRequest();
	}
	
	private BaseData createSocketReconnectRequest()
	{
		return new SocketReconnectRequest();
	}
	
	private BaseData createSocketReconnectSuccessRequest()
	{
		return new SocketReconnectSuccessRequest();
	}
	
	private BaseData createAckPingRequest()
	{
		return new AckPingRequest();
	}
	
	private BaseData createSocketReconnectFailedRequest()
	{
		return new SocketReconnectFailedRequest();
	}
	
	private BaseData createSocketCloseRequest()
	{
		return new SocketCloseRequest();
	}
	
}
