using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
public class TriggerListData:TriggerObjData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=ShineDataType.TriggerList;
	
	public SList<TriggerObjData> value;
	
	public TriggerListData()
	{
		_dataID=ShineDataType.TriggerList;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "TriggerListData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int valueLen=stream.readLen();
		if(this.value!=null)
		{
			this.value.clear();
			this.value.ensureCapacity(valueLen);
		}
		else
		{
			this.value=new SList<TriggerObjData>();
		}
		
		SList<TriggerObjData> valueT=this.value;
		for(int valueI=valueLen-1;valueI>=0;--valueI)
		{
			TriggerObjData valueV;
			BaseData valueVT=stream.readDataFullNotNull();
			if(valueVT!=null)
			{
				if(valueVT is TriggerObjData)
				{
					valueV=(TriggerObjData)valueVT;
				}
				else
				{
					valueV=new TriggerObjData();
					if(!(valueVT.GetType().IsAssignableFrom(typeof(TriggerObjData))))
					{
						stream.throwTypeReadError(typeof(TriggerObjData),valueVT.GetType());
					}
					valueV.shadowCopy(valueVT);
				}
			}
			else
			{
				valueV=null;
			}
			
			valueT.add(valueV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.value!=null)
		{
			stream.writeLen(this.value.size());
			if(!this.value.isEmpty())
			{
				TriggerObjData[] valueVValues=this.value.getValues();
				for(int valueVI=0,valueVLen=this.value.length();valueVI<valueVLen;++valueVI)
				{
					TriggerObjData valueV=valueVValues[valueVI];
					if(valueV!=null)
					{
						stream.writeDataFullNotNull(valueV);
					}
					else
					{
						nullObjError("valueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("value");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		int valueLen=stream.readLen();
		if(this.value!=null)
		{
			this.value.clear();
			this.value.ensureCapacity(valueLen);
		}
		else
		{
			this.value=new SList<TriggerObjData>();
		}
		
		SList<TriggerObjData> valueT=this.value;
		for(int valueI=valueLen-1;valueI>=0;--valueI)
		{
			TriggerObjData valueV;
			valueV=(TriggerObjData)stream.readDataSimpleNotNull();
			
			valueT.add(valueV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.value!=null)
		{
			stream.writeLen(this.value.size());
			if(!this.value.isEmpty())
			{
				TriggerObjData[] valueVValues=this.value.getValues();
				for(int valueVI=0,valueVLen=this.value.length();valueVI<valueVLen;++valueVI)
				{
					TriggerObjData valueV=valueVValues[valueVI];
					if(valueV!=null)
					{
						stream.writeDataSimpleNotNull(valueV);
					}
					else
					{
						nullObjError("valueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("value");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is TriggerListData))
			return;
		
		TriggerListData mData=(TriggerListData)data;
		
		this.value=mData.value;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is TriggerListData))
			return;
		
		TriggerListData mData=(TriggerListData)data;
		
		if(mData.value!=null)
		{
			if(this.value!=null)
			{
				this.value.clear();
				this.value.ensureCapacity(mData.value.size());
			}
			else
			{
				this.value=new SList<TriggerObjData>();
			}
			
			SList<TriggerObjData> valueT=this.value;
			if(!mData.value.isEmpty())
			{
				TriggerObjData[] valueVValues=mData.value.getValues();
				for(int valueVI=0,valueVLen=mData.value.length();valueVI<valueVLen;++valueVI)
				{
					TriggerObjData valueV=valueVValues[valueVI];
					TriggerObjData valueU;
					if(valueV!=null)
					{
						valueU=(TriggerObjData)valueV.clone();
					}
					else
					{
						valueU=null;
						nullObjError("valueU");
					}
					
					valueT.add(valueU);
				}
			}
		}
		else
		{
			this.value=null;
			nullObjError("value");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		TriggerListData mData=(TriggerListData)data;
		if(mData.value!=null)
		{
			if(this.value==null)
				return false;
			if(this.value.size()!=mData.value.size())
				return false;
			SList<TriggerObjData> valueT=this.value;
			SList<TriggerObjData> valueR=mData.value;
			int valueLen=valueT.size();
			for(int valueI=0;valueI<valueLen;++valueI)
			{
				TriggerObjData valueU=valueT.get(valueI);
				TriggerObjData valueV=valueR.get(valueI);
				if(valueV!=null)
				{
					if(valueU==null)
						return false;
					if(!valueU.dataEquals(valueV))
						return false;
				}
				else
				{
					if(valueU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.value!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("value");
		writer.sb.Append(':');
		writer.sb.Append("List<TriggerObjData>");
		if(this.value!=null)
		{
			SList<TriggerObjData> valueT=this.value;
			int valueLen=valueT.size();
			writer.sb.Append('(');
			writer.sb.Append(valueLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int valueI=0;valueI<valueLen;++valueI)
			{
				TriggerObjData valueV=valueT.get(valueI);
				writer.writeTabs();
				writer.sb.Append(valueI);
				writer.sb.Append(':');
				if(valueV!=null)
				{
					valueV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("TriggerObjData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
		this.value=new SList<TriggerObjData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.value=null;
	}
	
}
