using ShineEngine;

/// <summary>
/// 单个trigger数据(generated by shine)
/// </summary>
public class TriggerConfigData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=ShineDataType.TriggerConfig;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/// <summary>
	/// 组类型
	/// </summary>
	public int groupType;
	
	/// <summary>
	/// 组ID
	/// </summary>
	public int groupID;
	
	/// <summary>
	/// 是否开启
	/// </summary>
	public bool isOpen;
	
	/// <summary>
	/// 事件优先级(默认0)
	/// </summary>
	public int priority;
	
	/// <summary>
	/// 事件组
	/// </summary>
	public TriggerFuncData[] events;
	
	/// <summary>
	/// 环境组
	/// </summary>
	public TriggerFuncData[] conditions;
	
	/// <summary>
	/// 动作组
	/// </summary>
	public TriggerFuncData[] actions;
	
	public TriggerConfigData()
	{
		_dataID=ShineDataType.TriggerConfig;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "TriggerConfigData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.groupType=stream.readInt();
		
		this.groupID=stream.readInt();
		
		this.isOpen=stream.readBoolean();
		
		this.priority=stream.readInt();
		
		int eventsLen=stream.readLen();
		if(this.events==null || this.events.Length!=eventsLen)
		{
			this.events=new TriggerFuncData[eventsLen];
		}
		TriggerFuncData[] eventsT=this.events;
		for(int eventsI=0;eventsI<eventsLen;++eventsI)
		{
			TriggerFuncData eventsV;
			BaseData eventsVT=stream.readDataFullNotNull();
			if(eventsVT!=null)
			{
				if(eventsVT is TriggerFuncData)
				{
					eventsV=(TriggerFuncData)eventsVT;
				}
				else
				{
					eventsV=new TriggerFuncData();
					if(!(eventsVT.GetType().IsAssignableFrom(typeof(TriggerFuncData))))
					{
						stream.throwTypeReadError(typeof(TriggerFuncData),eventsVT.GetType());
					}
					eventsV.shadowCopy(eventsVT);
				}
			}
			else
			{
				eventsV=null;
			}
			
			eventsT[eventsI]=eventsV;
		}
		
		int conditionsLen=stream.readLen();
		if(this.conditions==null || this.conditions.Length!=conditionsLen)
		{
			this.conditions=new TriggerFuncData[conditionsLen];
		}
		TriggerFuncData[] conditionsT=this.conditions;
		for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
		{
			TriggerFuncData conditionsV;
			BaseData conditionsVT=stream.readDataFullNotNull();
			if(conditionsVT!=null)
			{
				if(conditionsVT is TriggerFuncData)
				{
					conditionsV=(TriggerFuncData)conditionsVT;
				}
				else
				{
					conditionsV=new TriggerFuncData();
					if(!(conditionsVT.GetType().IsAssignableFrom(typeof(TriggerFuncData))))
					{
						stream.throwTypeReadError(typeof(TriggerFuncData),conditionsVT.GetType());
					}
					conditionsV.shadowCopy(conditionsVT);
				}
			}
			else
			{
				conditionsV=null;
			}
			
			conditionsT[conditionsI]=conditionsV;
		}
		
		int actionsLen=stream.readLen();
		if(this.actions==null || this.actions.Length!=actionsLen)
		{
			this.actions=new TriggerFuncData[actionsLen];
		}
		TriggerFuncData[] actionsT=this.actions;
		for(int actionsI=0;actionsI<actionsLen;++actionsI)
		{
			TriggerFuncData actionsV;
			BaseData actionsVT=stream.readDataFullNotNull();
			if(actionsVT!=null)
			{
				if(actionsVT is TriggerFuncData)
				{
					actionsV=(TriggerFuncData)actionsVT;
				}
				else
				{
					actionsV=new TriggerFuncData();
					if(!(actionsVT.GetType().IsAssignableFrom(typeof(TriggerFuncData))))
					{
						stream.throwTypeReadError(typeof(TriggerFuncData),actionsVT.GetType());
					}
					actionsV.shadowCopy(actionsVT);
				}
			}
			else
			{
				actionsV=null;
			}
			
			actionsT[actionsI]=actionsV;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.groupType);
		
		stream.writeInt(this.groupID);
		
		stream.writeBoolean(this.isOpen);
		
		stream.writeInt(this.priority);
		
		if(this.events!=null)
		{
			TriggerFuncData[] eventsT=this.events;
			stream.writeLen(eventsT.Length);
			for(int eventsVI=0,eventsVLen=eventsT.Length;eventsVI<eventsVLen;++eventsVI)
			{
				TriggerFuncData eventsV=eventsT[eventsVI];
				if(eventsV!=null)
				{
					stream.writeDataFullNotNull(eventsV);
				}
				else
				{
					nullObjError("eventsV");
				}
				
			}
		}
		else
		{
			nullObjError("events");
		}
		
		if(this.conditions!=null)
		{
			TriggerFuncData[] conditionsT=this.conditions;
			stream.writeLen(conditionsT.Length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.Length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				TriggerFuncData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					stream.writeDataFullNotNull(conditionsV);
				}
				else
				{
					nullObjError("conditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("conditions");
		}
		
		if(this.actions!=null)
		{
			TriggerFuncData[] actionsT=this.actions;
			stream.writeLen(actionsT.Length);
			for(int actionsVI=0,actionsVLen=actionsT.Length;actionsVI<actionsVLen;++actionsVI)
			{
				TriggerFuncData actionsV=actionsT[actionsVI];
				if(actionsV!=null)
				{
					stream.writeDataFullNotNull(actionsV);
				}
				else
				{
					nullObjError("actionsV");
				}
				
			}
		}
		else
		{
			nullObjError("actions");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.groupType=stream.readInt();
		
		this.groupID=stream.readInt();
		
		this.isOpen=stream.readBoolean();
		
		this.priority=stream.readInt();
		
		int eventsLen=stream.readLen();
		if(this.events==null || this.events.Length!=eventsLen)
		{
			this.events=new TriggerFuncData[eventsLen];
		}
		TriggerFuncData[] eventsT=this.events;
		for(int eventsI=0;eventsI<eventsLen;++eventsI)
		{
			TriggerFuncData eventsV;
			eventsV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			eventsT[eventsI]=eventsV;
		}
		
		int conditionsLen=stream.readLen();
		if(this.conditions==null || this.conditions.Length!=conditionsLen)
		{
			this.conditions=new TriggerFuncData[conditionsLen];
		}
		TriggerFuncData[] conditionsT=this.conditions;
		for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
		{
			TriggerFuncData conditionsV;
			conditionsV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			conditionsT[conditionsI]=conditionsV;
		}
		
		int actionsLen=stream.readLen();
		if(this.actions==null || this.actions.Length!=actionsLen)
		{
			this.actions=new TriggerFuncData[actionsLen];
		}
		TriggerFuncData[] actionsT=this.actions;
		for(int actionsI=0;actionsI<actionsLen;++actionsI)
		{
			TriggerFuncData actionsV;
			actionsV=(TriggerFuncData)stream.readDataSimpleNotNull();
			
			actionsT[actionsI]=actionsV;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.groupType);
		
		stream.writeInt(this.groupID);
		
		stream.writeBoolean(this.isOpen);
		
		stream.writeInt(this.priority);
		
		if(this.events!=null)
		{
			TriggerFuncData[] eventsT=this.events;
			stream.writeLen(eventsT.Length);
			for(int eventsVI=0,eventsVLen=eventsT.Length;eventsVI<eventsVLen;++eventsVI)
			{
				TriggerFuncData eventsV=eventsT[eventsVI];
				if(eventsV!=null)
				{
					stream.writeDataSimpleNotNull(eventsV);
				}
				else
				{
					nullObjError("eventsV");
				}
				
			}
		}
		else
		{
			nullObjError("events");
		}
		
		if(this.conditions!=null)
		{
			TriggerFuncData[] conditionsT=this.conditions;
			stream.writeLen(conditionsT.Length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.Length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				TriggerFuncData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					stream.writeDataSimpleNotNull(conditionsV);
				}
				else
				{
					nullObjError("conditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("conditions");
		}
		
		if(this.actions!=null)
		{
			TriggerFuncData[] actionsT=this.actions;
			stream.writeLen(actionsT.Length);
			for(int actionsVI=0,actionsVLen=actionsT.Length;actionsVI<actionsVLen;++actionsVI)
			{
				TriggerFuncData actionsV=actionsT[actionsVI];
				if(actionsV!=null)
				{
					stream.writeDataSimpleNotNull(actionsV);
				}
				else
				{
					nullObjError("actionsV");
				}
				
			}
		}
		else
		{
			nullObjError("actions");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is TriggerConfigData))
			return;
		
		TriggerConfigData mData=(TriggerConfigData)data;
		
		this.id=mData.id;
		this.name=mData.name;
		this.groupType=mData.groupType;
		this.groupID=mData.groupID;
		this.isOpen=mData.isOpen;
		this.priority=mData.priority;
		this.events=mData.events;
		this.conditions=mData.conditions;
		this.actions=mData.actions;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is TriggerConfigData))
			return;
		
		TriggerConfigData mData=(TriggerConfigData)data;
		
		this.id=mData.id;
		
		this.name=mData.name;
		
		this.groupType=mData.groupType;
		
		this.groupID=mData.groupID;
		
		this.isOpen=mData.isOpen;
		
		this.priority=mData.priority;
		
		if(mData.events!=null)
		{
			TriggerFuncData[] eventsR=mData.events;
			int eventsLen=eventsR.Length;
			if(this.events==null || this.events.Length!=eventsLen)
			{
				this.events=new TriggerFuncData[eventsLen];
			}
			TriggerFuncData[] eventsT=this.events;
			for(int eventsI=0;eventsI<eventsLen;++eventsI)
			{
				TriggerFuncData eventsV=eventsR[eventsI];
				TriggerFuncData eventsU;
				if(eventsV!=null)
				{
					eventsU=(TriggerFuncData)eventsV.clone();
				}
				else
				{
					eventsU=null;
					nullObjError("eventsU");
				}
				
				eventsT[eventsI]=eventsU;
			}
		}
		else
		{
			this.events=null;
			nullObjError("events");
		}
		
		if(mData.conditions!=null)
		{
			TriggerFuncData[] conditionsR=mData.conditions;
			int conditionsLen=conditionsR.Length;
			if(this.conditions==null || this.conditions.Length!=conditionsLen)
			{
				this.conditions=new TriggerFuncData[conditionsLen];
			}
			TriggerFuncData[] conditionsT=this.conditions;
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				TriggerFuncData conditionsV=conditionsR[conditionsI];
				TriggerFuncData conditionsU;
				if(conditionsV!=null)
				{
					conditionsU=(TriggerFuncData)conditionsV.clone();
				}
				else
				{
					conditionsU=null;
					nullObjError("conditionsU");
				}
				
				conditionsT[conditionsI]=conditionsU;
			}
		}
		else
		{
			this.conditions=null;
			nullObjError("conditions");
		}
		
		if(mData.actions!=null)
		{
			TriggerFuncData[] actionsR=mData.actions;
			int actionsLen=actionsR.Length;
			if(this.actions==null || this.actions.Length!=actionsLen)
			{
				this.actions=new TriggerFuncData[actionsLen];
			}
			TriggerFuncData[] actionsT=this.actions;
			for(int actionsI=0;actionsI<actionsLen;++actionsI)
			{
				TriggerFuncData actionsV=actionsR[actionsI];
				TriggerFuncData actionsU;
				if(actionsV!=null)
				{
					actionsU=(TriggerFuncData)actionsV.clone();
				}
				else
				{
					actionsU=null;
					nullObjError("actionsU");
				}
				
				actionsT[actionsI]=actionsU;
			}
		}
		else
		{
			this.actions=null;
			nullObjError("actions");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		TriggerConfigData mData=(TriggerConfigData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.name!=mData.name)
			return false;
		
		if(this.groupType!=mData.groupType)
			return false;
		
		if(this.groupID!=mData.groupID)
			return false;
		
		if(this.isOpen!=mData.isOpen)
			return false;
		
		if(this.priority!=mData.priority)
			return false;
		
		if(mData.events!=null)
		{
			if(this.events==null)
				return false;
			if(this.events.Length!=mData.events.Length)
				return false;
			TriggerFuncData[] eventsT=this.events;
			TriggerFuncData[] eventsR=mData.events;
			int eventsLen=eventsT.Length;
			for(int eventsI=0;eventsI<eventsLen;++eventsI)
			{
				TriggerFuncData eventsU=eventsT[eventsI];
				TriggerFuncData eventsV=eventsR[eventsI];
				if(eventsV!=null)
				{
					if(eventsU==null)
						return false;
					if(!eventsU.dataEquals(eventsV))
						return false;
				}
				else
				{
					if(eventsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.events!=null)
				return false;
		}
		
		if(mData.conditions!=null)
		{
			if(this.conditions==null)
				return false;
			if(this.conditions.Length!=mData.conditions.Length)
				return false;
			TriggerFuncData[] conditionsT=this.conditions;
			TriggerFuncData[] conditionsR=mData.conditions;
			int conditionsLen=conditionsT.Length;
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				TriggerFuncData conditionsU=conditionsT[conditionsI];
				TriggerFuncData conditionsV=conditionsR[conditionsI];
				if(conditionsV!=null)
				{
					if(conditionsU==null)
						return false;
					if(!conditionsU.dataEquals(conditionsV))
						return false;
				}
				else
				{
					if(conditionsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.conditions!=null)
				return false;
		}
		
		if(mData.actions!=null)
		{
			if(this.actions==null)
				return false;
			if(this.actions.Length!=mData.actions.Length)
				return false;
			TriggerFuncData[] actionsT=this.actions;
			TriggerFuncData[] actionsR=mData.actions;
			int actionsLen=actionsT.Length;
			for(int actionsI=0;actionsI<actionsLen;++actionsI)
			{
				TriggerFuncData actionsU=actionsT[actionsI];
				TriggerFuncData actionsV=actionsR[actionsI];
				if(actionsV!=null)
				{
					if(actionsU==null)
						return false;
					if(!actionsU.dataEquals(actionsV))
						return false;
				}
				else
				{
					if(actionsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.actions!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("name");
		writer.sb.Append(':');
		writer.sb.Append(this.name);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("groupType");
		writer.sb.Append(':');
		writer.sb.Append(this.groupType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("groupID");
		writer.sb.Append(':');
		writer.sb.Append(this.groupID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isOpen");
		writer.sb.Append(':');
		writer.sb.Append(this.isOpen);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("priority");
		writer.sb.Append(':');
		writer.sb.Append(this.priority);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("events");
		writer.sb.Append(':');
		writer.sb.Append("Array<TriggerFuncData>");
		if(this.events!=null)
		{
			TriggerFuncData[] eventsT=this.events;
			int eventsLen=eventsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(eventsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int eventsI=0;eventsI<eventsLen;++eventsI)
			{
				TriggerFuncData eventsV=eventsT[eventsI];
				writer.writeTabs();
				writer.sb.Append(eventsI);
				writer.sb.Append(':');
				if(eventsV!=null)
				{
					eventsV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("conditions");
		writer.sb.Append(':');
		writer.sb.Append("Array<TriggerFuncData>");
		if(this.conditions!=null)
		{
			TriggerFuncData[] conditionsT=this.conditions;
			int conditionsLen=conditionsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(conditionsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				TriggerFuncData conditionsV=conditionsT[conditionsI];
				writer.writeTabs();
				writer.sb.Append(conditionsI);
				writer.sb.Append(':');
				if(conditionsV!=null)
				{
					conditionsV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("actions");
		writer.sb.Append(':');
		writer.sb.Append("Array<TriggerFuncData>");
		if(this.actions!=null)
		{
			TriggerFuncData[] actionsT=this.actions;
			int actionsLen=actionsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(actionsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int actionsI=0;actionsI<actionsLen;++actionsI)
			{
				TriggerFuncData actionsV=actionsT[actionsI];
				writer.writeTabs();
				writer.sb.Append(actionsI);
				writer.sb.Append(':');
				if(actionsV!=null)
				{
					actionsV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("TriggerFuncData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.events=new TriggerFuncData[0];
		this.conditions=new TriggerFuncData[0];
		this.actions=new TriggerFuncData[0];
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.name="";
		this.groupType=0;
		this.groupID=0;
		this.isOpen=false;
		this.priority=0;
		this.events=null;
		this.conditions=null;
		this.actions=null;
	}
	
}
