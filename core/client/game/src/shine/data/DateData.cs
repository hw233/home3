using ShineEngine;
using System;
using System.Text;

namespace ShineEngine
{
	/// <summary>
	/// 日期数据(generated by shine)
	/// </summary>
	public class DateData:BaseData
	{
		/// <summary>
		/// 数据类型ID
		/// </summary>
		public const int dataID=ShineDataType.Date;
		
		/// <summary>
		/// 当前秒
		/// </summary>
		public long timeSeconds;
		
		/** 年 */
		private int _year=0;
		
		/** 月 */
		private int _month=0;
		
		/** 日 */
		private int _day=0;
		
		/** 时 */
		private int _hour=0;
		
		/** 分 */
		private int _minute=0;
		
		/** 秒 */
		private int _second=0;
		
		/** 拆分时间dirty */
		private bool _timeDirty=true;
		
		public DateData()
		{
			_dataID=ShineDataType.Date;
		}
		
		/// <summary>
		/// 读取字节流(完整版)
		/// </summary>
		protected override void toReadBytesFull(BytesReadStream stream)
		{
			stream.startReadObj();
			
			this.timeSeconds=stream.readLong();
			
			stream.endReadObj();
		}
		
		/// <summary>
		/// 写入字节流(完整版)
		/// </summary>
		protected override void toWriteBytesFull(BytesWriteStream stream)
		{
			stream.startWriteObj();
			
			stream.writeLong(this.timeSeconds);
			
			stream.endWriteObj();
		}
		
		/// <summary>
		/// 读取字节流(简版)
		/// </summary>
		protected override void toReadBytesSimple(BytesReadStream stream)
		{
			this.timeSeconds=stream.readLong();
			
		}
		
		/// <summary>
		/// 写入字节流(简版)
		/// </summary>
		protected override void toWriteBytesSimple(BytesWriteStream stream)
		{
			stream.writeLong(this.timeSeconds);
			
		}
		
		/// <summary>
		/// 复制(深拷贝)
		/// </summary>
		protected override void toCopy(BaseData data)
		{
			if(!(data is DateData))
				return;
			
			DateData mData=(DateData)data;
			
			this.timeSeconds=mData.timeSeconds;
			
		}
		
		/// <summary>
		/// 复制(潜拷贝)
		/// </summary>
		protected override void toShadowCopy(BaseData data)
		{
			if(!(data is DateData))
				return;
			
			DateData mData=(DateData)data;
			
			this.timeSeconds=mData.timeSeconds;
		}
		
		/// <summary>
		/// 读后
		/// </summary>
		protected override void afterRead()
		{
			_timeDirty=true;
		}
		
		/// <summary>
		/// 通过原生日期读取
		/// </summary>
		public void initByTimeMillis(long timeMillis)
		{
			this.timeSeconds=timeMillis/1000L;
			_timeDirty=true;
		}
		
		/// <summary>
		/// 通过原生日期读取
		/// </summary>
		public void initByTimeSeconds(long timeSeconds)
		{
			this.timeSeconds=timeSeconds;
			_timeDirty=true;
		}
		
		/// <summary>
		/// 获取当前数据时间年
		/// </summary>
		public int getYear()
		{
			ensureTime();
			return _year;
		}
		
		/// <summary>
		/// 获取当前数据时间月
		/// </summary>
		public int getMonth()
		{
			ensureTime();
			return _month;
		}
		
		/// <summary>
		/// 获取当前数据时间日
		/// </summary>
		public int getDay()
		{
			ensureTime();
			return _day;
		}
		
		/// <summary>
		/// 获取当前数据时间小时数
		/// </summary>
		public int getHour()
		{
			ensureTime();
			return _hour;
		}
		
		/// <summary>
		/// 获取当前数据时间分钟数
		/// </summary>
		public int getMinute()
		{
			ensureTime();
			return _minute;
		}
		
		/// <summary>
		/// 获取当前数据时间秒数
		/// </summary>
		public int getSecond()
		{
			ensureTime();
			return _second;
		}
		
		/** 刷时间 */
		private void ensureTime()
		{
			if(_timeDirty)
			{
				DateTime c=new DateTime((timeSeconds*1000L + TimeUtils.startTime) * TimeUtils.timeScale);

				initDTime(c);

				_timeDirty=false;
			}
		}
		
		/// <summary>
		/// 通过DateTime初始化时间
		/// </summary>
		public void initByDateTime(DateTime dateTime)
		{
			timeSeconds=TimeUtils.getTimeSecondsByDateTime(dateTime);

			initDTime(dateTime);

			_timeDirty=false;
		}
		
		/** 通过原生日期读取 */
		private void initDTime(DateTime dateTime)
		{
			_year=dateTime.Year;
			_month=dateTime.Month;
			_day=dateTime.Day;
			_hour=dateTime.Hour;
			_minute=dateTime.Minute;
			_second=dateTime.Second;
		}
		
		/// <summary>
		/// 获取所表达的毫秒时间
		/// </summary>
		public long getTimeSeconds()
		{
			return timeSeconds;
		}
		
		/// <summary>
		/// 获取所表达的毫秒时间
		/// </summary>
		public long getTimeMillis()
		{
			return timeSeconds*1000L;
		}
		
		/// <summary>
		/// 克隆
		/// </summary>
		public DateData cloneDate()
		{
			DateData re=new DateData();
			re.timeSeconds=this.timeSeconds;
			re._timeDirty=true;

			return re;
		}
		
		/// <summary>
		/// 是否在此日期前
		/// </summary>
		public bool before(DateData data)
		{
			return this.timeSeconds<data.timeSeconds;
		}
		
		/// <summary>
		/// 是否在此日期后
		/// </summary>
		public bool after(DateData data)
		{
			return this.timeSeconds>data.timeSeconds;
		}
		
		/// <summary>
		/// 是否和此日期相等
		/// </summary>
		public bool equalsDate(DateData data)
		{
			return this.timeSeconds>data.timeSeconds;
		}
		
		/// <summary>
		/// 增加毫秒时间(主线程)
		/// </summary>
		public void addTime(long time)
		{
			timeSeconds+=time;
			_timeDirty=true;
		}
		
		public override string ToString()
		{
			StringBuilder sb=StringBuilderPool.create();
			writeToStringBuilder(sb);
			return StringBuilderPool.releaseStr(sb);
		}
		
		public void writeToStringBuilder(StringBuilder sb)
		{
			writeToStringBuilder(sb,false);
		}
		
		/// <summary>
		/// onlyDay仅仅需要到日
		/// </summary>
		public void writeToStringBuilder(StringBuilder sb,bool onlyDay)
		{
			ensureTime();

			sb.Append(_year);
			sb.Append('-');
			StringUtils.writeIntWei(sb,_month,2);
			sb.Append('-');
			StringUtils.writeIntWei(sb,_day,2);

			if (!onlyDay)
			{
				sb.Append(' ');
				StringUtils.writeIntWei(sb,_hour,2);
				sb.Append(':');
				StringUtils.writeIntWei(sb,_minute,2);
				sb.Append(':');
				StringUtils.writeIntWei(sb,_second,2);
			}
		}
		
		/// <summary>
		/// 获取当前日期
		/// </summary>
		public static DateData getNow()
		{
			return DateControl.getNow();
		}
		
		/// <summary>
		/// 获取缓存日期(1帧一变)
		/// </summary>
		public static DateData getNatureNow()
		{
			DateTime d=DateTime.Now;

			DateData date=new DateData();

			date.initByDateTime(d);

			return date;
		}
		
		/// <summary>
		/// 获取数据类名
		/// </summary>
		public override string getDataClassName()
		{
			return "DateData";
		}
		
		/// <summary>
		/// 是否数据一致
		/// </summary>
		protected override bool toDataEquals(BaseData data)
		{
			DateData mData=(DateData)data;
			if(this.timeSeconds!=mData.timeSeconds)
				return false;
			
			return true;
		}
		
		/// <summary>
		/// 转文本输出
		/// </summary>
		protected override void toWriteDataString(DataWriter writer)
		{
			writer.writeTabs();
			writer.sb.Append("timeSeconds");
			writer.sb.Append(':');
			writer.sb.Append(this.timeSeconds);
			
			writer.writeEnter();
		}
		
		/// <summary>
		/// 初始化初值
		/// </summary>
		public override void initDefault()
		{
			
		}
		
		/// <summary>
		/// 创建日期数据
		/// </summary>
		public static DateData createByTimeSeconds(long timeSeconds)
		{
			DateData re=new DateData();
			re.initByTimeSeconds(timeSeconds);
			return re;
		}
		
		/// <summary>
		/// 回池
		/// </summary>
		protected override void toRelease(DataPool pool)
		{
			this.timeSeconds=0L;
		}
		
	}
}
