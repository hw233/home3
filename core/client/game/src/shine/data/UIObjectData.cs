using ShineEngine;
using System;

namespace ShineEngine
{
	/// <summary>
	/// (generated by shine)
	/// </summary>
	public class UIObjectData:BaseData
	{
		/// <summary>
		/// 数据类型ID
		/// </summary>
		public const int dataID=ShineDataType.UIObject;
		
		/// <summary>
		/// 名字
		/// </summary>
		public string name;
		
		/// <summary>
		/// 类型
		/// </summary>
		public int type;
		
		/// <summary>
		/// 样式
		/// </summary>
		public string style;
		
		/// <summary>
		/// 子项组
		/// </summary>
		public SList<UIObjectData> children=new SList<UIObjectData>();
		
		/// <summary>
		/// 整型参数组
		/// </summary>
		public int[] intArgs;
		
		/// <summary>
		/// 字符参数组
		/// </summary>
		public string[] strArgs;
		
		public UIObjectData()
		{
			_dataID=ShineDataType.UIObject;
		}
		
		/// <summary>
		/// 读取字节流(完整版)
		/// </summary>
		protected override void toReadBytesFull(BytesReadStream stream)
		{
			stream.startReadObj();
			
			this.name=stream.readUTF();
			
			this.type=stream.readInt();
			
			this.style=stream.readUTF();
			
			if(stream.readBoolean())
			{
				int childrenLen=stream.readLen();
				if(this.children!=null)
				{
					this.children.clear();
					this.children.ensureCapacity(childrenLen);
				}
				else
				{
					this.children=new SList<UIObjectData>();
				}
				
				SList<UIObjectData> childrenT=this.children;
				for(int childrenI=childrenLen-1;childrenI>=0;--childrenI)
				{
					UIObjectData childrenV;
					if(stream.readBoolean())
					{
						childrenV=(UIObjectData)stream.createData(UIObjectData.dataID);
						childrenV.readBytesFull(stream);
					}
					else
					{
						childrenV=null;
					}
					
					childrenT.add(childrenV);
				}
			}
			else
			{
				this.children=null;
			}
			
			if(stream.readBoolean())
			{
				int intArgsLen=stream.readLen();
				if(this.intArgs==null || this.intArgs.Length!=intArgsLen)
				{
					this.intArgs=new int[intArgsLen];
				}
				int[] intArgsT=this.intArgs;
				for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
				{
					int intArgsV;
					intArgsV=stream.readInt();
					
					intArgsT[intArgsI]=intArgsV;
				}
			}
			else
			{
				this.intArgs=null;
			}
			
			if(stream.readBoolean())
			{
				int strArgsLen=stream.readLen();
				if(this.strArgs==null || this.strArgs.Length!=strArgsLen)
				{
					this.strArgs=new string[strArgsLen];
				}
				string[] strArgsT=this.strArgs;
				for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
				{
					string strArgsV;
					strArgsV=stream.readUTF();
					
					strArgsT[strArgsI]=strArgsV;
				}
			}
			else
			{
				this.strArgs=null;
			}
			
			stream.endReadObj();
		}
		
		/// <summary>
		/// 写入字节流(完整版)
		/// </summary>
		protected override void toWriteBytesFull(BytesWriteStream stream)
		{
			stream.startWriteObj();
			
			stream.writeUTF(this.name);
			
			stream.writeInt(this.type);
			
			stream.writeUTF(this.style);
			
			if(this.children!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.children.size());
				if(!this.children.isEmpty())
				{
					UIObjectData[] childrenVValues=this.children.getValues();
					for(int childrenVI=0,childrenVLen=this.children.length();childrenVI<childrenVLen;++childrenVI)
					{
						UIObjectData childrenV=childrenVValues[childrenVI];
						if(childrenV!=null)
						{
							stream.writeBoolean(true);
							childrenV.writeBytesFull(stream);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.intArgs!=null)
			{
				stream.writeBoolean(true);
				int[] intArgsT=this.intArgs;
				stream.writeLen(intArgsT.Length);
				for(int intArgsVI=0,intArgsVLen=intArgsT.Length;intArgsVI<intArgsVLen;++intArgsVI)
				{
					int intArgsV=intArgsT[intArgsVI];
					stream.writeInt(intArgsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.strArgs!=null)
			{
				stream.writeBoolean(true);
				string[] strArgsT=this.strArgs;
				stream.writeLen(strArgsT.Length);
				for(int strArgsVI=0,strArgsVLen=strArgsT.Length;strArgsVI<strArgsVLen;++strArgsVI)
				{
					string strArgsV=strArgsT[strArgsVI];
					stream.writeUTF(strArgsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.endWriteObj();
		}
		
		/// <summary>
		/// 读取字节流(简版)
		/// </summary>
		protected override void toReadBytesSimple(BytesReadStream stream)
		{
			this.name=stream.readUTF();
			
			this.type=stream.readInt();
			
			this.style=stream.readUTF();
			
			if(stream.readBoolean())
			{
				int childrenLen=stream.readLen();
				if(this.children!=null)
				{
					this.children.clear();
					this.children.ensureCapacity(childrenLen);
				}
				else
				{
					this.children=new SList<UIObjectData>();
				}
				
				SList<UIObjectData> childrenT=this.children;
				for(int childrenI=childrenLen-1;childrenI>=0;--childrenI)
				{
					UIObjectData childrenV;
					if(stream.readBoolean())
					{
						childrenV=(UIObjectData)stream.createData(UIObjectData.dataID);
						childrenV.readBytesSimple(stream);
					}
					else
					{
						childrenV=null;
					}
					
					childrenT.add(childrenV);
				}
			}
			else
			{
				this.children=null;
			}
			
			if(stream.readBoolean())
			{
				int intArgsLen=stream.readLen();
				if(this.intArgs==null || this.intArgs.Length!=intArgsLen)
				{
					this.intArgs=new int[intArgsLen];
				}
				int[] intArgsT=this.intArgs;
				for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
				{
					int intArgsV;
					intArgsV=stream.readInt();
					
					intArgsT[intArgsI]=intArgsV;
				}
			}
			else
			{
				this.intArgs=null;
			}
			
			if(stream.readBoolean())
			{
				int strArgsLen=stream.readLen();
				if(this.strArgs==null || this.strArgs.Length!=strArgsLen)
				{
					this.strArgs=new string[strArgsLen];
				}
				string[] strArgsT=this.strArgs;
				for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
				{
					string strArgsV;
					strArgsV=stream.readUTF();
					
					strArgsT[strArgsI]=strArgsV;
				}
			}
			else
			{
				this.strArgs=null;
			}
			
		}
		
		/// <summary>
		/// 写入字节流(简版)
		/// </summary>
		protected override void toWriteBytesSimple(BytesWriteStream stream)
		{
			stream.writeUTF(this.name);
			
			stream.writeInt(this.type);
			
			stream.writeUTF(this.style);
			
			if(this.children!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.children.size());
				if(!this.children.isEmpty())
				{
					UIObjectData[] childrenVValues=this.children.getValues();
					for(int childrenVI=0,childrenVLen=this.children.length();childrenVI<childrenVLen;++childrenVI)
					{
						UIObjectData childrenV=childrenVValues[childrenVI];
						if(childrenV!=null)
						{
							stream.writeBoolean(true);
							childrenV.writeBytesSimple(stream);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.intArgs!=null)
			{
				stream.writeBoolean(true);
				int[] intArgsT=this.intArgs;
				stream.writeLen(intArgsT.Length);
				for(int intArgsVI=0,intArgsVLen=intArgsT.Length;intArgsVI<intArgsVLen;++intArgsVI)
				{
					int intArgsV=intArgsT[intArgsVI];
					stream.writeInt(intArgsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.strArgs!=null)
			{
				stream.writeBoolean(true);
				string[] strArgsT=this.strArgs;
				stream.writeLen(strArgsT.Length);
				for(int strArgsVI=0,strArgsVLen=strArgsT.Length;strArgsVI<strArgsVLen;++strArgsVI)
				{
					string strArgsV=strArgsT[strArgsVI];
					stream.writeUTF(strArgsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
		}
		
		/// <summary>
		/// 获取数据类名
		/// </summary>
		public override string getDataClassName()
		{
			return "UIObjectData";
		}
		
		/// <summary>
		/// 复制(潜拷贝)
		/// </summary>
		protected override void toShadowCopy(BaseData data)
		{
			if(!(data is UIObjectData))
				return;
			
			UIObjectData mData=(UIObjectData)data;
			
			this.name=mData.name;
			this.type=mData.type;
			this.style=mData.style;
			this.children=mData.children;
			this.intArgs=mData.intArgs;
			this.strArgs=mData.strArgs;
		}
		
		/// <summary>
		/// 复制(深拷贝)
		/// </summary>
		protected override void toCopy(BaseData data)
		{
			if(!(data is UIObjectData))
				return;
			
			UIObjectData mData=(UIObjectData)data;
			
			this.name=mData.name;
			
			this.type=mData.type;
			
			this.style=mData.style;
			
			if(mData.children!=null)
			{
				if(this.children!=null)
				{
					this.children.clear();
					this.children.ensureCapacity(mData.children.size());
				}
				else
				{
					this.children=new SList<UIObjectData>();
				}
				
				SList<UIObjectData> childrenT=this.children;
				if(!mData.children.isEmpty())
				{
					UIObjectData[] childrenVValues=mData.children.getValues();
					for(int childrenVI=0,childrenVLen=mData.children.length();childrenVI<childrenVLen;++childrenVI)
					{
						UIObjectData childrenV=childrenVValues[childrenVI];
						UIObjectData childrenU;
						if(childrenV!=null)
						{
							childrenU=(UIObjectData)BytesControl.createData(UIObjectData.dataID);
							childrenU.copy(childrenV);
						}
						else
						{
							childrenU=null;
						}
						
						childrenT.add(childrenU);
					}
				}
			}
			else
			{
				this.children=null;
			}
			
			if(mData.intArgs!=null)
			{
				int[] intArgsR=mData.intArgs;
				int intArgsLen=intArgsR.Length;
				if(this.intArgs==null || this.intArgs.Length!=intArgsLen)
				{
					this.intArgs=new int[intArgsLen];
				}
				BytesControl.arrayCopy(mData.intArgs,this.intArgs,intArgsLen);
			}
			else
			{
				this.intArgs=null;
			}
			
			if(mData.strArgs!=null)
			{
				string[] strArgsR=mData.strArgs;
				int strArgsLen=strArgsR.Length;
				if(this.strArgs==null || this.strArgs.Length!=strArgsLen)
				{
					this.strArgs=new string[strArgsLen];
				}
				string[] strArgsT=this.strArgs;
				for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
				{
					string strArgsV=strArgsR[strArgsI];
					string strArgsU;
					strArgsU=strArgsV;
					
					strArgsT[strArgsI]=strArgsU;
				}
			}
			else
			{
				this.strArgs=null;
			}
			
		}
		
		/// <summary>
		/// 是否数据一致
		/// </summary>
		protected override bool toDataEquals(BaseData data)
		{
			UIObjectData mData=(UIObjectData)data;
			if(this.name!=mData.name)
				return false;
			
			if(this.type!=mData.type)
				return false;
			
			if(this.style!=mData.style)
				return false;
			
			if(mData.children!=null)
			{
				if(this.children==null)
					return false;
				if(this.children.size()!=mData.children.size())
					return false;
				SList<UIObjectData> childrenT=this.children;
				SList<UIObjectData> childrenR=mData.children;
				int childrenLen=childrenT.size();
				for(int childrenI=0;childrenI<childrenLen;++childrenI)
				{
					UIObjectData childrenU=childrenT.get(childrenI);
					UIObjectData childrenV=childrenR.get(childrenI);
					if(childrenV!=null)
					{
						if(childrenU==null)
							return false;
						if(!childrenU.dataEquals(childrenV))
							return false;
					}
					else
					{
						if(childrenU!=null)
							return false;
					}
					
				}
			}
			else
			{
				if(this.children!=null)
					return false;
			}
			
			if(mData.intArgs!=null)
			{
				if(this.intArgs==null)
					return false;
				if(this.intArgs.Length!=mData.intArgs.Length)
					return false;
				int[] intArgsT=this.intArgs;
				int[] intArgsR=mData.intArgs;
				int intArgsLen=intArgsT.Length;
				for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
				{
					int intArgsU=intArgsT[intArgsI];
					int intArgsV=intArgsR[intArgsI];
					if(intArgsU!=intArgsV)
						return false;
					
				}
			}
			else
			{
				if(this.intArgs!=null)
					return false;
			}
			
			if(mData.strArgs!=null)
			{
				if(this.strArgs==null)
					return false;
				if(this.strArgs.Length!=mData.strArgs.Length)
					return false;
				string[] strArgsT=this.strArgs;
				string[] strArgsR=mData.strArgs;
				int strArgsLen=strArgsT.Length;
				for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
				{
					string strArgsU=strArgsT[strArgsI];
					string strArgsV=strArgsR[strArgsI];
					if(strArgsU!=strArgsV)
						return false;
					
				}
			}
			else
			{
				if(this.strArgs!=null)
					return false;
			}
			
			return true;
		}
		
		/// <summary>
		/// 转文本输出
		/// </summary>
		protected override void toWriteDataString(DataWriter writer)
		{
			writer.writeTabs();
			writer.sb.Append("name");
			writer.sb.Append(':');
			writer.sb.Append(this.name);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.Append("type");
			writer.sb.Append(':');
			writer.sb.Append(this.type);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.Append("style");
			writer.sb.Append(':');
			writer.sb.Append(this.style);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.Append("children");
			writer.sb.Append(':');
			writer.sb.Append("List<UIObjectData>");
			if(this.children!=null)
			{
				SList<UIObjectData> childrenT=this.children;
				int childrenLen=childrenT.size();
				writer.sb.Append('(');
				writer.sb.Append(childrenLen);
				writer.sb.Append(')');
				writer.writeEnter();
				writer.writeLeftBrace();
				for(int childrenI=0;childrenI<childrenLen;++childrenI)
				{
					UIObjectData childrenV=childrenT.get(childrenI);
					writer.writeTabs();
					writer.sb.Append(childrenI);
					writer.sb.Append(':');
					if(childrenV!=null)
					{
						childrenV.writeDataString(writer);
					}
					else
					{
						writer.sb.Append("UIObjectData=null");
					}
					
					writer.writeEnter();
				}
				writer.writeRightBrace();
			}
			else
			{
				writer.sb.Append("=null");
			}
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.Append("intArgs");
			writer.sb.Append(':');
			writer.sb.Append("Array<int>");
			if(this.intArgs!=null)
			{
				int[] intArgsT=this.intArgs;
				int intArgsLen=intArgsT.Length;
				writer.sb.Append('(');
				writer.sb.Append(intArgsLen);
				writer.sb.Append(')');
				writer.writeEnter();
				writer.writeLeftBrace();
				for(int intArgsI=0;intArgsI<intArgsLen;++intArgsI)
				{
					int intArgsV=intArgsT[intArgsI];
					writer.writeTabs();
					writer.sb.Append(intArgsI);
					writer.sb.Append(':');
					writer.sb.Append(intArgsV);
					
					writer.writeEnter();
				}
				writer.writeRightBrace();
			}
			else
			{
				writer.sb.Append("=null");
			}
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.Append("strArgs");
			writer.sb.Append(':');
			writer.sb.Append("Array<string>");
			if(this.strArgs!=null)
			{
				string[] strArgsT=this.strArgs;
				int strArgsLen=strArgsT.Length;
				writer.sb.Append('(');
				writer.sb.Append(strArgsLen);
				writer.sb.Append(')');
				writer.writeEnter();
				writer.writeLeftBrace();
				for(int strArgsI=0;strArgsI<strArgsLen;++strArgsI)
				{
					string strArgsV=strArgsT[strArgsI];
					writer.writeTabs();
					writer.sb.Append(strArgsI);
					writer.sb.Append(':');
					writer.sb.Append(strArgsV);
					
					writer.writeEnter();
				}
				writer.writeRightBrace();
			}
			else
			{
				writer.sb.Append("=null");
			}
			
			writer.writeEnter();
		}
		
		/// <summary>
		/// 初始化初值
		/// </summary>
		public override void initDefault()
		{
			
		}
		
		/// <summary>
		/// 回池
		/// </summary>
		protected override void toRelease(DataPool pool)
		{
			this.name="";
			this.type=0;
			this.style="";
			this.children=null;
			this.intArgs=null;
			this.strArgs=null;
		}
		
	}
}
