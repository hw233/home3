using ShineEngine;

namespace ShineEngine
{
	/// <summary>
	/// 双整形数据(generated by shine)
	/// </summary>
	public class DIntData:BaseData
	{
		/// <summary>
		/// 数据类型ID
		/// </summary>
		public const int dataID=ShineDataType.DInt;
		
		/// <summary>
		/// 键
		/// </summary>
		public int key=-1;
		
		/// <summary>
		/// 值
		/// </summary>
		public int value=0;
		
		public DIntData()
		{
			_dataID=ShineDataType.DInt;
		}
		
		/// <summary>
		/// 读取字节流(完整版)
		/// </summary>
		protected override void toReadBytesFull(BytesReadStream stream)
		{
			stream.startReadObj();
			
			this.key=stream.readInt();
			
			this.value=stream.readInt();
			
			stream.endReadObj();
		}
		
		/// <summary>
		/// 写入字节流(完整版)
		/// </summary>
		protected override void toWriteBytesFull(BytesWriteStream stream)
		{
			stream.startWriteObj();
			
			stream.writeInt(this.key);
			
			stream.writeInt(this.value);
			
			stream.endWriteObj();
		}
		
		/// <summary>
		/// 读取字节流(简版)
		/// </summary>
		protected override void toReadBytesSimple(BytesReadStream stream)
		{
			this.key=stream.readInt();
			
			this.value=stream.readInt();
			
		}
		
		/// <summary>
		/// 写入字节流(简版)
		/// </summary>
		protected override void toWriteBytesSimple(BytesWriteStream stream)
		{
			stream.writeInt(this.key);
			
			stream.writeInt(this.value);
			
		}
		
		public static DIntData create(int key,int value)
		{
			DIntData re=new DIntData();
			re.key=key;
			re.value=value;

			return re;
		}
		
		/// <summary>
		/// 获取数据类名
		/// </summary>
		public override string getDataClassName()
		{
			return "DIntData";
		}
		
		/// <summary>
		/// 复制(潜拷贝)
		/// </summary>
		protected override void toShadowCopy(BaseData data)
		{
			if(!(data is DIntData))
				return;
			
			DIntData mData=(DIntData)data;
			
			this.key=mData.key;
			this.value=mData.value;
		}
		
		/// <summary>
		/// 复制(深拷贝)
		/// </summary>
		protected override void toCopy(BaseData data)
		{
			if(!(data is DIntData))
				return;
			
			DIntData mData=(DIntData)data;
			
			this.key=mData.key;
			
			this.value=mData.value;
			
		}
		
		/// <summary>
		/// 是否数据一致
		/// </summary>
		protected override bool toDataEquals(BaseData data)
		{
			DIntData mData=(DIntData)data;
			if(this.key!=mData.key)
				return false;
			
			if(this.value!=mData.value)
				return false;
			
			return true;
		}
		
		/// <summary>
		/// 转文本输出
		/// </summary>
		protected override void toWriteDataString(DataWriter writer)
		{
			writer.writeTabs();
			writer.sb.Append("key");
			writer.sb.Append(':');
			writer.sb.Append(this.key);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.Append("value");
			writer.sb.Append(':');
			writer.sb.Append(this.value);
			
			writer.writeEnter();
		}
		
		/// <summary>
		/// 初始化初值
		/// </summary>
		public override void initDefault()
		{
			
		}
		
		/// <summary>
		/// 是否为空
		/// </summary>
		public bool isEmpty()
		{
			return key<=0 && value<=0;
		}
		
		/// <summary>
		/// 回池
		/// </summary>
		protected override void toRelease(DataPool pool)
		{
			this.key=0;
			this.value=0;
		}
		
	}
}
