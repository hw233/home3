using ShineEngine;

/// <summary>
/// 大数(只支持正整数)(generated by shine)
/// </summary>
public class BigNumberData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=ShineDataType.BigNumber;
	
	/// <summary>
	/// 值组
	/// </summary>
	public IntList values;
	
	public BigNumberData()
	{
		_dataID=ShineDataType.BigNumber;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "BigNumberData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int valuesLen=stream.readLen();
		if(this.values!=null)
		{
			this.values.clear();
			this.values.ensureCapacity(valuesLen);
		}
		else
		{
			this.values=new IntList();
		}
		
		IntList valuesT=this.values;
		for(int valuesI=valuesLen-1;valuesI>=0;--valuesI)
		{
			int valuesV;
			valuesV=stream.readInt();
			
			valuesT.add(valuesV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.values!=null)
		{
			stream.writeLen(this.values.size());
			if(!this.values.isEmpty())
			{
				int[] valuesVValues=this.values.getValues();
				for(int valuesVI=0,valuesVLen=this.values.length();valuesVI<valuesVLen;++valuesVI)
				{
					int valuesV=valuesVValues[valuesVI];
					stream.writeInt(valuesV);
					
				}
			}
		}
		else
		{
			nullObjError("values");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		int valuesLen=stream.readLen();
		if(this.values!=null)
		{
			this.values.clear();
			this.values.ensureCapacity(valuesLen);
		}
		else
		{
			this.values=new IntList();
		}
		
		IntList valuesT=this.values;
		for(int valuesI=valuesLen-1;valuesI>=0;--valuesI)
		{
			int valuesV;
			valuesV=stream.readInt();
			
			valuesT.add(valuesV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.values!=null)
		{
			stream.writeLen(this.values.size());
			if(!this.values.isEmpty())
			{
				int[] valuesVValues=this.values.getValues();
				for(int valuesVI=0,valuesVLen=this.values.length();valuesVI<valuesVLen;++valuesVI)
				{
					int valuesV=valuesVValues[valuesVI];
					stream.writeInt(valuesV);
					
				}
			}
		}
		else
		{
			nullObjError("values");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is BigNumberData))
			return;
		
		BigNumberData mData=(BigNumberData)data;
		
		this.values=mData.values;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is BigNumberData))
			return;
		
		BigNumberData mData=(BigNumberData)data;
		
		if(mData.values!=null)
		{
			if(this.values!=null)
			{
				this.values.clear();
				this.values.ensureCapacity(mData.values.size());
			}
			else
			{
				this.values=new IntList();
			}
			
			IntList valuesT=this.values;
			if(!mData.values.isEmpty())
			{
				int[] valuesVValues=mData.values.getValues();
				for(int valuesVI=0,valuesVLen=mData.values.length();valuesVI<valuesVLen;++valuesVI)
				{
					int valuesV=valuesVValues[valuesVI];
					int valuesU;
					valuesU=valuesV;
					
					valuesT.add(valuesU);
				}
			}
		}
		else
		{
			this.values=null;
			nullObjError("values");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		BigNumberData mData=(BigNumberData)data;
		if(mData.values!=null)
		{
			if(this.values==null)
				return false;
			if(this.values.size()!=mData.values.size())
				return false;
			IntList valuesT=this.values;
			IntList valuesR=mData.values;
			int valuesLen=valuesT.size();
			for(int valuesI=0;valuesI<valuesLen;++valuesI)
			{
				int valuesU=valuesT.get(valuesI);
				int valuesV=valuesR.get(valuesI);
				if(valuesU!=valuesV)
					return false;
				
			}
		}
		else
		{
			if(this.values!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("values");
		writer.sb.Append(':');
		writer.sb.Append("List<int>");
		if(this.values!=null)
		{
			IntList valuesT=this.values;
			int valuesLen=valuesT.size();
			writer.sb.Append('(');
			writer.sb.Append(valuesLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int valuesI=0;valuesI<valuesLen;++valuesI)
			{
				int valuesV=valuesT.get(valuesI);
				writer.writeTabs();
				writer.sb.Append(valuesI);
				writer.sb.Append(':');
				writer.sb.Append(valuesV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.values=new IntList();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.values=null;
	}
	
}
