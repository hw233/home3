using ShineEngine;

/// <summary>
/// 活动数据(个人)(与存库数据一致)(generated by shine)
/// </summary>
public class ActivityData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Activity;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 是否运行中(存库无效)
	/// </summary>
	public bool isRunning;
	
	/// <summary>
	/// 已参与次数
	/// </summary>
	public int joinTimes;
	
	/// <summary>
	/// 下次触发时间
	/// </summary>
	public long nextTurnTime;
	
	/// <summary>
	/// 上次触发时间
	/// </summary>
	public long lastTurnTime;
	
	/// <summary>
	/// 下个重置时间(0为未重置过)
	/// </summary>
	public long nextResetTime;
	
	/// <summary>
	/// 是否可见
	/// </summary>
	public bool isCanSee;
	
	/// <summary>
	/// 下个可见切换间
	/// </summary>
	public long nextSeeTurnTime=-1L;
	
	/// <summary>
	/// 配置
	/// </summary>
	public ActivityConfig config;
	
	public ActivityData()
	{
		_dataID=BaseDataType.Activity;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ActivityData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.isRunning=stream.readBoolean();
		
		this.joinTimes=stream.readInt();
		
		this.nextResetTime=stream.readLong();
		
		this.lastTurnTime=stream.readLong();
		
		this.nextTurnTime=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeBoolean(this.isRunning);
		
		stream.writeInt(this.joinTimes);
		
		stream.writeLong(this.nextResetTime);
		
		stream.writeLong(this.lastTurnTime);
		
		stream.writeLong(this.nextTurnTime);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ActivityData))
			return;
		
		ActivityData mData=(ActivityData)data;
		
		this.id=mData.id;
		this.isRunning=mData.isRunning;
		this.joinTimes=mData.joinTimes;
		this.nextResetTime=mData.nextResetTime;
		this.lastTurnTime=mData.lastTurnTime;
		this.nextTurnTime=mData.nextTurnTime;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ActivityData))
			return;
		
		ActivityData mData=(ActivityData)data;
		
		this.id=mData.id;
		
		this.isRunning=mData.isRunning;
		
		this.joinTimes=mData.joinTimes;
		
		this.nextResetTime=mData.nextResetTime;
		
		this.lastTurnTime=mData.lastTurnTime;
		
		this.nextTurnTime=mData.nextTurnTime;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ActivityData mData=(ActivityData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.isRunning!=mData.isRunning)
			return false;
		
		if(this.joinTimes!=mData.joinTimes)
			return false;
		
		if(this.nextResetTime!=mData.nextResetTime)
			return false;
		
		if(this.lastTurnTime!=mData.lastTurnTime)
			return false;
		
		if(this.nextTurnTime!=mData.nextTurnTime)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isRunning");
		writer.sb.Append(':');
		writer.sb.Append(this.isRunning);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("joinTimes");
		writer.sb.Append(':');
		writer.sb.Append(this.joinTimes);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("nextResetTime");
		writer.sb.Append(':');
		writer.sb.Append(this.nextResetTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("lastTurnTime");
		writer.sb.Append(':');
		writer.sb.Append(this.lastTurnTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("nextTurnTime");
		writer.sb.Append(':');
		writer.sb.Append(this.nextTurnTime);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.isRunning=stream.readBoolean();
		
		this.joinTimes=stream.readInt();
		
		this.nextResetTime=stream.readLong();
		
		this.lastTurnTime=stream.readLong();
		
		this.nextTurnTime=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeBoolean(this.isRunning);
		
		stream.writeInt(this.joinTimes);
		
		stream.writeLong(this.nextResetTime);
		
		stream.writeLong(this.lastTurnTime);
		
		stream.writeLong(this.nextTurnTime);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 构造配置(如果没有的话)
	/// </summary>
	public void makeConfig()
	{
    	if(config==null)
    	{
    		config=ActivityConfig.get(id);
    	}
    }
	
	/// <summary>
	/// 重载配置
	/// </summary>
	public void reloadConfig()
	{
    	config=ActivityConfig.get(id);
    }
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.isRunning=false;
		this.joinTimes=0;
		this.nextResetTime=0L;
		this.lastTurnTime=0L;
		this.nextTurnTime=0L;
	}
	
}
