using ShineEngine;

/// <summary>
/// 子弹数据(generated by shine)
/// </summary>
public class BulletData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Bullet;
	
	/// <summary>
	/// 实例ID
	/// </summary>
	public int instanceID;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 技能目标数据
	/// </summary>
	public SkillTargetData targetData;
	
	/// <summary>
	/// 是否主动
	/// </summary>
	public bool isInitiative=false;
	
	public BulletData()
	{
		_dataID=BaseDataType.Bullet;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.instanceID=stream.readInt();
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		this.targetData=(SkillTargetData)stream.readDataSimpleNotNull();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		if(this.targetData!=null)
		{
			stream.writeDataSimpleNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is BulletData))
			return;
		
		BulletData mData=(BulletData)data;
		
		this.instanceID=mData.instanceID;
		this.id=mData.id;
		this.level=mData.level;
		this.targetData=mData.targetData;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is BulletData))
			return;
		
		BulletData mData=(BulletData)data;
		
		this.instanceID=mData.instanceID;
		
		this.id=mData.id;
		
		this.level=mData.level;
		
		if(mData.targetData!=null)
		{
			this.targetData=(SkillTargetData)mData.targetData.clone();
		}
		else
		{
			this.targetData=null;
			nullObjError("targetData");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		BulletData mData=(BulletData)data;
		if(this.instanceID!=mData.instanceID)
			return false;
		
		if(this.id!=mData.id)
			return false;
		
		if(this.level!=mData.level)
			return false;
		
		if(mData.targetData!=null)
		{
			if(this.targetData==null)
				return false;
			if(!this.targetData.dataEquals(mData.targetData))
				return false;
		}
		else
		{
			if(this.targetData!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "BulletData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("instanceID");
		writer.sb.Append(':');
		writer.sb.Append(this.instanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("level");
		writer.sb.Append(':');
		writer.sb.Append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("targetData");
		writer.sb.Append(':');
		if(this.targetData!=null)
		{
			this.targetData.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SkillTargetData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.targetData=new SkillTargetData();
		this.targetData.initDefault();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.instanceID=stream.readInt();
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		BaseData targetDataT=stream.readDataFullNotNull();
		if(targetDataT!=null)
		{
			if(targetDataT is SkillTargetData)
			{
				this.targetData=(SkillTargetData)targetDataT;
			}
			else
			{
				this.targetData=new SkillTargetData();
				if(!(targetDataT.GetType().IsAssignableFrom(typeof(SkillTargetData))))
				{
					stream.throwTypeReadError(typeof(SkillTargetData),targetDataT.GetType());
				}
				this.targetData.shadowCopy(targetDataT);
			}
		}
		else
		{
			this.targetData=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		if(this.targetData!=null)
		{
			stream.writeDataFullNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.instanceID=0;
		this.id=0;
		this.level=0;
		this.targetData=null;
	}
	
}
