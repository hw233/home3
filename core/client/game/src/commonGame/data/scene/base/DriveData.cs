using ShineEngine;

/// <summary>
/// 驾驶数据(generated by shine)
/// </summary>
public class DriveData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Drive;
	
	/// <summary>
	/// 驾驶 前进/后退(退:-1,停:0,进:1)
	/// </summary>
	public int forward;
	
	/// <summary>
	/// 驾驶 转向(左:-1,中:0,右:1)
	/// </summary>
	public int turn;
	
	/// <summary>
	/// 当前速度值
	/// </summary>
	public int currentSpeed;
	
	public DriveData()
	{
		_dataID=BaseDataType.Drive;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "DriveData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.forward=stream.readInt();
		
		this.turn=stream.readInt();
		
		this.currentSpeed=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.forward);
		
		stream.writeInt(this.turn);
		
		stream.writeInt(this.currentSpeed);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.forward=stream.readInt();
		
		this.turn=stream.readInt();
		
		this.currentSpeed=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.forward);
		
		stream.writeInt(this.turn);
		
		stream.writeInt(this.currentSpeed);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is DriveData))
			return;
		
		DriveData mData=(DriveData)data;
		
		this.forward=mData.forward;
		this.turn=mData.turn;
		this.currentSpeed=mData.currentSpeed;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is DriveData))
			return;
		
		DriveData mData=(DriveData)data;
		
		this.forward=mData.forward;
		
		this.turn=mData.turn;
		
		this.currentSpeed=mData.currentSpeed;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		DriveData mData=(DriveData)data;
		if(this.forward!=mData.forward)
			return false;
		
		if(this.turn!=mData.turn)
			return false;
		
		if(this.currentSpeed!=mData.currentSpeed)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("forward");
		writer.sb.Append(':');
		writer.sb.Append(this.forward);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("turn");
		writer.sb.Append(':');
		writer.sb.Append(this.turn);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentSpeed");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSpeed);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.forward=0;
		this.turn=0;
		this.currentSpeed=0;
	}
	
}
