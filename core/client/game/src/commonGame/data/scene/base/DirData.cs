using ShineEngine;
using UnityEngine;

/// <summary>
/// 朝向数据(generated by shine)
/// </summary>
public class DirData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Dir;
	
	/// <summary>
	/// 俯仰轴朝向传输(弧度)(yz平面)(x轴)
	/// </summary>
	public int idirectionX;
	
	/// <summary>
	/// 平面朝向传输(弧度)(xz平面)(y轴)(0为x轴正向,计算用)
	/// </summary>
	public int idirection;
	
	/// <summary>
	/// 朝向(弧度)
	/// </summary>
	public float direction;
	
	/// <summary>
	/// 朝向X(弧度)
	/// </summary>
	public float directionX;
	
	public DirData()
	{
		_dataID=BaseDataType.Dir;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "DirData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.idirection=stream.readInt();
		
		this.idirectionX=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.idirection);
		
		stream.writeInt(this.idirectionX);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is DirData))
			return;
		
		DirData mData=(DirData)data;
		
		this.idirection=mData.idirection;
		this.idirectionX=mData.idirectionX;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is DirData))
			return;
		
		DirData mData=(DirData)data;
		
		this.idirection=mData.idirection;
		
		this.idirectionX=mData.idirectionX;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		DirData mData=(DirData)data;
		if(this.idirection!=mData.idirection)
			return false;
		
		if(this.idirectionX!=mData.idirectionX)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("idirection");
		writer.sb.Append(':');
		writer.sb.Append(this.idirection);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("idirectionX");
		writer.sb.Append(':');
		writer.sb.Append(this.idirectionX);
		
		writer.writeEnter();
	}
	
	protected override void beforeWrite()
	{
		base.beforeWrite();

		float scale;
		idirection=(int)(direction*(scale=Global.directionSendScale));
		idirectionX=(int)(directionX* scale);
	}
	
	protected override void afterRead()
	{
		base.afterRead();

		float scale;
		direction=idirection/(scale=Global.directionSendScale);
		directionX=idirectionX/scale;
	}
	
	/// <summary>
	/// 是否相等
	/// </summary>
	public bool isEquals(DirData dir)
	{
		return MathUtils.floatEquals(direction,dir.direction) && MathUtils.floatEquals(directionX,dir.directionX);
	}
	
	/// <summary>
	/// 拷贝位置
	/// </summary>
	public void copyDir(DirData dir)
	{
		this.direction=dir.direction;
		this.directionX=dir.directionX;
	}
	
	public override void clear()
	{
		this.direction=0f;
		this.directionX=0f;
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 通过Quaternion设置
	/// </summary>
	public void setByQuaternion(in Quaternion quater)
	{
		Vector3 vec=quater.ToEuler();

		direction=-vec.y+CommonSetting.rotationOff;
		directionX=vec.x;
		//忽略z轴旋转
	}
	
	/// <summary>
	/// 设置值到Quaternion
	/// </summary>
	public void setToQuaternion(ref Quaternion quater)
	{
		quater.SetEulerRotation(directionX,-direction+CommonSetting.rotationOff,0);
	}
	
	/// <summary>
	/// 获取四元数
	/// </summary>
	public Quaternion getQuaternion()
	{
		Quaternion re=new Quaternion();
		setToQuaternion(ref re);
		return re;
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.idirection=stream.readInt();
		
		this.idirectionX=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.idirection);
		
		stream.writeInt(this.idirectionX);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.idirection=0;
		this.idirectionX=0;
	}
	
}
