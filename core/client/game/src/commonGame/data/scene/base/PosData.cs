using ShineEngine;
using System;
using UnityEngine;

/// <summary>
/// 位置数据(generated by shine)
/// </summary>
public class PosData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Pos;
	
	/// <summary>
	/// y传输
	/// </summary>
	public int iy;
	
	/// <summary>
	/// x传输
	/// </summary>
	public int ix;
	
	/// <summary>
	/// z传输
	/// </summary>
	public int iz;
	
	/// <summary>
	/// x坐标
	/// </summary>
	public float x;
	
	/// <summary>
	/// y坐标
	/// </summary>
	public float y;
	
	/// <summary>
	/// z坐标
	/// </summary>
	public float z;
	
	public PosData()
	{
		_dataID=BaseDataType.Pos;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iz=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iz);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is PosData))
			return;
		
		PosData mData=(PosData)data;
		
		this.ix=mData.ix;
		this.iy=mData.iy;
		this.iz=mData.iz;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is PosData))
			return;
		
		PosData mData=(PosData)data;
		
		this.ix=mData.ix;
		
		this.iy=mData.iy;
		
		this.iz=mData.iz;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		PosData mData=(PosData)data;
		if(this.ix!=mData.ix)
			return false;
		
		if(this.iy!=mData.iy)
			return false;
		
		if(this.iz!=mData.iz)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PosData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("ix");
		writer.sb.Append(':');
		writer.sb.Append(this.ix);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("iy");
		writer.sb.Append(':');
		writer.sb.Append(this.iy);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("iz");
		writer.sb.Append(':');
		writer.sb.Append(this.iz);
		
		writer.writeEnter();
	}
	
	protected override void beforeWrite()
	{
		float scale;
		ix=Mathf.RoundToInt(x*(scale=Global.posSendScale));
		iy=Mathf.RoundToInt(y*scale);
		iz=Mathf.RoundToInt(z*scale);
	}
	
	protected override void afterRead()
	{
		float scale;
		x=ix/(scale=Global.posSendScale);
		y=iy/scale;
		z=iz/scale;
	}
	
	/// <summary>
	/// 通过float[]设置坐标
	/// </summary>
	public virtual void setByFArr(float[] arr)
	{
		if(CommonSetting.is3D)
		{
			if(arr.Length<2)
			{
				x=0f;
				y=0f;
				z=0f;

				return;
			}

			if(arr.Length==2)
			{
				if(CommonSetting.isZHeight)
				{
					x=arr[0];
					y=arr[1];
					z=0f;
				}
				else
				{
					x=arr[0];
					y=0f;
					z=arr[1];
				}
			}
			else
			{
				x=arr[0];
				y=arr[1];
				z=arr[2];
			}
		}
		else
		{
			if(arr.Length<2)
			{
				x=0f;
				y=0f;
				return;
			}

			x=arr[0];
			y=arr[1];
		}
	}
	
	/// <summary>
	/// int[]设置坐标
	/// </summary>
	public virtual void setByIArr(int[] arr)
	{
		if(CommonSetting.is3D)
		{
			if(arr.Length<2)
			{
				x=0f;
				y=0f;
				z=0f;

				return;
			}

			if(arr.Length==2)
			{
				if(CommonSetting.isZHeight)
				{
					x=arr[0];
					y=arr[1];
					z=0f;
				}
				else
				{
					x=arr[0];
					y=0f;
					z=arr[1];
				}
			}
			else
			{
				x=arr[0];
				y=arr[1];
				z=arr[2];
			}
		}
		else
		{
			if(arr.Length<2)
			{
				x=0f;
				y=0f;
				return;
			}

			x=arr[0];
			y=arr[1];
		}
	}
	
	/// <summary>
	/// 写到数组中(编辑器用)
	/// </summary>
	public virtual void writeFArr(float[] arr)
	{
		if(CommonSetting.is3D)
		{
			if(arr.Length<3)
				return;

			arr[0]=x;
			arr[1]=y;
			arr[2]=z;
		}
		else
		{
			if(arr.Length<2)
				return;

			arr[0]=x;
			arr[1]=y;
		}
	}
	
	public override string ToString()
	{
		return "{x:"+ StringUtils.roundStrF2(x)+",y:"+StringUtils.roundStrF2(y)+",z:"+StringUtils.roundStrF2(z)+"}";
	}
	
	/// <summary>
	/// 拷贝位置
	/// </summary>
	public void copyPos(PosData pos)
	{
		this.x=pos.x;
		this.y=pos.y;
		this.z=pos.z;
	}
	
	/// <summary>
	/// 回归0
	/// </summary>
	public override void clear()
	{
		this.x=0f;
		this.y=0f;
		this.z=0f;
	}
	
	public bool isEquals(PosData pos)
	{
		return MathUtils.floatEquals(x,pos.x) && MathUtils.floatEquals(y,pos.y) && MathUtils.floatEquals(z,pos.z);
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 获取坐标
	/// </summary>
	public Vector3 getVector()
	{
		if(CommonSetting.is3D)
		{
			if(CommonSetting.isZHeight)
				return new Vector3(x,z,y);
			else
				return new Vector3(x,y,z);
		}
		else
		{
			return new Vector3(x,y,0f);
		}
	}
	
	public void setByVector(in Vector3 vec)
	{
		if(CommonSetting.is3D)
		{
			x=vec.x;

			if(CommonSetting.isZHeight)
			{
				z=vec.y;
				y=vec.z;
			}
			else
			{
				y=vec.y;
				z=vec.z;
			}
		}
		else
		{
			x=vec.x;
			y=vec.y;
			z=0f;
		}
	}
	
	/// <summary>
	/// 通过vector3赋值
	/// </summary>
	public void setToVector(ref Vector3 vec)
	{
		if(CommonSetting.is3D)
		{
			if(CommonSetting.isZHeight)
			{
				vec.Set(x,z,y);
			}
			else
			{
				vec.Set(x,y,z);
			}
		}
		else
		{
			vec.Set(x,y,0f);
		}
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iz=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iz);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.ix=0;
		this.iy=0;
		this.iz=0;
	}
	
}
