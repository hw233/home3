using ShineEngine;

/// <summary>
/// 矩形数据(generated by shine)
/// </summary>
public class RectData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Rect;
	
	/// <summary>
	/// x传输
	/// </summary>
	public int ix;
	
	/// <summary>
	/// y传输
	/// </summary>
	public int iy;
	
	/// <summary>
	/// width传输
	/// </summary>
	public int iWidth;
	
	/// <summary>
	/// height传输
	/// </summary>
	public int iHeight;
	
	/// <summary>
	/// x坐标
	/// </summary>
	public float x;
	
	/// <summary>
	/// y坐标
	/// </summary>
	public float y;
	
	/// <summary>
	/// width
	/// </summary>
	public float width;
	
	/// <summary>
	/// height
	/// </summary>
	public float height;
	
	public RectData()
	{
		_dataID=BaseDataType.Rect;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RectData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iWidth=stream.readInt();
		
		this.iHeight=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iWidth);
		
		stream.writeInt(this.iHeight);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.ix=stream.readInt();
		
		this.iy=stream.readInt();
		
		this.iWidth=stream.readInt();
		
		this.iHeight=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.ix);
		
		stream.writeInt(this.iy);
		
		stream.writeInt(this.iWidth);
		
		stream.writeInt(this.iHeight);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is RectData))
			return;
		
		RectData mData=(RectData)data;
		
		this.ix=mData.ix;
		this.iy=mData.iy;
		this.iWidth=mData.iWidth;
		this.iHeight=mData.iHeight;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is RectData))
			return;
		
		RectData mData=(RectData)data;
		
		this.ix=mData.ix;
		
		this.iy=mData.iy;
		
		this.iWidth=mData.iWidth;
		
		this.iHeight=mData.iHeight;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		RectData mData=(RectData)data;
		if(this.ix!=mData.ix)
			return false;
		
		if(this.iy!=mData.iy)
			return false;
		
		if(this.iWidth!=mData.iWidth)
			return false;
		
		if(this.iHeight!=mData.iHeight)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("ix");
		writer.sb.Append(':');
		writer.sb.Append(this.ix);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("iy");
		writer.sb.Append(':');
		writer.sb.Append(this.iy);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("iWidth");
		writer.sb.Append(':');
		writer.sb.Append(this.iWidth);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("iHeight");
		writer.sb.Append(':');
		writer.sb.Append(this.iHeight);
		
		writer.writeEnter();
	}
	
	protected override void beforeWrite()
	{
		float scale;
		ix=(int)(x*(scale=Global.posSendScale));
		iy=(int)(y*scale);
		iWidth=(int)(width*scale);
		iHeight=(int)(height*scale);
	}
	
	protected override void afterRead()
	{
		float scale;
		x=ix/(scale=Global.posSendScale);
		y=iy/scale;
		width=iWidth/scale;
		height=iHeight/scale;
	}
	
	/// <summary>
	/// 拷贝位置
	/// </summary>
	public void copyPos(RectData rect)
	{
		this.x=rect.x;
		this.y=rect.y;
		this.width=rect.width;
		this.height=rect.height;
	}
	
	public bool isEquals(RectData rect)
	{
		return MathUtils.floatEquals(x,rect.x) && MathUtils.floatEquals(y,rect.y) && MathUtils.floatEquals(width,rect.width) && MathUtils.floatEquals(height,rect.height);
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	public override void clear()
	{
		this.x=0f;
		this.y=0f;
		this.width=0f;
		this.height=0f;
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.ix=0;
		this.iy=0;
		this.iWidth=0;
		this.iHeight=0;
	}
	
}
