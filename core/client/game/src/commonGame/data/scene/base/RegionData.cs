using ShineEngine;

/// <summary>
/// 区域数据(generated by shine)
/// </summary>
public class RegionData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Region;
	
	/// <summary>
	/// 实例ID
	/// </summary>
	public int instanceID;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 参数组
	/// </summary>
	public float[] args;
	
	public RegionData()
	{
		_dataID=BaseDataType.Region;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RegionData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.instanceID=stream.readInt();
		
		this.id=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.Length!=argsLen)
		{
			this.args=new float[argsLen];
		}
		float[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			float argsV;
			argsV=stream.readFloat();
			
			argsT[argsI]=argsV;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.id);
		
		if(this.args!=null)
		{
			float[] argsT=this.args;
			stream.writeLen(argsT.Length);
			for(int argsVI=0,argsVLen=argsT.Length;argsVI<argsVLen;++argsVI)
			{
				float argsV=argsT[argsVI];
				stream.writeFloat(argsV);
				
			}
		}
		else
		{
			nullObjError("args");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.instanceID=stream.readInt();
		
		this.id=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.Length!=argsLen)
		{
			this.args=new float[argsLen];
		}
		float[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			float argsV;
			argsV=stream.readFloat();
			
			argsT[argsI]=argsV;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.id);
		
		if(this.args!=null)
		{
			float[] argsT=this.args;
			stream.writeLen(argsT.Length);
			for(int argsVI=0,argsVLen=argsT.Length;argsVI<argsVLen;++argsVI)
			{
				float argsV=argsT[argsVI];
				stream.writeFloat(argsV);
				
			}
		}
		else
		{
			nullObjError("args");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is RegionData))
			return;
		
		RegionData mData=(RegionData)data;
		
		this.instanceID=mData.instanceID;
		this.id=mData.id;
		this.args=mData.args;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is RegionData))
			return;
		
		RegionData mData=(RegionData)data;
		
		this.instanceID=mData.instanceID;
		
		this.id=mData.id;
		
		if(mData.args!=null)
		{
			float[] argsR=mData.args;
			int argsLen=argsR.Length;
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new float[argsLen];
			}
			BytesControl.arrayCopy(mData.args,this.args,argsLen);
		}
		else
		{
			this.args=null;
			nullObjError("args");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		RegionData mData=(RegionData)data;
		if(this.instanceID!=mData.instanceID)
			return false;
		
		if(this.id!=mData.id)
			return false;
		
		if(mData.args!=null)
		{
			if(this.args==null)
				return false;
			if(this.args.Length!=mData.args.Length)
				return false;
			float[] argsT=this.args;
			float[] argsR=mData.args;
			int argsLen=argsT.Length;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				float argsU=argsT[argsI];
				float argsV=argsR[argsI];
				if(argsU!=argsV)
					return false;
				
			}
		}
		else
		{
			if(this.args!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("instanceID");
		writer.sb.Append(':');
		writer.sb.Append(this.instanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("args");
		writer.sb.Append(':');
		writer.sb.Append("Array<float>");
		if(this.args!=null)
		{
			float[] argsT=this.args;
			int argsLen=argsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(argsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				float argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.Append(argsI);
				writer.sb.Append(':');
				writer.sb.Append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.args=new float[0];
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.instanceID=0;
		this.id=0;
		this.args=null;
	}
	
}
