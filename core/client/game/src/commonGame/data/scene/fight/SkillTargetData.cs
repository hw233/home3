using ShineEngine;

/// <summary>
/// 技能目标数据(generated by shine)
/// </summary>
public class SkillTargetData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.SkillTarget;
	
	/// <summary>
	/// 目标类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// 目标流水ID
	/// </summary>
	public int targetInstanceID=-1;
	
	/// <summary>
	/// 目标朝向
	/// </summary>
	public DirData dir;
	
	/// <summary>
	/// 携带参数
	/// </summary>
	public int arg;
	
	/// <summary>
	/// 目标位置
	/// </summary>
	public PosData pos;
	
	public SkillTargetData()
	{
		_dataID=BaseDataType.SkillTarget;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.type=stream.readInt();
		
		this.targetInstanceID=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.pos=(PosData)stream.createData(PosData.dataID);
			this.pos.readBytesSimple(stream);
		}
		else
		{
			this.pos=null;
		}
		
		if(stream.readBoolean())
		{
			this.dir=(DirData)stream.createData(DirData.dataID);
			this.dir.readBytesSimple(stream);
		}
		else
		{
			this.dir=null;
		}
		
		this.arg=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.type);
		
		stream.writeInt(this.targetInstanceID);
		
		if(this.pos!=null)
		{
			stream.writeBoolean(true);
			this.pos.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.dir!=null)
		{
			stream.writeBoolean(true);
			this.dir.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.arg);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is SkillTargetData))
			return;
		
		SkillTargetData mData=(SkillTargetData)data;
		
		this.type=mData.type;
		this.targetInstanceID=mData.targetInstanceID;
		this.pos=mData.pos;
		this.dir=mData.dir;
		this.arg=mData.arg;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is SkillTargetData))
			return;
		
		SkillTargetData mData=(SkillTargetData)data;
		
		this.type=mData.type;
		
		this.targetInstanceID=mData.targetInstanceID;
		
		if(mData.pos!=null)
		{
			this.pos=(PosData)BytesControl.createData(PosData.dataID);
			this.pos.copy(mData.pos);
		}
		else
		{
			this.pos=null;
		}
		
		if(mData.dir!=null)
		{
			this.dir=(DirData)BytesControl.createData(DirData.dataID);
			this.dir.copy(mData.dir);
		}
		else
		{
			this.dir=null;
		}
		
		this.arg=mData.arg;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		SkillTargetData mData=(SkillTargetData)data;
		if(this.type!=mData.type)
			return false;
		
		if(this.targetInstanceID!=mData.targetInstanceID)
			return false;
		
		if(mData.pos!=null)
		{
			if(this.pos==null)
				return false;
			if(!this.pos.dataEquals(mData.pos))
				return false;
		}
		else
		{
			if(this.pos!=null)
				return false;
		}
		
		if(mData.dir!=null)
		{
			if(this.dir==null)
				return false;
			if(!this.dir.dataEquals(mData.dir))
				return false;
		}
		else
		{
			if(this.dir!=null)
				return false;
		}
		
		if(this.arg!=mData.arg)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "SkillTargetData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("type");
		writer.sb.Append(':');
		writer.sb.Append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("targetInstanceID");
		writer.sb.Append(':');
		writer.sb.Append(this.targetInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("pos");
		writer.sb.Append(':');
		if(this.pos!=null)
		{
			this.pos.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("dir");
		writer.sb.Append(':');
		if(this.dir!=null)
		{
			this.dir.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("DirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("arg");
		writer.sb.Append(':');
		writer.sb.Append(this.arg);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 判断两个目标是否相等
	/// </summary>
	public bool isEquals(SkillTargetData data)
	{
		int t;

		if((t=type)!=data.type)
		{
			return false;
		}

		switch(t)
		{
			case SkillTargetType.Single:
			{
				return targetInstanceID==data.targetInstanceID;
			}
			case SkillTargetType.Ground:
			{
				return pos.isEquals(data.pos);
			}
			case SkillTargetType.Direction:
			{
				return dir.isEquals(data.dir);
			}
		}

		return true;
	}
	
	public static SkillTargetData createByTargetUnit(int instanceID)
	{
		SkillTargetData re=new SkillTargetData();
		re.type=SkillTargetType.Single;
		re.targetInstanceID=instanceID;
		return re;
	}
	
	public static SkillTargetData createByNone()
	{
		SkillTargetData re=new SkillTargetData();
		re.type=SkillTargetType.None;
		return re;
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.type=stream.readInt();
		
		this.targetInstanceID=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.pos=(PosData)stream.createData(PosData.dataID);
			this.pos.readBytesFull(stream);
		}
		else
		{
			this.pos=null;
		}
		
		if(stream.readBoolean())
		{
			this.dir=(DirData)stream.createData(DirData.dataID);
			this.dir.readBytesFull(stream);
		}
		else
		{
			this.dir=null;
		}
		
		this.arg=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.targetInstanceID);
		
		if(this.pos!=null)
		{
			stream.writeBoolean(true);
			this.pos.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.dir!=null)
		{
			stream.writeBoolean(true);
			this.dir.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.arg);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.type=0;
		this.targetInstanceID=0;
		this.pos=null;
		this.dir=null;
		this.arg=0;
	}
	
}
