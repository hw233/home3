using ShineEngine;

/// <summary>
/// 帧同步指令数据(generated by shine)
/// </summary>
public class FrameSyncCommandData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.FrameSyncCommand;
	
	/// <summary>
	/// 序号
	/// </summary>
	public int index;
	
	/// <summary>
	/// 指令
	/// </summary>
	public int type;
	
	/// <summary>
	/// 整形参数组
	/// </summary>
	public int[] ints;
	
	/// <summary>
	/// float参数组
	/// </summary>
	public float[] floats;
	
	public FrameSyncCommandData()
	{
		_dataID=BaseDataType.FrameSyncCommand;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FrameSyncCommandData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.index=stream.readInt();
		
		this.type=stream.readInt();
		
		int intsLen=stream.readLen();
		if(this.ints==null || this.ints.Length!=intsLen)
		{
			this.ints=new int[intsLen];
		}
		int[] intsT=this.ints;
		for(int intsI=0;intsI<intsLen;++intsI)
		{
			int intsV;
			intsV=stream.readInt();
			
			intsT[intsI]=intsV;
		}
		
		int floatsLen=stream.readLen();
		if(this.floats==null || this.floats.Length!=floatsLen)
		{
			this.floats=new float[floatsLen];
		}
		float[] floatsT=this.floats;
		for(int floatsI=0;floatsI<floatsLen;++floatsI)
		{
			float floatsV;
			floatsV=stream.readFloat();
			
			floatsT[floatsI]=floatsV;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.index);
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			stream.writeLen(intsT.Length);
			for(int intsVI=0,intsVLen=intsT.Length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			nullObjError("ints");
		}
		
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.Length);
			for(int floatsVI=0,floatsVLen=floatsT.Length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			nullObjError("floats");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is FrameSyncCommandData))
			return;
		
		FrameSyncCommandData mData=(FrameSyncCommandData)data;
		
		this.index=mData.index;
		this.type=mData.type;
		this.ints=mData.ints;
		this.floats=mData.floats;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is FrameSyncCommandData))
			return;
		
		FrameSyncCommandData mData=(FrameSyncCommandData)data;
		
		this.index=mData.index;
		
		this.type=mData.type;
		
		if(mData.ints!=null)
		{
			int[] intsR=mData.ints;
			int intsLen=intsR.Length;
			if(this.ints==null || this.ints.Length!=intsLen)
			{
				this.ints=new int[intsLen];
			}
			BytesControl.arrayCopy(mData.ints,this.ints,intsLen);
		}
		else
		{
			this.ints=null;
			nullObjError("ints");
		}
		
		if(mData.floats!=null)
		{
			float[] floatsR=mData.floats;
			int floatsLen=floatsR.Length;
			if(this.floats==null || this.floats.Length!=floatsLen)
			{
				this.floats=new float[floatsLen];
			}
			BytesControl.arrayCopy(mData.floats,this.floats,floatsLen);
		}
		else
		{
			this.floats=null;
			nullObjError("floats");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		FrameSyncCommandData mData=(FrameSyncCommandData)data;
		if(this.index!=mData.index)
			return false;
		
		if(this.type!=mData.type)
			return false;
		
		if(mData.ints!=null)
		{
			if(this.ints==null)
				return false;
			if(this.ints.Length!=mData.ints.Length)
				return false;
			int[] intsT=this.ints;
			int[] intsR=mData.ints;
			int intsLen=intsT.Length;
			for(int intsI=0;intsI<intsLen;++intsI)
			{
				int intsU=intsT[intsI];
				int intsV=intsR[intsI];
				if(intsU!=intsV)
					return false;
				
			}
		}
		else
		{
			if(this.ints!=null)
				return false;
		}
		
		if(mData.floats!=null)
		{
			if(this.floats==null)
				return false;
			if(this.floats.Length!=mData.floats.Length)
				return false;
			float[] floatsT=this.floats;
			float[] floatsR=mData.floats;
			int floatsLen=floatsT.Length;
			for(int floatsI=0;floatsI<floatsLen;++floatsI)
			{
				float floatsU=floatsT[floatsI];
				float floatsV=floatsR[floatsI];
				if(floatsU!=floatsV)
					return false;
				
			}
		}
		else
		{
			if(this.floats!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("index");
		writer.sb.Append(':');
		writer.sb.Append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("type");
		writer.sb.Append(':');
		writer.sb.Append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("ints");
		writer.sb.Append(':');
		writer.sb.Append("Array<int>");
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			int intsLen=intsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(intsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int intsI=0;intsI<intsLen;++intsI)
			{
				int intsV=intsT[intsI];
				writer.writeTabs();
				writer.sb.Append(intsI);
				writer.sb.Append(':');
				writer.sb.Append(intsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("floats");
		writer.sb.Append(':');
		writer.sb.Append("Array<float>");
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			int floatsLen=floatsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(floatsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int floatsI=0;floatsI<floatsLen;++floatsI)
			{
				float floatsV=floatsT[floatsI];
				writer.writeTabs();
				writer.sb.Append(floatsI);
				writer.sb.Append(':');
				writer.sb.Append(floatsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.ints=new int[0];
		this.floats=new float[0];
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		this.type=stream.readInt();
		
		int intsLen=stream.readLen();
		if(this.ints==null || this.ints.Length!=intsLen)
		{
			this.ints=new int[intsLen];
		}
		int[] intsT=this.ints;
		for(int intsI=0;intsI<intsLen;++intsI)
		{
			int intsV;
			intsV=stream.readInt();
			
			intsT[intsI]=intsV;
		}
		
		int floatsLen=stream.readLen();
		if(this.floats==null || this.floats.Length!=floatsLen)
		{
			this.floats=new float[floatsLen];
		}
		float[] floatsT=this.floats;
		for(int floatsI=0;floatsI<floatsLen;++floatsI)
		{
			float floatsV;
			floatsV=stream.readFloat();
			
			floatsT[floatsI]=floatsV;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.index);
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			stream.writeLen(intsT.Length);
			for(int intsVI=0,intsVLen=intsT.Length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			nullObjError("ints");
		}
		
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.Length);
			for(int floatsVI=0,floatsVLen=floatsT.Length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			nullObjError("floats");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.index=0;
		this.type=0;
		this.ints=null;
		this.floats=null;
	}
	
}
