using ShineEngine;

/// <summary>
/// 单个伤害数据(generated by shine)
/// </summary>
public class DamageOneData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.DamageOne;
	
	/// <summary>
	/// 单位实例ID
	/// </summary>
	public int instanceID;
	
	/// <summary>
	/// 是否暴击
	/// </summary>
	public bool isCrit;
	
	/// <summary>
	/// 是否命中
	/// </summary>
	public bool isHit;
	
	/// <summary>
	/// 伤害组(伤害类型:伤害值)
	/// </summary>
	public SList<DIntData> damages;
	
	/// <summary>
	/// 是否造成击杀
	/// </summary>
	public bool isKilled;
	
	/// <summary>
	/// 伤害参数(表现用,如背击)
	/// </summary>
	public int arg;
	
	public DamageOneData()
	{
		_dataID=BaseDataType.DamageOne;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.instanceID=stream.readInt();
		
		this.isHit=stream.readBoolean();
		
		this.isCrit=stream.readBoolean();
		
		int damagesLen=stream.readLen();
		if(this.damages!=null)
		{
			this.damages.clear();
			this.damages.ensureCapacity(damagesLen);
		}
		else
		{
			this.damages=new SList<DIntData>();
		}
		
		SList<DIntData> damagesT=this.damages;
		for(int damagesI=damagesLen-1;damagesI>=0;--damagesI)
		{
			DIntData damagesV;
			damagesV=(DIntData)stream.createData(DIntData.dataID);
			damagesV.readBytesSimple(stream);
			
			damagesT.add(damagesV);
		}
		
		this.isKilled=stream.readBoolean();
		
		this.arg=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.instanceID);
		
		stream.writeBoolean(this.isHit);
		
		stream.writeBoolean(this.isCrit);
		
		if(this.damages!=null)
		{
			stream.writeLen(this.damages.size());
			if(!this.damages.isEmpty())
			{
				DIntData[] damagesVValues=this.damages.getValues();
				for(int damagesVI=0,damagesVLen=this.damages.length();damagesVI<damagesVLen;++damagesVI)
				{
					DIntData damagesV=damagesVValues[damagesVI];
					if(damagesV!=null)
					{
						damagesV.writeBytesSimple(stream);
					}
					else
					{
						nullObjError("damagesV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("damages");
		}
		
		stream.writeBoolean(this.isKilled);
		
		stream.writeInt(this.arg);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is DamageOneData))
			return;
		
		DamageOneData mData=(DamageOneData)data;
		
		this.instanceID=mData.instanceID;
		this.isHit=mData.isHit;
		this.isCrit=mData.isCrit;
		this.damages=mData.damages;
		this.isKilled=mData.isKilled;
		this.arg=mData.arg;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is DamageOneData))
			return;
		
		DamageOneData mData=(DamageOneData)data;
		
		this.instanceID=mData.instanceID;
		
		this.isHit=mData.isHit;
		
		this.isCrit=mData.isCrit;
		
		if(mData.damages!=null)
		{
			if(this.damages!=null)
			{
				this.damages.clear();
				this.damages.ensureCapacity(mData.damages.size());
			}
			else
			{
				this.damages=new SList<DIntData>();
			}
			
			SList<DIntData> damagesT=this.damages;
			if(!mData.damages.isEmpty())
			{
				DIntData[] damagesVValues=mData.damages.getValues();
				for(int damagesVI=0,damagesVLen=mData.damages.length();damagesVI<damagesVLen;++damagesVI)
				{
					DIntData damagesV=damagesVValues[damagesVI];
					DIntData damagesU;
					if(damagesV!=null)
					{
						damagesU=(DIntData)BytesControl.createData(DIntData.dataID);
						damagesU.copy(damagesV);
					}
					else
					{
						damagesU=null;
						nullObjError("damagesU");
					}
					
					damagesT.add(damagesU);
				}
			}
		}
		else
		{
			this.damages=null;
			nullObjError("damages");
		}
		
		this.isKilled=mData.isKilled;
		
		this.arg=mData.arg;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		DamageOneData mData=(DamageOneData)data;
		if(this.instanceID!=mData.instanceID)
			return false;
		
		if(this.isHit!=mData.isHit)
			return false;
		
		if(this.isCrit!=mData.isCrit)
			return false;
		
		if(mData.damages!=null)
		{
			if(this.damages==null)
				return false;
			if(this.damages.size()!=mData.damages.size())
				return false;
			SList<DIntData> damagesT=this.damages;
			SList<DIntData> damagesR=mData.damages;
			int damagesLen=damagesT.size();
			for(int damagesI=0;damagesI<damagesLen;++damagesI)
			{
				DIntData damagesU=damagesT.get(damagesI);
				DIntData damagesV=damagesR.get(damagesI);
				if(damagesV!=null)
				{
					if(damagesU==null)
						return false;
					if(!damagesU.dataEquals(damagesV))
						return false;
				}
				else
				{
					if(damagesU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.damages!=null)
				return false;
		}
		
		if(this.isKilled!=mData.isKilled)
			return false;
		
		if(this.arg!=mData.arg)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "DamageOneData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("instanceID");
		writer.sb.Append(':');
		writer.sb.Append(this.instanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isHit");
		writer.sb.Append(':');
		writer.sb.Append(this.isHit);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isCrit");
		writer.sb.Append(':');
		writer.sb.Append(this.isCrit);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("damages");
		writer.sb.Append(':');
		writer.sb.Append("List<DIntData>");
		if(this.damages!=null)
		{
			SList<DIntData> damagesT=this.damages;
			int damagesLen=damagesT.size();
			writer.sb.Append('(');
			writer.sb.Append(damagesLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int damagesI=0;damagesI<damagesLen;++damagesI)
			{
				DIntData damagesV=damagesT.get(damagesI);
				writer.writeTabs();
				writer.sb.Append(damagesI);
				writer.sb.Append(':');
				if(damagesV!=null)
				{
					damagesV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("DIntData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isKilled");
		writer.sb.Append(':');
		writer.sb.Append(this.isKilled);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("arg");
		writer.sb.Append(':');
		writer.sb.Append(this.arg);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.damages=new SList<DIntData>();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.instanceID=stream.readInt();
		
		this.isHit=stream.readBoolean();
		
		this.isCrit=stream.readBoolean();
		
		int damagesLen=stream.readLen();
		if(this.damages!=null)
		{
			this.damages.clear();
			this.damages.ensureCapacity(damagesLen);
		}
		else
		{
			this.damages=new SList<DIntData>();
		}
		
		SList<DIntData> damagesT=this.damages;
		for(int damagesI=damagesLen-1;damagesI>=0;--damagesI)
		{
			DIntData damagesV;
			damagesV=(DIntData)stream.createData(DIntData.dataID);
			damagesV.readBytesFull(stream);
			
			damagesT.add(damagesV);
		}
		
		this.isKilled=stream.readBoolean();
		
		this.arg=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.instanceID);
		
		stream.writeBoolean(this.isHit);
		
		stream.writeBoolean(this.isCrit);
		
		if(this.damages!=null)
		{
			stream.writeLen(this.damages.size());
			if(!this.damages.isEmpty())
			{
				DIntData[] damagesVValues=this.damages.getValues();
				for(int damagesVI=0,damagesVLen=this.damages.length();damagesVI<damagesVLen;++damagesVI)
				{
					DIntData damagesV=damagesVValues[damagesVI];
					if(damagesV!=null)
					{
						damagesV.writeBytesFull(stream);
					}
					else
					{
						nullObjError("damagesV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("damages");
		}
		
		stream.writeBoolean(this.isKilled);
		
		stream.writeInt(this.arg);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.instanceID=0;
		this.isHit=false;
		this.isCrit=false;
		this.damages=null;
		this.isKilled=false;
		this.arg=0;
	}
	
}
