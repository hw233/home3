using ShineEngine;

/// <summary>
/// 场景进入参数数据(generated by shine)
/// </summary>
public class SceneEnterArgData:BaseData
{
	/// <summary>
	/// 是否使用当前缓存位置数据
	/// </summary>
	public bool useCache;
	
	/// <summary>
	/// 进入点位置
	/// </summary>
	public int posID=-1;
	
	/// <summary>
	/// 场景位置数据
	/// </summary>
	public SceneLocationData location;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.SceneEnterArg;
	
	public SceneEnterArgData()
	{
		_dataID=BaseDataType.SceneEnterArg;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "SceneEnterArgData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.location=(SceneLocationData)stream.readDataSimpleNotNull();
		
		this.posID=stream.readInt();
		
		this.useCache=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.location!=null)
		{
			stream.writeDataSimpleNotNull(this.location);
		}
		else
		{
			nullObjError("location");
		}
		
		stream.writeInt(this.posID);
		
		stream.writeBoolean(this.useCache);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is SceneEnterArgData))
			return;
		
		SceneEnterArgData mData=(SceneEnterArgData)data;
		
		this.location=mData.location;
		this.posID=mData.posID;
		this.useCache=mData.useCache;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is SceneEnterArgData))
			return;
		
		SceneEnterArgData mData=(SceneEnterArgData)data;
		
		if(mData.location!=null)
		{
			this.location=(SceneLocationData)mData.location.clone();
		}
		else
		{
			this.location=null;
			nullObjError("location");
		}
		
		this.posID=mData.posID;
		
		this.useCache=mData.useCache;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		SceneEnterArgData mData=(SceneEnterArgData)data;
		if(mData.location!=null)
		{
			if(this.location==null)
				return false;
			if(!this.location.dataEquals(mData.location))
				return false;
		}
		else
		{
			if(this.location!=null)
				return false;
		}
		
		if(this.posID!=mData.posID)
			return false;
		
		if(this.useCache!=mData.useCache)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("location");
		writer.sb.Append(':');
		if(this.location!=null)
		{
			this.location.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SceneLocationData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("posID");
		writer.sb.Append(':');
		writer.sb.Append(this.posID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("useCache");
		writer.sb.Append(':');
		writer.sb.Append(this.useCache);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.location=new SceneLocationData();
		this.location.initDefault();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData locationT=stream.readDataFullNotNull();
		if(locationT!=null)
		{
			if(locationT is SceneLocationData)
			{
				this.location=(SceneLocationData)locationT;
			}
			else
			{
				this.location=new SceneLocationData();
				if(!(locationT.GetType().IsAssignableFrom(typeof(SceneLocationData))))
				{
					stream.throwTypeReadError(typeof(SceneLocationData),locationT.GetType());
				}
				this.location.shadowCopy(locationT);
			}
		}
		else
		{
			this.location=null;
		}
		
		this.posID=stream.readInt();
		
		this.useCache=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.location!=null)
		{
			stream.writeDataFullNotNull(this.location);
		}
		else
		{
			nullObjError("location");
		}
		
		stream.writeInt(this.posID);
		
		stream.writeBoolean(this.useCache);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.location=null;
		this.posID=0;
		this.useCache=false;
	}
	
}
