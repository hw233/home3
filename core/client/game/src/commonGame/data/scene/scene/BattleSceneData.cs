using ShineEngine;

/// <summary>
/// 副本类场景进入数据(generated by shine)
/// </summary>
public class BattleSceneData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.BattleScene;
	
	/// <summary>
	/// 副本当前状态
	/// </summary>
	public int state;
	
	/// <summary>
	/// 剩余tick时间(ms)(-1就是没在tick)
	/// </summary>
	public int timeTick;
	
	public BattleSceneData()
	{
		_dataID=BaseDataType.BattleScene;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "BattleSceneData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.state=stream.readInt();
		
		this.timeTick=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.state);
		
		stream.writeInt(this.timeTick);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.state=stream.readInt();
		
		this.timeTick=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.state);
		
		stream.writeInt(this.timeTick);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is BattleSceneData))
			return;
		
		BattleSceneData mData=(BattleSceneData)data;
		
		this.state=mData.state;
		this.timeTick=mData.timeTick;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is BattleSceneData))
			return;
		
		BattleSceneData mData=(BattleSceneData)data;
		
		this.state=mData.state;
		
		this.timeTick=mData.timeTick;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		BattleSceneData mData=(BattleSceneData)data;
		if(this.state!=mData.state)
			return false;
		
		if(this.timeTick!=mData.timeTick)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("state");
		writer.sb.Append(':');
		writer.sb.Append(this.state);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("timeTick");
		writer.sb.Append(':');
		writer.sb.Append(this.timeTick);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.state=0;
		this.timeTick=0;
	}
	
}
