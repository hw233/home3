using ShineEngine;

/// <summary>
/// 单位功能数据(generated by shine)
/// </summary>
public class UnitFuncData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.UnitFunc;
	
	/// <summary>
	/// 物品包数据
	/// </summary>
	public ItemDicContainerData itemDic;
	
	public UnitFuncData()
	{
		_dataID=BaseDataType.UnitFunc;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitFuncData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			BaseData itemDicT=stream.readDataFullNotNull();
			if(itemDicT!=null)
			{
				if(itemDicT is ItemDicContainerData)
				{
					this.itemDic=(ItemDicContainerData)itemDicT;
				}
				else
				{
					this.itemDic=new ItemDicContainerData();
					if(!(itemDicT.GetType().IsAssignableFrom(typeof(ItemDicContainerData))))
					{
						stream.throwTypeReadError(typeof(ItemDicContainerData),itemDicT.GetType());
					}
					this.itemDic.shadowCopy(itemDicT);
				}
			}
			else
			{
				this.itemDic=null;
			}
		}
		else
		{
			this.itemDic=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.itemDic!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.itemDic);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		if(stream.readBoolean())
		{
			this.itemDic=(ItemDicContainerData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.itemDic=null;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.itemDic!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.itemDic);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is UnitFuncData))
			return;
		
		UnitFuncData mData=(UnitFuncData)data;
		
		this.itemDic=mData.itemDic;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is UnitFuncData))
			return;
		
		UnitFuncData mData=(UnitFuncData)data;
		
		if(mData.itemDic!=null)
		{
			this.itemDic=(ItemDicContainerData)mData.itemDic.clone();
		}
		else
		{
			this.itemDic=null;
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		UnitFuncData mData=(UnitFuncData)data;
		if(mData.itemDic!=null)
		{
			if(this.itemDic==null)
				return false;
			if(!this.itemDic.dataEquals(mData.itemDic))
				return false;
		}
		else
		{
			if(this.itemDic!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("itemDic");
		writer.sb.Append(':');
		if(this.itemDic!=null)
		{
			this.itemDic.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("ItemDicContainerData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.itemDic=null;
	}
	
}
