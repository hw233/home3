using ShineEngine;

/// <summary>
/// 单位信息数据(generated by shine)
/// </summary>
public class UnitInfoData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.UnitInfo;
	
	/// <summary>
	/// 身份数据
	/// </summary>
	public UnitIdentityData identity;
	
	/// <summary>
	/// 造型数据
	/// </summary>
	public UnitAvatarData avatar;
	
	public UnitInfoData()
	{
		_dataID=BaseDataType.UnitInfo;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitInfoData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.identity=(UnitIdentityData)stream.readDataSimpleNotNull();
		
		if(stream.readBoolean())
		{
			this.avatar=(UnitAvatarData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.avatar=null;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.identity!=null)
		{
			stream.writeDataSimpleNotNull(this.identity);
		}
		else
		{
			nullObjError("identity");
		}
		
		if(this.avatar!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.avatar);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is UnitInfoData))
			return;
		
		UnitInfoData mData=(UnitInfoData)data;
		
		this.identity=mData.identity;
		this.avatar=mData.avatar;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is UnitInfoData))
			return;
		
		UnitInfoData mData=(UnitInfoData)data;
		
		if(mData.identity!=null)
		{
			this.identity=(UnitIdentityData)mData.identity.clone();
		}
		else
		{
			this.identity=null;
			nullObjError("identity");
		}
		
		if(mData.avatar!=null)
		{
			this.avatar=(UnitAvatarData)mData.avatar.clone();
		}
		else
		{
			this.avatar=null;
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		UnitInfoData mData=(UnitInfoData)data;
		if(mData.identity!=null)
		{
			if(this.identity==null)
				return false;
			if(!this.identity.dataEquals(mData.identity))
				return false;
		}
		else
		{
			if(this.identity!=null)
				return false;
		}
		
		if(mData.avatar!=null)
		{
			if(this.avatar==null)
				return false;
			if(!this.avatar.dataEquals(mData.avatar))
				return false;
		}
		else
		{
			if(this.avatar!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("identity");
		writer.sb.Append(':');
		if(this.identity!=null)
		{
			this.identity.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("UnitIdentityData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("avatar");
		writer.sb.Append(':');
		if(this.avatar!=null)
		{
			this.avatar.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("UnitAvatarData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.identity=new UnitIdentityData();
		this.identity.initDefault();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData identityT=stream.readDataFullNotNull();
		if(identityT!=null)
		{
			if(identityT is UnitIdentityData)
			{
				this.identity=(UnitIdentityData)identityT;
			}
			else
			{
				this.identity=new UnitIdentityData();
				if(!(identityT.GetType().IsAssignableFrom(typeof(UnitIdentityData))))
				{
					stream.throwTypeReadError(typeof(UnitIdentityData),identityT.GetType());
				}
				this.identity.shadowCopy(identityT);
			}
		}
		else
		{
			this.identity=null;
		}
		
		if(stream.readBoolean())
		{
			BaseData avatarT=stream.readDataFullNotNull();
			if(avatarT!=null)
			{
				if(avatarT is UnitAvatarData)
				{
					this.avatar=(UnitAvatarData)avatarT;
				}
				else
				{
					this.avatar=new UnitAvatarData();
					if(!(avatarT.GetType().IsAssignableFrom(typeof(UnitAvatarData))))
					{
						stream.throwTypeReadError(typeof(UnitAvatarData),avatarT.GetType());
					}
					this.avatar.shadowCopy(avatarT);
				}
			}
			else
			{
				this.avatar=null;
			}
		}
		else
		{
			this.avatar=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.identity!=null)
		{
			stream.writeDataFullNotNull(this.identity);
		}
		else
		{
			nullObjError("identity");
		}
		
		if(this.avatar!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.avatar);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.identity=null;
		this.avatar=null;
	}
	
}
