using ShineEngine;

/// <summary>
/// 附加战斗数据(generated by shine)
/// </summary>
public class UnitFightExData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.UnitFightEx;
	
	/// <summary>
	/// 当前技能等级
	/// </summary>
	public int currentSkillLevel=0;
	
	/// <summary>
	/// 当前技能ID(-1为没有释放技能)
	/// </summary>
	public int currentSkillID=-1;
	
	/// <summary>
	/// 当前步时间经过
	/// </summary>
	public int currentSkillStepTimePass;
	
	/// <summary>
	/// 当前技能步
	/// </summary>
	public int currentSkillStep;
	
	/// <summary>
	/// 当前技能读条时间经过
	/// </summary>
	public int currentSkillBarTimePass;
	
	/// <summary>
	/// 当前技能读条ID
	/// </summary>
	public int currentSkillBarID=-1;
	
	/// <summary>
	/// 当前技能目标
	/// </summary>
	public SkillTargetData currentTarget;
	
	public UnitFightExData()
	{
		_dataID=BaseDataType.UnitFightEx;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.currentSkillID=stream.readInt();
		
		this.currentSkillLevel=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.currentTarget=(SkillTargetData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.currentTarget=null;
		}
		
		this.currentSkillStep=stream.readInt();
		
		this.currentSkillStepTimePass=stream.readInt();
		
		this.currentSkillBarID=stream.readInt();
		
		this.currentSkillBarTimePass=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.currentSkillID);
		
		stream.writeInt(this.currentSkillLevel);
		
		if(this.currentTarget!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.currentTarget);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.currentSkillStep);
		
		stream.writeInt(this.currentSkillStepTimePass);
		
		stream.writeInt(this.currentSkillBarID);
		
		stream.writeInt(this.currentSkillBarTimePass);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is UnitFightExData))
			return;
		
		UnitFightExData mData=(UnitFightExData)data;
		
		this.currentSkillID=mData.currentSkillID;
		this.currentSkillLevel=mData.currentSkillLevel;
		this.currentTarget=mData.currentTarget;
		this.currentSkillStep=mData.currentSkillStep;
		this.currentSkillStepTimePass=mData.currentSkillStepTimePass;
		this.currentSkillBarID=mData.currentSkillBarID;
		this.currentSkillBarTimePass=mData.currentSkillBarTimePass;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is UnitFightExData))
			return;
		
		UnitFightExData mData=(UnitFightExData)data;
		
		this.currentSkillID=mData.currentSkillID;
		
		this.currentSkillLevel=mData.currentSkillLevel;
		
		if(mData.currentTarget!=null)
		{
			this.currentTarget=(SkillTargetData)mData.currentTarget.clone();
		}
		else
		{
			this.currentTarget=null;
		}
		
		this.currentSkillStep=mData.currentSkillStep;
		
		this.currentSkillStepTimePass=mData.currentSkillStepTimePass;
		
		this.currentSkillBarID=mData.currentSkillBarID;
		
		this.currentSkillBarTimePass=mData.currentSkillBarTimePass;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		UnitFightExData mData=(UnitFightExData)data;
		if(this.currentSkillID!=mData.currentSkillID)
			return false;
		
		if(this.currentSkillLevel!=mData.currentSkillLevel)
			return false;
		
		if(mData.currentTarget!=null)
		{
			if(this.currentTarget==null)
				return false;
			if(!this.currentTarget.dataEquals(mData.currentTarget))
				return false;
		}
		else
		{
			if(this.currentTarget!=null)
				return false;
		}
		
		if(this.currentSkillStep!=mData.currentSkillStep)
			return false;
		
		if(this.currentSkillStepTimePass!=mData.currentSkillStepTimePass)
			return false;
		
		if(this.currentSkillBarID!=mData.currentSkillBarID)
			return false;
		
		if(this.currentSkillBarTimePass!=mData.currentSkillBarTimePass)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitFightExData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("currentSkillID");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSkillID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentSkillLevel");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSkillLevel);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentTarget");
		writer.sb.Append(':');
		if(this.currentTarget!=null)
		{
			this.currentTarget.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentSkillStep");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSkillStep);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentSkillStepTimePass");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSkillStepTimePass);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentSkillBarID");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSkillBarID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("currentSkillBarTimePass");
		writer.sb.Append(':');
		writer.sb.Append(this.currentSkillBarTimePass);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.currentSkillID=stream.readInt();
		
		this.currentSkillLevel=stream.readInt();
		
		if(stream.readBoolean())
		{
			BaseData currentTargetT=stream.readDataFullNotNull();
			if(currentTargetT!=null)
			{
				if(currentTargetT is SkillTargetData)
				{
					this.currentTarget=(SkillTargetData)currentTargetT;
				}
				else
				{
					this.currentTarget=new SkillTargetData();
					if(!(currentTargetT.GetType().IsAssignableFrom(typeof(SkillTargetData))))
					{
						stream.throwTypeReadError(typeof(SkillTargetData),currentTargetT.GetType());
					}
					this.currentTarget.shadowCopy(currentTargetT);
				}
			}
			else
			{
				this.currentTarget=null;
			}
		}
		else
		{
			this.currentTarget=null;
		}
		
		this.currentSkillStep=stream.readInt();
		
		this.currentSkillStepTimePass=stream.readInt();
		
		this.currentSkillBarID=stream.readInt();
		
		this.currentSkillBarTimePass=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.currentSkillID);
		
		stream.writeInt(this.currentSkillLevel);
		
		if(this.currentTarget!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.currentTarget);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.currentSkillStep);
		
		stream.writeInt(this.currentSkillStepTimePass);
		
		stream.writeInt(this.currentSkillBarID);
		
		stream.writeInt(this.currentSkillBarTimePass);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.currentSkillID=0;
		this.currentSkillLevel=0;
		this.currentTarget=null;
		this.currentSkillStep=0;
		this.currentSkillStepTimePass=0;
		this.currentSkillBarID=0;
		this.currentSkillBarTimePass=0;
	}
	
	public override void clear()
	{
		this.currentSkillID=-1;
		this.currentSkillLevel=0;
		this.currentTarget=null;
		this.currentSkillStep=0;
	}
	
}
