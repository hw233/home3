using ShineEngine;

/// <summary>
/// 战斗基础数据(4元素+cd)(generated by shine)
/// </summary>
public class UnitFightData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.UnitFight;
	
	/// <summary>
	/// 状态组
	/// </summary>
	public IntBooleanMap status;
	
	/// <summary>
	/// 属性组
	/// </summary>
	public IntIntMap attributes;
	
	/// <summary>
	/// 技能组
	/// </summary>
	public IntObjectMap<SkillData> skills;
	
	/// <summary>
	/// buff组
	/// </summary>
	public IntObjectMap<BuffData> buffs;
	
	/// <summary>
	/// CD组
	/// </summary>
	public IntObjectMap<CDData> cds;
	
	public UnitFightData()
	{
		_dataID=BaseDataType.UnitFight;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		int statusLen=stream.readLen();
		if(this.status!=null)
		{
			this.status.clear();
			this.status.ensureCapacity(statusLen);
		}
		else
		{
			this.status=new IntBooleanMap(statusLen);
		}
		
		IntBooleanMap statusT=this.status;
		for(int statusI=statusLen-1;statusI>=0;--statusI)
		{
			int statusK;
			bool statusV;
			statusK=stream.readInt();
			
			statusV=stream.readBoolean();
			
			statusT.put(statusK,statusV);
		}
		
		int attributesLen=stream.readLen();
		if(this.attributes!=null)
		{
			this.attributes.clear();
			this.attributes.ensureCapacity(attributesLen);
		}
		else
		{
			this.attributes=new IntIntMap(attributesLen);
		}
		
		IntIntMap attributesT=this.attributes;
		for(int attributesI=attributesLen-1;attributesI>=0;--attributesI)
		{
			int attributesK;
			int attributesV;
			attributesK=stream.readInt();
			
			attributesV=stream.readInt();
			
			attributesT.put(attributesK,attributesV);
		}
		
		int skillsLen=stream.readLen();
		if(this.skills!=null)
		{
			this.skills.clear();
			this.skills.ensureCapacity(skillsLen);
		}
		else
		{
			this.skills=new IntObjectMap<SkillData>(skillsLen);
		}
		
		IntObjectMap<SkillData> skillsT=this.skills;
		for(int skillsI=skillsLen-1;skillsI>=0;--skillsI)
		{
			SkillData skillsV;
			skillsV=(SkillData)stream.readDataSimpleNotNull();
			
			skillsT.put(skillsV.id,skillsV);
		}
		
		int buffsLen=stream.readLen();
		if(this.buffs!=null)
		{
			this.buffs.clear();
			this.buffs.ensureCapacity(buffsLen);
		}
		else
		{
			this.buffs=new IntObjectMap<BuffData>(buffsLen);
		}
		
		IntObjectMap<BuffData> buffsT=this.buffs;
		for(int buffsI=buffsLen-1;buffsI>=0;--buffsI)
		{
			BuffData buffsV;
			buffsV=(BuffData)stream.readDataSimpleNotNull();
			
			buffsT.put(buffsV.instanceID,buffsV);
		}
		
		int cdsLen=stream.readLen();
		if(this.cds!=null)
		{
			this.cds.clear();
			this.cds.ensureCapacity(cdsLen);
		}
		else
		{
			this.cds=new IntObjectMap<CDData>(cdsLen);
		}
		
		IntObjectMap<CDData> cdsT=this.cds;
		for(int cdsI=cdsLen-1;cdsI>=0;--cdsI)
		{
			CDData cdsV;
			cdsV=(CDData)stream.createData(CDData.dataID);
			cdsV.readBytesSimple(stream);
			
			cdsT.put(cdsV.id,cdsV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.status!=null)
		{
			stream.writeLen(this.status.size());
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				bool[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.Length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						bool statusV=statusVValues[statusKI];
						stream.writeInt(statusK);
						
						stream.writeBoolean(statusV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("status");
		}
		
		if(this.attributes!=null)
		{
			stream.writeLen(this.attributes.size());
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKKeys=this.attributes.getKeys();
				int[] attributesVValues=this.attributes.getValues();
				for(int attributesKI=attributesKKeys.Length-1;attributesKI>=0;--attributesKI)
				{
					int attributesK=attributesKKeys[attributesKI];
					if(attributesK!=attributesKFreeValue)
					{
						int attributesV=attributesVValues[attributesKI];
						stream.writeInt(attributesK);
						
						stream.writeInt(attributesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("attributes");
		}
		
		if(this.skills!=null)
		{
			stream.writeLen(this.skills.size());
			if(!this.skills.isEmpty())
			{
				SkillData[] skillsVValues=this.skills.getValues();
				for(int skillsVI=skillsVValues.Length-1;skillsVI>=0;--skillsVI)
				{
					SkillData skillsV=skillsVValues[skillsVI];
					if(skillsV!=null)
					{
						if(skillsV!=null)
						{
							stream.writeDataSimpleNotNull(skillsV);
						}
						else
						{
							nullObjError("skillsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("skills");
		}
		
		if(this.buffs!=null)
		{
			stream.writeLen(this.buffs.size());
			if(!this.buffs.isEmpty())
			{
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsVI=buffsVValues.Length-1;buffsVI>=0;--buffsVI)
				{
					BuffData buffsV=buffsVValues[buffsVI];
					if(buffsV!=null)
					{
						if(buffsV!=null)
						{
							stream.writeDataSimpleNotNull(buffsV);
						}
						else
						{
							nullObjError("buffsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("buffs");
		}
		
		if(this.cds!=null)
		{
			stream.writeLen(this.cds.size());
			if(!this.cds.isEmpty())
			{
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsVI=cdsVValues.Length-1;cdsVI>=0;--cdsVI)
				{
					CDData cdsV=cdsVValues[cdsVI];
					if(cdsV!=null)
					{
						if(cdsV!=null)
						{
							cdsV.writeBytesSimple(stream);
						}
						else
						{
							nullObjError("cdsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("cds");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is UnitFightData))
			return;
		
		UnitFightData mData=(UnitFightData)data;
		
		this.status=mData.status;
		this.attributes=mData.attributes;
		this.skills=mData.skills;
		this.buffs=mData.buffs;
		this.cds=mData.cds;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is UnitFightData))
			return;
		
		UnitFightData mData=(UnitFightData)data;
		
		if(mData.status!=null)
		{
			if(this.status!=null)
			{
				this.status.clear();
				this.status.ensureCapacity(mData.status.size());
			}
			else
			{
				this.status=new IntBooleanMap(mData.status.size());
			}
			
			IntBooleanMap statusT=this.status;
			if(!mData.status.isEmpty())
			{
				int statusKFreeValue=mData.status.getFreeValue();
				int[] statusKKeys=mData.status.getKeys();
				bool[] statusVValues=mData.status.getValues();
				for(int statusKI=statusKKeys.Length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						bool statusV=statusVValues[statusKI];
						int statusW;
						bool statusU;
						statusW=statusK;
						
						statusU=statusV;
						
						statusT.put(statusW,statusU);
					}
				}
			}
		}
		else
		{
			this.status=null;
			nullObjError("status");
		}
		
		if(mData.attributes!=null)
		{
			if(this.attributes!=null)
			{
				this.attributes.clear();
				this.attributes.ensureCapacity(mData.attributes.size());
			}
			else
			{
				this.attributes=new IntIntMap(mData.attributes.size());
			}
			
			IntIntMap attributesT=this.attributes;
			if(!mData.attributes.isEmpty())
			{
				int attributesKFreeValue=mData.attributes.getFreeValue();
				int[] attributesKKeys=mData.attributes.getKeys();
				int[] attributesVValues=mData.attributes.getValues();
				for(int attributesKI=attributesKKeys.Length-1;attributesKI>=0;--attributesKI)
				{
					int attributesK=attributesKKeys[attributesKI];
					if(attributesK!=attributesKFreeValue)
					{
						int attributesV=attributesVValues[attributesKI];
						int attributesW;
						int attributesU;
						attributesW=attributesK;
						
						attributesU=attributesV;
						
						attributesT.put(attributesW,attributesU);
					}
				}
			}
		}
		else
		{
			this.attributes=null;
			nullObjError("attributes");
		}
		
		if(mData.skills!=null)
		{
			if(this.skills!=null)
			{
				this.skills.clear();
				this.skills.ensureCapacity(mData.skills.size());
			}
			else
			{
				this.skills=new IntObjectMap<SkillData>(mData.skills.size());
			}
			
			IntObjectMap<SkillData> skillsT=this.skills;
			if(!mData.skills.isEmpty())
			{
				SkillData[] skillsVValues=mData.skills.getValues();
				for(int skillsVI=skillsVValues.Length-1;skillsVI>=0;--skillsVI)
				{
					SkillData skillsV=skillsVValues[skillsVI];
					if(skillsV!=null)
					{
						SkillData skillsU;
						if(skillsV!=null)
						{
							skillsU=(SkillData)skillsV.clone();
						}
						else
						{
							skillsU=null;
							nullObjError("skillsU");
						}
						
						skillsT.put(skillsU.id,skillsU);
					}
				}
			}
		}
		else
		{
			this.skills=null;
			nullObjError("skills");
		}
		
		if(mData.buffs!=null)
		{
			if(this.buffs!=null)
			{
				this.buffs.clear();
				this.buffs.ensureCapacity(mData.buffs.size());
			}
			else
			{
				this.buffs=new IntObjectMap<BuffData>(mData.buffs.size());
			}
			
			IntObjectMap<BuffData> buffsT=this.buffs;
			if(!mData.buffs.isEmpty())
			{
				BuffData[] buffsVValues=mData.buffs.getValues();
				for(int buffsVI=buffsVValues.Length-1;buffsVI>=0;--buffsVI)
				{
					BuffData buffsV=buffsVValues[buffsVI];
					if(buffsV!=null)
					{
						BuffData buffsU;
						if(buffsV!=null)
						{
							buffsU=(BuffData)buffsV.clone();
						}
						else
						{
							buffsU=null;
							nullObjError("buffsU");
						}
						
						buffsT.put(buffsU.instanceID,buffsU);
					}
				}
			}
		}
		else
		{
			this.buffs=null;
			nullObjError("buffs");
		}
		
		if(mData.cds!=null)
		{
			if(this.cds!=null)
			{
				this.cds.clear();
				this.cds.ensureCapacity(mData.cds.size());
			}
			else
			{
				this.cds=new IntObjectMap<CDData>(mData.cds.size());
			}
			
			IntObjectMap<CDData> cdsT=this.cds;
			if(!mData.cds.isEmpty())
			{
				CDData[] cdsVValues=mData.cds.getValues();
				for(int cdsVI=cdsVValues.Length-1;cdsVI>=0;--cdsVI)
				{
					CDData cdsV=cdsVValues[cdsVI];
					if(cdsV!=null)
					{
						CDData cdsU;
						if(cdsV!=null)
						{
							cdsU=(CDData)BytesControl.createData(CDData.dataID);
							cdsU.copy(cdsV);
						}
						else
						{
							cdsU=null;
							nullObjError("cdsU");
						}
						
						cdsT.put(cdsU.id,cdsU);
					}
				}
			}
		}
		else
		{
			this.cds=null;
			nullObjError("cds");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		UnitFightData mData=(UnitFightData)data;
		if(mData.status!=null)
		{
			if(this.status==null)
				return false;
			if(this.status.size()!=mData.status.size())
				return false;
			IntBooleanMap statusR=mData.status;
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				bool[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.Length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						bool statusV=statusVValues[statusKI];
						bool statusU=statusR.get(statusK);
						if(statusV!=statusU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.status!=null)
				return false;
		}
		
		if(mData.attributes!=null)
		{
			if(this.attributes==null)
				return false;
			if(this.attributes.size()!=mData.attributes.size())
				return false;
			IntIntMap attributesR=mData.attributes;
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKKeys=this.attributes.getKeys();
				int[] attributesVValues=this.attributes.getValues();
				for(int attributesKI=attributesKKeys.Length-1;attributesKI>=0;--attributesKI)
				{
					int attributesK=attributesKKeys[attributesKI];
					if(attributesK!=attributesKFreeValue)
					{
						int attributesV=attributesVValues[attributesKI];
						int attributesU=attributesR.get(attributesK);
						if(attributesV!=attributesU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.attributes!=null)
				return false;
		}
		
		if(mData.skills!=null)
		{
			if(this.skills==null)
				return false;
			if(this.skills.size()!=mData.skills.size())
				return false;
			IntObjectMap<SkillData> skillsR=mData.skills;
			if(!this.skills.isEmpty())
			{
				int skillsKFreeValue=this.skills.getFreeValue();
				int[] skillsKKeys=this.skills.getKeys();
				SkillData[] skillsVValues=this.skills.getValues();
				for(int skillsKI=skillsKKeys.Length-1;skillsKI>=0;--skillsKI)
				{
					int skillsK=skillsKKeys[skillsKI];
					if(skillsK!=skillsKFreeValue)
					{
						SkillData skillsV=skillsVValues[skillsKI];
						SkillData skillsU=skillsR.get(skillsK);
						if(skillsU!=null)
						{
							if(skillsV==null)
								return false;
							if(!skillsV.dataEquals(skillsU))
								return false;
						}
						else
						{
							if(skillsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.skills!=null)
				return false;
		}
		
		if(mData.buffs!=null)
		{
			if(this.buffs==null)
				return false;
			if(this.buffs.size()!=mData.buffs.size())
				return false;
			IntObjectMap<BuffData> buffsR=mData.buffs;
			if(!this.buffs.isEmpty())
			{
				int buffsKFreeValue=this.buffs.getFreeValue();
				int[] buffsKKeys=this.buffs.getKeys();
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsKI=buffsKKeys.Length-1;buffsKI>=0;--buffsKI)
				{
					int buffsK=buffsKKeys[buffsKI];
					if(buffsK!=buffsKFreeValue)
					{
						BuffData buffsV=buffsVValues[buffsKI];
						BuffData buffsU=buffsR.get(buffsK);
						if(buffsU!=null)
						{
							if(buffsV==null)
								return false;
							if(!buffsV.dataEquals(buffsU))
								return false;
						}
						else
						{
							if(buffsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.buffs!=null)
				return false;
		}
		
		if(mData.cds!=null)
		{
			if(this.cds==null)
				return false;
			if(this.cds.size()!=mData.cds.size())
				return false;
			IntObjectMap<CDData> cdsR=mData.cds;
			if(!this.cds.isEmpty())
			{
				int cdsKFreeValue=this.cds.getFreeValue();
				int[] cdsKKeys=this.cds.getKeys();
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsKI=cdsKKeys.Length-1;cdsKI>=0;--cdsKI)
				{
					int cdsK=cdsKKeys[cdsKI];
					if(cdsK!=cdsKFreeValue)
					{
						CDData cdsV=cdsVValues[cdsKI];
						CDData cdsU=cdsR.get(cdsK);
						if(cdsU!=null)
						{
							if(cdsV==null)
								return false;
							if(!cdsV.dataEquals(cdsU))
								return false;
						}
						else
						{
							if(cdsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.cds!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitFightData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("status");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,bool>");
		if(this.status!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.status.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				bool[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.Length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						bool statusV=statusVValues[statusKI];
						writer.writeTabs();
						writer.sb.Append(statusK);
						
						writer.sb.Append(':');
						writer.sb.Append(statusV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("attributes");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,int>");
		if(this.attributes!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.attributes.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKKeys=this.attributes.getKeys();
				int[] attributesVValues=this.attributes.getValues();
				for(int attributesKI=attributesKKeys.Length-1;attributesKI>=0;--attributesKI)
				{
					int attributesK=attributesKKeys[attributesKI];
					if(attributesK!=attributesKFreeValue)
					{
						int attributesV=attributesVValues[attributesKI];
						writer.writeTabs();
						writer.sb.Append(attributesK);
						
						writer.sb.Append(':');
						writer.sb.Append(attributesV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("skills");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,SkillData>");
		if(this.skills!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.skills.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.skills.isEmpty())
			{
				int skillsKFreeValue=this.skills.getFreeValue();
				int[] skillsKKeys=this.skills.getKeys();
				SkillData[] skillsVValues=this.skills.getValues();
				for(int skillsKI=skillsKKeys.Length-1;skillsKI>=0;--skillsKI)
				{
					int skillsK=skillsKKeys[skillsKI];
					if(skillsK!=skillsKFreeValue)
					{
						SkillData skillsV=skillsVValues[skillsKI];
						writer.writeTabs();
						writer.sb.Append(skillsK);
						
						writer.sb.Append(':');
						if(skillsV!=null)
						{
							skillsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("SkillData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("buffs");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,BuffData>");
		if(this.buffs!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.buffs.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.buffs.isEmpty())
			{
				int buffsKFreeValue=this.buffs.getFreeValue();
				int[] buffsKKeys=this.buffs.getKeys();
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsKI=buffsKKeys.Length-1;buffsKI>=0;--buffsKI)
				{
					int buffsK=buffsKKeys[buffsKI];
					if(buffsK!=buffsKFreeValue)
					{
						BuffData buffsV=buffsVValues[buffsKI];
						writer.writeTabs();
						writer.sb.Append(buffsK);
						
						writer.sb.Append(':');
						if(buffsV!=null)
						{
							buffsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("BuffData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("cds");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,CDData>");
		if(this.cds!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.cds.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.cds.isEmpty())
			{
				int cdsKFreeValue=this.cds.getFreeValue();
				int[] cdsKKeys=this.cds.getKeys();
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsKI=cdsKKeys.Length-1;cdsKI>=0;--cdsKI)
				{
					int cdsK=cdsKKeys[cdsKI];
					if(cdsK!=cdsKFreeValue)
					{
						CDData cdsV=cdsVValues[cdsKI];
						writer.writeTabs();
						writer.sb.Append(cdsK);
						
						writer.sb.Append(':');
						if(cdsV!=null)
						{
							cdsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("CDData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.status=new IntBooleanMap();
		this.attributes=new IntIntMap();
		this.skills=new IntObjectMap<SkillData>();
		this.buffs=new IntObjectMap<BuffData>();
		this.cds=new IntObjectMap<CDData>();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int statusLen=stream.readLen();
		if(this.status!=null)
		{
			this.status.clear();
			this.status.ensureCapacity(statusLen);
		}
		else
		{
			this.status=new IntBooleanMap(statusLen);
		}
		
		IntBooleanMap statusT=this.status;
		for(int statusI=statusLen-1;statusI>=0;--statusI)
		{
			int statusK;
			bool statusV;
			statusK=stream.readInt();
			
			statusV=stream.readBoolean();
			
			statusT.put(statusK,statusV);
		}
		
		int attributesLen=stream.readLen();
		if(this.attributes!=null)
		{
			this.attributes.clear();
			this.attributes.ensureCapacity(attributesLen);
		}
		else
		{
			this.attributes=new IntIntMap(attributesLen);
		}
		
		IntIntMap attributesT=this.attributes;
		for(int attributesI=attributesLen-1;attributesI>=0;--attributesI)
		{
			int attributesK;
			int attributesV;
			attributesK=stream.readInt();
			
			attributesV=stream.readInt();
			
			attributesT.put(attributesK,attributesV);
		}
		
		int skillsLen=stream.readLen();
		if(this.skills!=null)
		{
			this.skills.clear();
			this.skills.ensureCapacity(skillsLen);
		}
		else
		{
			this.skills=new IntObjectMap<SkillData>(skillsLen);
		}
		
		IntObjectMap<SkillData> skillsT=this.skills;
		for(int skillsI=skillsLen-1;skillsI>=0;--skillsI)
		{
			SkillData skillsV;
			BaseData skillsVT=stream.readDataFullNotNull();
			if(skillsVT!=null)
			{
				if(skillsVT is SkillData)
				{
					skillsV=(SkillData)skillsVT;
				}
				else
				{
					skillsV=new SkillData();
					if(!(skillsVT.GetType().IsAssignableFrom(typeof(SkillData))))
					{
						stream.throwTypeReadError(typeof(SkillData),skillsVT.GetType());
					}
					skillsV.shadowCopy(skillsVT);
				}
			}
			else
			{
				skillsV=null;
			}
			
			skillsT.put(skillsV.id,skillsV);
		}
		
		int buffsLen=stream.readLen();
		if(this.buffs!=null)
		{
			this.buffs.clear();
			this.buffs.ensureCapacity(buffsLen);
		}
		else
		{
			this.buffs=new IntObjectMap<BuffData>(buffsLen);
		}
		
		IntObjectMap<BuffData> buffsT=this.buffs;
		for(int buffsI=buffsLen-1;buffsI>=0;--buffsI)
		{
			BuffData buffsV;
			BaseData buffsVT=stream.readDataFullNotNull();
			if(buffsVT!=null)
			{
				if(buffsVT is BuffData)
				{
					buffsV=(BuffData)buffsVT;
				}
				else
				{
					buffsV=new BuffData();
					if(!(buffsVT.GetType().IsAssignableFrom(typeof(BuffData))))
					{
						stream.throwTypeReadError(typeof(BuffData),buffsVT.GetType());
					}
					buffsV.shadowCopy(buffsVT);
				}
			}
			else
			{
				buffsV=null;
			}
			
			buffsT.put(buffsV.instanceID,buffsV);
		}
		
		int cdsLen=stream.readLen();
		if(this.cds!=null)
		{
			this.cds.clear();
			this.cds.ensureCapacity(cdsLen);
		}
		else
		{
			this.cds=new IntObjectMap<CDData>(cdsLen);
		}
		
		IntObjectMap<CDData> cdsT=this.cds;
		for(int cdsI=cdsLen-1;cdsI>=0;--cdsI)
		{
			CDData cdsV;
			cdsV=(CDData)stream.createData(CDData.dataID);
			cdsV.readBytesFull(stream);
			
			cdsT.put(cdsV.id,cdsV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.status!=null)
		{
			stream.writeLen(this.status.size());
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				bool[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.Length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						bool statusV=statusVValues[statusKI];
						stream.writeInt(statusK);
						
						stream.writeBoolean(statusV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("status");
		}
		
		if(this.attributes!=null)
		{
			stream.writeLen(this.attributes.size());
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKKeys=this.attributes.getKeys();
				int[] attributesVValues=this.attributes.getValues();
				for(int attributesKI=attributesKKeys.Length-1;attributesKI>=0;--attributesKI)
				{
					int attributesK=attributesKKeys[attributesKI];
					if(attributesK!=attributesKFreeValue)
					{
						int attributesV=attributesVValues[attributesKI];
						stream.writeInt(attributesK);
						
						stream.writeInt(attributesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("attributes");
		}
		
		if(this.skills!=null)
		{
			stream.writeLen(this.skills.size());
			if(!this.skills.isEmpty())
			{
				SkillData[] skillsVValues=this.skills.getValues();
				for(int skillsVI=skillsVValues.Length-1;skillsVI>=0;--skillsVI)
				{
					SkillData skillsV=skillsVValues[skillsVI];
					if(skillsV!=null)
					{
						if(skillsV!=null)
						{
							stream.writeDataFullNotNull(skillsV);
						}
						else
						{
							nullObjError("skillsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("skills");
		}
		
		if(this.buffs!=null)
		{
			stream.writeLen(this.buffs.size());
			if(!this.buffs.isEmpty())
			{
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsVI=buffsVValues.Length-1;buffsVI>=0;--buffsVI)
				{
					BuffData buffsV=buffsVValues[buffsVI];
					if(buffsV!=null)
					{
						if(buffsV!=null)
						{
							stream.writeDataFullNotNull(buffsV);
						}
						else
						{
							nullObjError("buffsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("buffs");
		}
		
		if(this.cds!=null)
		{
			stream.writeLen(this.cds.size());
			if(!this.cds.isEmpty())
			{
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsVI=cdsVValues.Length-1;cdsVI>=0;--cdsVI)
				{
					CDData cdsV=cdsVValues[cdsVI];
					if(cdsV!=null)
					{
						if(cdsV!=null)
						{
							cdsV.writeBytesFull(stream);
						}
						else
						{
							nullObjError("cdsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("cds");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.status=null;
		this.attributes=null;
		this.skills=null;
		this.buffs=null;
		this.cds=null;
	}
	
}
