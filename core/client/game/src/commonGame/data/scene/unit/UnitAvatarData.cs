using ShineEngine;

/// <summary>
/// 单位造型数据(generated by shine)
/// </summary>
public class UnitAvatarData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.UnitAvatar;
	
	/// <summary>
	/// 模型ID
	/// </summary>
	public int modelID=-1;
	
	/// <summary>
	/// 显示部件组
	/// </summary>
	public IntIntMap parts;
	
	public UnitAvatarData()
	{
		_dataID=BaseDataType.UnitAvatar;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.modelID=stream.readInt();
		
		int partsLen=stream.readLen();
		if(this.parts!=null)
		{
			this.parts.clear();
			this.parts.ensureCapacity(partsLen);
		}
		else
		{
			this.parts=new IntIntMap(partsLen);
		}
		
		IntIntMap partsT=this.parts;
		for(int partsI=partsLen-1;partsI>=0;--partsI)
		{
			int partsK;
			int partsV;
			partsK=stream.readInt();
			
			partsV=stream.readInt();
			
			partsT.put(partsK,partsV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.modelID);
		
		if(this.parts!=null)
		{
			stream.writeLen(this.parts.size());
			if(!this.parts.isEmpty())
			{
				int partsKFreeValue=this.parts.getFreeValue();
				int[] partsKKeys=this.parts.getKeys();
				int[] partsVValues=this.parts.getValues();
				for(int partsKI=partsKKeys.Length-1;partsKI>=0;--partsKI)
				{
					int partsK=partsKKeys[partsKI];
					if(partsK!=partsKFreeValue)
					{
						int partsV=partsVValues[partsKI];
						stream.writeInt(partsK);
						
						stream.writeInt(partsV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("parts");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is UnitAvatarData))
			return;
		
		UnitAvatarData mData=(UnitAvatarData)data;
		
		this.modelID=mData.modelID;
		this.parts=mData.parts;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is UnitAvatarData))
			return;
		
		UnitAvatarData mData=(UnitAvatarData)data;
		
		this.modelID=mData.modelID;
		
		if(mData.parts!=null)
		{
			if(this.parts!=null)
			{
				this.parts.clear();
				this.parts.ensureCapacity(mData.parts.size());
			}
			else
			{
				this.parts=new IntIntMap(mData.parts.size());
			}
			
			IntIntMap partsT=this.parts;
			if(!mData.parts.isEmpty())
			{
				int partsKFreeValue=mData.parts.getFreeValue();
				int[] partsKKeys=mData.parts.getKeys();
				int[] partsVValues=mData.parts.getValues();
				for(int partsKI=partsKKeys.Length-1;partsKI>=0;--partsKI)
				{
					int partsK=partsKKeys[partsKI];
					if(partsK!=partsKFreeValue)
					{
						int partsV=partsVValues[partsKI];
						int partsW;
						int partsU;
						partsW=partsK;
						
						partsU=partsV;
						
						partsT.put(partsW,partsU);
					}
				}
			}
		}
		else
		{
			this.parts=null;
			nullObjError("parts");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		UnitAvatarData mData=(UnitAvatarData)data;
		if(this.modelID!=mData.modelID)
			return false;
		
		if(mData.parts!=null)
		{
			if(this.parts==null)
				return false;
			if(this.parts.size()!=mData.parts.size())
				return false;
			IntIntMap partsR=mData.parts;
			if(!this.parts.isEmpty())
			{
				int partsKFreeValue=this.parts.getFreeValue();
				int[] partsKKeys=this.parts.getKeys();
				int[] partsVValues=this.parts.getValues();
				for(int partsKI=partsKKeys.Length-1;partsKI>=0;--partsKI)
				{
					int partsK=partsKKeys[partsKI];
					if(partsK!=partsKFreeValue)
					{
						int partsV=partsVValues[partsKI];
						int partsU=partsR.get(partsK);
						if(partsV!=partsU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.parts!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitAvatarData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("modelID");
		writer.sb.Append(':');
		writer.sb.Append(this.modelID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("parts");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,int>");
		if(this.parts!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.parts.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.parts.isEmpty())
			{
				int partsKFreeValue=this.parts.getFreeValue();
				int[] partsKKeys=this.parts.getKeys();
				int[] partsVValues=this.parts.getValues();
				for(int partsKI=partsKKeys.Length-1;partsKI>=0;--partsKI)
				{
					int partsK=partsKKeys[partsKI];
					if(partsK!=partsKFreeValue)
					{
						int partsV=partsVValues[partsKI];
						writer.writeTabs();
						writer.sb.Append(partsK);
						
						writer.sb.Append(':');
						writer.sb.Append(partsV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.parts=new IntIntMap();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.modelID=stream.readInt();
		
		int partsLen=stream.readLen();
		if(this.parts!=null)
		{
			this.parts.clear();
			this.parts.ensureCapacity(partsLen);
		}
		else
		{
			this.parts=new IntIntMap(partsLen);
		}
		
		IntIntMap partsT=this.parts;
		for(int partsI=partsLen-1;partsI>=0;--partsI)
		{
			int partsK;
			int partsV;
			partsK=stream.readInt();
			
			partsV=stream.readInt();
			
			partsT.put(partsK,partsV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.modelID);
		
		if(this.parts!=null)
		{
			stream.writeLen(this.parts.size());
			if(!this.parts.isEmpty())
			{
				int partsKFreeValue=this.parts.getFreeValue();
				int[] partsKKeys=this.parts.getKeys();
				int[] partsVValues=this.parts.getValues();
				for(int partsKI=partsKKeys.Length-1;partsKI>=0;--partsKI)
				{
					int partsK=partsKKeys[partsKI];
					if(partsK!=partsKFreeValue)
					{
						int partsV=partsVValues[partsKI];
						stream.writeInt(partsK);
						
						stream.writeInt(partsV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("parts");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.modelID=0;
		this.parts=null;
	}
	
}
