using ShineEngine;

/// <summary>
/// 战斗单位身份数据(generated by shine)
/// </summary>
public class FightUnitIdentityData:UnitIdentityData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.FightUnitIdentity;
	
	/// <summary>
	/// 单位类型ID(类型不同,数据表不同)
	/// </summary>
	public int id;
	
	/// <summary>
	/// 单位等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 控制角色ID(服务器控制就是-1)
	/// </summary>
	public long controlPlayerID=-1L;
	
	public FightUnitIdentityData()
	{
		_dataID=BaseDataType.FightUnitIdentity;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FightUnitIdentityData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		this.controlPlayerID=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		stream.writeLong(this.controlPlayerID);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		this.controlPlayerID=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		stream.writeLong(this.controlPlayerID);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is FightUnitIdentityData))
			return;
		
		FightUnitIdentityData mData=(FightUnitIdentityData)data;
		
		this.id=mData.id;
		this.level=mData.level;
		this.controlPlayerID=mData.controlPlayerID;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is FightUnitIdentityData))
			return;
		
		FightUnitIdentityData mData=(FightUnitIdentityData)data;
		
		this.id=mData.id;
		
		this.level=mData.level;
		
		this.controlPlayerID=mData.controlPlayerID;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		FightUnitIdentityData mData=(FightUnitIdentityData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.level!=mData.level)
			return false;
		
		if(this.controlPlayerID!=mData.controlPlayerID)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("level");
		writer.sb.Append(':');
		writer.sb.Append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("controlPlayerID");
		writer.sb.Append(':');
		writer.sb.Append(this.controlPlayerID);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	public virtual int getFightUnitID()
	{
		return -1;
	}
	
	/// <summary>
	/// 获取战斗单位配置(可能为空)
	/// </summary>
	public FightUnitConfig getFightUnitConfig()
	{
		return FightUnitConfig.get(getFightUnitID());
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.id=0;
		this.level=0;
		this.controlPlayerID=0L;
	}
	
}
