using ShineEngine;

/// <summary>
/// 聊天频道数据(generated by shine)
/// </summary>
public class ChatChannelData:BaseData
{
	public SQueue<RoleChatData> queue;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ChatChannel;
	
	/// <summary>
	/// 上次聊天时间
	/// </summary>
	public long lastChatTime;
	
	public ChatChannelData()
	{
		_dataID=BaseDataType.ChatChannel;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ChatChannelData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int queueLen=stream.readLen();
		if(this.queue!=null)
		{
			this.queue.clear();
			this.queue.ensureCapacity(queueLen);
		}
		else
		{
			this.queue=new SQueue<RoleChatData>();
		}
		
		SQueue<RoleChatData> queueT=this.queue;
		for(int queueI=queueLen-1;queueI>=0;--queueI)
		{
			RoleChatData queueV;
			BaseData queueVT=stream.readDataFullNotNull();
			if(queueVT!=null)
			{
				if(queueVT is RoleChatData)
				{
					queueV=(RoleChatData)queueVT;
				}
				else
				{
					queueV=new RoleChatData();
					if(!(queueVT.GetType().IsAssignableFrom(typeof(RoleChatData))))
					{
						stream.throwTypeReadError(typeof(RoleChatData),queueVT.GetType());
					}
					queueV.shadowCopy(queueVT);
				}
			}
			else
			{
				queueV=null;
			}
			
			queueT.offer(queueV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.queue!=null)
		{
			stream.writeLen(this.queue.size());
			if(!this.queue.isEmpty())
			{
				RoleChatData[] queueVValues=this.queue.getValues();
				int queueVMark=this.queue.getMark();
				int queueVStart=this.queue.getStart();
				for(int queueVI=0,queueVLen=this.queue.length();queueVI<queueVLen;++queueVI)
				{
					RoleChatData queueV=queueVValues[(queueVI+queueVStart)&queueVMark];
					if(queueV!=null)
					{
						stream.writeDataFullNotNull(queueV);
					}
					else
					{
						nullObjError("queueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("queue");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		int queueLen=stream.readLen();
		if(this.queue!=null)
		{
			this.queue.clear();
			this.queue.ensureCapacity(queueLen);
		}
		else
		{
			this.queue=new SQueue<RoleChatData>();
		}
		
		SQueue<RoleChatData> queueT=this.queue;
		for(int queueI=queueLen-1;queueI>=0;--queueI)
		{
			RoleChatData queueV;
			queueV=(RoleChatData)stream.readDataSimpleNotNull();
			
			queueT.offer(queueV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.queue!=null)
		{
			stream.writeLen(this.queue.size());
			if(!this.queue.isEmpty())
			{
				RoleChatData[] queueVValues=this.queue.getValues();
				int queueVMark=this.queue.getMark();
				int queueVStart=this.queue.getStart();
				for(int queueVI=0,queueVLen=this.queue.length();queueVI<queueVLen;++queueVI)
				{
					RoleChatData queueV=queueVValues[(queueVI+queueVStart)&queueVMark];
					if(queueV!=null)
					{
						stream.writeDataSimpleNotNull(queueV);
					}
					else
					{
						nullObjError("queueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("queue");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ChatChannelData))
			return;
		
		ChatChannelData mData=(ChatChannelData)data;
		
		this.queue=mData.queue;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ChatChannelData))
			return;
		
		ChatChannelData mData=(ChatChannelData)data;
		
		if(mData.queue!=null)
		{
			if(this.queue!=null)
			{
				this.queue.clear();
				this.queue.ensureCapacity(mData.queue.size());
			}
			else
			{
				this.queue=new SQueue<RoleChatData>();
			}
			
			SQueue<RoleChatData> queueT=this.queue;
			if(!mData.queue.isEmpty())
			{
				RoleChatData[] queueVValues=mData.queue.getValues();
				int queueVMark=mData.queue.getMark();
				int queueVStart=mData.queue.getStart();
				for(int queueVI=0,queueVLen=mData.queue.length();queueVI<queueVLen;++queueVI)
				{
					RoleChatData queueV=queueVValues[(queueVI+queueVStart)&queueVMark];
					RoleChatData queueU;
					if(queueV!=null)
					{
						queueU=(RoleChatData)queueV.clone();
					}
					else
					{
						queueU=null;
						nullObjError("queueU");
					}
					
					queueT.offer(queueU);
				}
			}
		}
		else
		{
			this.queue=null;
			nullObjError("queue");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ChatChannelData mData=(ChatChannelData)data;
		if(mData.queue!=null)
		{
			if(this.queue==null)
				return false;
			if(this.queue.size()!=mData.queue.size())
				return false;
			SQueue<RoleChatData> queueT=this.queue;
			SQueue<RoleChatData> queueR=mData.queue;
			int queueLen=queueT.size();
			for(int queueI=0;queueI<queueLen;++queueI)
			{
				RoleChatData queueU=queueT.get(queueI);
				RoleChatData queueV=queueR.get(queueI);
				if(queueV!=null)
				{
					if(queueU==null)
						return false;
					if(!queueU.dataEquals(queueV))
						return false;
				}
				else
				{
					if(queueU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.queue!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("queue");
		writer.sb.Append(':');
		writer.sb.Append("Queue<RoleChatData>");
		if(this.queue!=null)
		{
			SQueue<RoleChatData> queueT=this.queue;
			int queueLen=queueT.size();
			writer.sb.Append('(');
			writer.sb.Append(queueLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int queueI=0;queueI<queueLen;++queueI)
			{
				RoleChatData queueV=queueT.get(queueI);
				writer.writeTabs();
				writer.sb.Append(queueI);
				writer.sb.Append(':');
				if(queueV!=null)
				{
					queueV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("RoleChatData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.queue=new SQueue<RoleChatData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.queue=null;
	}
	
}
