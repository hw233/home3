using ShineEngine;

/// <summary>
/// 角色社交数据(generated by shine)
/// </summary>
public class RoleSocialData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.RoleSocial;
	
	/// <summary>
	/// 显示数据
	/// </summary>
	public RoleShowData showData;
	
	/// <summary>
	/// 上次在线时间(如已在线则为-1)
	/// </summary>
	public long lastOnlineTime;
	
	/// <summary>
	/// 所在场景位置数据
	/// </summary>
	public SceneLocationData location;
	
	/// <summary>
	/// 是否在线
	/// </summary>
	public bool isOnline;
	
	public RoleSocialData()
	{
		_dataID=BaseDataType.RoleSocial;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RoleSocialData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.showData=(RoleShowData)stream.readDataSimpleNotNull();
		
		this.isOnline=stream.readBoolean();
		
		this.lastOnlineTime=stream.readLong();
		
		if(stream.readBoolean())
		{
			this.location=(SceneLocationData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.location=null;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.showData!=null)
		{
			stream.writeDataSimpleNotNull(this.showData);
		}
		else
		{
			nullObjError("showData");
		}
		
		stream.writeBoolean(this.isOnline);
		
		stream.writeLong(this.lastOnlineTime);
		
		if(this.location!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.location);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is RoleSocialData))
			return;
		
		RoleSocialData mData=(RoleSocialData)data;
		
		this.showData=mData.showData;
		this.isOnline=mData.isOnline;
		this.lastOnlineTime=mData.lastOnlineTime;
		this.location=mData.location;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is RoleSocialData))
			return;
		
		RoleSocialData mData=(RoleSocialData)data;
		
		if(mData.showData!=null)
		{
			this.showData=(RoleShowData)mData.showData.clone();
		}
		else
		{
			this.showData=null;
			nullObjError("showData");
		}
		
		this.isOnline=mData.isOnline;
		
		this.lastOnlineTime=mData.lastOnlineTime;
		
		if(mData.location!=null)
		{
			this.location=(SceneLocationData)mData.location.clone();
		}
		else
		{
			this.location=null;
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		RoleSocialData mData=(RoleSocialData)data;
		if(mData.showData!=null)
		{
			if(this.showData==null)
				return false;
			if(!this.showData.dataEquals(mData.showData))
				return false;
		}
		else
		{
			if(this.showData!=null)
				return false;
		}
		
		if(this.isOnline!=mData.isOnline)
			return false;
		
		if(this.lastOnlineTime!=mData.lastOnlineTime)
			return false;
		
		if(mData.location!=null)
		{
			if(this.location==null)
				return false;
			if(!this.location.dataEquals(mData.location))
				return false;
		}
		else
		{
			if(this.location!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("showData");
		writer.sb.Append(':');
		if(this.showData!=null)
		{
			this.showData.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("RoleShowData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isOnline");
		writer.sb.Append(':');
		writer.sb.Append(this.isOnline);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("lastOnlineTime");
		writer.sb.Append(':');
		writer.sb.Append(this.lastOnlineTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("location");
		writer.sb.Append(':');
		if(this.location!=null)
		{
			this.location.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SceneLocationData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.showData=new RoleShowData();
		this.showData.initDefault();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData showDataT=stream.readDataFullNotNull();
		if(showDataT!=null)
		{
			if(showDataT is RoleShowData)
			{
				this.showData=(RoleShowData)showDataT;
			}
			else
			{
				this.showData=new RoleShowData();
				if(!(showDataT.GetType().IsAssignableFrom(typeof(RoleShowData))))
				{
					stream.throwTypeReadError(typeof(RoleShowData),showDataT.GetType());
				}
				this.showData.shadowCopy(showDataT);
			}
		}
		else
		{
			this.showData=null;
		}
		
		this.isOnline=stream.readBoolean();
		
		this.lastOnlineTime=stream.readLong();
		
		if(stream.readBoolean())
		{
			BaseData locationT=stream.readDataFullNotNull();
			if(locationT!=null)
			{
				if(locationT is SceneLocationData)
				{
					this.location=(SceneLocationData)locationT;
				}
				else
				{
					this.location=new SceneLocationData();
					if(!(locationT.GetType().IsAssignableFrom(typeof(SceneLocationData))))
					{
						stream.throwTypeReadError(typeof(SceneLocationData),locationT.GetType());
					}
					this.location.shadowCopy(locationT);
				}
			}
			else
			{
				this.location=null;
			}
		}
		else
		{
			this.location=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.showData!=null)
		{
			stream.writeDataFullNotNull(this.showData);
		}
		else
		{
			nullObjError("showData");
		}
		
		stream.writeBoolean(this.isOnline);
		
		stream.writeLong(this.lastOnlineTime);
		
		if(this.location!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.location);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 改变
	/// </summary>
	public virtual void onChange(RoleShowChangeData data)
	{
		switch(data.type)
		{
			case RoleShowDataPartType.IsOnline:
			{
				this.isOnline=(data.arg0==1);
				//同时赋值两个
				this.lastOnlineTime=data.arg2;
			}
				break;
			case RoleShowDataPartType.LastOnlineTime:
			{
				this.lastOnlineTime=data.arg2;
			}
				break;
			case RoleShowDataPartType.Location:
			{
				this.location=((SceneLocationRoleShowChangeData)data).localtion;
			}
				break;
			default:
			{
				//传递
				showData.onChange(data);
			}
				break;
		}
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.showData=null;
		this.isOnline=false;
		this.lastOnlineTime=0L;
		this.location=null;
	}
	
}
