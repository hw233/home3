using ShineEngine;

/// <summary>
/// 分段排行榜数据(存库数据)(generated by shine)
/// </summary>
public class SubsectionRankToolData:FuncToolData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.SubsectionRankTool;
	
	/// <summary>
	/// 大组index,小组index,排行榜列表
	/// </summary>
	public IntObjectMap<SList<SList<RankData>>> listListMap;
	
	/// <summary>
	/// 当前排行版本(刷新一次一个版本)
	/// </summary>
	public int version;
	
	public SubsectionRankToolData()
	{
		_dataID=BaseDataType.SubsectionRankTool;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "SubsectionRankToolData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.version=stream.readInt();
		
		int listListMapLen=stream.readLen();
		if(this.listListMap!=null)
		{
			this.listListMap.clear();
			this.listListMap.ensureCapacity(listListMapLen);
		}
		else
		{
			this.listListMap=new IntObjectMap<SList<SList<RankData>>>(listListMapLen);
		}
		
		IntObjectMap<SList<SList<RankData>>> listListMapT=this.listListMap;
		for(int listListMapI=listListMapLen-1;listListMapI>=0;--listListMapI)
		{
			int listListMapK;
			SList<SList<RankData>> listListMapV;
			listListMapK=stream.readInt();
			
			int listListMapVLen=stream.readLen();
			listListMapV=new SList<SList<RankData>>();
			SList<SList<RankData>> listListMapVT=listListMapV;
			for(int listListMapVI=listListMapVLen-1;listListMapVI>=0;--listListMapVI)
			{
				SList<RankData> listListMapVV;
				int listListMapVVLen=stream.readLen();
				listListMapVV=new SList<RankData>();
				SList<RankData> listListMapVVT=listListMapVV;
				for(int listListMapVVI=listListMapVVLen-1;listListMapVVI>=0;--listListMapVVI)
				{
					RankData listListMapVVV;
					BaseData listListMapVVVT=stream.readDataFullNotNull();
					if(listListMapVVVT!=null)
					{
						if(listListMapVVVT is RankData)
						{
							listListMapVVV=(RankData)listListMapVVVT;
						}
						else
						{
							listListMapVVV=new RankData();
							if(!(listListMapVVVT.GetType().IsAssignableFrom(typeof(RankData))))
							{
								stream.throwTypeReadError(typeof(RankData),listListMapVVVT.GetType());
							}
							listListMapVVV.shadowCopy(listListMapVVVT);
						}
					}
					else
					{
						listListMapVVV=null;
					}
					
					listListMapVVT.add(listListMapVVV);
				}
				
				listListMapVT.add(listListMapVV);
			}
			
			listListMapT.put(listListMapK,listListMapV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.version);
		
		if(this.listListMap!=null)
		{
			stream.writeLen(this.listListMap.size());
			if(!this.listListMap.isEmpty())
			{
				int listListMapKFreeValue=this.listListMap.getFreeValue();
				int[] listListMapKKeys=this.listListMap.getKeys();
				SList<SList<RankData>>[] listListMapVValues=this.listListMap.getValues();
				for(int listListMapKI=listListMapKKeys.Length-1;listListMapKI>=0;--listListMapKI)
				{
					int listListMapK=listListMapKKeys[listListMapKI];
					if(listListMapK!=listListMapKFreeValue)
					{
						SList<SList<RankData>> listListMapV=listListMapVValues[listListMapKI];
						stream.writeInt(listListMapK);
						
						if(listListMapV!=null)
						{
							stream.writeLen(listListMapV.size());
							if(!listListMapV.isEmpty())
							{
								SList<RankData>[] listListMapVVValues=listListMapV.getValues();
								for(int listListMapVVI=0,listListMapVVLen=listListMapV.length();listListMapVVI<listListMapVVLen;++listListMapVVI)
								{
									SList<RankData> listListMapVV=listListMapVVValues[listListMapVVI];
									if(listListMapVV!=null)
									{
										stream.writeLen(listListMapVV.size());
										if(!listListMapVV.isEmpty())
										{
											RankData[] listListMapVVVValues=listListMapVV.getValues();
											for(int listListMapVVVI=0,listListMapVVVLen=listListMapVV.length();listListMapVVVI<listListMapVVVLen;++listListMapVVVI)
											{
												RankData listListMapVVV=listListMapVVVValues[listListMapVVVI];
												if(listListMapVVV!=null)
												{
													stream.writeDataFullNotNull(listListMapVVV);
												}
												else
												{
													nullObjError("listListMapVVV");
												}
												
											}
										}
									}
									else
									{
										nullObjError("listListMapVV");
									}
									
								}
							}
						}
						else
						{
							nullObjError("listListMapV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("listListMap");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.version=stream.readInt();
		
		int listListMapLen=stream.readLen();
		if(this.listListMap!=null)
		{
			this.listListMap.clear();
			this.listListMap.ensureCapacity(listListMapLen);
		}
		else
		{
			this.listListMap=new IntObjectMap<SList<SList<RankData>>>(listListMapLen);
		}
		
		IntObjectMap<SList<SList<RankData>>> listListMapT=this.listListMap;
		for(int listListMapI=listListMapLen-1;listListMapI>=0;--listListMapI)
		{
			int listListMapK;
			SList<SList<RankData>> listListMapV;
			listListMapK=stream.readInt();
			
			int listListMapVLen=stream.readLen();
			listListMapV=new SList<SList<RankData>>();
			SList<SList<RankData>> listListMapVT=listListMapV;
			for(int listListMapVI=listListMapVLen-1;listListMapVI>=0;--listListMapVI)
			{
				SList<RankData> listListMapVV;
				int listListMapVVLen=stream.readLen();
				listListMapVV=new SList<RankData>();
				SList<RankData> listListMapVVT=listListMapVV;
				for(int listListMapVVI=listListMapVVLen-1;listListMapVVI>=0;--listListMapVVI)
				{
					RankData listListMapVVV;
					listListMapVVV=(RankData)stream.readDataSimpleNotNull();
					
					listListMapVVT.add(listListMapVVV);
				}
				
				listListMapVT.add(listListMapVV);
			}
			
			listListMapT.put(listListMapK,listListMapV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.version);
		
		if(this.listListMap!=null)
		{
			stream.writeLen(this.listListMap.size());
			if(!this.listListMap.isEmpty())
			{
				int listListMapKFreeValue=this.listListMap.getFreeValue();
				int[] listListMapKKeys=this.listListMap.getKeys();
				SList<SList<RankData>>[] listListMapVValues=this.listListMap.getValues();
				for(int listListMapKI=listListMapKKeys.Length-1;listListMapKI>=0;--listListMapKI)
				{
					int listListMapK=listListMapKKeys[listListMapKI];
					if(listListMapK!=listListMapKFreeValue)
					{
						SList<SList<RankData>> listListMapV=listListMapVValues[listListMapKI];
						stream.writeInt(listListMapK);
						
						if(listListMapV!=null)
						{
							stream.writeLen(listListMapV.size());
							if(!listListMapV.isEmpty())
							{
								SList<RankData>[] listListMapVVValues=listListMapV.getValues();
								for(int listListMapVVI=0,listListMapVVLen=listListMapV.length();listListMapVVI<listListMapVVLen;++listListMapVVI)
								{
									SList<RankData> listListMapVV=listListMapVVValues[listListMapVVI];
									if(listListMapVV!=null)
									{
										stream.writeLen(listListMapVV.size());
										if(!listListMapVV.isEmpty())
										{
											RankData[] listListMapVVVValues=listListMapVV.getValues();
											for(int listListMapVVVI=0,listListMapVVVLen=listListMapVV.length();listListMapVVVI<listListMapVVVLen;++listListMapVVVI)
											{
												RankData listListMapVVV=listListMapVVVValues[listListMapVVVI];
												if(listListMapVVV!=null)
												{
													stream.writeDataSimpleNotNull(listListMapVVV);
												}
												else
												{
													nullObjError("listListMapVVV");
												}
												
											}
										}
									}
									else
									{
										nullObjError("listListMapVV");
									}
									
								}
							}
						}
						else
						{
							nullObjError("listListMapV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("listListMap");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is SubsectionRankToolData))
			return;
		
		SubsectionRankToolData mData=(SubsectionRankToolData)data;
		
		this.version=mData.version;
		this.listListMap=mData.listListMap;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is SubsectionRankToolData))
			return;
		
		SubsectionRankToolData mData=(SubsectionRankToolData)data;
		
		this.version=mData.version;
		
		if(mData.listListMap!=null)
		{
			if(this.listListMap!=null)
			{
				this.listListMap.clear();
				this.listListMap.ensureCapacity(mData.listListMap.size());
			}
			else
			{
				this.listListMap=new IntObjectMap<SList<SList<RankData>>>(mData.listListMap.size());
			}
			
			IntObjectMap<SList<SList<RankData>>> listListMapT=this.listListMap;
			if(!mData.listListMap.isEmpty())
			{
				int listListMapKFreeValue=mData.listListMap.getFreeValue();
				int[] listListMapKKeys=mData.listListMap.getKeys();
				SList<SList<RankData>>[] listListMapVValues=mData.listListMap.getValues();
				for(int listListMapKI=listListMapKKeys.Length-1;listListMapKI>=0;--listListMapKI)
				{
					int listListMapK=listListMapKKeys[listListMapKI];
					if(listListMapK!=listListMapKFreeValue)
					{
						SList<SList<RankData>> listListMapV=listListMapVValues[listListMapKI];
						int listListMapW;
						SList<SList<RankData>> listListMapU;
						listListMapW=listListMapK;
						
						if(listListMapV!=null)
						{
							listListMapU=new SList<SList<RankData>>();
							SList<SList<RankData>> listListMapUT=listListMapU;
							if(!listListMapV.isEmpty())
							{
								SList<RankData>[] listListMapUVValues=listListMapV.getValues();
								for(int listListMapUVI=0,listListMapUVLen=listListMapV.length();listListMapUVI<listListMapUVLen;++listListMapUVI)
								{
									SList<RankData> listListMapUV=listListMapUVValues[listListMapUVI];
									SList<RankData> listListMapUU;
									if(listListMapUV!=null)
									{
										listListMapUU=new SList<RankData>();
										SList<RankData> listListMapUUT=listListMapUU;
										if(!listListMapUV.isEmpty())
										{
											RankData[] listListMapUUVValues=listListMapUV.getValues();
											for(int listListMapUUVI=0,listListMapUUVLen=listListMapUV.length();listListMapUUVI<listListMapUUVLen;++listListMapUUVI)
											{
												RankData listListMapUUV=listListMapUUVValues[listListMapUUVI];
												RankData listListMapUUU;
												if(listListMapUUV!=null)
												{
													listListMapUUU=(RankData)listListMapUUV.clone();
												}
												else
												{
													listListMapUUU=null;
													nullObjError("listListMapUUU");
												}
												
												listListMapUUT.add(listListMapUUU);
											}
										}
									}
									else
									{
										listListMapUU=null;
										nullObjError("listListMapUU");
									}
									
									listListMapUT.add(listListMapUU);
								}
							}
						}
						else
						{
							listListMapU=null;
							nullObjError("listListMapU");
						}
						
						listListMapT.put(listListMapW,listListMapU);
					}
				}
			}
		}
		else
		{
			this.listListMap=null;
			nullObjError("listListMap");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		SubsectionRankToolData mData=(SubsectionRankToolData)data;
		if(this.version!=mData.version)
			return false;
		
		if(mData.listListMap!=null)
		{
			if(this.listListMap==null)
				return false;
			if(this.listListMap.size()!=mData.listListMap.size())
				return false;
			IntObjectMap<SList<SList<RankData>>> listListMapR=mData.listListMap;
			if(!this.listListMap.isEmpty())
			{
				int listListMapKFreeValue=this.listListMap.getFreeValue();
				int[] listListMapKKeys=this.listListMap.getKeys();
				SList<SList<RankData>>[] listListMapVValues=this.listListMap.getValues();
				for(int listListMapKI=listListMapKKeys.Length-1;listListMapKI>=0;--listListMapKI)
				{
					int listListMapK=listListMapKKeys[listListMapKI];
					if(listListMapK!=listListMapKFreeValue)
					{
						SList<SList<RankData>> listListMapV=listListMapVValues[listListMapKI];
						SList<SList<RankData>> listListMapU=listListMapR.get(listListMapK);
						if(listListMapU!=null)
						{
							if(listListMapV==null)
								return false;
							if(listListMapV.size()!=listListMapU.size())
								return false;
							SList<SList<RankData>> listListMapVT=listListMapV;
							SList<SList<RankData>> listListMapVR=listListMapU;
							int listListMapVLen=listListMapVT.size();
							for(int listListMapVI=0;listListMapVI<listListMapVLen;++listListMapVI)
							{
								SList<RankData> listListMapVU=listListMapVT.get(listListMapVI);
								SList<RankData> listListMapVV=listListMapVR.get(listListMapVI);
								if(listListMapVV!=null)
								{
									if(listListMapVU==null)
										return false;
									if(listListMapVU.size()!=listListMapVV.size())
										return false;
									SList<RankData> listListMapVUT=listListMapVU;
									SList<RankData> listListMapVUR=listListMapVV;
									int listListMapVULen=listListMapVUT.size();
									for(int listListMapVUI=0;listListMapVUI<listListMapVULen;++listListMapVUI)
									{
										RankData listListMapVUU=listListMapVUT.get(listListMapVUI);
										RankData listListMapVUV=listListMapVUR.get(listListMapVUI);
										if(listListMapVUV!=null)
										{
											if(listListMapVUU==null)
												return false;
											if(!listListMapVUU.dataEquals(listListMapVUV))
												return false;
										}
										else
										{
											if(listListMapVUU!=null)
												return false;
										}
										
									}
								}
								else
								{
									if(listListMapVU!=null)
										return false;
								}
								
							}
						}
						else
						{
							if(listListMapV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.listListMap!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("version");
		writer.sb.Append(':');
		writer.sb.Append(this.version);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("listListMap");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,SList<SList<RankData>>>");
		if(this.listListMap!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.listListMap.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.listListMap.isEmpty())
			{
				int listListMapKFreeValue=this.listListMap.getFreeValue();
				int[] listListMapKKeys=this.listListMap.getKeys();
				SList<SList<RankData>>[] listListMapVValues=this.listListMap.getValues();
				for(int listListMapKI=listListMapKKeys.Length-1;listListMapKI>=0;--listListMapKI)
				{
					int listListMapK=listListMapKKeys[listListMapKI];
					if(listListMapK!=listListMapKFreeValue)
					{
						SList<SList<RankData>> listListMapV=listListMapVValues[listListMapKI];
						writer.writeTabs();
						writer.sb.Append(listListMapK);
						
						writer.sb.Append(':');
						writer.sb.Append("List<SList<RankData>>");
						if(listListMapV!=null)
						{
							SList<SList<RankData>> listListMapVT=listListMapV;
							int listListMapVLen=listListMapVT.size();
							writer.sb.Append('(');
							writer.sb.Append(listListMapVLen);
							writer.sb.Append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							for(int listListMapVI=0;listListMapVI<listListMapVLen;++listListMapVI)
							{
								SList<RankData> listListMapVV=listListMapVT.get(listListMapVI);
								writer.writeTabs();
								writer.sb.Append(listListMapVI);
								writer.sb.Append(':');
								writer.sb.Append("List<RankData>");
								if(listListMapVV!=null)
								{
									SList<RankData> listListMapVVT=listListMapVV;
									int listListMapVVLen=listListMapVVT.size();
									writer.sb.Append('(');
									writer.sb.Append(listListMapVVLen);
									writer.sb.Append(')');
									writer.writeEnter();
									writer.writeLeftBrace();
									for(int listListMapVVI=0;listListMapVVI<listListMapVVLen;++listListMapVVI)
									{
										RankData listListMapVVV=listListMapVVT.get(listListMapVVI);
										writer.writeTabs();
										writer.sb.Append(listListMapVVI);
										writer.sb.Append(':');
										if(listListMapVVV!=null)
										{
											listListMapVVV.writeDataString(writer);
										}
										else
										{
											writer.sb.Append("RankData=null");
										}
										
										writer.writeEnter();
									}
									writer.writeRightBrace();
								}
								else
								{
									writer.sb.Append("=null");
								}
								
								writer.writeEnter();
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.Append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
		this.listListMap=new IntObjectMap<SList<SList<RankData>>>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.version=0;
		this.listListMap=null;
	}
	
}
