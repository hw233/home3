using ShineEngine;

/// <summary>
/// 排行榜数据(存库数据)(generated by shine)
/// </summary>
public class RankToolData:FuncToolData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.RankTool;
	
	/// <summary>
	/// 当前排行版本(刷新一次一个版本)
	/// </summary>
	public int version;
	
	/// <summary>
	/// 列表
	/// </summary>
	public SList<RankData> list;
	
	public RankToolData()
	{
		_dataID=BaseDataType.RankTool;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.version=stream.readInt();
		
		int listLen=stream.readLen();
		if(this.list!=null)
		{
			this.list.clear();
			this.list.ensureCapacity(listLen);
		}
		else
		{
			this.list=new SList<RankData>();
		}
		
		SList<RankData> listT=this.list;
		for(int listI=listLen-1;listI>=0;--listI)
		{
			RankData listV;
			listV=(RankData)stream.readDataSimpleNotNull();
			
			listT.add(listV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.version);
		
		if(this.list!=null)
		{
			stream.writeLen(this.list.size());
			if(!this.list.isEmpty())
			{
				RankData[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					RankData listV=listVValues[listVI];
					if(listV!=null)
					{
						stream.writeDataSimpleNotNull(listV);
					}
					else
					{
						nullObjError("listV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("list");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is RankToolData))
			return;
		
		RankToolData mData=(RankToolData)data;
		
		this.version=mData.version;
		this.list=mData.list;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is RankToolData))
			return;
		
		RankToolData mData=(RankToolData)data;
		
		this.version=mData.version;
		
		if(mData.list!=null)
		{
			if(this.list!=null)
			{
				this.list.clear();
				this.list.ensureCapacity(mData.list.size());
			}
			else
			{
				this.list=new SList<RankData>();
			}
			
			SList<RankData> listT=this.list;
			if(!mData.list.isEmpty())
			{
				RankData[] listVValues=mData.list.getValues();
				for(int listVI=0,listVLen=mData.list.length();listVI<listVLen;++listVI)
				{
					RankData listV=listVValues[listVI];
					RankData listU;
					if(listV!=null)
					{
						listU=(RankData)listV.clone();
					}
					else
					{
						listU=null;
						nullObjError("listU");
					}
					
					listT.add(listU);
				}
			}
		}
		else
		{
			this.list=null;
			nullObjError("list");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		RankToolData mData=(RankToolData)data;
		if(this.version!=mData.version)
			return false;
		
		if(mData.list!=null)
		{
			if(this.list==null)
				return false;
			if(this.list.size()!=mData.list.size())
				return false;
			SList<RankData> listT=this.list;
			SList<RankData> listR=mData.list;
			int listLen=listT.size();
			for(int listI=0;listI<listLen;++listI)
			{
				RankData listU=listT.get(listI);
				RankData listV=listR.get(listI);
				if(listV!=null)
				{
					if(listU==null)
						return false;
					if(!listU.dataEquals(listV))
						return false;
				}
				else
				{
					if(listU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.list!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RankToolData";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("version");
		writer.sb.Append(':');
		writer.sb.Append(this.version);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("list");
		writer.sb.Append(':');
		writer.sb.Append("List<RankData>");
		if(this.list!=null)
		{
			SList<RankData> listT=this.list;
			int listLen=listT.size();
			writer.sb.Append('(');
			writer.sb.Append(listLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int listI=0;listI<listLen;++listI)
			{
				RankData listV=listT.get(listI);
				writer.writeTabs();
				writer.sb.Append(listI);
				writer.sb.Append(':');
				if(listV!=null)
				{
					listV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("RankData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
		this.list=new SList<RankData>();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.version=stream.readInt();
		
		int listLen=stream.readLen();
		if(this.list!=null)
		{
			this.list.clear();
			this.list.ensureCapacity(listLen);
		}
		else
		{
			this.list=new SList<RankData>();
		}
		
		SList<RankData> listT=this.list;
		for(int listI=listLen-1;listI>=0;--listI)
		{
			RankData listV;
			BaseData listVT=stream.readDataFullNotNull();
			if(listVT!=null)
			{
				if(listVT is RankData)
				{
					listV=(RankData)listVT;
				}
				else
				{
					listV=new RankData();
					if(!(listVT.GetType().IsAssignableFrom(typeof(RankData))))
					{
						stream.throwTypeReadError(typeof(RankData),listVT.GetType());
					}
					listV.shadowCopy(listVT);
				}
			}
			else
			{
				listV=null;
			}
			
			listT.add(listV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.version);
		
		if(this.list!=null)
		{
			stream.writeLen(this.list.size());
			if(!this.list.isEmpty())
			{
				RankData[] listVValues=this.list.getValues();
				for(int listVI=0,listVLen=this.list.length();listVI<listVLen;++listVI)
				{
					RankData listV=listVValues[listVI];
					if(listV!=null)
					{
						stream.writeDataFullNotNull(listV);
					}
					else
					{
						nullObjError("listV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("list");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.version=0;
		this.list=null;
	}
	
}
