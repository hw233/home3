using ShineEngine;

/// <summary>
/// 简单排名数据(generated by shine)
/// </summary>
public class SubsectionRankSimpleData:FuncToolData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.SubsectionRankSimple;
	
	/// <summary>
	/// 大组index
	/// </summary>
	public int subsectionIndex;
	
	/// <summary>
	/// 小组index
	/// </summary>
	public int subsectionSubIndex;
	
	/// <summary>
	/// 排名(从1开始)
	/// </summary>
	public int rank;
	
	/// <summary>
	/// 排行值(如以后一个值不够用,再补,理论上应该是够的)
	/// </summary>
	public long value;
	
	public SubsectionRankSimpleData()
	{
		_dataID=BaseDataType.SubsectionRankSimple;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "SubsectionRankSimpleData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.subsectionIndex=stream.readInt();
		
		this.subsectionSubIndex=stream.readInt();
		
		this.rank=stream.readInt();
		
		this.value=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeInt(this.rank);
		
		stream.writeLong(this.value);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.subsectionIndex=stream.readInt();
		
		this.subsectionSubIndex=stream.readInt();
		
		this.rank=stream.readInt();
		
		this.value=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeInt(this.rank);
		
		stream.writeLong(this.value);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is SubsectionRankSimpleData))
			return;
		
		SubsectionRankSimpleData mData=(SubsectionRankSimpleData)data;
		
		this.subsectionIndex=mData.subsectionIndex;
		this.subsectionSubIndex=mData.subsectionSubIndex;
		this.rank=mData.rank;
		this.value=mData.value;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is SubsectionRankSimpleData))
			return;
		
		SubsectionRankSimpleData mData=(SubsectionRankSimpleData)data;
		
		this.subsectionIndex=mData.subsectionIndex;
		
		this.subsectionSubIndex=mData.subsectionSubIndex;
		
		this.rank=mData.rank;
		
		this.value=mData.value;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		SubsectionRankSimpleData mData=(SubsectionRankSimpleData)data;
		if(this.subsectionIndex!=mData.subsectionIndex)
			return false;
		
		if(this.subsectionSubIndex!=mData.subsectionSubIndex)
			return false;
		
		if(this.rank!=mData.rank)
			return false;
		
		if(this.value!=mData.value)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("subsectionIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.subsectionIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("subsectionSubIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.subsectionSubIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("rank");
		writer.sb.Append(':');
		writer.sb.Append(this.rank);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("value");
		writer.sb.Append(':');
		writer.sb.Append(this.value);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.subsectionIndex=0;
		this.subsectionSubIndex=0;
		this.rank=0;
		this.value=0L;
	}
	
}
