using ShineEngine;

/// <summary>
/// 角色排行工具数据(generated by shine)
/// </summary>
public class PlayerSubsectionRankToolData:FuncToolData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.PlayerSubsectionRankTool;
	
	/// <summary>
	/// 版本
	/// </summary>
	public int version;
	
	/// <summary>
	/// 小组index
	/// </summary>
	public int subsectionSubIndex;
	
	/// <summary>
	/// 大组index
	/// </summary>
	public int subsectionIndex;
	
	/// <summary>
	/// 匹配值
	/// </summary>
	public long value;
	
	/// <summary>
	/// 参数组
	/// </summary>
	public long[] args;
	
	public PlayerSubsectionRankToolData()
	{
		_dataID=BaseDataType.PlayerSubsectionRankTool;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PlayerSubsectionRankToolData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.version=stream.readInt();
		
		this.subsectionIndex=stream.readInt();
		
		this.subsectionSubIndex=stream.readInt();
		
		this.value=stream.readLong();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new long[argsLen];
			}
			long[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV;
				argsV=stream.readLong();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.version);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeLong(this.value);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			long[] argsT=this.args;
			stream.writeLen(argsT.Length);
			for(int argsVI=0,argsVLen=argsT.Length;argsVI<argsVLen;++argsVI)
			{
				long argsV=argsT[argsVI];
				stream.writeLong(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.version=stream.readInt();
		
		this.subsectionIndex=stream.readInt();
		
		this.subsectionSubIndex=stream.readInt();
		
		this.value=stream.readLong();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new long[argsLen];
			}
			long[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV;
				argsV=stream.readLong();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.version);
		
		stream.writeInt(this.subsectionIndex);
		
		stream.writeInt(this.subsectionSubIndex);
		
		stream.writeLong(this.value);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			long[] argsT=this.args;
			stream.writeLen(argsT.Length);
			for(int argsVI=0,argsVLen=argsT.Length;argsVI<argsVLen;++argsVI)
			{
				long argsV=argsT[argsVI];
				stream.writeLong(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is PlayerSubsectionRankToolData))
			return;
		
		PlayerSubsectionRankToolData mData=(PlayerSubsectionRankToolData)data;
		
		this.version=mData.version;
		this.subsectionIndex=mData.subsectionIndex;
		this.subsectionSubIndex=mData.subsectionSubIndex;
		this.value=mData.value;
		this.args=mData.args;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is PlayerSubsectionRankToolData))
			return;
		
		PlayerSubsectionRankToolData mData=(PlayerSubsectionRankToolData)data;
		
		this.version=mData.version;
		
		this.subsectionIndex=mData.subsectionIndex;
		
		this.subsectionSubIndex=mData.subsectionSubIndex;
		
		this.value=mData.value;
		
		if(mData.args!=null)
		{
			long[] argsR=mData.args;
			int argsLen=argsR.Length;
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new long[argsLen];
			}
			BytesControl.arrayCopy(mData.args,this.args,argsLen);
		}
		else
		{
			this.args=null;
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		PlayerSubsectionRankToolData mData=(PlayerSubsectionRankToolData)data;
		if(this.version!=mData.version)
			return false;
		
		if(this.subsectionIndex!=mData.subsectionIndex)
			return false;
		
		if(this.subsectionSubIndex!=mData.subsectionSubIndex)
			return false;
		
		if(this.value!=mData.value)
			return false;
		
		if(mData.args!=null)
		{
			if(this.args==null)
				return false;
			if(this.args.Length!=mData.args.Length)
				return false;
			long[] argsT=this.args;
			long[] argsR=mData.args;
			int argsLen=argsT.Length;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsU=argsT[argsI];
				long argsV=argsR[argsI];
				if(argsU!=argsV)
					return false;
				
			}
		}
		else
		{
			if(this.args!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("version");
		writer.sb.Append(':');
		writer.sb.Append(this.version);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("subsectionIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.subsectionIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("subsectionSubIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.subsectionSubIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("value");
		writer.sb.Append(':');
		writer.sb.Append(this.value);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("args");
		writer.sb.Append(':');
		writer.sb.Append("Array<long>");
		if(this.args!=null)
		{
			long[] argsT=this.args;
			int argsLen=argsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(argsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				long argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.Append(argsI);
				writer.sb.Append(':');
				writer.sb.Append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.version=0;
		this.subsectionIndex=0;
		this.subsectionSubIndex=0;
		this.value=0L;
		this.args=null;
	}
	
}
