using ShineEngine;

/// <summary>
/// 玩家群补充数据(不实时推送的部分)(generated by shine)
/// </summary>
public class PlayerRoleGroupExData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.PlayerRoleGroupEx;
	
	/// <summary>
	/// 群id
	/// </summary>
	public long groupID;
	
	/// <summary>
	/// 经验值
	/// </summary>
	public long exp;
	
	/// <summary>
	/// 成员组
	/// </summary>
	public LongObjectMap<PlayerRoleGroupMemberData> members;
	
	public PlayerRoleGroupExData()
	{
		_dataID=BaseDataType.PlayerRoleGroupEx;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PlayerRoleGroupExData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.groupID=stream.readLong();
		
		this.exp=stream.readLong();
		
		int membersLen=stream.readLen();
		if(this.members!=null)
		{
			this.members.clear();
			this.members.ensureCapacity(membersLen);
		}
		else
		{
			this.members=new LongObjectMap<PlayerRoleGroupMemberData>(membersLen);
		}
		
		LongObjectMap<PlayerRoleGroupMemberData> membersT=this.members;
		for(int membersI=membersLen-1;membersI>=0;--membersI)
		{
			PlayerRoleGroupMemberData membersV;
			BaseData membersVT=stream.readDataFullNotNull();
			if(membersVT!=null)
			{
				if(membersVT is PlayerRoleGroupMemberData)
				{
					membersV=(PlayerRoleGroupMemberData)membersVT;
				}
				else
				{
					membersV=new PlayerRoleGroupMemberData();
					if(!(membersVT.GetType().IsAssignableFrom(typeof(PlayerRoleGroupMemberData))))
					{
						stream.throwTypeReadError(typeof(PlayerRoleGroupMemberData),membersVT.GetType());
					}
					membersV.shadowCopy(membersVT);
				}
			}
			else
			{
				membersV=null;
			}
			
			membersT.put(membersV.playerID,membersV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.groupID);
		
		stream.writeLong(this.exp);
		
		if(this.members!=null)
		{
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				PlayerRoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersVI=membersVValues.Length-1;membersVI>=0;--membersVI)
				{
					PlayerRoleGroupMemberData membersV=membersVValues[membersVI];
					if(membersV!=null)
					{
						if(membersV!=null)
						{
							stream.writeDataFullNotNull(membersV);
						}
						else
						{
							nullObjError("membersV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("members");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.groupID=stream.readLong();
		
		this.exp=stream.readLong();
		
		int membersLen=stream.readLen();
		if(this.members!=null)
		{
			this.members.clear();
			this.members.ensureCapacity(membersLen);
		}
		else
		{
			this.members=new LongObjectMap<PlayerRoleGroupMemberData>(membersLen);
		}
		
		LongObjectMap<PlayerRoleGroupMemberData> membersT=this.members;
		for(int membersI=membersLen-1;membersI>=0;--membersI)
		{
			PlayerRoleGroupMemberData membersV;
			membersV=(PlayerRoleGroupMemberData)stream.readDataSimpleNotNull();
			
			membersT.put(membersV.playerID,membersV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.groupID);
		
		stream.writeLong(this.exp);
		
		if(this.members!=null)
		{
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				PlayerRoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersVI=membersVValues.Length-1;membersVI>=0;--membersVI)
				{
					PlayerRoleGroupMemberData membersV=membersVValues[membersVI];
					if(membersV!=null)
					{
						if(membersV!=null)
						{
							stream.writeDataSimpleNotNull(membersV);
						}
						else
						{
							nullObjError("membersV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("members");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is PlayerRoleGroupExData))
			return;
		
		PlayerRoleGroupExData mData=(PlayerRoleGroupExData)data;
		
		this.groupID=mData.groupID;
		this.exp=mData.exp;
		this.members=mData.members;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is PlayerRoleGroupExData))
			return;
		
		PlayerRoleGroupExData mData=(PlayerRoleGroupExData)data;
		
		this.groupID=mData.groupID;
		
		this.exp=mData.exp;
		
		if(mData.members!=null)
		{
			if(this.members!=null)
			{
				this.members.clear();
				this.members.ensureCapacity(mData.members.size());
			}
			else
			{
				this.members=new LongObjectMap<PlayerRoleGroupMemberData>(mData.members.size());
			}
			
			LongObjectMap<PlayerRoleGroupMemberData> membersT=this.members;
			if(!mData.members.isEmpty())
			{
				PlayerRoleGroupMemberData[] membersVValues=mData.members.getValues();
				for(int membersVI=membersVValues.Length-1;membersVI>=0;--membersVI)
				{
					PlayerRoleGroupMemberData membersV=membersVValues[membersVI];
					if(membersV!=null)
					{
						PlayerRoleGroupMemberData membersU;
						if(membersV!=null)
						{
							membersU=(PlayerRoleGroupMemberData)membersV.clone();
						}
						else
						{
							membersU=null;
							nullObjError("membersU");
						}
						
						membersT.put(membersU.playerID,membersU);
					}
				}
			}
		}
		else
		{
			this.members=null;
			nullObjError("members");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		PlayerRoleGroupExData mData=(PlayerRoleGroupExData)data;
		if(this.groupID!=mData.groupID)
			return false;
		
		if(this.exp!=mData.exp)
			return false;
		
		if(mData.members!=null)
		{
			if(this.members==null)
				return false;
			if(this.members.size()!=mData.members.size())
				return false;
			LongObjectMap<PlayerRoleGroupMemberData> membersR=mData.members;
			if(!this.members.isEmpty())
			{
				long membersKFreeValue=this.members.getFreeValue();
				long[] membersKKeys=this.members.getKeys();
				PlayerRoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersKI=membersKKeys.Length-1;membersKI>=0;--membersKI)
				{
					long membersK=membersKKeys[membersKI];
					if(membersK!=membersKFreeValue)
					{
						PlayerRoleGroupMemberData membersV=membersVValues[membersKI];
						PlayerRoleGroupMemberData membersU=membersR.get(membersK);
						if(membersU!=null)
						{
							if(membersV==null)
								return false;
							if(!membersV.dataEquals(membersU))
								return false;
						}
						else
						{
							if(membersV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.members!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("groupID");
		writer.sb.Append(':');
		writer.sb.Append(this.groupID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("exp");
		writer.sb.Append(':');
		writer.sb.Append(this.exp);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("members");
		writer.sb.Append(':');
		writer.sb.Append("Map<long,PlayerRoleGroupMemberData>");
		if(this.members!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.members.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.members.isEmpty())
			{
				long membersKFreeValue=this.members.getFreeValue();
				long[] membersKKeys=this.members.getKeys();
				PlayerRoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersKI=membersKKeys.Length-1;membersKI>=0;--membersKI)
				{
					long membersK=membersKKeys[membersKI];
					if(membersK!=membersKFreeValue)
					{
						PlayerRoleGroupMemberData membersV=membersVValues[membersKI];
						writer.writeTabs();
						writer.sb.Append(membersK);
						
						writer.sb.Append(':');
						if(membersV!=null)
						{
							membersV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("PlayerRoleGroupMemberData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.members=new LongObjectMap<PlayerRoleGroupMemberData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.groupID=0L;
		this.exp=0L;
		this.members=null;
	}
	
}
