using ShineEngine;

/// <summary>
/// 玩家群创建场景数据(generated by shine)
/// </summary>
public class RoleGroupCreateSceneData:CreateSceneData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.RoleGroupCreateScene;
	
	/// <summary>
	/// 功能id
	/// </summary>
	public int funcID;
	
	/// <summary>
	/// 玩家群名
	/// </summary>
	public string name;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 配置id
	/// </summary>
	public int configID;
	
	/// <summary>
	/// 玩家群id
	/// </summary>
	public long groupID;
	
	public RoleGroupCreateSceneData()
	{
		_dataID=BaseDataType.RoleGroupCreateScene;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RoleGroupCreateSceneData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.funcID=stream.readInt();
		
		this.groupID=stream.readLong();
		
		this.configID=stream.readInt();
		
		this.level=stream.readInt();
		
		this.name=stream.readUTF();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.funcID);
		
		stream.writeLong(this.groupID);
		
		stream.writeInt(this.configID);
		
		stream.writeInt(this.level);
		
		stream.writeUTF(this.name);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.funcID=stream.readInt();
		
		this.groupID=stream.readLong();
		
		this.configID=stream.readInt();
		
		this.level=stream.readInt();
		
		this.name=stream.readUTF();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.funcID);
		
		stream.writeLong(this.groupID);
		
		stream.writeInt(this.configID);
		
		stream.writeInt(this.level);
		
		stream.writeUTF(this.name);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is RoleGroupCreateSceneData))
			return;
		
		RoleGroupCreateSceneData mData=(RoleGroupCreateSceneData)data;
		
		this.funcID=mData.funcID;
		this.groupID=mData.groupID;
		this.configID=mData.configID;
		this.level=mData.level;
		this.name=mData.name;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is RoleGroupCreateSceneData))
			return;
		
		RoleGroupCreateSceneData mData=(RoleGroupCreateSceneData)data;
		
		this.funcID=mData.funcID;
		
		this.groupID=mData.groupID;
		
		this.configID=mData.configID;
		
		this.level=mData.level;
		
		this.name=mData.name;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		RoleGroupCreateSceneData mData=(RoleGroupCreateSceneData)data;
		if(this.funcID!=mData.funcID)
			return false;
		
		if(this.groupID!=mData.groupID)
			return false;
		
		if(this.configID!=mData.configID)
			return false;
		
		if(this.level!=mData.level)
			return false;
		
		if(this.name!=mData.name)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("funcID");
		writer.sb.Append(':');
		writer.sb.Append(this.funcID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("groupID");
		writer.sb.Append(':');
		writer.sb.Append(this.groupID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("configID");
		writer.sb.Append(':');
		writer.sb.Append(this.configID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("level");
		writer.sb.Append(':');
		writer.sb.Append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("name");
		writer.sb.Append(':');
		writer.sb.Append(this.name);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.funcID=0;
		this.groupID=0L;
		this.configID=0;
		this.level=0;
		this.name="";
	}
	
}
