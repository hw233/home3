using ShineEngine;

/// <summary>
/// 玩家群数据(单个群)(generated by shine)
/// </summary>
public class RoleGroupData:BaseData
{
	/// <summary>
	/// 群id
	/// </summary>
	public long groupID;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.RoleGroup;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 公告
	/// </summary>
	public string notice;
	
	/// <summary>
	/// 群名
	/// </summary>
	public string name;
	
	/// <summary>
	/// 申请加入组
	/// </summary>
	public LongObjectMap<PlayerApplyRoleGroupData> applyDic;
	
	/// <summary>
	/// 申请时是否可直接入群(无需同意)
	/// </summary>
	public bool canApplyInAbs;
	
	/// <summary>
	/// 经验值
	/// </summary>
	public long exp;
	
	/// <summary>
	/// 日志信息队列
	/// </summary>
	public SQueue<InfoLogData> logQueue;
	
	/// <summary>
	/// 下一个0点时刻
	/// </summary>
	public long nextDailyTime;
	
	/// <summary>
	/// 插件数据组(key1:funcToolType,key2:funcID)
	/// </summary>
	public IntObjectMap<IntObjectMap<FuncToolData>> funcTools;
	
	/// <summary>
	/// 成员组
	/// </summary>
	public LongObjectMap<RoleGroupMemberData> members;
	
	public RoleGroupData()
	{
		_dataID=BaseDataType.RoleGroup;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RoleGroupData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.groupID=stream.readLong();
		
		this.level=stream.readInt();
		
		int membersLen=stream.readLen();
		if(this.members!=null)
		{
			this.members.clear();
			this.members.ensureCapacity(membersLen);
		}
		else
		{
			this.members=new LongObjectMap<RoleGroupMemberData>(membersLen);
		}
		
		LongObjectMap<RoleGroupMemberData> membersT=this.members;
		for(int membersI=membersLen-1;membersI>=0;--membersI)
		{
			RoleGroupMemberData membersV;
			BaseData membersVT=stream.readDataFullNotNull();
			if(membersVT!=null)
			{
				if(membersVT is RoleGroupMemberData)
				{
					membersV=(RoleGroupMemberData)membersVT;
				}
				else
				{
					membersV=new RoleGroupMemberData();
					if(!(membersVT.GetType().IsAssignableFrom(typeof(RoleGroupMemberData))))
					{
						stream.throwTypeReadError(typeof(RoleGroupMemberData),membersVT.GetType());
					}
					membersV.shadowCopy(membersVT);
				}
			}
			else
			{
				membersV=null;
			}
			
			membersT.put(membersV.playerID,membersV);
		}
		
		this.name=stream.readUTF();
		
		this.notice=stream.readUTF();
		
		int applyDicLen=stream.readLen();
		if(this.applyDic!=null)
		{
			this.applyDic.clear();
			this.applyDic.ensureCapacity(applyDicLen);
		}
		else
		{
			this.applyDic=new LongObjectMap<PlayerApplyRoleGroupData>(applyDicLen);
		}
		
		LongObjectMap<PlayerApplyRoleGroupData> applyDicT=this.applyDic;
		for(int applyDicI=applyDicLen-1;applyDicI>=0;--applyDicI)
		{
			long applyDicK;
			PlayerApplyRoleGroupData applyDicV;
			applyDicK=stream.readLong();
			
			BaseData applyDicVT=stream.readDataFullNotNull();
			if(applyDicVT!=null)
			{
				if(applyDicVT is PlayerApplyRoleGroupData)
				{
					applyDicV=(PlayerApplyRoleGroupData)applyDicVT;
				}
				else
				{
					applyDicV=new PlayerApplyRoleGroupData();
					if(!(applyDicVT.GetType().IsAssignableFrom(typeof(PlayerApplyRoleGroupData))))
					{
						stream.throwTypeReadError(typeof(PlayerApplyRoleGroupData),applyDicVT.GetType());
					}
					applyDicV.shadowCopy(applyDicVT);
				}
			}
			else
			{
				applyDicV=null;
			}
			
			applyDicT.put(applyDicK,applyDicV);
		}
		
		this.canApplyInAbs=stream.readBoolean();
		
		this.exp=stream.readLong();
		
		int logQueueLen=stream.readLen();
		if(this.logQueue!=null)
		{
			this.logQueue.clear();
			this.logQueue.ensureCapacity(logQueueLen);
		}
		else
		{
			this.logQueue=new SQueue<InfoLogData>();
		}
		
		SQueue<InfoLogData> logQueueT=this.logQueue;
		for(int logQueueI=logQueueLen-1;logQueueI>=0;--logQueueI)
		{
			InfoLogData logQueueV;
			BaseData logQueueVT=stream.readDataFullNotNull();
			if(logQueueVT!=null)
			{
				if(logQueueVT is InfoLogData)
				{
					logQueueV=(InfoLogData)logQueueVT;
				}
				else
				{
					logQueueV=new InfoLogData();
					if(!(logQueueVT.GetType().IsAssignableFrom(typeof(InfoLogData))))
					{
						stream.throwTypeReadError(typeof(InfoLogData),logQueueVT.GetType());
					}
					logQueueV.shadowCopy(logQueueVT);
				}
			}
			else
			{
				logQueueV=null;
			}
			
			logQueueT.offer(logQueueV);
		}
		
		this.nextDailyTime=stream.readLong();
		
		if(stream.readBoolean())
		{
			int funcToolsLen=stream.readLen();
			if(this.funcTools!=null)
			{
				this.funcTools.clear();
				this.funcTools.ensureCapacity(funcToolsLen);
			}
			else
			{
				this.funcTools=new IntObjectMap<IntObjectMap<FuncToolData>>(funcToolsLen);
			}
			
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsT=this.funcTools;
			for(int funcToolsI=funcToolsLen-1;funcToolsI>=0;--funcToolsI)
			{
				int funcToolsK;
				IntObjectMap<FuncToolData> funcToolsV;
				funcToolsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					int funcToolsVLen=stream.readLen();
					funcToolsV=new IntObjectMap<FuncToolData>(funcToolsVLen);
					IntObjectMap<FuncToolData> funcToolsVT=funcToolsV;
					for(int funcToolsVI=funcToolsVLen-1;funcToolsVI>=0;--funcToolsVI)
					{
						int funcToolsVK;
						FuncToolData funcToolsVV;
						funcToolsVK=stream.readInt();
						
						if(stream.readBoolean())
						{
							BaseData funcToolsVVT=stream.readDataFullNotNull();
							if(funcToolsVVT!=null)
							{
								if(funcToolsVVT is FuncToolData)
								{
									funcToolsVV=(FuncToolData)funcToolsVVT;
								}
								else
								{
									funcToolsVV=new FuncToolData();
									if(!(funcToolsVVT.GetType().IsAssignableFrom(typeof(FuncToolData))))
									{
										stream.throwTypeReadError(typeof(FuncToolData),funcToolsVVT.GetType());
									}
									funcToolsVV.shadowCopy(funcToolsVVT);
								}
							}
							else
							{
								funcToolsVV=null;
							}
						}
						else
						{
							funcToolsVV=null;
						}
						
						funcToolsVT.put(funcToolsVK,funcToolsVV);
					}
				}
				else
				{
					funcToolsV=null;
				}
				
				funcToolsT.put(funcToolsK,funcToolsV);
			}
		}
		else
		{
			this.funcTools=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeLong(this.groupID);
		
		stream.writeInt(this.level);
		
		if(this.members!=null)
		{
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				RoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersVI=membersVValues.Length-1;membersVI>=0;--membersVI)
				{
					RoleGroupMemberData membersV=membersVValues[membersVI];
					if(membersV!=null)
					{
						if(membersV!=null)
						{
							stream.writeDataFullNotNull(membersV);
						}
						else
						{
							nullObjError("membersV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("members");
		}
		
		stream.writeUTF(this.name);
		
		stream.writeUTF(this.notice);
		
		if(this.applyDic!=null)
		{
			stream.writeLen(this.applyDic.size());
			if(!this.applyDic.isEmpty())
			{
				long applyDicKFreeValue=this.applyDic.getFreeValue();
				long[] applyDicKKeys=this.applyDic.getKeys();
				PlayerApplyRoleGroupData[] applyDicVValues=this.applyDic.getValues();
				for(int applyDicKI=applyDicKKeys.Length-1;applyDicKI>=0;--applyDicKI)
				{
					long applyDicK=applyDicKKeys[applyDicKI];
					if(applyDicK!=applyDicKFreeValue)
					{
						PlayerApplyRoleGroupData applyDicV=applyDicVValues[applyDicKI];
						stream.writeLong(applyDicK);
						
						if(applyDicV!=null)
						{
							stream.writeDataFullNotNull(applyDicV);
						}
						else
						{
							nullObjError("applyDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("applyDic");
		}
		
		stream.writeBoolean(this.canApplyInAbs);
		
		stream.writeLong(this.exp);
		
		if(this.logQueue!=null)
		{
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				InfoLogData[] logQueueVValues=this.logQueue.getValues();
				int logQueueVMark=this.logQueue.getMark();
				int logQueueVStart=this.logQueue.getStart();
				for(int logQueueVI=0,logQueueVLen=this.logQueue.length();logQueueVI<logQueueVLen;++logQueueVI)
				{
					InfoLogData logQueueV=logQueueVValues[(logQueueVI+logQueueVStart)&logQueueVMark];
					if(logQueueV!=null)
					{
						stream.writeDataFullNotNull(logQueueV);
					}
					else
					{
						nullObjError("logQueueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("logQueue");
		}
		
		stream.writeLong(this.nextDailyTime);
		
		if(this.funcTools!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.funcTools.size());
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				IntObjectMap<FuncToolData>[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.Length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=funcToolsVValues[funcToolsKI];
						stream.writeInt(funcToolsK);
						
						if(funcToolsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeLen(funcToolsV.size());
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								FuncToolData[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.Length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=funcToolsVVValues[funcToolsVKI];
										stream.writeInt(funcToolsVK);
										
										if(funcToolsVV!=null)
										{
											stream.writeBoolean(true);
											stream.writeDataFullNotNull(funcToolsVV);
										}
										else
										{
											stream.writeBoolean(false);
										}
										
									}
								}
							}
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.groupID=stream.readLong();
		
		this.level=stream.readInt();
		
		int membersLen=stream.readLen();
		if(this.members!=null)
		{
			this.members.clear();
			this.members.ensureCapacity(membersLen);
		}
		else
		{
			this.members=new LongObjectMap<RoleGroupMemberData>(membersLen);
		}
		
		LongObjectMap<RoleGroupMemberData> membersT=this.members;
		for(int membersI=membersLen-1;membersI>=0;--membersI)
		{
			RoleGroupMemberData membersV;
			membersV=(RoleGroupMemberData)stream.readDataSimpleNotNull();
			
			membersT.put(membersV.playerID,membersV);
		}
		
		this.name=stream.readUTF();
		
		this.notice=stream.readUTF();
		
		int applyDicLen=stream.readLen();
		if(this.applyDic!=null)
		{
			this.applyDic.clear();
			this.applyDic.ensureCapacity(applyDicLen);
		}
		else
		{
			this.applyDic=new LongObjectMap<PlayerApplyRoleGroupData>(applyDicLen);
		}
		
		LongObjectMap<PlayerApplyRoleGroupData> applyDicT=this.applyDic;
		for(int applyDicI=applyDicLen-1;applyDicI>=0;--applyDicI)
		{
			long applyDicK;
			PlayerApplyRoleGroupData applyDicV;
			applyDicK=stream.readLong();
			
			applyDicV=(PlayerApplyRoleGroupData)stream.readDataSimpleNotNull();
			
			applyDicT.put(applyDicK,applyDicV);
		}
		
		this.canApplyInAbs=stream.readBoolean();
		
		this.exp=stream.readLong();
		
		int logQueueLen=stream.readLen();
		if(this.logQueue!=null)
		{
			this.logQueue.clear();
			this.logQueue.ensureCapacity(logQueueLen);
		}
		else
		{
			this.logQueue=new SQueue<InfoLogData>();
		}
		
		SQueue<InfoLogData> logQueueT=this.logQueue;
		for(int logQueueI=logQueueLen-1;logQueueI>=0;--logQueueI)
		{
			InfoLogData logQueueV;
			logQueueV=(InfoLogData)stream.readDataSimpleNotNull();
			
			logQueueT.offer(logQueueV);
		}
		
		this.nextDailyTime=stream.readLong();
		
		if(stream.readBoolean())
		{
			int funcToolsLen=stream.readLen();
			if(this.funcTools!=null)
			{
				this.funcTools.clear();
				this.funcTools.ensureCapacity(funcToolsLen);
			}
			else
			{
				this.funcTools=new IntObjectMap<IntObjectMap<FuncToolData>>(funcToolsLen);
			}
			
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsT=this.funcTools;
			for(int funcToolsI=funcToolsLen-1;funcToolsI>=0;--funcToolsI)
			{
				int funcToolsK;
				IntObjectMap<FuncToolData> funcToolsV;
				funcToolsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					int funcToolsVLen=stream.readLen();
					funcToolsV=new IntObjectMap<FuncToolData>(funcToolsVLen);
					IntObjectMap<FuncToolData> funcToolsVT=funcToolsV;
					for(int funcToolsVI=funcToolsVLen-1;funcToolsVI>=0;--funcToolsVI)
					{
						int funcToolsVK;
						FuncToolData funcToolsVV;
						funcToolsVK=stream.readInt();
						
						if(stream.readBoolean())
						{
							funcToolsVV=(FuncToolData)stream.readDataSimpleNotNull();
						}
						else
						{
							funcToolsVV=null;
						}
						
						funcToolsVT.put(funcToolsVK,funcToolsVV);
					}
				}
				else
				{
					funcToolsV=null;
				}
				
				funcToolsT.put(funcToolsK,funcToolsV);
			}
		}
		else
		{
			this.funcTools=null;
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeLong(this.groupID);
		
		stream.writeInt(this.level);
		
		if(this.members!=null)
		{
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				RoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersVI=membersVValues.Length-1;membersVI>=0;--membersVI)
				{
					RoleGroupMemberData membersV=membersVValues[membersVI];
					if(membersV!=null)
					{
						if(membersV!=null)
						{
							stream.writeDataSimpleNotNull(membersV);
						}
						else
						{
							nullObjError("membersV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("members");
		}
		
		stream.writeUTF(this.name);
		
		stream.writeUTF(this.notice);
		
		if(this.applyDic!=null)
		{
			stream.writeLen(this.applyDic.size());
			if(!this.applyDic.isEmpty())
			{
				long applyDicKFreeValue=this.applyDic.getFreeValue();
				long[] applyDicKKeys=this.applyDic.getKeys();
				PlayerApplyRoleGroupData[] applyDicVValues=this.applyDic.getValues();
				for(int applyDicKI=applyDicKKeys.Length-1;applyDicKI>=0;--applyDicKI)
				{
					long applyDicK=applyDicKKeys[applyDicKI];
					if(applyDicK!=applyDicKFreeValue)
					{
						PlayerApplyRoleGroupData applyDicV=applyDicVValues[applyDicKI];
						stream.writeLong(applyDicK);
						
						if(applyDicV!=null)
						{
							stream.writeDataSimpleNotNull(applyDicV);
						}
						else
						{
							nullObjError("applyDicV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("applyDic");
		}
		
		stream.writeBoolean(this.canApplyInAbs);
		
		stream.writeLong(this.exp);
		
		if(this.logQueue!=null)
		{
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				InfoLogData[] logQueueVValues=this.logQueue.getValues();
				int logQueueVMark=this.logQueue.getMark();
				int logQueueVStart=this.logQueue.getStart();
				for(int logQueueVI=0,logQueueVLen=this.logQueue.length();logQueueVI<logQueueVLen;++logQueueVI)
				{
					InfoLogData logQueueV=logQueueVValues[(logQueueVI+logQueueVStart)&logQueueVMark];
					if(logQueueV!=null)
					{
						stream.writeDataSimpleNotNull(logQueueV);
					}
					else
					{
						nullObjError("logQueueV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("logQueue");
		}
		
		stream.writeLong(this.nextDailyTime);
		
		if(this.funcTools!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.funcTools.size());
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				IntObjectMap<FuncToolData>[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.Length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=funcToolsVValues[funcToolsKI];
						stream.writeInt(funcToolsK);
						
						if(funcToolsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeLen(funcToolsV.size());
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								FuncToolData[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.Length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=funcToolsVVValues[funcToolsVKI];
										stream.writeInt(funcToolsVK);
										
										if(funcToolsVV!=null)
										{
											stream.writeBoolean(true);
											stream.writeDataSimpleNotNull(funcToolsVV);
										}
										else
										{
											stream.writeBoolean(false);
										}
										
									}
								}
							}
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is RoleGroupData))
			return;
		
		RoleGroupData mData=(RoleGroupData)data;
		
		this.groupID=mData.groupID;
		this.level=mData.level;
		this.members=mData.members;
		this.name=mData.name;
		this.notice=mData.notice;
		this.applyDic=mData.applyDic;
		this.canApplyInAbs=mData.canApplyInAbs;
		this.exp=mData.exp;
		this.logQueue=mData.logQueue;
		this.nextDailyTime=mData.nextDailyTime;
		this.funcTools=mData.funcTools;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is RoleGroupData))
			return;
		
		RoleGroupData mData=(RoleGroupData)data;
		
		this.groupID=mData.groupID;
		
		this.level=mData.level;
		
		if(mData.members!=null)
		{
			if(this.members!=null)
			{
				this.members.clear();
				this.members.ensureCapacity(mData.members.size());
			}
			else
			{
				this.members=new LongObjectMap<RoleGroupMemberData>(mData.members.size());
			}
			
			LongObjectMap<RoleGroupMemberData> membersT=this.members;
			if(!mData.members.isEmpty())
			{
				RoleGroupMemberData[] membersVValues=mData.members.getValues();
				for(int membersVI=membersVValues.Length-1;membersVI>=0;--membersVI)
				{
					RoleGroupMemberData membersV=membersVValues[membersVI];
					if(membersV!=null)
					{
						RoleGroupMemberData membersU;
						if(membersV!=null)
						{
							membersU=(RoleGroupMemberData)membersV.clone();
						}
						else
						{
							membersU=null;
							nullObjError("membersU");
						}
						
						membersT.put(membersU.playerID,membersU);
					}
				}
			}
		}
		else
		{
			this.members=null;
			nullObjError("members");
		}
		
		this.name=mData.name;
		
		this.notice=mData.notice;
		
		if(mData.applyDic!=null)
		{
			if(this.applyDic!=null)
			{
				this.applyDic.clear();
				this.applyDic.ensureCapacity(mData.applyDic.size());
			}
			else
			{
				this.applyDic=new LongObjectMap<PlayerApplyRoleGroupData>(mData.applyDic.size());
			}
			
			LongObjectMap<PlayerApplyRoleGroupData> applyDicT=this.applyDic;
			if(!mData.applyDic.isEmpty())
			{
				long applyDicKFreeValue=mData.applyDic.getFreeValue();
				long[] applyDicKKeys=mData.applyDic.getKeys();
				PlayerApplyRoleGroupData[] applyDicVValues=mData.applyDic.getValues();
				for(int applyDicKI=applyDicKKeys.Length-1;applyDicKI>=0;--applyDicKI)
				{
					long applyDicK=applyDicKKeys[applyDicKI];
					if(applyDicK!=applyDicKFreeValue)
					{
						PlayerApplyRoleGroupData applyDicV=applyDicVValues[applyDicKI];
						long applyDicW;
						PlayerApplyRoleGroupData applyDicU;
						applyDicW=applyDicK;
						
						if(applyDicV!=null)
						{
							applyDicU=(PlayerApplyRoleGroupData)applyDicV.clone();
						}
						else
						{
							applyDicU=null;
							nullObjError("applyDicU");
						}
						
						applyDicT.put(applyDicW,applyDicU);
					}
				}
			}
		}
		else
		{
			this.applyDic=null;
			nullObjError("applyDic");
		}
		
		this.canApplyInAbs=mData.canApplyInAbs;
		
		this.exp=mData.exp;
		
		if(mData.logQueue!=null)
		{
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(mData.logQueue.size());
			}
			else
			{
				this.logQueue=new SQueue<InfoLogData>();
			}
			
			SQueue<InfoLogData> logQueueT=this.logQueue;
			if(!mData.logQueue.isEmpty())
			{
				InfoLogData[] logQueueVValues=mData.logQueue.getValues();
				int logQueueVMark=mData.logQueue.getMark();
				int logQueueVStart=mData.logQueue.getStart();
				for(int logQueueVI=0,logQueueVLen=mData.logQueue.length();logQueueVI<logQueueVLen;++logQueueVI)
				{
					InfoLogData logQueueV=logQueueVValues[(logQueueVI+logQueueVStart)&logQueueVMark];
					InfoLogData logQueueU;
					if(logQueueV!=null)
					{
						logQueueU=(InfoLogData)logQueueV.clone();
					}
					else
					{
						logQueueU=null;
						nullObjError("logQueueU");
					}
					
					logQueueT.offer(logQueueU);
				}
			}
		}
		else
		{
			this.logQueue=null;
			nullObjError("logQueue");
		}
		
		this.nextDailyTime=mData.nextDailyTime;
		
		if(mData.funcTools!=null)
		{
			if(this.funcTools!=null)
			{
				this.funcTools.clear();
				this.funcTools.ensureCapacity(mData.funcTools.size());
			}
			else
			{
				this.funcTools=new IntObjectMap<IntObjectMap<FuncToolData>>(mData.funcTools.size());
			}
			
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsT=this.funcTools;
			if(!mData.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=mData.funcTools.getFreeValue();
				int[] funcToolsKKeys=mData.funcTools.getKeys();
				IntObjectMap<FuncToolData>[] funcToolsVValues=mData.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.Length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=funcToolsVValues[funcToolsKI];
						int funcToolsW;
						IntObjectMap<FuncToolData> funcToolsU;
						funcToolsW=funcToolsK;
						
						if(funcToolsV!=null)
						{
							funcToolsU=new IntObjectMap<FuncToolData>(funcToolsV.size());
							IntObjectMap<FuncToolData> funcToolsUT=funcToolsU;
							if(!funcToolsV.isEmpty())
							{
								int funcToolsUKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsUKKeys=funcToolsV.getKeys();
								FuncToolData[] funcToolsUVValues=funcToolsV.getValues();
								for(int funcToolsUKI=funcToolsUKKeys.Length-1;funcToolsUKI>=0;--funcToolsUKI)
								{
									int funcToolsUK=funcToolsUKKeys[funcToolsUKI];
									if(funcToolsUK!=funcToolsUKFreeValue)
									{
										FuncToolData funcToolsUV=funcToolsUVValues[funcToolsUKI];
										int funcToolsUW;
										FuncToolData funcToolsUU;
										funcToolsUW=funcToolsUK;
										
										if(funcToolsUV!=null)
										{
											funcToolsUU=(FuncToolData)funcToolsUV.clone();
										}
										else
										{
											funcToolsUU=null;
										}
										
										funcToolsUT.put(funcToolsUW,funcToolsUU);
									}
								}
							}
						}
						else
						{
							funcToolsU=null;
						}
						
						funcToolsT.put(funcToolsW,funcToolsU);
					}
				}
			}
		}
		else
		{
			this.funcTools=null;
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		RoleGroupData mData=(RoleGroupData)data;
		if(this.groupID!=mData.groupID)
			return false;
		
		if(this.level!=mData.level)
			return false;
		
		if(mData.members!=null)
		{
			if(this.members==null)
				return false;
			if(this.members.size()!=mData.members.size())
				return false;
			LongObjectMap<RoleGroupMemberData> membersR=mData.members;
			if(!this.members.isEmpty())
			{
				long membersKFreeValue=this.members.getFreeValue();
				long[] membersKKeys=this.members.getKeys();
				RoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersKI=membersKKeys.Length-1;membersKI>=0;--membersKI)
				{
					long membersK=membersKKeys[membersKI];
					if(membersK!=membersKFreeValue)
					{
						RoleGroupMemberData membersV=membersVValues[membersKI];
						RoleGroupMemberData membersU=membersR.get(membersK);
						if(membersU!=null)
						{
							if(membersV==null)
								return false;
							if(!membersV.dataEquals(membersU))
								return false;
						}
						else
						{
							if(membersV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.members!=null)
				return false;
		}
		
		if(this.name!=mData.name)
			return false;
		
		if(this.notice!=mData.notice)
			return false;
		
		if(mData.applyDic!=null)
		{
			if(this.applyDic==null)
				return false;
			if(this.applyDic.size()!=mData.applyDic.size())
				return false;
			LongObjectMap<PlayerApplyRoleGroupData> applyDicR=mData.applyDic;
			if(!this.applyDic.isEmpty())
			{
				long applyDicKFreeValue=this.applyDic.getFreeValue();
				long[] applyDicKKeys=this.applyDic.getKeys();
				PlayerApplyRoleGroupData[] applyDicVValues=this.applyDic.getValues();
				for(int applyDicKI=applyDicKKeys.Length-1;applyDicKI>=0;--applyDicKI)
				{
					long applyDicK=applyDicKKeys[applyDicKI];
					if(applyDicK!=applyDicKFreeValue)
					{
						PlayerApplyRoleGroupData applyDicV=applyDicVValues[applyDicKI];
						PlayerApplyRoleGroupData applyDicU=applyDicR.get(applyDicK);
						if(applyDicU!=null)
						{
							if(applyDicV==null)
								return false;
							if(!applyDicV.dataEquals(applyDicU))
								return false;
						}
						else
						{
							if(applyDicV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.applyDic!=null)
				return false;
		}
		
		if(this.canApplyInAbs!=mData.canApplyInAbs)
			return false;
		
		if(this.exp!=mData.exp)
			return false;
		
		if(mData.logQueue!=null)
		{
			if(this.logQueue==null)
				return false;
			if(this.logQueue.size()!=mData.logQueue.size())
				return false;
			SQueue<InfoLogData> logQueueT=this.logQueue;
			SQueue<InfoLogData> logQueueR=mData.logQueue;
			int logQueueLen=logQueueT.size();
			for(int logQueueI=0;logQueueI<logQueueLen;++logQueueI)
			{
				InfoLogData logQueueU=logQueueT.get(logQueueI);
				InfoLogData logQueueV=logQueueR.get(logQueueI);
				if(logQueueV!=null)
				{
					if(logQueueU==null)
						return false;
					if(!logQueueU.dataEquals(logQueueV))
						return false;
				}
				else
				{
					if(logQueueU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.logQueue!=null)
				return false;
		}
		
		if(this.nextDailyTime!=mData.nextDailyTime)
			return false;
		
		if(mData.funcTools!=null)
		{
			if(this.funcTools==null)
				return false;
			if(this.funcTools.size()!=mData.funcTools.size())
				return false;
			IntObjectMap<IntObjectMap<FuncToolData>> funcToolsR=mData.funcTools;
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				IntObjectMap<FuncToolData>[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.Length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=funcToolsVValues[funcToolsKI];
						IntObjectMap<FuncToolData> funcToolsU=funcToolsR.get(funcToolsK);
						if(funcToolsU!=null)
						{
							if(funcToolsV==null)
								return false;
							if(funcToolsV.size()!=funcToolsU.size())
								return false;
							IntObjectMap<FuncToolData> funcToolsVR=funcToolsU;
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								FuncToolData[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.Length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=funcToolsVVValues[funcToolsVKI];
										FuncToolData funcToolsVU=funcToolsVR.get(funcToolsVK);
										if(funcToolsVU!=null)
										{
											if(funcToolsVV==null)
												return false;
											if(!funcToolsVV.dataEquals(funcToolsVU))
												return false;
										}
										else
										{
											if(funcToolsVV!=null)
												return false;
										}
										
									}
								}
							}
						}
						else
						{
							if(funcToolsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.funcTools!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("groupID");
		writer.sb.Append(':');
		writer.sb.Append(this.groupID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("level");
		writer.sb.Append(':');
		writer.sb.Append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("members");
		writer.sb.Append(':');
		writer.sb.Append("Map<long,RoleGroupMemberData>");
		if(this.members!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.members.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.members.isEmpty())
			{
				long membersKFreeValue=this.members.getFreeValue();
				long[] membersKKeys=this.members.getKeys();
				RoleGroupMemberData[] membersVValues=this.members.getValues();
				for(int membersKI=membersKKeys.Length-1;membersKI>=0;--membersKI)
				{
					long membersK=membersKKeys[membersKI];
					if(membersK!=membersKFreeValue)
					{
						RoleGroupMemberData membersV=membersVValues[membersKI];
						writer.writeTabs();
						writer.sb.Append(membersK);
						
						writer.sb.Append(':');
						if(membersV!=null)
						{
							membersV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("RoleGroupMemberData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("name");
		writer.sb.Append(':');
		writer.sb.Append(this.name);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("notice");
		writer.sb.Append(':');
		writer.sb.Append(this.notice);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("applyDic");
		writer.sb.Append(':');
		writer.sb.Append("Map<long,PlayerApplyRoleGroupData>");
		if(this.applyDic!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.applyDic.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.applyDic.isEmpty())
			{
				long applyDicKFreeValue=this.applyDic.getFreeValue();
				long[] applyDicKKeys=this.applyDic.getKeys();
				PlayerApplyRoleGroupData[] applyDicVValues=this.applyDic.getValues();
				for(int applyDicKI=applyDicKKeys.Length-1;applyDicKI>=0;--applyDicKI)
				{
					long applyDicK=applyDicKKeys[applyDicKI];
					if(applyDicK!=applyDicKFreeValue)
					{
						PlayerApplyRoleGroupData applyDicV=applyDicVValues[applyDicKI];
						writer.writeTabs();
						writer.sb.Append(applyDicK);
						
						writer.sb.Append(':');
						if(applyDicV!=null)
						{
							applyDicV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("PlayerApplyRoleGroupData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("canApplyInAbs");
		writer.sb.Append(':');
		writer.sb.Append(this.canApplyInAbs);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("exp");
		writer.sb.Append(':');
		writer.sb.Append(this.exp);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("logQueue");
		writer.sb.Append(':');
		writer.sb.Append("Queue<InfoLogData>");
		if(this.logQueue!=null)
		{
			SQueue<InfoLogData> logQueueT=this.logQueue;
			int logQueueLen=logQueueT.size();
			writer.sb.Append('(');
			writer.sb.Append(logQueueLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int logQueueI=0;logQueueI<logQueueLen;++logQueueI)
			{
				InfoLogData logQueueV=logQueueT.get(logQueueI);
				writer.writeTabs();
				writer.sb.Append(logQueueI);
				writer.sb.Append(':');
				if(logQueueV!=null)
				{
					logQueueV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("InfoLogData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("nextDailyTime");
		writer.sb.Append(':');
		writer.sb.Append(this.nextDailyTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("funcTools");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,IntObjectMap<FuncToolData>>");
		if(this.funcTools!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.funcTools.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.funcTools.isEmpty())
			{
				int funcToolsKFreeValue=this.funcTools.getFreeValue();
				int[] funcToolsKKeys=this.funcTools.getKeys();
				IntObjectMap<FuncToolData>[] funcToolsVValues=this.funcTools.getValues();
				for(int funcToolsKI=funcToolsKKeys.Length-1;funcToolsKI>=0;--funcToolsKI)
				{
					int funcToolsK=funcToolsKKeys[funcToolsKI];
					if(funcToolsK!=funcToolsKFreeValue)
					{
						IntObjectMap<FuncToolData> funcToolsV=funcToolsVValues[funcToolsKI];
						writer.writeTabs();
						writer.sb.Append(funcToolsK);
						
						writer.sb.Append(':');
						writer.sb.Append("Map<int,FuncToolData>");
						if(funcToolsV!=null)
						{
							writer.sb.Append('(');
							writer.sb.Append(funcToolsV.size());
							writer.sb.Append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!funcToolsV.isEmpty())
							{
								int funcToolsVKFreeValue=funcToolsV.getFreeValue();
								int[] funcToolsVKKeys=funcToolsV.getKeys();
								FuncToolData[] funcToolsVVValues=funcToolsV.getValues();
								for(int funcToolsVKI=funcToolsVKKeys.Length-1;funcToolsVKI>=0;--funcToolsVKI)
								{
									int funcToolsVK=funcToolsVKKeys[funcToolsVKI];
									if(funcToolsVK!=funcToolsVKFreeValue)
									{
										FuncToolData funcToolsVV=funcToolsVVValues[funcToolsVKI];
										writer.writeTabs();
										writer.sb.Append(funcToolsVK);
										
										writer.sb.Append(':');
										if(funcToolsVV!=null)
										{
											funcToolsVV.writeDataString(writer);
										}
										else
										{
											writer.sb.Append("FuncToolData=null");
										}
										
										writer.writeEnter();
									}
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.Append("=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.members=new LongObjectMap<RoleGroupMemberData>();
		this.applyDic=new LongObjectMap<PlayerApplyRoleGroupData>();
		this.logQueue=new SQueue<InfoLogData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.groupID=0L;
		this.level=0;
		this.members=null;
		this.name="";
		this.notice="";
		this.applyDic=null;
		this.canApplyInAbs=false;
		this.exp=0L;
		this.logQueue=null;
		this.nextDailyTime=0L;
		this.funcTools=null;
	}
	
}
