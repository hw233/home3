using ShineEngine;

/// <summary>
/// 主单位缓存数据(generated by shine)
/// </summary>
public class MUnitCacheData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.MUnitCache;
	
	/// <summary>
	/// 当前属性组
	/// </summary>
	public IntIntMap currentAttributes;
	
	/// <summary>
	/// 保存buff组
	/// </summary>
	public IntObjectMap<BuffData> buffs;
	
	/// <summary>
	/// 缓存的时刻
	/// </summary>
	public long cacheTime;
	
	/// <summary>
	/// 保存CD组
	/// </summary>
	public IntObjectMap<CDData> cds;
	
	public MUnitCacheData()
	{
		_dataID=BaseDataType.MUnitCache;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "MUnitCacheData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		int currentAttributesLen=stream.readLen();
		if(this.currentAttributes!=null)
		{
			this.currentAttributes.clear();
			this.currentAttributes.ensureCapacity(currentAttributesLen);
		}
		else
		{
			this.currentAttributes=new IntIntMap(currentAttributesLen);
		}
		
		IntIntMap currentAttributesT=this.currentAttributes;
		for(int currentAttributesI=currentAttributesLen-1;currentAttributesI>=0;--currentAttributesI)
		{
			int currentAttributesK;
			int currentAttributesV;
			currentAttributesK=stream.readInt();
			
			currentAttributesV=stream.readInt();
			
			currentAttributesT.put(currentAttributesK,currentAttributesV);
		}
		
		int buffsLen=stream.readLen();
		if(this.buffs!=null)
		{
			this.buffs.clear();
			this.buffs.ensureCapacity(buffsLen);
		}
		else
		{
			this.buffs=new IntObjectMap<BuffData>(buffsLen);
		}
		
		IntObjectMap<BuffData> buffsT=this.buffs;
		for(int buffsI=buffsLen-1;buffsI>=0;--buffsI)
		{
			BuffData buffsV;
			buffsV=(BuffData)stream.readDataSimpleNotNull();
			
			buffsT.put(buffsV.instanceID,buffsV);
		}
		
		int cdsLen=stream.readLen();
		if(this.cds!=null)
		{
			this.cds.clear();
			this.cds.ensureCapacity(cdsLen);
		}
		else
		{
			this.cds=new IntObjectMap<CDData>(cdsLen);
		}
		
		IntObjectMap<CDData> cdsT=this.cds;
		for(int cdsI=cdsLen-1;cdsI>=0;--cdsI)
		{
			CDData cdsV;
			cdsV=(CDData)stream.createData(CDData.dataID);
			cdsV.readBytesSimple(stream);
			
			cdsT.put(cdsV.id,cdsV);
		}
		
		this.cacheTime=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.currentAttributes!=null)
		{
			stream.writeLen(this.currentAttributes.size());
			if(!this.currentAttributes.isEmpty())
			{
				int currentAttributesKFreeValue=this.currentAttributes.getFreeValue();
				int[] currentAttributesKKeys=this.currentAttributes.getKeys();
				int[] currentAttributesVValues=this.currentAttributes.getValues();
				for(int currentAttributesKI=currentAttributesKKeys.Length-1;currentAttributesKI>=0;--currentAttributesKI)
				{
					int currentAttributesK=currentAttributesKKeys[currentAttributesKI];
					if(currentAttributesK!=currentAttributesKFreeValue)
					{
						int currentAttributesV=currentAttributesVValues[currentAttributesKI];
						stream.writeInt(currentAttributesK);
						
						stream.writeInt(currentAttributesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("currentAttributes");
		}
		
		if(this.buffs!=null)
		{
			stream.writeLen(this.buffs.size());
			if(!this.buffs.isEmpty())
			{
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsVI=buffsVValues.Length-1;buffsVI>=0;--buffsVI)
				{
					BuffData buffsV=buffsVValues[buffsVI];
					if(buffsV!=null)
					{
						if(buffsV!=null)
						{
							stream.writeDataSimpleNotNull(buffsV);
						}
						else
						{
							nullObjError("buffsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("buffs");
		}
		
		if(this.cds!=null)
		{
			stream.writeLen(this.cds.size());
			if(!this.cds.isEmpty())
			{
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsVI=cdsVValues.Length-1;cdsVI>=0;--cdsVI)
				{
					CDData cdsV=cdsVValues[cdsVI];
					if(cdsV!=null)
					{
						if(cdsV!=null)
						{
							cdsV.writeBytesSimple(stream);
						}
						else
						{
							nullObjError("cdsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("cds");
		}
		
		stream.writeLong(this.cacheTime);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is MUnitCacheData))
			return;
		
		MUnitCacheData mData=(MUnitCacheData)data;
		
		this.currentAttributes=mData.currentAttributes;
		this.buffs=mData.buffs;
		this.cds=mData.cds;
		this.cacheTime=mData.cacheTime;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is MUnitCacheData))
			return;
		
		MUnitCacheData mData=(MUnitCacheData)data;
		
		if(mData.currentAttributes!=null)
		{
			if(this.currentAttributes!=null)
			{
				this.currentAttributes.clear();
				this.currentAttributes.ensureCapacity(mData.currentAttributes.size());
			}
			else
			{
				this.currentAttributes=new IntIntMap(mData.currentAttributes.size());
			}
			
			IntIntMap currentAttributesT=this.currentAttributes;
			if(!mData.currentAttributes.isEmpty())
			{
				int currentAttributesKFreeValue=mData.currentAttributes.getFreeValue();
				int[] currentAttributesKKeys=mData.currentAttributes.getKeys();
				int[] currentAttributesVValues=mData.currentAttributes.getValues();
				for(int currentAttributesKI=currentAttributesKKeys.Length-1;currentAttributesKI>=0;--currentAttributesKI)
				{
					int currentAttributesK=currentAttributesKKeys[currentAttributesKI];
					if(currentAttributesK!=currentAttributesKFreeValue)
					{
						int currentAttributesV=currentAttributesVValues[currentAttributesKI];
						int currentAttributesW;
						int currentAttributesU;
						currentAttributesW=currentAttributesK;
						
						currentAttributesU=currentAttributesV;
						
						currentAttributesT.put(currentAttributesW,currentAttributesU);
					}
				}
			}
		}
		else
		{
			this.currentAttributes=null;
			nullObjError("currentAttributes");
		}
		
		if(mData.buffs!=null)
		{
			if(this.buffs!=null)
			{
				this.buffs.clear();
				this.buffs.ensureCapacity(mData.buffs.size());
			}
			else
			{
				this.buffs=new IntObjectMap<BuffData>(mData.buffs.size());
			}
			
			IntObjectMap<BuffData> buffsT=this.buffs;
			if(!mData.buffs.isEmpty())
			{
				BuffData[] buffsVValues=mData.buffs.getValues();
				for(int buffsVI=buffsVValues.Length-1;buffsVI>=0;--buffsVI)
				{
					BuffData buffsV=buffsVValues[buffsVI];
					if(buffsV!=null)
					{
						BuffData buffsU;
						if(buffsV!=null)
						{
							buffsU=(BuffData)buffsV.clone();
						}
						else
						{
							buffsU=null;
							nullObjError("buffsU");
						}
						
						buffsT.put(buffsU.instanceID,buffsU);
					}
				}
			}
		}
		else
		{
			this.buffs=null;
			nullObjError("buffs");
		}
		
		if(mData.cds!=null)
		{
			if(this.cds!=null)
			{
				this.cds.clear();
				this.cds.ensureCapacity(mData.cds.size());
			}
			else
			{
				this.cds=new IntObjectMap<CDData>(mData.cds.size());
			}
			
			IntObjectMap<CDData> cdsT=this.cds;
			if(!mData.cds.isEmpty())
			{
				CDData[] cdsVValues=mData.cds.getValues();
				for(int cdsVI=cdsVValues.Length-1;cdsVI>=0;--cdsVI)
				{
					CDData cdsV=cdsVValues[cdsVI];
					if(cdsV!=null)
					{
						CDData cdsU;
						if(cdsV!=null)
						{
							cdsU=(CDData)BytesControl.createData(CDData.dataID);
							cdsU.copy(cdsV);
						}
						else
						{
							cdsU=null;
							nullObjError("cdsU");
						}
						
						cdsT.put(cdsU.id,cdsU);
					}
				}
			}
		}
		else
		{
			this.cds=null;
			nullObjError("cds");
		}
		
		this.cacheTime=mData.cacheTime;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		MUnitCacheData mData=(MUnitCacheData)data;
		if(mData.currentAttributes!=null)
		{
			if(this.currentAttributes==null)
				return false;
			if(this.currentAttributes.size()!=mData.currentAttributes.size())
				return false;
			IntIntMap currentAttributesR=mData.currentAttributes;
			if(!this.currentAttributes.isEmpty())
			{
				int currentAttributesKFreeValue=this.currentAttributes.getFreeValue();
				int[] currentAttributesKKeys=this.currentAttributes.getKeys();
				int[] currentAttributesVValues=this.currentAttributes.getValues();
				for(int currentAttributesKI=currentAttributesKKeys.Length-1;currentAttributesKI>=0;--currentAttributesKI)
				{
					int currentAttributesK=currentAttributesKKeys[currentAttributesKI];
					if(currentAttributesK!=currentAttributesKFreeValue)
					{
						int currentAttributesV=currentAttributesVValues[currentAttributesKI];
						int currentAttributesU=currentAttributesR.get(currentAttributesK);
						if(currentAttributesV!=currentAttributesU)
							return false;
						
					}
				}
			}
		}
		else
		{
			if(this.currentAttributes!=null)
				return false;
		}
		
		if(mData.buffs!=null)
		{
			if(this.buffs==null)
				return false;
			if(this.buffs.size()!=mData.buffs.size())
				return false;
			IntObjectMap<BuffData> buffsR=mData.buffs;
			if(!this.buffs.isEmpty())
			{
				int buffsKFreeValue=this.buffs.getFreeValue();
				int[] buffsKKeys=this.buffs.getKeys();
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsKI=buffsKKeys.Length-1;buffsKI>=0;--buffsKI)
				{
					int buffsK=buffsKKeys[buffsKI];
					if(buffsK!=buffsKFreeValue)
					{
						BuffData buffsV=buffsVValues[buffsKI];
						BuffData buffsU=buffsR.get(buffsK);
						if(buffsU!=null)
						{
							if(buffsV==null)
								return false;
							if(!buffsV.dataEquals(buffsU))
								return false;
						}
						else
						{
							if(buffsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.buffs!=null)
				return false;
		}
		
		if(mData.cds!=null)
		{
			if(this.cds==null)
				return false;
			if(this.cds.size()!=mData.cds.size())
				return false;
			IntObjectMap<CDData> cdsR=mData.cds;
			if(!this.cds.isEmpty())
			{
				int cdsKFreeValue=this.cds.getFreeValue();
				int[] cdsKKeys=this.cds.getKeys();
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsKI=cdsKKeys.Length-1;cdsKI>=0;--cdsKI)
				{
					int cdsK=cdsKKeys[cdsKI];
					if(cdsK!=cdsKFreeValue)
					{
						CDData cdsV=cdsVValues[cdsKI];
						CDData cdsU=cdsR.get(cdsK);
						if(cdsU!=null)
						{
							if(cdsV==null)
								return false;
							if(!cdsV.dataEquals(cdsU))
								return false;
						}
						else
						{
							if(cdsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.cds!=null)
				return false;
		}
		
		if(this.cacheTime!=mData.cacheTime)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("currentAttributes");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,int>");
		if(this.currentAttributes!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.currentAttributes.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.currentAttributes.isEmpty())
			{
				int currentAttributesKFreeValue=this.currentAttributes.getFreeValue();
				int[] currentAttributesKKeys=this.currentAttributes.getKeys();
				int[] currentAttributesVValues=this.currentAttributes.getValues();
				for(int currentAttributesKI=currentAttributesKKeys.Length-1;currentAttributesKI>=0;--currentAttributesKI)
				{
					int currentAttributesK=currentAttributesKKeys[currentAttributesKI];
					if(currentAttributesK!=currentAttributesKFreeValue)
					{
						int currentAttributesV=currentAttributesVValues[currentAttributesKI];
						writer.writeTabs();
						writer.sb.Append(currentAttributesK);
						
						writer.sb.Append(':');
						writer.sb.Append(currentAttributesV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("buffs");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,BuffData>");
		if(this.buffs!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.buffs.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.buffs.isEmpty())
			{
				int buffsKFreeValue=this.buffs.getFreeValue();
				int[] buffsKKeys=this.buffs.getKeys();
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsKI=buffsKKeys.Length-1;buffsKI>=0;--buffsKI)
				{
					int buffsK=buffsKKeys[buffsKI];
					if(buffsK!=buffsKFreeValue)
					{
						BuffData buffsV=buffsVValues[buffsKI];
						writer.writeTabs();
						writer.sb.Append(buffsK);
						
						writer.sb.Append(':');
						if(buffsV!=null)
						{
							buffsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("BuffData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("cds");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,CDData>");
		if(this.cds!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.cds.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.cds.isEmpty())
			{
				int cdsKFreeValue=this.cds.getFreeValue();
				int[] cdsKKeys=this.cds.getKeys();
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsKI=cdsKKeys.Length-1;cdsKI>=0;--cdsKI)
				{
					int cdsK=cdsKKeys[cdsKI];
					if(cdsK!=cdsKFreeValue)
					{
						CDData cdsV=cdsVValues[cdsKI];
						writer.writeTabs();
						writer.sb.Append(cdsK);
						
						writer.sb.Append(':');
						if(cdsV!=null)
						{
							cdsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("CDData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("cacheTime");
		writer.sb.Append(':');
		writer.sb.Append(this.cacheTime);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.currentAttributes=new IntIntMap();
		this.buffs=new IntObjectMap<BuffData>();
		this.cds=new IntObjectMap<CDData>();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int currentAttributesLen=stream.readLen();
		if(this.currentAttributes!=null)
		{
			this.currentAttributes.clear();
			this.currentAttributes.ensureCapacity(currentAttributesLen);
		}
		else
		{
			this.currentAttributes=new IntIntMap(currentAttributesLen);
		}
		
		IntIntMap currentAttributesT=this.currentAttributes;
		for(int currentAttributesI=currentAttributesLen-1;currentAttributesI>=0;--currentAttributesI)
		{
			int currentAttributesK;
			int currentAttributesV;
			currentAttributesK=stream.readInt();
			
			currentAttributesV=stream.readInt();
			
			currentAttributesT.put(currentAttributesK,currentAttributesV);
		}
		
		int buffsLen=stream.readLen();
		if(this.buffs!=null)
		{
			this.buffs.clear();
			this.buffs.ensureCapacity(buffsLen);
		}
		else
		{
			this.buffs=new IntObjectMap<BuffData>(buffsLen);
		}
		
		IntObjectMap<BuffData> buffsT=this.buffs;
		for(int buffsI=buffsLen-1;buffsI>=0;--buffsI)
		{
			BuffData buffsV;
			BaseData buffsVT=stream.readDataFullNotNull();
			if(buffsVT!=null)
			{
				if(buffsVT is BuffData)
				{
					buffsV=(BuffData)buffsVT;
				}
				else
				{
					buffsV=new BuffData();
					if(!(buffsVT.GetType().IsAssignableFrom(typeof(BuffData))))
					{
						stream.throwTypeReadError(typeof(BuffData),buffsVT.GetType());
					}
					buffsV.shadowCopy(buffsVT);
				}
			}
			else
			{
				buffsV=null;
			}
			
			buffsT.put(buffsV.instanceID,buffsV);
		}
		
		int cdsLen=stream.readLen();
		if(this.cds!=null)
		{
			this.cds.clear();
			this.cds.ensureCapacity(cdsLen);
		}
		else
		{
			this.cds=new IntObjectMap<CDData>(cdsLen);
		}
		
		IntObjectMap<CDData> cdsT=this.cds;
		for(int cdsI=cdsLen-1;cdsI>=0;--cdsI)
		{
			CDData cdsV;
			cdsV=(CDData)stream.createData(CDData.dataID);
			cdsV.readBytesFull(stream);
			
			cdsT.put(cdsV.id,cdsV);
		}
		
		this.cacheTime=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.currentAttributes!=null)
		{
			stream.writeLen(this.currentAttributes.size());
			if(!this.currentAttributes.isEmpty())
			{
				int currentAttributesKFreeValue=this.currentAttributes.getFreeValue();
				int[] currentAttributesKKeys=this.currentAttributes.getKeys();
				int[] currentAttributesVValues=this.currentAttributes.getValues();
				for(int currentAttributesKI=currentAttributesKKeys.Length-1;currentAttributesKI>=0;--currentAttributesKI)
				{
					int currentAttributesK=currentAttributesKKeys[currentAttributesKI];
					if(currentAttributesK!=currentAttributesKFreeValue)
					{
						int currentAttributesV=currentAttributesVValues[currentAttributesKI];
						stream.writeInt(currentAttributesK);
						
						stream.writeInt(currentAttributesV);
						
					}
				}
			}
		}
		else
		{
			nullObjError("currentAttributes");
		}
		
		if(this.buffs!=null)
		{
			stream.writeLen(this.buffs.size());
			if(!this.buffs.isEmpty())
			{
				BuffData[] buffsVValues=this.buffs.getValues();
				for(int buffsVI=buffsVValues.Length-1;buffsVI>=0;--buffsVI)
				{
					BuffData buffsV=buffsVValues[buffsVI];
					if(buffsV!=null)
					{
						if(buffsV!=null)
						{
							stream.writeDataFullNotNull(buffsV);
						}
						else
						{
							nullObjError("buffsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("buffs");
		}
		
		if(this.cds!=null)
		{
			stream.writeLen(this.cds.size());
			if(!this.cds.isEmpty())
			{
				CDData[] cdsVValues=this.cds.getValues();
				for(int cdsVI=cdsVValues.Length-1;cdsVI>=0;--cdsVI)
				{
					CDData cdsV=cdsVValues[cdsVI];
					if(cdsV!=null)
					{
						if(cdsV!=null)
						{
							cdsV.writeBytesFull(stream);
						}
						else
						{
							nullObjError("cdsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("cds");
		}
		
		stream.writeLong(this.cacheTime);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.currentAttributes=null;
		this.buffs=null;
		this.cds=null;
		this.cacheTime=0L;
	}
	
}
