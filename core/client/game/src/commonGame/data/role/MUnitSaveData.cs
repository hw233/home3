using ShineEngine;

/// <summary>
/// 主单位存库数据(generated by shine)
/// </summary>
public class MUnitSaveData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.MUnitSave;
	
	/// <summary>
	/// 装备组
	/// </summary>
	public EquipContainerData equips;
	
	/// <summary>
	/// 缓存数据
	/// </summary>
	public MUnitCacheData cache;
	
	/// <summary>
	/// 角色ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 主单位序号
	/// </summary>
	public int mIndex;
	
	public MUnitSaveData()
	{
		_dataID=BaseDataType.MUnitSave;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "MUnitSaveData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		if(stream.readBoolean())
		{
			BaseData cacheT=stream.readDataFullNotNull();
			if(cacheT!=null)
			{
				if(cacheT is MUnitCacheData)
				{
					this.cache=(MUnitCacheData)cacheT;
				}
				else
				{
					this.cache=new MUnitCacheData();
					if(!(cacheT.GetType().IsAssignableFrom(typeof(MUnitCacheData))))
					{
						stream.throwTypeReadError(typeof(MUnitCacheData),cacheT.GetType());
					}
					this.cache.shadowCopy(cacheT);
				}
			}
			else
			{
				this.cache=null;
			}
		}
		else
		{
			this.cache=null;
		}
		
		BaseData equipsT=stream.readDataFullNotNull();
		if(equipsT!=null)
		{
			if(equipsT is EquipContainerData)
			{
				this.equips=(EquipContainerData)equipsT;
			}
			else
			{
				this.equips=new EquipContainerData();
				if(!(equipsT.GetType().IsAssignableFrom(typeof(EquipContainerData))))
				{
					stream.throwTypeReadError(typeof(EquipContainerData),equipsT.GetType());
				}
				this.equips.shadowCopy(equipsT);
			}
		}
		else
		{
			this.equips=null;
		}
		
		this.mIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		if(this.cache!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataFullNotNull(this.cache);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.equips!=null)
		{
			stream.writeDataFullNotNull(this.equips);
		}
		else
		{
			nullObjError("equips");
		}
		
		stream.writeInt(this.mIndex);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.cache=(MUnitCacheData)stream.readDataSimpleNotNull();
		}
		else
		{
			this.cache=null;
		}
		
		this.equips=(EquipContainerData)stream.readDataSimpleNotNull();
		
		this.mIndex=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		if(this.cache!=null)
		{
			stream.writeBoolean(true);
			stream.writeDataSimpleNotNull(this.cache);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.equips!=null)
		{
			stream.writeDataSimpleNotNull(this.equips);
		}
		else
		{
			nullObjError("equips");
		}
		
		stream.writeInt(this.mIndex);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is MUnitSaveData))
			return;
		
		MUnitSaveData mData=(MUnitSaveData)data;
		
		this.id=mData.id;
		this.cache=mData.cache;
		this.equips=mData.equips;
		this.mIndex=mData.mIndex;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is MUnitSaveData))
			return;
		
		MUnitSaveData mData=(MUnitSaveData)data;
		
		this.id=mData.id;
		
		if(mData.cache!=null)
		{
			this.cache=(MUnitCacheData)mData.cache.clone();
		}
		else
		{
			this.cache=null;
		}
		
		if(mData.equips!=null)
		{
			this.equips=(EquipContainerData)mData.equips.clone();
		}
		else
		{
			this.equips=null;
			nullObjError("equips");
		}
		
		this.mIndex=mData.mIndex;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		MUnitSaveData mData=(MUnitSaveData)data;
		if(this.id!=mData.id)
			return false;
		
		if(mData.cache!=null)
		{
			if(this.cache==null)
				return false;
			if(!this.cache.dataEquals(mData.cache))
				return false;
		}
		else
		{
			if(this.cache!=null)
				return false;
		}
		
		if(mData.equips!=null)
		{
			if(this.equips==null)
				return false;
			if(!this.equips.dataEquals(mData.equips))
				return false;
		}
		else
		{
			if(this.equips!=null)
				return false;
		}
		
		if(this.mIndex!=mData.mIndex)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("cache");
		writer.sb.Append(':');
		if(this.cache!=null)
		{
			this.cache.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("MUnitCacheData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("equips");
		writer.sb.Append(':');
		if(this.equips!=null)
		{
			this.equips.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("EquipContainerData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("mIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.mIndex);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.equips=new EquipContainerData();
		this.equips.initDefault();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.cache=null;
		this.equips=null;
		this.mIndex=0;
	}
	
}
