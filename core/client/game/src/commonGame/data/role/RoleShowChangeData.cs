using ShineEngine;

/// <summary>
/// 角色显示改变数据(maybeExtends)(generated by shine)
/// </summary>
public class RoleShowChangeData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.RoleShowChange;
	
	/// <summary>
	/// 类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// 整形参
	/// </summary>
	public int arg0;
	
	/// <summary>
	/// long参
	/// </summary>
	public long arg2;
	
	/// <summary>
	/// str参
	/// </summary>
	public string arg1;
	
	public RoleShowChangeData()
	{
		_dataID=BaseDataType.RoleShowChange;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RoleShowChangeData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.type=stream.readInt();
		
		this.arg0=stream.readInt();
		
		this.arg1=stream.readUTF();
		
		this.arg2=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.type);
		
		stream.writeInt(this.arg0);
		
		stream.writeUTF(this.arg1);
		
		stream.writeLong(this.arg2);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is RoleShowChangeData))
			return;
		
		RoleShowChangeData mData=(RoleShowChangeData)data;
		
		this.type=mData.type;
		this.arg0=mData.arg0;
		this.arg1=mData.arg1;
		this.arg2=mData.arg2;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is RoleShowChangeData))
			return;
		
		RoleShowChangeData mData=(RoleShowChangeData)data;
		
		this.type=mData.type;
		
		this.arg0=mData.arg0;
		
		this.arg1=mData.arg1;
		
		this.arg2=mData.arg2;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		RoleShowChangeData mData=(RoleShowChangeData)data;
		if(this.type!=mData.type)
			return false;
		
		if(this.arg0!=mData.arg0)
			return false;
		
		if(this.arg1!=mData.arg1)
			return false;
		
		if(this.arg2!=mData.arg2)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("type");
		writer.sb.Append(':');
		writer.sb.Append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("arg0");
		writer.sb.Append(':');
		writer.sb.Append(this.arg0);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("arg1");
		writer.sb.Append(':');
		writer.sb.Append(this.arg1);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("arg2");
		writer.sb.Append(':');
		writer.sb.Append(this.arg2);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.type=stream.readInt();
		
		this.arg0=stream.readInt();
		
		this.arg1=stream.readUTF();
		
		this.arg2=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.arg0);
		
		stream.writeUTF(this.arg1);
		
		stream.writeLong(this.arg2);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.type=0;
		this.arg0=0;
		this.arg1="";
		this.arg2=0L;
	}
	
}
