using ShineEngine;

/// <summary>
/// 客户端登录数据(可以有继承)(generated by shine)
/// </summary>
public class ClientLoginData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ClientLogin;
	
	/// <summary>
	/// uid
	/// </summary>
	public string uid;
	
	/// <summary>
	/// 国家ID
	/// </summary>
	public int countryID=-1;
	
	/// <summary>
	/// 客户端设备平台类型
	/// </summary>
	public int clientPlatformType;
	
	/// <summary>
	/// 设备唯一标识
	/// </summary>
	public string deviceUniqueIdentifier;
	
	/// <summary>
	/// 设备类型
	/// </summary>
	public string deviceType;
	
	/// <summary>
	/// 携带的游客uid(用来做登陆时直接绑定游客)
	/// </summary>
	public string visitorUID;
	
	/// <summary>
	/// 当前资源版本
	/// </summary>
	public int resourceVersion;
	
	/// <summary>
	/// 当前App版本
	/// </summary>
	public int appVersion;
	
	/// <summary>
	/// 平台类型
	/// </summary>
	public string platform;
	
	public ClientLoginData()
	{
		_dataID=BaseDataType.ClientLogin;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ClientLoginData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.uid=stream.readUTF();
		
		this.platform=stream.readUTF();
		
		this.countryID=stream.readInt();
		
		this.clientPlatformType=stream.readInt();
		
		this.deviceType=stream.readUTF();
		
		this.deviceUniqueIdentifier=stream.readUTF();
		
		this.visitorUID=stream.readUTF();
		
		this.appVersion=stream.readInt();
		
		this.resourceVersion=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeUTF(this.uid);
		
		stream.writeUTF(this.platform);
		
		stream.writeInt(this.countryID);
		
		stream.writeInt(this.clientPlatformType);
		
		stream.writeUTF(this.deviceType);
		
		stream.writeUTF(this.deviceUniqueIdentifier);
		
		stream.writeUTF(this.visitorUID);
		
		stream.writeInt(this.appVersion);
		
		stream.writeInt(this.resourceVersion);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ClientLoginData))
			return;
		
		ClientLoginData mData=(ClientLoginData)data;
		
		this.uid=mData.uid;
		this.platform=mData.platform;
		this.countryID=mData.countryID;
		this.clientPlatformType=mData.clientPlatformType;
		this.deviceType=mData.deviceType;
		this.deviceUniqueIdentifier=mData.deviceUniqueIdentifier;
		this.visitorUID=mData.visitorUID;
		this.appVersion=mData.appVersion;
		this.resourceVersion=mData.resourceVersion;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ClientLoginData))
			return;
		
		ClientLoginData mData=(ClientLoginData)data;
		
		this.uid=mData.uid;
		
		this.platform=mData.platform;
		
		this.countryID=mData.countryID;
		
		this.clientPlatformType=mData.clientPlatformType;
		
		this.deviceType=mData.deviceType;
		
		this.deviceUniqueIdentifier=mData.deviceUniqueIdentifier;
		
		this.visitorUID=mData.visitorUID;
		
		this.appVersion=mData.appVersion;
		
		this.resourceVersion=mData.resourceVersion;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ClientLoginData mData=(ClientLoginData)data;
		if(this.uid!=mData.uid)
			return false;
		
		if(this.platform!=mData.platform)
			return false;
		
		if(this.countryID!=mData.countryID)
			return false;
		
		if(this.clientPlatformType!=mData.clientPlatformType)
			return false;
		
		if(this.deviceType!=mData.deviceType)
			return false;
		
		if(this.deviceUniqueIdentifier!=mData.deviceUniqueIdentifier)
			return false;
		
		if(this.visitorUID!=mData.visitorUID)
			return false;
		
		if(this.appVersion!=mData.appVersion)
			return false;
		
		if(this.resourceVersion!=mData.resourceVersion)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("uid");
		writer.sb.Append(':');
		writer.sb.Append(this.uid);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("platform");
		writer.sb.Append(':');
		writer.sb.Append(this.platform);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("countryID");
		writer.sb.Append(':');
		writer.sb.Append(this.countryID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("clientPlatformType");
		writer.sb.Append(':');
		writer.sb.Append(this.clientPlatformType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("deviceType");
		writer.sb.Append(':');
		writer.sb.Append(this.deviceType);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("deviceUniqueIdentifier");
		writer.sb.Append(':');
		writer.sb.Append(this.deviceUniqueIdentifier);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("visitorUID");
		writer.sb.Append(':');
		writer.sb.Append(this.visitorUID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("appVersion");
		writer.sb.Append(':');
		writer.sb.Append(this.appVersion);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("resourceVersion");
		writer.sb.Append(':');
		writer.sb.Append(this.resourceVersion);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.uid=stream.readUTF();
		
		this.platform=stream.readUTF();
		
		this.countryID=stream.readInt();
		
		this.clientPlatformType=stream.readInt();
		
		this.deviceType=stream.readUTF();
		
		this.deviceUniqueIdentifier=stream.readUTF();
		
		this.visitorUID=stream.readUTF();
		
		this.appVersion=stream.readInt();
		
		this.resourceVersion=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeUTF(this.uid);
		
		stream.writeUTF(this.platform);
		
		stream.writeInt(this.countryID);
		
		stream.writeInt(this.clientPlatformType);
		
		stream.writeUTF(this.deviceType);
		
		stream.writeUTF(this.deviceUniqueIdentifier);
		
		stream.writeUTF(this.visitorUID);
		
		stream.writeInt(this.appVersion);
		
		stream.writeInt(this.resourceVersion);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.uid="";
		this.platform="";
		this.countryID=0;
		this.clientPlatformType=0;
		this.deviceType="";
		this.deviceUniqueIdentifier="";
		this.visitorUID="";
		this.appVersion=0;
		this.resourceVersion=0;
	}
	
}
