using ShineEngine;

/// <summary>
/// 客户端登陆服务器地址信息(generated by shine)
/// </summary>
public class ClientLoginServerInfoData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ClientLoginServerInfo;
	
	/// <summary>
	/// 令牌
	/// </summary>
	public int token;
	
	/// <summary>
	/// 地址
	/// </summary>
	public string host;
	
	/// <summary>
	/// 端口
	/// </summary>
	public int port;
	
	public ClientLoginServerInfoData()
	{
		_dataID=BaseDataType.ClientLoginServerInfo;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ClientLoginServerInfoData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.token=stream.readInt();
		
		this.host=stream.readUTF();
		
		this.port=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.token);
		
		stream.writeUTF(this.host);
		
		stream.writeInt(this.port);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.token=stream.readInt();
		
		this.host=stream.readUTF();
		
		this.port=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.token);
		
		stream.writeUTF(this.host);
		
		stream.writeInt(this.port);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ClientLoginServerInfoData))
			return;
		
		ClientLoginServerInfoData mData=(ClientLoginServerInfoData)data;
		
		this.token=mData.token;
		this.host=mData.host;
		this.port=mData.port;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ClientLoginServerInfoData))
			return;
		
		ClientLoginServerInfoData mData=(ClientLoginServerInfoData)data;
		
		this.token=mData.token;
		
		this.host=mData.host;
		
		this.port=mData.port;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ClientLoginServerInfoData mData=(ClientLoginServerInfoData)data;
		if(this.token!=mData.token)
			return false;
		
		if(this.host!=mData.host)
			return false;
		
		if(this.port!=mData.port)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("token");
		writer.sb.Append(':');
		writer.sb.Append(this.token);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("host");
		writer.sb.Append(':');
		writer.sb.Append(this.host);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("port");
		writer.sb.Append(':');
		writer.sb.Append(this.port);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.token=0;
		this.host="";
		this.port=0;
	}
	
}
