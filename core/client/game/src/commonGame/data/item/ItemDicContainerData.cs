using ShineEngine;

/// <summary>
/// 物品列表容器工具数据(generated by shine)
/// </summary>
public class ItemDicContainerData:FuncToolData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ItemDicContainer;
	
	/// <summary>
	/// 客户端序号自增
	/// </summary>
	public int clientItemIndex;
	
	/// <summary>
	/// 服务器序号自增
	/// </summary>
	public int serverItemIndex;
	
	/// <summary>
	/// 物品数据组(key:index)
	/// </summary>
	public IntObjectMap<ItemData> items;
	
	public ItemDicContainerData()
	{
		_dataID=BaseDataType.ItemDicContainer;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ItemDicContainerData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int itemsLen=stream.readLen();
		if(this.items!=null)
		{
			this.items.clear();
			this.items.ensureCapacity(itemsLen);
		}
		else
		{
			this.items=new IntObjectMap<ItemData>(itemsLen);
		}
		
		IntObjectMap<ItemData> itemsT=this.items;
		for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
		{
			int itemsK;
			ItemData itemsV;
			itemsK=stream.readInt();
			
			BaseData itemsVT=stream.readDataFullNotNull();
			if(itemsVT!=null)
			{
				if(itemsVT is ItemData)
				{
					itemsV=(ItemData)itemsVT;
				}
				else
				{
					itemsV=new ItemData();
					if(!(itemsVT.GetType().IsAssignableFrom(typeof(ItemData))))
					{
						stream.throwTypeReadError(typeof(ItemData),itemsVT.GetType());
					}
					itemsV.shadowCopy(itemsVT);
				}
			}
			else
			{
				itemsV=null;
			}
			
			itemsT.put(itemsK,itemsV);
		}
		
		this.serverItemIndex=stream.readInt();
		
		this.clientItemIndex=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.items!=null)
		{
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.Length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=itemsVValues[itemsKI];
						stream.writeInt(itemsK);
						
						if(itemsV!=null)
						{
							stream.writeDataFullNotNull(itemsV);
						}
						else
						{
							nullObjError("itemsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("items");
		}
		
		stream.writeInt(this.serverItemIndex);
		
		stream.writeInt(this.clientItemIndex);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		int itemsLen=stream.readLen();
		if(this.items!=null)
		{
			this.items.clear();
			this.items.ensureCapacity(itemsLen);
		}
		else
		{
			this.items=new IntObjectMap<ItemData>(itemsLen);
		}
		
		IntObjectMap<ItemData> itemsT=this.items;
		for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
		{
			int itemsK;
			ItemData itemsV;
			itemsK=stream.readInt();
			
			itemsV=(ItemData)stream.readDataSimpleNotNull();
			
			itemsT.put(itemsK,itemsV);
		}
		
		this.serverItemIndex=stream.readInt();
		
		this.clientItemIndex=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.items!=null)
		{
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.Length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=itemsVValues[itemsKI];
						stream.writeInt(itemsK);
						
						if(itemsV!=null)
						{
							stream.writeDataSimpleNotNull(itemsV);
						}
						else
						{
							nullObjError("itemsV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("items");
		}
		
		stream.writeInt(this.serverItemIndex);
		
		stream.writeInt(this.clientItemIndex);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is ItemDicContainerData))
			return;
		
		ItemDicContainerData mData=(ItemDicContainerData)data;
		
		this.items=mData.items;
		this.serverItemIndex=mData.serverItemIndex;
		this.clientItemIndex=mData.clientItemIndex;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is ItemDicContainerData))
			return;
		
		ItemDicContainerData mData=(ItemDicContainerData)data;
		
		if(mData.items!=null)
		{
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(mData.items.size());
			}
			else
			{
				this.items=new IntObjectMap<ItemData>(mData.items.size());
			}
			
			IntObjectMap<ItemData> itemsT=this.items;
			if(!mData.items.isEmpty())
			{
				int itemsKFreeValue=mData.items.getFreeValue();
				int[] itemsKKeys=mData.items.getKeys();
				ItemData[] itemsVValues=mData.items.getValues();
				for(int itemsKI=itemsKKeys.Length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=itemsVValues[itemsKI];
						int itemsW;
						ItemData itemsU;
						itemsW=itemsK;
						
						if(itemsV!=null)
						{
							itemsU=(ItemData)itemsV.clone();
						}
						else
						{
							itemsU=null;
							nullObjError("itemsU");
						}
						
						itemsT.put(itemsW,itemsU);
					}
				}
			}
		}
		else
		{
			this.items=null;
			nullObjError("items");
		}
		
		this.serverItemIndex=mData.serverItemIndex;
		
		this.clientItemIndex=mData.clientItemIndex;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		ItemDicContainerData mData=(ItemDicContainerData)data;
		if(mData.items!=null)
		{
			if(this.items==null)
				return false;
			if(this.items.size()!=mData.items.size())
				return false;
			IntObjectMap<ItemData> itemsR=mData.items;
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.Length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=itemsVValues[itemsKI];
						ItemData itemsU=itemsR.get(itemsK);
						if(itemsU!=null)
						{
							if(itemsV==null)
								return false;
							if(!itemsV.dataEquals(itemsU))
								return false;
						}
						else
						{
							if(itemsV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.items!=null)
				return false;
		}
		
		if(this.serverItemIndex!=mData.serverItemIndex)
			return false;
		
		if(this.clientItemIndex!=mData.clientItemIndex)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("items");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,ItemData>");
		if(this.items!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.items.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.Length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=itemsVValues[itemsKI];
						writer.writeTabs();
						writer.sb.Append(itemsK);
						
						writer.sb.Append(':');
						if(itemsV!=null)
						{
							itemsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("ItemData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("serverItemIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.serverItemIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("clientItemIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.clientItemIndex);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
		this.items=new IntObjectMap<ItemData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.items=null;
		this.serverItemIndex=0;
		this.clientItemIndex=0;
	}
	
}
