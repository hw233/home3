using ShineEngine;

/// <summary>
/// 道具容器数据(generated by shine)
/// </summary>
public class ItemContainerData:FuncToolData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ItemContainer;
	
	/// <summary>
	/// 开启格子数(0为无限)
	/// </summary>
	public int gridNum;
	
	/// <summary>
	/// 道具组
	/// </summary>
	public SList<ItemData> items;
	
	public ItemContainerData()
	{
		_dataID=BaseDataType.ItemContainer;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ItemContainerData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>();
			}
			
			SList<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				ItemData itemsV;
				if(stream.readBoolean())
				{
					itemsV=(ItemData)stream.readDataSimpleNotNull();
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.add(itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
		this.gridNum=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataSimpleNotNull(itemsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.gridNum);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is ItemContainerData))
			return;
		
		ItemContainerData mData=(ItemContainerData)data;
		
		this.items=mData.items;
		this.gridNum=mData.gridNum;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is ItemContainerData))
			return;
		
		ItemContainerData mData=(ItemContainerData)data;
		
		if(mData.items!=null)
		{
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(mData.items.size());
			}
			else
			{
				this.items=new SList<ItemData>();
			}
			
			SList<ItemData> itemsT=this.items;
			if(!mData.items.isEmpty())
			{
				ItemData[] itemsVValues=mData.items.getValues();
				for(int itemsVI=0,itemsVLen=mData.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=itemsVValues[itemsVI];
					ItemData itemsU;
					if(itemsV!=null)
					{
						itemsU=(ItemData)itemsV.clone();
					}
					else
					{
						itemsU=null;
					}
					
					itemsT.add(itemsU);
				}
			}
		}
		else
		{
			this.items=null;
		}
		
		this.gridNum=mData.gridNum;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		ItemContainerData mData=(ItemContainerData)data;
		if(mData.items!=null)
		{
			if(this.items==null)
				return false;
			if(this.items.size()!=mData.items.size())
				return false;
			SList<ItemData> itemsT=this.items;
			SList<ItemData> itemsR=mData.items;
			int itemsLen=itemsT.size();
			for(int itemsI=0;itemsI<itemsLen;++itemsI)
			{
				ItemData itemsU=itemsT.get(itemsI);
				ItemData itemsV=itemsR.get(itemsI);
				if(itemsV!=null)
				{
					if(itemsU==null)
						return false;
					if(!itemsU.dataEquals(itemsV))
						return false;
				}
				else
				{
					if(itemsU!=null)
						return false;
				}
				
			}
		}
		else
		{
			if(this.items!=null)
				return false;
		}
		
		if(this.gridNum!=mData.gridNum)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("items");
		writer.sb.Append(':');
		writer.sb.Append("List<ItemData>");
		if(this.items!=null)
		{
			SList<ItemData> itemsT=this.items;
			int itemsLen=itemsT.size();
			writer.sb.Append('(');
			writer.sb.Append(itemsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int itemsI=0;itemsI<itemsLen;++itemsI)
			{
				ItemData itemsV=itemsT.get(itemsI);
				writer.writeTabs();
				writer.sb.Append(itemsI);
				writer.sb.Append(':');
				if(itemsV!=null)
				{
					itemsV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("ItemData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("gridNum");
		writer.sb.Append(':');
		writer.sb.Append(this.gridNum);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>();
			}
			
			SList<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				ItemData itemsV;
				if(stream.readBoolean())
				{
					BaseData itemsVT=stream.readDataFullNotNull();
					if(itemsVT!=null)
					{
						if(itemsVT is ItemData)
						{
							itemsV=(ItemData)itemsVT;
						}
						else
						{
							itemsV=new ItemData();
							if(!(itemsVT.GetType().IsAssignableFrom(typeof(ItemData))))
							{
								stream.throwTypeReadError(typeof(ItemData),itemsVT.GetType());
							}
							itemsV.shadowCopy(itemsVT);
						}
					}
					else
					{
						itemsV=null;
					}
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.add(itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
		this.gridNum=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.items!=null)
		{
			stream.writeBoolean(true);
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsVI=0,itemsVLen=this.items.length();itemsVI<itemsVLen;++itemsVI)
				{
					ItemData itemsV=itemsVValues[itemsVI];
					if(itemsV!=null)
					{
						stream.writeBoolean(true);
						stream.writeDataFullNotNull(itemsV);
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.gridNum);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.items=null;
		this.gridNum=0;
	}
	
}
