using ShineEngine;

/// <summary>
/// 玩家邮件(generated by shine)
/// </summary>
public class PlayerMailData:MailData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.PlayerMail;
	
	/// <summary>
	/// 角色数据
	/// </summary>
	public RoleShowData roleData;
	
	public PlayerMailData()
	{
		_dataID=BaseDataType.PlayerMail;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PlayerMailData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.roleData=(RoleShowData)stream.readDataSimpleNotNull();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.roleData!=null)
		{
			stream.writeDataSimpleNotNull(this.roleData);
		}
		else
		{
			nullObjError("roleData");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is PlayerMailData))
			return;
		
		PlayerMailData mData=(PlayerMailData)data;
		
		this.roleData=mData.roleData;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is PlayerMailData))
			return;
		
		PlayerMailData mData=(PlayerMailData)data;
		
		if(mData.roleData!=null)
		{
			this.roleData=(RoleShowData)mData.roleData.clone();
		}
		else
		{
			this.roleData=null;
			nullObjError("roleData");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		PlayerMailData mData=(PlayerMailData)data;
		if(mData.roleData!=null)
		{
			if(this.roleData==null)
				return false;
			if(!this.roleData.dataEquals(mData.roleData))
				return false;
		}
		else
		{
			if(this.roleData!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("roleData");
		writer.sb.Append(':');
		if(this.roleData!=null)
		{
			this.roleData.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("RoleShowData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
		this.roleData=new RoleShowData();
		this.roleData.initDefault();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		BaseData roleDataT=stream.readDataFullNotNull();
		if(roleDataT!=null)
		{
			if(roleDataT is RoleShowData)
			{
				this.roleData=(RoleShowData)roleDataT;
			}
			else
			{
				this.roleData=new RoleShowData();
				if(!(roleDataT.GetType().IsAssignableFrom(typeof(RoleShowData))))
				{
					stream.throwTypeReadError(typeof(RoleShowData),roleDataT.GetType());
				}
				this.roleData.shadowCopy(roleDataT);
			}
		}
		else
		{
			this.roleData=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.roleData!=null)
		{
			stream.writeDataFullNotNull(this.roleData);
		}
		else
		{
			nullObjError("roleData");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.roleData=null;
	}
	
}
