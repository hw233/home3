using ShineEngine;

/// <summary>
/// 游戏服给客户端的简版数据(generated by shine)
/// </summary>
public class GameServerClientSimpleData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.GameServerClientSimple;
	
	/// <summary>
	/// 客户端地址
	/// </summary>
	public string clientHost;
	
	/// <summary>
	/// 客户端使用端口(可能经过lbs等服务转发)
	/// </summary>
	public int clientUsePort;
	
	/// <summary>
	/// ID
	/// </summary>
	public int id;
	
	public GameServerClientSimpleData()
	{
		_dataID=BaseDataType.GameServerClientSimple;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "GameServerClientSimpleData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.clientHost=stream.readUTF();
		
		this.clientUsePort=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeUTF(this.clientHost);
		
		stream.writeInt(this.clientUsePort);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is GameServerClientSimpleData))
			return;
		
		GameServerClientSimpleData mData=(GameServerClientSimpleData)data;
		
		this.id=mData.id;
		this.clientHost=mData.clientHost;
		this.clientUsePort=mData.clientUsePort;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is GameServerClientSimpleData))
			return;
		
		GameServerClientSimpleData mData=(GameServerClientSimpleData)data;
		
		this.id=mData.id;
		
		this.clientHost=mData.clientHost;
		
		this.clientUsePort=mData.clientUsePort;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		GameServerClientSimpleData mData=(GameServerClientSimpleData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.clientHost!=mData.clientHost)
			return false;
		
		if(this.clientUsePort!=mData.clientUsePort)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("clientHost");
		writer.sb.Append(':');
		writer.sb.Append(this.clientHost);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("clientUsePort");
		writer.sb.Append(':');
		writer.sb.Append(this.clientUsePort);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.clientHost=stream.readUTF();
		
		this.clientUsePort=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.clientHost);
		
		stream.writeInt(this.clientUsePort);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.clientHost="";
		this.clientUsePort=0;
	}
	
}
