using ShineEngine;

/// <summary>
/// 信息日志数据(generated by shine)
/// </summary>
public class InfoLogData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.InfoLog;
	
	/// <summary>
	/// 日志id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 日志时间
	/// </summary>
	public long logTime;
	
	/// <summary>
	/// 参数组
	/// </summary>
	public string[] args;
	
	public InfoLogData()
	{
		_dataID=BaseDataType.InfoLog;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "InfoLogData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new string[argsLen];
			}
			string[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				string argsV;
				argsV=stream.readUTF();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		this.logTime=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			string[] argsT=this.args;
			stream.writeLen(argsT.Length);
			for(int argsVI=0,argsVLen=argsT.Length;argsVI<argsVLen;++argsVI)
			{
				string argsV=argsT[argsVI];
				stream.writeUTF(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeLong(this.logTime);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new string[argsLen];
			}
			string[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				string argsV;
				argsV=stream.readUTF();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		this.logTime=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		if(this.args!=null)
		{
			stream.writeBoolean(true);
			string[] argsT=this.args;
			stream.writeLen(argsT.Length);
			for(int argsVI=0,argsVLen=argsT.Length;argsVI<argsVLen;++argsVI)
			{
				string argsV=argsT[argsVI];
				stream.writeUTF(argsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeLong(this.logTime);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is InfoLogData))
			return;
		
		InfoLogData mData=(InfoLogData)data;
		
		this.id=mData.id;
		this.args=mData.args;
		this.logTime=mData.logTime;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is InfoLogData))
			return;
		
		InfoLogData mData=(InfoLogData)data;
		
		this.id=mData.id;
		
		if(mData.args!=null)
		{
			string[] argsR=mData.args;
			int argsLen=argsR.Length;
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new string[argsLen];
			}
			string[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				string argsV=argsR[argsI];
				string argsU;
				argsU=argsV;
				
				argsT[argsI]=argsU;
			}
		}
		else
		{
			this.args=null;
		}
		
		this.logTime=mData.logTime;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		InfoLogData mData=(InfoLogData)data;
		if(this.id!=mData.id)
			return false;
		
		if(mData.args!=null)
		{
			if(this.args==null)
				return false;
			if(this.args.Length!=mData.args.Length)
				return false;
			string[] argsT=this.args;
			string[] argsR=mData.args;
			int argsLen=argsT.Length;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				string argsU=argsT[argsI];
				string argsV=argsR[argsI];
				if(argsU!=argsV)
					return false;
				
			}
		}
		else
		{
			if(this.args!=null)
				return false;
		}
		
		if(this.logTime!=mData.logTime)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("args");
		writer.sb.Append(':');
		writer.sb.Append("Array<string>");
		if(this.args!=null)
		{
			string[] argsT=this.args;
			int argsLen=argsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(argsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				string argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.Append(argsI);
				writer.sb.Append(':');
				writer.sb.Append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("logTime");
		writer.sb.Append(':');
		writer.sb.Append(this.logTime);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.args=null;
		this.logTime=0L;
	}
	
}
