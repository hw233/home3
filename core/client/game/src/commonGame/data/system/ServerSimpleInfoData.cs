using ShineEngine;

/// <summary>
/// 中心服简版连接数据(generated by shine)
/// </summary>
public class ServerSimpleInfoData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ServerSimpleInfo;
	
	/// <summary>
	/// ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 服务器地址
	/// </summary>
	public string serverHost;
	
	/// <summary>
	/// mysql地址
	/// </summary>
	public string mysql;
	
	/// <summary>
	/// 服务器端口
	/// </summary>
	public int serverPort;
	
	public ServerSimpleInfoData()
	{
		_dataID=BaseDataType.ServerSimpleInfo;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ServerSimpleInfoData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.serverHost=stream.readUTF();
		
		this.serverPort=stream.readInt();
		
		this.mysql=stream.readUTF();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		stream.writeUTF(this.serverHost);
		
		stream.writeInt(this.serverPort);
		
		stream.writeUTF(this.mysql);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ServerSimpleInfoData))
			return;
		
		ServerSimpleInfoData mData=(ServerSimpleInfoData)data;
		
		this.id=mData.id;
		this.serverHost=mData.serverHost;
		this.serverPort=mData.serverPort;
		this.mysql=mData.mysql;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ServerSimpleInfoData))
			return;
		
		ServerSimpleInfoData mData=(ServerSimpleInfoData)data;
		
		this.id=mData.id;
		
		this.serverHost=mData.serverHost;
		
		this.serverPort=mData.serverPort;
		
		this.mysql=mData.mysql;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ServerSimpleInfoData mData=(ServerSimpleInfoData)data;
		if(this.id!=mData.id)
			return false;
		
		if(this.serverHost!=mData.serverHost)
			return false;
		
		if(this.serverPort!=mData.serverPort)
			return false;
		
		if(this.mysql!=mData.mysql)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("serverHost");
		writer.sb.Append(':');
		writer.sb.Append(this.serverHost);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("serverPort");
		writer.sb.Append(':');
		writer.sb.Append(this.serverPort);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("mysql");
		writer.sb.Append(':');
		writer.sb.Append(this.mysql);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.serverHost=stream.readUTF();
		
		this.serverPort=stream.readInt();
		
		this.mysql=stream.readUTF();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.serverHost);
		
		stream.writeInt(this.serverPort);
		
		stream.writeUTF(this.mysql);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.serverHost="";
		this.serverPort=0;
		this.mysql="";
	}
	
}
