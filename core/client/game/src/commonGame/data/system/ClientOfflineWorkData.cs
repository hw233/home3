using ShineEngine;

/// <summary>
/// 客户端离线事务数据(generated by shine)
/// </summary>
public class ClientOfflineWorkData:BaseData
{
	/// <summary>
	/// 时间戳
	/// </summary>
	public long workTime;
	
	/// <summary>
	/// 序号
	/// </summary>
	public int workIndex;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.ClientOfflineWork;
	
	public ClientOfflineWorkData()
	{
		_dataID=BaseDataType.ClientOfflineWork;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ClientOfflineWorkData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.workIndex=stream.readInt();
		
		this.workTime=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.workIndex);
		
		stream.writeLong(this.workTime);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.workIndex=stream.readInt();
		
		this.workTime=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.workIndex);
		
		stream.writeLong(this.workTime);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ClientOfflineWorkData))
			return;
		
		ClientOfflineWorkData mData=(ClientOfflineWorkData)data;
		
		this.workIndex=mData.workIndex;
		this.workTime=mData.workTime;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ClientOfflineWorkData))
			return;
		
		ClientOfflineWorkData mData=(ClientOfflineWorkData)data;
		
		this.workIndex=mData.workIndex;
		
		this.workTime=mData.workTime;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ClientOfflineWorkData mData=(ClientOfflineWorkData)data;
		if(this.workIndex!=mData.workIndex)
			return false;
		
		if(this.workTime!=mData.workTime)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("workIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.workIndex);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("workTime");
		writer.sb.Append(':');
		writer.sb.Append(this.workTime);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.workIndex=0;
		this.workTime=0L;
	}
	
}
