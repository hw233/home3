using ShineEngine;

/// <summary>
/// 简版游戏服信息数据(generated by shine)
/// </summary>
public class GameServerSimpleInfoData:ServerSimpleInfoData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.GameServerSimpleInfo;
	
	/// <summary>
	/// 是否必须
	/// </summary>
	public bool isNecessary;
	
	/// <summary>
	/// 是否辅助服(跨服)
	/// </summary>
	public bool isAssist;
	
	/// <summary>
	/// 所属国家id
	/// </summary>
	public int countryID;
	
	/// <summary>
	/// 承载的区服列表
	/// </summary>
	public IntList areaIDList;
	
	public GameServerSimpleInfoData()
	{
		_dataID=BaseDataType.GameServerSimpleInfo;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "GameServerSimpleInfoData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.isAssist=stream.readBoolean();
		
		this.isNecessary=stream.readBoolean();
		
		int areaIDListLen=stream.readLen();
		if(this.areaIDList!=null)
		{
			this.areaIDList.clear();
			this.areaIDList.ensureCapacity(areaIDListLen);
		}
		else
		{
			this.areaIDList=new IntList();
		}
		
		IntList areaIDListT=this.areaIDList;
		for(int areaIDListI=areaIDListLen-1;areaIDListI>=0;--areaIDListI)
		{
			int areaIDListV;
			areaIDListV=stream.readInt();
			
			areaIDListT.add(areaIDListV);
		}
		
		this.countryID=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeBoolean(this.isAssist);
		
		stream.writeBoolean(this.isNecessary);
		
		if(this.areaIDList!=null)
		{
			stream.writeLen(this.areaIDList.size());
			if(!this.areaIDList.isEmpty())
			{
				int[] areaIDListVValues=this.areaIDList.getValues();
				for(int areaIDListVI=0,areaIDListVLen=this.areaIDList.length();areaIDListVI<areaIDListVLen;++areaIDListVI)
				{
					int areaIDListV=areaIDListVValues[areaIDListVI];
					stream.writeInt(areaIDListV);
					
				}
			}
		}
		else
		{
			nullObjError("areaIDList");
		}
		
		stream.writeInt(this.countryID);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is GameServerSimpleInfoData))
			return;
		
		GameServerSimpleInfoData mData=(GameServerSimpleInfoData)data;
		
		this.isAssist=mData.isAssist;
		this.isNecessary=mData.isNecessary;
		this.areaIDList=mData.areaIDList;
		this.countryID=mData.countryID;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is GameServerSimpleInfoData))
			return;
		
		GameServerSimpleInfoData mData=(GameServerSimpleInfoData)data;
		
		this.isAssist=mData.isAssist;
		
		this.isNecessary=mData.isNecessary;
		
		if(mData.areaIDList!=null)
		{
			if(this.areaIDList!=null)
			{
				this.areaIDList.clear();
				this.areaIDList.ensureCapacity(mData.areaIDList.size());
			}
			else
			{
				this.areaIDList=new IntList();
			}
			
			IntList areaIDListT=this.areaIDList;
			if(!mData.areaIDList.isEmpty())
			{
				int[] areaIDListVValues=mData.areaIDList.getValues();
				for(int areaIDListVI=0,areaIDListVLen=mData.areaIDList.length();areaIDListVI<areaIDListVLen;++areaIDListVI)
				{
					int areaIDListV=areaIDListVValues[areaIDListVI];
					int areaIDListU;
					areaIDListU=areaIDListV;
					
					areaIDListT.add(areaIDListU);
				}
			}
		}
		else
		{
			this.areaIDList=null;
			nullObjError("areaIDList");
		}
		
		this.countryID=mData.countryID;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		GameServerSimpleInfoData mData=(GameServerSimpleInfoData)data;
		if(this.isAssist!=mData.isAssist)
			return false;
		
		if(this.isNecessary!=mData.isNecessary)
			return false;
		
		if(mData.areaIDList!=null)
		{
			if(this.areaIDList==null)
				return false;
			if(this.areaIDList.size()!=mData.areaIDList.size())
				return false;
			IntList areaIDListT=this.areaIDList;
			IntList areaIDListR=mData.areaIDList;
			int areaIDListLen=areaIDListT.size();
			for(int areaIDListI=0;areaIDListI<areaIDListLen;++areaIDListI)
			{
				int areaIDListU=areaIDListT.get(areaIDListI);
				int areaIDListV=areaIDListR.get(areaIDListI);
				if(areaIDListU!=areaIDListV)
					return false;
				
			}
		}
		else
		{
			if(this.areaIDList!=null)
				return false;
		}
		
		if(this.countryID!=mData.countryID)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("isAssist");
		writer.sb.Append(':');
		writer.sb.Append(this.isAssist);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isNecessary");
		writer.sb.Append(':');
		writer.sb.Append(this.isNecessary);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("areaIDList");
		writer.sb.Append(':');
		writer.sb.Append("List<int>");
		if(this.areaIDList!=null)
		{
			IntList areaIDListT=this.areaIDList;
			int areaIDListLen=areaIDListT.size();
			writer.sb.Append('(');
			writer.sb.Append(areaIDListLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int areaIDListI=0;areaIDListI<areaIDListLen;++areaIDListI)
			{
				int areaIDListV=areaIDListT.get(areaIDListI);
				writer.writeTabs();
				writer.sb.Append(areaIDListI);
				writer.sb.Append(':');
				writer.sb.Append(areaIDListV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("countryID");
		writer.sb.Append(':');
		writer.sb.Append(this.countryID);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
		this.areaIDList=new IntList();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.isAssist=stream.readBoolean();
		
		this.isNecessary=stream.readBoolean();
		
		int areaIDListLen=stream.readLen();
		if(this.areaIDList!=null)
		{
			this.areaIDList.clear();
			this.areaIDList.ensureCapacity(areaIDListLen);
		}
		else
		{
			this.areaIDList=new IntList();
		}
		
		IntList areaIDListT=this.areaIDList;
		for(int areaIDListI=areaIDListLen-1;areaIDListI>=0;--areaIDListI)
		{
			int areaIDListV;
			areaIDListV=stream.readInt();
			
			areaIDListT.add(areaIDListV);
		}
		
		this.countryID=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeBoolean(this.isAssist);
		
		stream.writeBoolean(this.isNecessary);
		
		if(this.areaIDList!=null)
		{
			stream.writeLen(this.areaIDList.size());
			if(!this.areaIDList.isEmpty())
			{
				int[] areaIDListVValues=this.areaIDList.getValues();
				for(int areaIDListVI=0,areaIDListVLen=this.areaIDList.length();areaIDListVI<areaIDListVLen;++areaIDListVI)
				{
					int areaIDListV=areaIDListVValues[areaIDListVI];
					stream.writeInt(areaIDListV);
					
				}
			}
		}
		else
		{
			nullObjError("areaIDList");
		}
		
		stream.writeInt(this.countryID);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.isAssist=false;
		this.isNecessary=false;
		this.areaIDList=null;
		this.countryID=0;
	}
	
}
