using ShineEngine;

/// <summary>
/// 角色事务完成数据(generated by shine)
/// </summary>
public class PlayerWorkCompleteData:WorkCompleteData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.PlayerWorkComplete;
	
	/// <summary>
	/// 接受者playerID
	/// </summary>
	public long receivePlayerID;
	
	public PlayerWorkCompleteData()
	{
		_dataID=BaseDataType.PlayerWorkComplete;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PlayerWorkCompleteData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.receivePlayerID=stream.readLong();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeLong(this.receivePlayerID);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.receivePlayerID=stream.readLong();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeLong(this.receivePlayerID);
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		base.toShadowCopy(data);
		
		if(!(data is PlayerWorkCompleteData))
			return;
		
		PlayerWorkCompleteData mData=(PlayerWorkCompleteData)data;
		
		this.receivePlayerID=mData.receivePlayerID;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		base.toCopy(data);
		
		if(!(data is PlayerWorkCompleteData))
			return;
		
		PlayerWorkCompleteData mData=(PlayerWorkCompleteData)data;
		
		this.receivePlayerID=mData.receivePlayerID;
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		if(!base.toDataEquals(data))
			return false;
		
		PlayerWorkCompleteData mData=(PlayerWorkCompleteData)data;
		if(this.receivePlayerID!=mData.receivePlayerID)
			return false;
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("receivePlayerID");
		writer.sb.Append(':');
		writer.sb.Append(this.receivePlayerID);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		base.initDefault();
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.receivePlayerID=0L;
	}
	
}
