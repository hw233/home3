using ShineEngine;

/// <summary>
/// 成就数据(generated by shine)
/// </summary>
public class AchievementData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=BaseDataType.Achievement;
	
	/// <summary>
	/// 成就ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 任务目标数据
	/// </summary>
	public TaskData task;
	
	public AchievementData()
	{
		_dataID=BaseDataType.Achievement;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "AchievementData";
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.id=stream.readInt();
		
		this.task=(TaskData)stream.readDataSimpleNotNull();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		stream.writeInt(this.id);
		
		if(this.task!=null)
		{
			stream.writeDataSimpleNotNull(this.task);
		}
		else
		{
			nullObjError("task");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is AchievementData))
			return;
		
		AchievementData mData=(AchievementData)data;
		
		this.id=mData.id;
		this.task=mData.task;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is AchievementData))
			return;
		
		AchievementData mData=(AchievementData)data;
		
		this.id=mData.id;
		
		if(mData.task!=null)
		{
			this.task=(TaskData)mData.task.clone();
		}
		else
		{
			this.task=null;
			nullObjError("task");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		AchievementData mData=(AchievementData)data;
		if(this.id!=mData.id)
			return false;
		
		if(mData.task!=null)
		{
			if(this.task==null)
				return false;
			if(!this.task.dataEquals(mData.task))
				return false;
		}
		else
		{
			if(this.task!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("task");
		writer.sb.Append(':');
		if(this.task!=null)
		{
			this.task.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("TaskData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.task=new TaskData();
		this.task.initDefault();
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		BaseData taskT=stream.readDataFullNotNull();
		if(taskT!=null)
		{
			if(taskT is TaskData)
			{
				this.task=(TaskData)taskT;
			}
			else
			{
				this.task=new TaskData();
				if(!(taskT.GetType().IsAssignableFrom(typeof(TaskData))))
				{
					stream.throwTypeReadError(typeof(TaskData),taskT.GetType());
				}
				this.task.shadowCopy(taskT);
			}
		}
		else
		{
			this.task=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		stream.writeInt(this.id);
		
		if(this.task!=null)
		{
			stream.writeDataFullNotNull(this.task);
		}
		else
		{
			nullObjError("task");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.id=0;
		this.task=null;
	}
	
	public override void clear()
	{
		task=null;
	}
	
}
