using ShineEngine;
using System;

/// <summary>
/// 全局配置表(generated by shine)
/// </summary>
public class Global
{
	/// <summary>
	/// 每个账号一个区服可拥有的角色数目(合服不影响每个被合区服的拥有角色数目)
	/// </summary>
	public static int ownPlayerNum;
	
	/// <summary>
	/// 角色名字上限数目(机器字)
	/// </summary>
	public static int playerNameLength;
	
	/// <summary>
	/// 角色名字是否使用区服ID作为前缀,如(s1.张三)
	/// </summary>
	public static bool isNameUseAreaIDAsFront;
	
	/// <summary>
	/// 角色名字是否可以重名
	/// </summary>
	public static bool canPlayerNameRepeat;
	
	/// <summary>
	/// 客户端离线事务，每日可修改时间的次数
	/// </summary>
	public static int clientOfflineWorkTimeChangeDailyNum;
	
	/// <summary>
	/// 显示网络延迟圈圈最大超时时间(ms)
	/// </summary>
	public static int showNetDelayMaxTime;
	
	/// <summary>
	/// 显示网络延迟圈圈最小间隔(ms)
	/// </summary>
	public static int showNetDelayMinTime;
	
	/// <summary>
	/// 激活码长度
	/// </summary>
	public static int activationCodeLength;
	
	/// <summary>
	/// 激活码是否使用批次(每批次每个玩家只能用一次)
	/// </summary>
	public static bool activationCodeUseBatch;
	
	/// <summary>
	/// 游戏信息日志保留时间(玩家自身)(day)
	/// </summary>
	public static int infoLogKeepTime;
	
	/// <summary>
	/// 游戏信息日志保留数目(玩家自身)
	/// </summary>
	public static int infoLogKeepNum;
	
	/// <summary>
	/// 翻页显示插件每页CD(s)
	/// </summary>
	public static int pageToolShowCD;
	
	/// <summary>
	/// 大Float数字每段位数(3为千,4为万)
	/// </summary>
	public static int bigFloatWei;
	
	/// <summary>
	/// 坐标推送缩放比率
	/// </summary>
	public static float posSendScale;
	
	/// <summary>
	/// 朝向推送缩放比率
	/// </summary>
	public static float directionSendScale;
	
	/// <summary>
	/// 保持当前属性百分比在上限改变前(否则就是保持当前值不变)
	/// </summary>
	public static bool keepCurrentPercentAtMaxChange;
	
	/// <summary>
	/// 单位转身XY和最小值(小于此值不转身)
	/// </summary>
	public static float unitTurnXYSumMin;
	
	/// <summary>
	/// 单位移动XY和的最大允许误差(超过此值即拉回)
	/// </summary>
	public static float unitMovePosMaxDeviation;
	
	/// <summary>
	/// 距离验证允许误差
	/// </summary>
	public static float distanceCheckDeviation;
	
	/// <summary>
	/// 移动速度最小值
	/// </summary>
	public static int moveSpeedMin;
	
	/// <summary>
	/// 移动速度最大值
	/// </summary>
	public static int moveSpeedMax;
	
	/// <summary>
	/// 攻击速度最小值
	/// </summary>
	public static int attackSpeedMin;
	
	/// <summary>
	/// 攻击速度最大值
	/// </summary>
	public static int attackSpeedMax;
	
	/// <summary>
	/// 施法速度最小值
	/// </summary>
	public static int castSpeedMin;
	
	/// <summary>
	/// 施法速度最大值
	/// </summary>
	public static int castSpeedMax;
	
	/// <summary>
	/// 使用移动速度比率(使用值=数值*比率)(每秒多少米)
	/// </summary>
	public static float useMoveSpeedRatio;
	
	/// <summary>
	/// 命中公式参数0(基础命中率)
	/// </summary>
	public static float hitRateArg0;
	
	/// <summary>
	/// 暴击公式参数0(基础暴击率)
	/// </summary>
	public static float critArg0;
	
	/// <summary>
	/// 暴击默认伤害比率
	/// </summary>
	public static float critDamageBaseRatio;
	
	/// <summary>
	/// 子弹最长保留时间(s)
	/// </summary>
	public static int bulletMaxLastTime;
	
	/// <summary>
	/// 场景保留时间(s)
	/// </summary>
	public static int sceneKeepTime;
	
	/// <summary>
	/// 攻击范围背向延伸距离(米)
	/// </summary>
	public static float attackScopeBackLength;
	
	/// <summary>
	/// 攻击范围默认攻击高度(米)
	/// </summary>
	public static float attackScopeDefaultHeight;
	
	/// <summary>
	/// 默认显示帧率
	/// </summary>
	public static float defaultShowFps;
	
	/// <summary>
	/// 帧同步缓存帧数
	/// </summary>
	public static int frameSyncCacheFrames;
	
	/// <summary>
	/// 徘徊等待时间最小值(s)
	/// </summary>
	public static int wanderWaitTimeMin;
	
	/// <summary>
	/// 徘徊等待时间最大值(s)
	/// </summary>
	public static int wanderWaitTimeMax;
	
	/// <summary>
	/// 徘徊移动半径(米)
	/// </summary>
	public static float wanderMoveRadius;
	
	/// <summary>
	/// 阻止网络延迟时间(ms)
	/// </summary>
	public static int preventNetDelayTime;
	
	/// <summary>
	/// 场景分线数目(仅在sceneLinePlayerLimitNum为0时有意义)
	/// </summary>
	public static int sceneLineNum;
	
	/// <summary>
	/// 客户端移动消息发送最短间隔(ms)
	/// </summary>
	public static int clientMoveSendMinDelay;
	
	/// <summary>
	/// 朝向移动预测最短距离(米)
	/// </summary>
	public static float moveDirForecastMinDistance;
	
	/// <summary>
	/// 朝向移动预测时间(ms)
	/// </summary>
	public static int moveDirForecastTime;
	
	/// <summary>
	/// 朝向移动预测发送消息间隔(ms)
	/// </summary>
	public static int moveDirSendDelay;
	
	/// <summary>
	/// 地图阻挡尺寸(米)
	/// </summary>
	public static float mapBlockSize;
	
	/// <summary>
	/// 怪物退回时每秒回血千分比
	/// </summary>
	public static int monsterBackAddHPPercent;
	
	/// <summary>
	/// 地图SamplePosition半径(米)
	/// </summary>
	public static float mapSamplePositionRadius;
	
	/// <summary>
	/// 光环buff更新时间(ms)
	/// </summary>
	public static int ringLightBuffRefreshTime;
	
	/// <summary>
	/// 光环buff单次持续时间(ms)
	/// </summary>
	public static int ringLightBuffLastTime;
	
	/// <summary>
	/// 唤醒同伴间隔时间(ms)
	/// </summary>
	public static int wakeUpCompanionDelayTime;
	
	/// <summary>
	/// 战斗状态单次持续时间(ms)
	/// </summary>
	public static int fightStateOnceLastTime;
	
	/// <summary>
	/// 出生主城ID
	/// </summary>
	public static int bornTownID;
	
	/// <summary>
	/// 场景分线角色限制数目(当此值大于0时,视为启用按人数分线策略,并且sceenLineNum值无效)
	/// </summary>
	public static int sceneLinePlayerLimitNum;
	
	/// <summary>
	/// 单位AI受击判定最短间隔(ms)
	/// </summary>
	public static int unitBeAttackDelay;
	
	/// <summary>
	/// 单位切换基础成本
	/// </summary>
	public static float unitSwitchFixedCost;
	
	/// <summary>
	/// 单位切换基础距离
	/// </summary>
	public static float unitSwitchBaseDistance;
	
	/// <summary>
	/// 单位切换距离成本系数
	/// </summary>
	public static float unitSwitchDistanceCost;
	
	/// <summary>
	/// 单位切换仇恨成本系数
	/// </summary>
	public static float unitSwitchHateCost;
	
	/// <summary>
	/// 单位仇恨伤害千分比系数
	/// </summary>
	public static float unitHateDamagePercentRatio;
	
	/// <summary>
	/// 出生主城位置ID
	/// </summary>
	public static int bornTownPosID;
	
	/// <summary>
	/// 匹配成功后最长等待确认时间(s)
	/// </summary>
	public static int matchWaitTime;
	
	/// <summary>
	/// 场景AOI灯塔尺寸
	/// </summary>
	public static float aoiTowerSize;
	
	/// <summary>
	/// aoi可视单位上限
	/// </summary>
	public static int aoiSeeMax;
	
	/// <summary>
	/// 拾取范围半径(米)
	/// </summary>
	public static float pickUpRadius;
	
	/// <summary>
	/// 自增属性计算间隔(ms)
	/// </summary>
	public static int increaseAttributeDelay;
	
	/// <summary>
	/// 场景AOI灯塔延长尺寸(过渡区为2倍 该值)
	/// </summary>
	public static float aoiTowerExpandSize;
	
	/// <summary>
	/// 拾取范围半径平方(米)
	/// </summary>
	public static float pickUpRadiusSq;
	
	/// <summary>
	/// 摄像机最近距离(与目标距离)
	/// </summary>
	public static float cameraMinDistance;
	
	/// <summary>
	/// 摄像机最长距离(与目标距离)
	/// </summary>
	public static float cameraMaxDistance;
	
	/// <summary>
	/// 摄像机2.5D视角(角度)
	/// </summary>
	public static float camera25DAngle;
	
	/// <summary>
	/// 摄像机最小视角(角度)
	/// </summary>
	public static float cameraMinAxisXAngle;
	
	/// <summary>
	/// 摄像机大小视角(角度)
	/// </summary>
	public static float cameraMaxAxisXAngle;
	
	/// <summary>
	/// 摄像机缓动时间(s)
	/// </summary>
	public static float cameraTweenTime;
	
	/// <summary>
	/// 摄像机鼠标滚轮缩放速度
	/// </summary>
	public static float cameraWheelSpeed;
	
	/// <summary>
	/// 摄像机默认距离
	/// </summary>
	public static float cameraDefaultDistance;
	
	/// <summary>
	/// 摄像机X轴旋转速度
	/// </summary>
	public static float cameraRotateSpeedX;
	
	/// <summary>
	/// 摄像机Y轴旋转速度
	/// </summary>
	public static float cameraRotateSpeedY;
	
	/// <summary>
	/// 摄像机触摸缩放速度
	/// </summary>
	public static float cameraScaleSpeed;
	
	/// <summary>
	/// 等级上限
	/// </summary>
	public static int levelMax;
	
	/// <summary>
	/// 主背包格子数(初始)
	/// </summary>
	public static int mainBagGridNum;
	
	/// <summary>
	/// 邮件每页显示数目
	/// </summary>
	public static int mailPageEachShowNum;
	
	/// <summary>
	/// 邮件最多保存数目
	/// </summary>
	public static int mailSaveMaxNum;
	
	/// <summary>
	/// 邮件最长保存时间(天)
	/// </summary>
	public static int mailSaveMaxTime;
	
	/// <summary>
	/// 玩家发送的邮件ID
	/// </summary>
	public static int playerMailID;
	
	/// <summary>
	/// 任务可视等级差
	/// </summary>
	public static int questCanSeeLevelD;
	
	/// <summary>
	/// 好友功能启用双向好友(否则单向)
	/// </summary>
	public static bool useOvonicFriend;
	
	/// <summary>
	/// 任务配置变更版本号
	/// </summary>
	public static int questConfigChangeVersion;
	
	/// <summary>
	/// 好友上限数目(0为无上限)
	/// </summary>
	public static int friendMaxNum;
	
	/// <summary>
	/// 好友黑名单上限数目(0为无上限)
	/// </summary>
	public static int friendBlackListMaxNum;
	
	/// <summary>
	/// 申请添加好友上限数目(0为无上限)
	/// </summary>
	public static int applyAddFriendMaxNum;
	
	/// <summary>
	/// 工会的玩家群id(<=0则为无工会)
	/// </summary>
	public static int unionRoleGroupID;
	
	/// <summary>
	/// 组队的玩家群id(<=0则为无组队功能)
	/// </summary>
	public static int teamRoleGroupID;
	
	/// <summary>
	/// 组队共享半径(米)(0为无限)
	/// </summary>
	public static float teamShareRadius;
	
	/// <summary>
	/// 客户端随机种子数目
	/// </summary>
	public static int clientRandomSeedNum;
	
	/// <summary>
	/// 好友申请最长保存时间(天)
	/// </summary>
	public static int friendApplySaveMaxTime;
	
	/// <summary>
	/// 大float位值
	/// </summary>
	public static double bigFloatWeiValue;
	
	/// <summary>
	/// 大float剩余位值
	/// </summary>
	public static double bigFloatWeiLastValue;
	
	/// <summary>
	/// 大float最大rank差值
	/// </summary>
	public static int bigFloatRankMaxD;
	
	/// <summary>
	/// 伤害值是否使用实际伤害值
	/// </summary>
	public static bool damageValueUseRealDamage;
	
	/// <summary>
	/// 宠物同一id是否唯一
	/// </summary>
	public static bool isPetUnique;
	
	/// <summary>
	/// 宠物是否需要装备功能
	/// </summary>
	public static bool isPetNeedEquip;
	
	/// <summary>
	/// 从流读取
	/// </summary>
	public static void readFromData(GlobalReadData data)
	{
		ownPlayerNum=data.ownPlayerNum;
		playerNameLength=data.playerNameLength;
		isNameUseAreaIDAsFront=data.isNameUseAreaIDAsFront;
		canPlayerNameRepeat=data.canPlayerNameRepeat;
		clientOfflineWorkTimeChangeDailyNum=data.clientOfflineWorkTimeChangeDailyNum;
		showNetDelayMinTime=data.showNetDelayMinTime;
		showNetDelayMaxTime=data.showNetDelayMaxTime;
		activationCodeLength=data.activationCodeLength;
		activationCodeUseBatch=data.activationCodeUseBatch;
		infoLogKeepTime=data.infoLogKeepTime;
		infoLogKeepNum=data.infoLogKeepNum;
		clientRandomSeedNum=data.clientRandomSeedNum;
		pageToolShowCD=data.pageToolShowCD;
		bigFloatWei=data.bigFloatWei;
		posSendScale=data.posSendScale;
		directionSendScale=data.directionSendScale;
		keepCurrentPercentAtMaxChange=data.keepCurrentPercentAtMaxChange;
		unitTurnXYSumMin=data.unitTurnXYSumMin;
		unitMovePosMaxDeviation=data.unitMovePosMaxDeviation;
		distanceCheckDeviation=data.distanceCheckDeviation;
		moveSpeedMin=data.moveSpeedMin;
		moveSpeedMax=data.moveSpeedMax;
		attackSpeedMin=data.attackSpeedMin;
		attackSpeedMax=data.attackSpeedMax;
		castSpeedMin=data.castSpeedMin;
		castSpeedMax=data.castSpeedMax;
		useMoveSpeedRatio=data.useMoveSpeedRatio;
		hitRateArg0=data.hitRateArg0;
		critArg0=data.critArg0;
		critDamageBaseRatio=data.critDamageBaseRatio;
		bulletMaxLastTime=data.bulletMaxLastTime;
		sceneKeepTime=data.sceneKeepTime;
		attackScopeBackLength=data.attackScopeBackLength;
		attackScopeDefaultHeight=data.attackScopeDefaultHeight;
		defaultShowFps=data.defaultShowFps;
		frameSyncCacheFrames=data.frameSyncCacheFrames;
		wanderWaitTimeMin=data.wanderWaitTimeMin;
		wanderWaitTimeMax=data.wanderWaitTimeMax;
		wanderMoveRadius=data.wanderMoveRadius;
		preventNetDelayTime=data.preventNetDelayTime;
		increaseAttributeDelay=data.increaseAttributeDelay;
		clientMoveSendMinDelay=data.clientMoveSendMinDelay;
		moveDirSendDelay=data.moveDirSendDelay;
		moveDirForecastTime=data.moveDirForecastTime;
		moveDirForecastMinDistance=data.moveDirForecastMinDistance;
		mapBlockSize=data.mapBlockSize;
		mapSamplePositionRadius=data.mapSamplePositionRadius;
		monsterBackAddHPPercent=data.monsterBackAddHPPercent;
		ringLightBuffRefreshTime=data.ringLightBuffRefreshTime;
		ringLightBuffLastTime=data.ringLightBuffLastTime;
		fightStateOnceLastTime=data.fightStateOnceLastTime;
		wakeUpCompanionDelayTime=data.wakeUpCompanionDelayTime;
		damageValueUseRealDamage=data.damageValueUseRealDamage;
		unitBeAttackDelay=data.unitBeAttackDelay;
		unitHateDamagePercentRatio=data.unitHateDamagePercentRatio;
		unitSwitchHateCost=data.unitSwitchHateCost;
		unitSwitchDistanceCost=data.unitSwitchDistanceCost;
		unitSwitchBaseDistance=data.unitSwitchBaseDistance;
		unitSwitchFixedCost=data.unitSwitchFixedCost;
		sceneLineNum=data.sceneLineNum;
		sceneLinePlayerLimitNum=data.sceneLinePlayerLimitNum;
		bornTownID=data.bornTownID;
		bornTownPosID=data.bornTownPosID;
		matchWaitTime=data.matchWaitTime;
		aoiTowerSize=data.aoiTowerSize;
		aoiTowerExpandSize=data.aoiTowerExpandSize;
		aoiSeeMax=data.aoiSeeMax;
		pickUpRadius=data.pickUpRadius;
		cameraMinDistance=data.cameraMinDistance;
		cameraMaxDistance=data.cameraMaxDistance;
		camera25DAngle=data.camera25DAngle;
		cameraMinAxisXAngle=data.cameraMinAxisXAngle;
		cameraMaxAxisXAngle=data.cameraMaxAxisXAngle;
		cameraTweenTime=data.cameraTweenTime;
		cameraWheelSpeed=data.cameraWheelSpeed;
		cameraDefaultDistance=data.cameraDefaultDistance;
		cameraRotateSpeedX=data.cameraRotateSpeedX;
		cameraRotateSpeedY=data.cameraRotateSpeedY;
		cameraScaleSpeed=data.cameraScaleSpeed;
		levelMax=data.levelMax;
		mainBagGridNum=data.mainBagGridNum;
		mailPageEachShowNum=data.mailPageEachShowNum;
		mailSaveMaxNum=data.mailSaveMaxNum;
		mailSaveMaxTime=data.mailSaveMaxTime;
		playerMailID=data.playerMailID;
		questCanSeeLevelD=data.questCanSeeLevelD;
		questConfigChangeVersion=data.questConfigChangeVersion;
		useOvonicFriend=data.useOvonicFriend;
		friendMaxNum=data.friendMaxNum;
		friendBlackListMaxNum=data.friendBlackListMaxNum;
		applyAddFriendMaxNum=data.applyAddFriendMaxNum;
		friendApplySaveMaxTime=data.friendApplySaveMaxTime;
		unionRoleGroupID=data.unionRoleGroupID;
		teamRoleGroupID=data.teamRoleGroupID;
		teamShareRadius=data.teamShareRadius;
		isPetUnique=data.isPetUnique;
		isPetNeedEquip=data.isPetNeedEquip;
	}
	
	public static void afterReadConfig()
	{
		bigFloatWeiValue=Math.Pow(10,bigFloatWei);
		bigFloatWeiLastValue=Math.Pow(10,9-bigFloatWei);//1个int
		bigFloatRankMaxD=300/bigFloatWei;//不用按308算

		pickUpRadiusSq=pickUpRadius * pickUpRadius;
	}
	
	/// <summary>
	/// 全部读取后
	/// </summary>
	public static void afterReadConfigAll()
	{
		if (Global.clientRandomSeedNum == 0)
		{
			Ctrl.throwError("Global.clientRandomSeedNum不能为0");
		}
	}
	
}
