using ShineEngine;
using System;

/// <summary>
/// (generated by shine)
/// </summary>
public class CenterResponseMaker:DataMaker
{
	public CenterResponseMaker()
	{
		offSet=CenterResponseType.off;
		list=new Func<BaseData>[CenterResponseType.count-offSet];
		list[CenterResponseType.FuncFromCenterS-offSet]=createFuncFromCenterSResponse;
		list[CenterResponseType.FuncMatchSuccessFromCenter-offSet]=createFuncMatchSuccessFromCenterResponse;
		list[CenterResponseType.FuncSendAcceptMatchFromCenter-offSet]=createFuncSendAcceptMatchFromCenterResponse;
		list[CenterResponseType.FuncSendReAddMatchFromCenter-offSet]=createFuncSendReAddMatchFromCenterResponse;
		list[CenterResponseType.SendCenterReceiptToClient-offSet]=createSendCenterReceiptToClientResponse;
		list[CenterResponseType.SendInfoCodeFromCenter-offSet]=createSendInfoCodeFromCenterResponse;
		list[CenterResponseType.SendInfoCodeWithArgsFromCenter-offSet]=createSendInfoCodeWithArgsFromCenterResponse;
	}
	
	private BaseData createFuncMatchSuccessFromCenterResponse()
	{
		return new FuncMatchSuccessFromCenterResponse();
	}
	
	private BaseData createFuncSendAcceptMatchFromCenterResponse()
	{
		return new FuncSendAcceptMatchFromCenterResponse();
	}
	
	private BaseData createSendInfoCodeFromCenterResponse()
	{
		return new SendInfoCodeFromCenterResponse();
	}
	
	private BaseData createFuncSendReAddMatchFromCenterResponse()
	{
		return new FuncSendReAddMatchFromCenterResponse();
	}
	
	private BaseData createFuncFromCenterSResponse()
	{
		return new FuncFromCenterSResponse();
	}
	
	private BaseData createSendInfoCodeWithArgsFromCenterResponse()
	{
		return new SendInfoCodeWithArgsFromCenterResponse();
	}
	
	private BaseData createSendCenterReceiptToClientResponse()
	{
		return new SendCenterReceiptToClientResponse();
	}
	
}
