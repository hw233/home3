using ShineEngine;

/// <summary>
/// 玩家数据主体(generated by shine)
/// </summary>
public class PlayerListData:BaseData
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=PlayerListDataType.Player;
	
	/// <summary>
	/// 系统
	/// </summary>
	public SystemPartData system;
	
	/// <summary>
	/// 通用功能
	/// </summary>
	public FuncPartData func;
	
	/// <summary>
	/// 活动
	/// </summary>
	public ActivityPartData activity;
	
	/// <summary>
	/// 玩家
	/// </summary>
	public RolePartData role;
	
	/// <summary>
	/// 场景
	/// </summary>
	public ScenePartData scene;
	
	/// <summary>
	/// 角色
	/// </summary>
	public CharacterPartData character;
	
	/// <summary>
	/// 社交
	/// </summary>
	public SocialPartData social;
	
	/// <summary>
	/// 背包
	/// </summary>
	public BagPartData bag;
	
	/// <summary>
	/// 邮件
	/// </summary>
	public MailPartData mail;
	
	/// <summary>
	/// 引导
	/// </summary>
	public GuidePartData guide;
	
	/// <summary>
	/// 任务
	/// </summary>
	public QuestPartData quest;
	
	/// <summary>
	/// 装备
	/// </summary>
	public EquipPartData equip;
	
	/// <summary>
	/// 好友
	/// </summary>
	public FriendPartData friend;
	
	/// <summary>
	/// 工会
	/// </summary>
	public UnionPartData union;
	
	/// <summary>
	/// 组队
	/// </summary>
	public TeamPartData team;
	
	/// <summary>
	/// 工会
	/// </summary>
	public UnionPartData Union;
	
	/// <summary>
	/// 成就
	/// </summary>
	public AchievementPartData achievement;
	
	/// <summary>
	/// 宠物
	/// </summary>
	public PetPartData pet;
	
	public PlayerListData()
	{
		_dataID=PlayerListDataType.Player;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PlayerListData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		BaseData systemT=stream.readDataFullNotNull();
		if(systemT!=null)
		{
			if(systemT is SystemPartData)
			{
				this.system=(SystemPartData)systemT;
			}
			else
			{
				this.system=new SystemPartData();
				if(!(systemT.GetType().IsAssignableFrom(typeof(SystemPartData))))
				{
					stream.throwTypeReadError(typeof(SystemPartData),systemT.GetType());
				}
				this.system.shadowCopy(systemT);
			}
		}
		else
		{
			this.system=null;
		}
		
		BaseData funcT=stream.readDataFullNotNull();
		if(funcT!=null)
		{
			if(funcT is FuncPartData)
			{
				this.func=(FuncPartData)funcT;
			}
			else
			{
				this.func=new FuncPartData();
				if(!(funcT.GetType().IsAssignableFrom(typeof(FuncPartData))))
				{
					stream.throwTypeReadError(typeof(FuncPartData),funcT.GetType());
				}
				this.func.shadowCopy(funcT);
			}
		}
		else
		{
			this.func=null;
		}
		
		BaseData activityT=stream.readDataFullNotNull();
		if(activityT!=null)
		{
			if(activityT is ActivityPartData)
			{
				this.activity=(ActivityPartData)activityT;
			}
			else
			{
				this.activity=new ActivityPartData();
				if(!(activityT.GetType().IsAssignableFrom(typeof(ActivityPartData))))
				{
					stream.throwTypeReadError(typeof(ActivityPartData),activityT.GetType());
				}
				this.activity.shadowCopy(activityT);
			}
		}
		else
		{
			this.activity=null;
		}
		
		BaseData roleT=stream.readDataFullNotNull();
		if(roleT!=null)
		{
			if(roleT is RolePartData)
			{
				this.role=(RolePartData)roleT;
			}
			else
			{
				this.role=new RolePartData();
				if(!(roleT.GetType().IsAssignableFrom(typeof(RolePartData))))
				{
					stream.throwTypeReadError(typeof(RolePartData),roleT.GetType());
				}
				this.role.shadowCopy(roleT);
			}
		}
		else
		{
			this.role=null;
		}
		
		BaseData sceneT=stream.readDataFullNotNull();
		if(sceneT!=null)
		{
			if(sceneT is ScenePartData)
			{
				this.scene=(ScenePartData)sceneT;
			}
			else
			{
				this.scene=new ScenePartData();
				if(!(sceneT.GetType().IsAssignableFrom(typeof(ScenePartData))))
				{
					stream.throwTypeReadError(typeof(ScenePartData),sceneT.GetType());
				}
				this.scene.shadowCopy(sceneT);
			}
		}
		else
		{
			this.scene=null;
		}
		
		BaseData characterT=stream.readDataFullNotNull();
		if(characterT!=null)
		{
			if(characterT is CharacterPartData)
			{
				this.character=(CharacterPartData)characterT;
			}
			else
			{
				this.character=new CharacterPartData();
				if(!(characterT.GetType().IsAssignableFrom(typeof(CharacterPartData))))
				{
					stream.throwTypeReadError(typeof(CharacterPartData),characterT.GetType());
				}
				this.character.shadowCopy(characterT);
			}
		}
		else
		{
			this.character=null;
		}
		
		BaseData socialT=stream.readDataFullNotNull();
		if(socialT!=null)
		{
			if(socialT is SocialPartData)
			{
				this.social=(SocialPartData)socialT;
			}
			else
			{
				this.social=new SocialPartData();
				if(!(socialT.GetType().IsAssignableFrom(typeof(SocialPartData))))
				{
					stream.throwTypeReadError(typeof(SocialPartData),socialT.GetType());
				}
				this.social.shadowCopy(socialT);
			}
		}
		else
		{
			this.social=null;
		}
		
		BaseData bagT=stream.readDataFullNotNull();
		if(bagT!=null)
		{
			if(bagT is BagPartData)
			{
				this.bag=(BagPartData)bagT;
			}
			else
			{
				this.bag=new BagPartData();
				if(!(bagT.GetType().IsAssignableFrom(typeof(BagPartData))))
				{
					stream.throwTypeReadError(typeof(BagPartData),bagT.GetType());
				}
				this.bag.shadowCopy(bagT);
			}
		}
		else
		{
			this.bag=null;
		}
		
		BaseData mailT=stream.readDataFullNotNull();
		if(mailT!=null)
		{
			if(mailT is MailPartData)
			{
				this.mail=(MailPartData)mailT;
			}
			else
			{
				this.mail=new MailPartData();
				if(!(mailT.GetType().IsAssignableFrom(typeof(MailPartData))))
				{
					stream.throwTypeReadError(typeof(MailPartData),mailT.GetType());
				}
				this.mail.shadowCopy(mailT);
			}
		}
		else
		{
			this.mail=null;
		}
		
		BaseData questT=stream.readDataFullNotNull();
		if(questT!=null)
		{
			if(questT is QuestPartData)
			{
				this.quest=(QuestPartData)questT;
			}
			else
			{
				this.quest=new QuestPartData();
				if(!(questT.GetType().IsAssignableFrom(typeof(QuestPartData))))
				{
					stream.throwTypeReadError(typeof(QuestPartData),questT.GetType());
				}
				this.quest.shadowCopy(questT);
			}
		}
		else
		{
			this.quest=null;
		}
		
		BaseData guideT=stream.readDataFullNotNull();
		if(guideT!=null)
		{
			if(guideT is GuidePartData)
			{
				this.guide=(GuidePartData)guideT;
			}
			else
			{
				this.guide=new GuidePartData();
				if(!(guideT.GetType().IsAssignableFrom(typeof(GuidePartData))))
				{
					stream.throwTypeReadError(typeof(GuidePartData),guideT.GetType());
				}
				this.guide.shadowCopy(guideT);
			}
		}
		else
		{
			this.guide=null;
		}
		
		BaseData friendT=stream.readDataFullNotNull();
		if(friendT!=null)
		{
			if(friendT is FriendPartData)
			{
				this.friend=(FriendPartData)friendT;
			}
			else
			{
				this.friend=new FriendPartData();
				if(!(friendT.GetType().IsAssignableFrom(typeof(FriendPartData))))
				{
					stream.throwTypeReadError(typeof(FriendPartData),friendT.GetType());
				}
				this.friend.shadowCopy(friendT);
			}
		}
		else
		{
			this.friend=null;
		}
		
		BaseData equipT=stream.readDataFullNotNull();
		if(equipT!=null)
		{
			if(equipT is EquipPartData)
			{
				this.equip=(EquipPartData)equipT;
			}
			else
			{
				this.equip=new EquipPartData();
				if(!(equipT.GetType().IsAssignableFrom(typeof(EquipPartData))))
				{
					stream.throwTypeReadError(typeof(EquipPartData),equipT.GetType());
				}
				this.equip.shadowCopy(equipT);
			}
		}
		else
		{
			this.equip=null;
		}
		
		BaseData teamT=stream.readDataFullNotNull();
		if(teamT!=null)
		{
			if(teamT is TeamPartData)
			{
				this.team=(TeamPartData)teamT;
			}
			else
			{
				this.team=new TeamPartData();
				if(!(teamT.GetType().IsAssignableFrom(typeof(TeamPartData))))
				{
					stream.throwTypeReadError(typeof(TeamPartData),teamT.GetType());
				}
				this.team.shadowCopy(teamT);
			}
		}
		else
		{
			this.team=null;
		}
		
		BaseData unionT=stream.readDataFullNotNull();
		if(unionT!=null)
		{
			if(unionT is UnionPartData)
			{
				this.union=(UnionPartData)unionT;
			}
			else
			{
				this.union=new UnionPartData();
				if(!(unionT.GetType().IsAssignableFrom(typeof(UnionPartData))))
				{
					stream.throwTypeReadError(typeof(UnionPartData),unionT.GetType());
				}
				this.union.shadowCopy(unionT);
			}
		}
		else
		{
			this.union=null;
		}
		
		BaseData achievementT=stream.readDataFullNotNull();
		if(achievementT!=null)
		{
			if(achievementT is AchievementPartData)
			{
				this.achievement=(AchievementPartData)achievementT;
			}
			else
			{
				this.achievement=new AchievementPartData();
				if(!(achievementT.GetType().IsAssignableFrom(typeof(AchievementPartData))))
				{
					stream.throwTypeReadError(typeof(AchievementPartData),achievementT.GetType());
				}
				this.achievement.shadowCopy(achievementT);
			}
		}
		else
		{
			this.achievement=null;
		}
		
		BaseData petT=stream.readDataFullNotNull();
		if(petT!=null)
		{
			if(petT is PetPartData)
			{
				this.pet=(PetPartData)petT;
			}
			else
			{
				this.pet=new PetPartData();
				if(!(petT.GetType().IsAssignableFrom(typeof(PetPartData))))
				{
					stream.throwTypeReadError(typeof(PetPartData),petT.GetType());
				}
				this.pet.shadowCopy(petT);
			}
		}
		else
		{
			this.pet=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.system!=null)
		{
			stream.writeDataFullNotNull(this.system);
		}
		else
		{
			nullObjError("system");
		}
		
		if(this.func!=null)
		{
			stream.writeDataFullNotNull(this.func);
		}
		else
		{
			nullObjError("func");
		}
		
		if(this.activity!=null)
		{
			stream.writeDataFullNotNull(this.activity);
		}
		else
		{
			nullObjError("activity");
		}
		
		if(this.role!=null)
		{
			stream.writeDataFullNotNull(this.role);
		}
		else
		{
			nullObjError("role");
		}
		
		if(this.scene!=null)
		{
			stream.writeDataFullNotNull(this.scene);
		}
		else
		{
			nullObjError("scene");
		}
		
		if(this.character!=null)
		{
			stream.writeDataFullNotNull(this.character);
		}
		else
		{
			nullObjError("character");
		}
		
		if(this.social!=null)
		{
			stream.writeDataFullNotNull(this.social);
		}
		else
		{
			nullObjError("social");
		}
		
		if(this.bag!=null)
		{
			stream.writeDataFullNotNull(this.bag);
		}
		else
		{
			nullObjError("bag");
		}
		
		if(this.mail!=null)
		{
			stream.writeDataFullNotNull(this.mail);
		}
		else
		{
			nullObjError("mail");
		}
		
		if(this.quest!=null)
		{
			stream.writeDataFullNotNull(this.quest);
		}
		else
		{
			nullObjError("quest");
		}
		
		if(this.guide!=null)
		{
			stream.writeDataFullNotNull(this.guide);
		}
		else
		{
			nullObjError("guide");
		}
		
		if(this.friend!=null)
		{
			stream.writeDataFullNotNull(this.friend);
		}
		else
		{
			nullObjError("friend");
		}
		
		if(this.equip!=null)
		{
			stream.writeDataFullNotNull(this.equip);
		}
		else
		{
			nullObjError("equip");
		}
		
		if(this.team!=null)
		{
			stream.writeDataFullNotNull(this.team);
		}
		else
		{
			nullObjError("team");
		}
		
		if(this.union!=null)
		{
			stream.writeDataFullNotNull(this.union);
		}
		else
		{
			nullObjError("union");
		}
		
		if(this.achievement!=null)
		{
			stream.writeDataFullNotNull(this.achievement);
		}
		else
		{
			nullObjError("achievement");
		}
		
		if(this.pet!=null)
		{
			stream.writeDataFullNotNull(this.pet);
		}
		else
		{
			nullObjError("pet");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		this.system=(SystemPartData)stream.readDataSimpleNotNull();
		
		this.func=(FuncPartData)stream.readDataSimpleNotNull();
		
		this.activity=(ActivityPartData)stream.readDataSimpleNotNull();
		
		this.role=(RolePartData)stream.readDataSimpleNotNull();
		
		this.scene=(ScenePartData)stream.readDataSimpleNotNull();
		
		this.character=(CharacterPartData)stream.readDataSimpleNotNull();
		
		this.social=(SocialPartData)stream.readDataSimpleNotNull();
		
		this.bag=(BagPartData)stream.readDataSimpleNotNull();
		
		this.mail=(MailPartData)stream.readDataSimpleNotNull();
		
		this.quest=(QuestPartData)stream.readDataSimpleNotNull();
		
		this.guide=(GuidePartData)stream.readDataSimpleNotNull();
		
		this.friend=(FriendPartData)stream.readDataSimpleNotNull();
		
		this.equip=(EquipPartData)stream.readDataSimpleNotNull();
		
		this.team=(TeamPartData)stream.readDataSimpleNotNull();
		
		this.union=(UnionPartData)stream.readDataSimpleNotNull();
		
		this.achievement=(AchievementPartData)stream.readDataSimpleNotNull();
		
		this.pet=(PetPartData)stream.readDataSimpleNotNull();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.system!=null)
		{
			stream.writeDataSimpleNotNull(this.system);
		}
		else
		{
			nullObjError("system");
		}
		
		if(this.func!=null)
		{
			stream.writeDataSimpleNotNull(this.func);
		}
		else
		{
			nullObjError("func");
		}
		
		if(this.activity!=null)
		{
			stream.writeDataSimpleNotNull(this.activity);
		}
		else
		{
			nullObjError("activity");
		}
		
		if(this.role!=null)
		{
			stream.writeDataSimpleNotNull(this.role);
		}
		else
		{
			nullObjError("role");
		}
		
		if(this.scene!=null)
		{
			stream.writeDataSimpleNotNull(this.scene);
		}
		else
		{
			nullObjError("scene");
		}
		
		if(this.character!=null)
		{
			stream.writeDataSimpleNotNull(this.character);
		}
		else
		{
			nullObjError("character");
		}
		
		if(this.social!=null)
		{
			stream.writeDataSimpleNotNull(this.social);
		}
		else
		{
			nullObjError("social");
		}
		
		if(this.bag!=null)
		{
			stream.writeDataSimpleNotNull(this.bag);
		}
		else
		{
			nullObjError("bag");
		}
		
		if(this.mail!=null)
		{
			stream.writeDataSimpleNotNull(this.mail);
		}
		else
		{
			nullObjError("mail");
		}
		
		if(this.quest!=null)
		{
			stream.writeDataSimpleNotNull(this.quest);
		}
		else
		{
			nullObjError("quest");
		}
		
		if(this.guide!=null)
		{
			stream.writeDataSimpleNotNull(this.guide);
		}
		else
		{
			nullObjError("guide");
		}
		
		if(this.friend!=null)
		{
			stream.writeDataSimpleNotNull(this.friend);
		}
		else
		{
			nullObjError("friend");
		}
		
		if(this.equip!=null)
		{
			stream.writeDataSimpleNotNull(this.equip);
		}
		else
		{
			nullObjError("equip");
		}
		
		if(this.team!=null)
		{
			stream.writeDataSimpleNotNull(this.team);
		}
		else
		{
			nullObjError("team");
		}
		
		if(this.union!=null)
		{
			stream.writeDataSimpleNotNull(this.union);
		}
		else
		{
			nullObjError("union");
		}
		
		if(this.achievement!=null)
		{
			stream.writeDataSimpleNotNull(this.achievement);
		}
		else
		{
			nullObjError("achievement");
		}
		
		if(this.pet!=null)
		{
			stream.writeDataSimpleNotNull(this.pet);
		}
		else
		{
			nullObjError("pet");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is PlayerListData))
			return;
		
		PlayerListData mData=(PlayerListData)data;
		
		this.system=mData.system;
		this.func=mData.func;
		this.activity=mData.activity;
		this.role=mData.role;
		this.scene=mData.scene;
		this.character=mData.character;
		this.social=mData.social;
		this.bag=mData.bag;
		this.mail=mData.mail;
		this.quest=mData.quest;
		this.guide=mData.guide;
		this.friend=mData.friend;
		this.equip=mData.equip;
		this.team=mData.team;
		this.union=mData.union;
		this.achievement=mData.achievement;
		this.pet=mData.pet;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is PlayerListData))
			return;
		
		PlayerListData mData=(PlayerListData)data;
		
		if(mData.system!=null)
		{
			this.system=(SystemPartData)mData.system.clone();
		}
		else
		{
			this.system=null;
			nullObjError("system");
		}
		
		if(mData.func!=null)
		{
			this.func=(FuncPartData)mData.func.clone();
		}
		else
		{
			this.func=null;
			nullObjError("func");
		}
		
		if(mData.activity!=null)
		{
			this.activity=(ActivityPartData)mData.activity.clone();
		}
		else
		{
			this.activity=null;
			nullObjError("activity");
		}
		
		if(mData.role!=null)
		{
			this.role=(RolePartData)mData.role.clone();
		}
		else
		{
			this.role=null;
			nullObjError("role");
		}
		
		if(mData.scene!=null)
		{
			this.scene=(ScenePartData)mData.scene.clone();
		}
		else
		{
			this.scene=null;
			nullObjError("scene");
		}
		
		if(mData.character!=null)
		{
			this.character=(CharacterPartData)mData.character.clone();
		}
		else
		{
			this.character=null;
			nullObjError("character");
		}
		
		if(mData.social!=null)
		{
			this.social=(SocialPartData)mData.social.clone();
		}
		else
		{
			this.social=null;
			nullObjError("social");
		}
		
		if(mData.bag!=null)
		{
			this.bag=(BagPartData)mData.bag.clone();
		}
		else
		{
			this.bag=null;
			nullObjError("bag");
		}
		
		if(mData.mail!=null)
		{
			this.mail=(MailPartData)mData.mail.clone();
		}
		else
		{
			this.mail=null;
			nullObjError("mail");
		}
		
		if(mData.quest!=null)
		{
			this.quest=(QuestPartData)mData.quest.clone();
		}
		else
		{
			this.quest=null;
			nullObjError("quest");
		}
		
		if(mData.guide!=null)
		{
			this.guide=(GuidePartData)mData.guide.clone();
		}
		else
		{
			this.guide=null;
			nullObjError("guide");
		}
		
		if(mData.friend!=null)
		{
			this.friend=(FriendPartData)mData.friend.clone();
		}
		else
		{
			this.friend=null;
			nullObjError("friend");
		}
		
		if(mData.equip!=null)
		{
			this.equip=(EquipPartData)mData.equip.clone();
		}
		else
		{
			this.equip=null;
			nullObjError("equip");
		}
		
		if(mData.team!=null)
		{
			this.team=(TeamPartData)mData.team.clone();
		}
		else
		{
			this.team=null;
			nullObjError("team");
		}
		
		if(mData.union!=null)
		{
			this.union=(UnionPartData)mData.union.clone();
		}
		else
		{
			this.union=null;
			nullObjError("union");
		}
		
		if(mData.achievement!=null)
		{
			this.achievement=(AchievementPartData)mData.achievement.clone();
		}
		else
		{
			this.achievement=null;
			nullObjError("achievement");
		}
		
		if(mData.pet!=null)
		{
			this.pet=(PetPartData)mData.pet.clone();
		}
		else
		{
			this.pet=null;
			nullObjError("pet");
		}
		
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		PlayerListData mData=(PlayerListData)data;
		if(mData.system!=null)
		{
			if(this.system==null)
				return false;
			if(!this.system.dataEquals(mData.system))
				return false;
		}
		else
		{
			if(this.system!=null)
				return false;
		}
		
		if(mData.func!=null)
		{
			if(this.func==null)
				return false;
			if(!this.func.dataEquals(mData.func))
				return false;
		}
		else
		{
			if(this.func!=null)
				return false;
		}
		
		if(mData.activity!=null)
		{
			if(this.activity==null)
				return false;
			if(!this.activity.dataEquals(mData.activity))
				return false;
		}
		else
		{
			if(this.activity!=null)
				return false;
		}
		
		if(mData.role!=null)
		{
			if(this.role==null)
				return false;
			if(!this.role.dataEquals(mData.role))
				return false;
		}
		else
		{
			if(this.role!=null)
				return false;
		}
		
		if(mData.scene!=null)
		{
			if(this.scene==null)
				return false;
			if(!this.scene.dataEquals(mData.scene))
				return false;
		}
		else
		{
			if(this.scene!=null)
				return false;
		}
		
		if(mData.character!=null)
		{
			if(this.character==null)
				return false;
			if(!this.character.dataEquals(mData.character))
				return false;
		}
		else
		{
			if(this.character!=null)
				return false;
		}
		
		if(mData.social!=null)
		{
			if(this.social==null)
				return false;
			if(!this.social.dataEquals(mData.social))
				return false;
		}
		else
		{
			if(this.social!=null)
				return false;
		}
		
		if(mData.bag!=null)
		{
			if(this.bag==null)
				return false;
			if(!this.bag.dataEquals(mData.bag))
				return false;
		}
		else
		{
			if(this.bag!=null)
				return false;
		}
		
		if(mData.mail!=null)
		{
			if(this.mail==null)
				return false;
			if(!this.mail.dataEquals(mData.mail))
				return false;
		}
		else
		{
			if(this.mail!=null)
				return false;
		}
		
		if(mData.quest!=null)
		{
			if(this.quest==null)
				return false;
			if(!this.quest.dataEquals(mData.quest))
				return false;
		}
		else
		{
			if(this.quest!=null)
				return false;
		}
		
		if(mData.guide!=null)
		{
			if(this.guide==null)
				return false;
			if(!this.guide.dataEquals(mData.guide))
				return false;
		}
		else
		{
			if(this.guide!=null)
				return false;
		}
		
		if(mData.friend!=null)
		{
			if(this.friend==null)
				return false;
			if(!this.friend.dataEquals(mData.friend))
				return false;
		}
		else
		{
			if(this.friend!=null)
				return false;
		}
		
		if(mData.equip!=null)
		{
			if(this.equip==null)
				return false;
			if(!this.equip.dataEquals(mData.equip))
				return false;
		}
		else
		{
			if(this.equip!=null)
				return false;
		}
		
		if(mData.team!=null)
		{
			if(this.team==null)
				return false;
			if(!this.team.dataEquals(mData.team))
				return false;
		}
		else
		{
			if(this.team!=null)
				return false;
		}
		
		if(mData.union!=null)
		{
			if(this.union==null)
				return false;
			if(!this.union.dataEquals(mData.union))
				return false;
		}
		else
		{
			if(this.union!=null)
				return false;
		}
		
		if(mData.achievement!=null)
		{
			if(this.achievement==null)
				return false;
			if(!this.achievement.dataEquals(mData.achievement))
				return false;
		}
		else
		{
			if(this.achievement!=null)
				return false;
		}
		
		if(mData.pet!=null)
		{
			if(this.pet==null)
				return false;
			if(!this.pet.dataEquals(mData.pet))
				return false;
		}
		else
		{
			if(this.pet!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("system");
		writer.sb.Append(':');
		if(this.system!=null)
		{
			this.system.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SystemPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("func");
		writer.sb.Append(':');
		if(this.func!=null)
		{
			this.func.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("FuncPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("activity");
		writer.sb.Append(':');
		if(this.activity!=null)
		{
			this.activity.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("ActivityPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("role");
		writer.sb.Append(':');
		if(this.role!=null)
		{
			this.role.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("RolePartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("scene");
		writer.sb.Append(':');
		if(this.scene!=null)
		{
			this.scene.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("ScenePartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("character");
		writer.sb.Append(':');
		if(this.character!=null)
		{
			this.character.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("CharacterPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("social");
		writer.sb.Append(':');
		if(this.social!=null)
		{
			this.social.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SocialPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("bag");
		writer.sb.Append(':');
		if(this.bag!=null)
		{
			this.bag.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("BagPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("mail");
		writer.sb.Append(':');
		if(this.mail!=null)
		{
			this.mail.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("MailPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("quest");
		writer.sb.Append(':');
		if(this.quest!=null)
		{
			this.quest.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("QuestPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("guide");
		writer.sb.Append(':');
		if(this.guide!=null)
		{
			this.guide.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("GuidePartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("friend");
		writer.sb.Append(':');
		if(this.friend!=null)
		{
			this.friend.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("FriendPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("equip");
		writer.sb.Append(':');
		if(this.equip!=null)
		{
			this.equip.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("EquipPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("team");
		writer.sb.Append(':');
		if(this.team!=null)
		{
			this.team.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("TeamPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("union");
		writer.sb.Append(':');
		if(this.union!=null)
		{
			this.union.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("UnionPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("achievement");
		writer.sb.Append(':');
		if(this.achievement!=null)
		{
			this.achievement.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("AchievementPartData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("pet");
		writer.sb.Append(':');
		if(this.pet!=null)
		{
			this.pet.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PetPartData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.system=null;
		this.func=null;
		this.activity=null;
		this.role=null;
		this.scene=null;
		this.character=null;
		this.social=null;
		this.bag=null;
		this.mail=null;
		this.quest=null;
		this.guide=null;
		this.friend=null;
		this.equip=null;
		this.team=null;
		this.union=null;
		this.achievement=null;
		this.pet=null;
	}
	
}
