using ShineEngine;
using System;

/// <summary>
/// 玩家数据主体(generated by shine)
/// </summary>
[Hotfix]
public class Player:SEventRegister,ILogicEntity
{
	protected PlayerBasePart[] _list;
	
	/** 当前代码调用阶段 */
	private int _phase=PartCallPhaseType.None;
	
	/// <summary>
	/// 系统
	/// </summary>
	public SystemPart system;
	
	/// <summary>
	/// 玩家
	/// </summary>
	public RolePart role;
	
	/// <summary>
	/// 场景
	/// </summary>
	public ScenePart scene;
	
	/// <summary>
	/// 角色
	/// </summary>
	public CharacterPart character;
	
	/// <summary>
	/// 背包
	/// </summary>
	public BagPart bag;
	
	/// <summary>
	/// 通用功能
	/// </summary>
	public FuncPart func;
	
	/// <summary>
	/// 社交
	/// </summary>
	public SocialPart social;
	
	/// <summary>
	/// 邮件
	/// </summary>
	public MailPart mail;
	
	/// <summary>
	/// 任务
	/// </summary>
	public QuestPart quest;
	
	/// <summary>
	/// 装备
	/// </summary>
	public EquipPart equip;
	
	/// <summary>
	/// 好友
	/// </summary>
	public FriendPart friend;
	
	/// <summary>
	/// 组队
	/// </summary>
	public TeamPart team;
	
	/// <summary>
	/// 工会
	/// </summary>
	public UnionPart union;
	
	/// <summary>
	/// 成就
	/// </summary>
	public AchievementPart achievement;
	
	/// <summary>
	/// 活动
	/// </summary>
	public ActivityPart activity;
	
	/// <summary>
	/// 引导
	/// </summary>
	public GuidePart guide;
	
	/// <summary>
	/// 宠物
	/// </summary>
	public PetPart pet;
	
	/// <summary>
	/// 注册部件
	/// </summary>
	protected virtual void registParts()
	{
		_list=new PlayerBasePart[17];
		int i=0;
		
		system=new SystemPart();
		system.setMe(this);
		_list[i++]=system;
		
		func=new FuncPart();
		func.setMe(this);
		_list[i++]=func;
		
		activity=new ActivityPart();
		activity.setMe(this);
		_list[i++]=activity;
		
		role=new RolePart();
		role.setMe(this);
		_list[i++]=role;
		
		scene=new ScenePart();
		scene.setMe(this);
		_list[i++]=scene;
		
		character=new CharacterPart();
		character.setMe(this);
		_list[i++]=character;
		
		social=new SocialPart();
		social.setMe(this);
		_list[i++]=social;
		
		bag=new BagPart();
		bag.setMe(this);
		_list[i++]=bag;
		
		mail=new MailPart();
		mail.setMe(this);
		_list[i++]=mail;
		
		quest=new QuestPart();
		quest.setMe(this);
		_list[i++]=quest;
		
		guide=new GuidePart();
		guide.setMe(this);
		_list[i++]=guide;
		
		friend=new FriendPart();
		friend.setMe(this);
		_list[i++]=friend;
		
		equip=new EquipPart();
		equip.setMe(this);
		_list[i++]=equip;
		
		team=new TeamPart();
		team.setMe(this);
		_list[i++]=team;
		
		union=new UnionPart();
		union.setMe(this);
		_list[i++]=union;
		
		achievement=new AchievementPart();
		achievement.setMe(this);
		_list[i++]=achievement;
		
		pet=new PetPart();
		pet.setMe(this);
		_list[i++]=pet;
		
	}
	
	/// <summary>
	/// 创建列表数据
	/// </summary>
	public virtual PlayerListData createListData()
	{
		return new PlayerListData();
	}
	
	/// <summary>
	/// 从列表数据读取
	/// </summary>
	public virtual void readListData(PlayerListData listData)
	{
		this.system.setData(listData.system);
		this.func.setData(listData.func);
		this.activity.setData(listData.activity);
		this.role.setData(listData.role);
		this.scene.setData(listData.scene);
		this.character.setData(listData.character);
		this.social.setData(listData.social);
		this.bag.setData(listData.bag);
		this.mail.setData(listData.mail);
		this.quest.setData(listData.quest);
		this.guide.setData(listData.guide);
		this.friend.setData(listData.friend);
		this.equip.setData(listData.equip);
		this.team.setData(listData.team);
		this.union.setData(listData.union);
		this.achievement.setData(listData.achievement);
		this.pet.setData(listData.pet);
	}
	
	/// <summary>
	/// 写列表数据(深拷)
	/// </summary>
	public virtual void writeListData(PlayerListData listData)
	{
		listData.system=(SystemPartData)this.system.makePartData();
		listData.func=(FuncPartData)this.func.makePartData();
		listData.activity=(ActivityPartData)this.activity.makePartData();
		listData.role=(RolePartData)this.role.makePartData();
		listData.scene=(ScenePartData)this.scene.makePartData();
		listData.character=(CharacterPartData)this.character.makePartData();
		listData.social=(SocialPartData)this.social.makePartData();
		listData.bag=(BagPartData)this.bag.makePartData();
		listData.mail=(MailPartData)this.mail.makePartData();
		listData.quest=(QuestPartData)this.quest.makePartData();
		listData.guide=(GuidePartData)this.guide.makePartData();
		listData.friend=(FriendPartData)this.friend.makePartData();
		listData.equip=(EquipPartData)this.equip.makePartData();
		listData.team=(TeamPartData)this.team.makePartData();
		listData.union=(UnionPartData)this.union.makePartData();
		listData.achievement=(AchievementPartData)this.achievement.makePartData();
		listData.pet=(PetPartData)this.pet.makePartData();
	}
	
	/// <summary>
	/// 获取当前阶段
	/// </summary>
	public int getPhase()
	{
		return _phase;
	}
	
	/// <summary>
	/// 预备构造
	/// </summary>
	public void preConstruct()
	{
		registParts();
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public virtual void construct()
	{
		_phase=PartCallPhaseType.Construct;

		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			try
			{
				list[vI].construct();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}

		_phase=PartCallPhaseType.None;
	}
	
	/// <summary>
	/// 初次构造数据(只为new出Data,跟onCreate不是一回事)
	/// </summary>
	public virtual void newInitData()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].newInitData();
		}
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public virtual void init()
	{
		_phase=PartCallPhaseType.Init;

		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			try
			{
				list[vI].init();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}

		_phase=PartCallPhaseType.None;
	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public virtual void dispose()
	{
		_phase=PartCallPhaseType.Dispose;

		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			try
			{
				list[vI].dispose();
			}
			catch(Exception e)
			{
				Ctrl.errorLog(e);
			}
		}

		_phase=PartCallPhaseType.None;
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public virtual void afterReadData()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].afterReadData();
		}

		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].afterReadDataSecond();
		}
	}
	
	/// <summary>
	/// 登录前
	/// </summary>
	public virtual void beforeLogin()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].beforeLogin();
		}
	}
	
	/// <summary>
	/// 每秒调用
	/// </summary>
	public virtual void onSecond(int delay)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onSecond(delay);
		}
	}
	
	/// <summary>
	/// 每天调用(上线时如隔天也会调用,)
	/// </summary>
	public virtual void onDaily()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onDaily();
		}
	}
	
	/// <summary>
	/// 配置表更新后(配置替换)
	/// </summary>
	public virtual void onReloadConfig()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onReloadConfig();
		}
	}
	
	/// <summary>
	/// 发送服务器消息(目前没用这种方式)
	/// </summary>
	public void send(BaseRequest request)
	{
		if(request is CenterRequest)
		{
			sendCenter((CenterRequest)request);
		}
		else
		{
			sendToGame(request);
		}
	}
	
	/// <summary>
	/// 推送中心服消息
	/// </summary>
	public void sendCenter(CenterRequest request)
	{
		//构造一下
		request.preSend();

		CenterTransClientToGameRequest cr=CenterTransClientToGameRequest.create();
		cr.setData(request);
		sendToGame(cr);
	}
	
	/** 消息发到game */
	private void sendToGame(BaseRequest request)
	{
		if(CommonSetting.isSingleGame)
			return;

		GameC.server.getSocket().send(request);
	}
	
	/// <summary>
	/// 警告日志
	/// </summary>
	public void warnLog(params object[] args)
	{
		Ctrl.warnLog(args);
	}
	
	/// <summary>
	/// 错误日志
	/// </summary>
	public void errorLog(params object[] args)
	{
		Ctrl.errorLog(args);
	}
	
	/// <summary>
	/// debug日志
	/// </summary>
	public void debugLog(params object[] args)
	{
		Ctrl.debugLog(args);
	}
	
	/// <summary>
	/// 抛错
	/// </summary>
	public void throwError(params object[] args)
	{
		Ctrl.throwError(args);
	}
	
	/// <summary>
	/// 获取当前时间戳
	/// </summary>
	public long getTimeMillis()
	{
		return DateControl.getTimeMillis();
	}
	
	public long getTimeSeconds()
	{
		return getTimeMillis()/1000;
	}
	
	/// <summary>
	/// 显示信息码
	/// </summary>
	public void showInfoCode(int code)
	{
		GameC.info.showInfoCode(code);
	}
	
	/// <summary>
	/// 显示信息码(客户端用)
	/// </summary>
	public void showInfoCode(int code,params string[] args)
	{
		GameC.info.showInfoCode(code,args);
	}
	
	/// <summary>
	/// 升级(升级多次也只调用一次)
	/// </summary>
	public void onLevelUp(int oldLevel)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0, vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onLevelUp(oldLevel);
		}
	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public void onFunctionOpen(int id)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onFunctionOpen(id);
		}
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public void onFunctionClose(int id)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onFunctionClose(id);
		}
	}
	
	/// <summary>
	/// 活动开启
	/// </summary>
	public virtual void onActivityOpen(int id,bool atTime)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0, vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onActivityOpen(id,atTime);
		}
	}
	
	/// <summary>
	/// 活动关闭
	/// </summary>
	public virtual void onActivityClose(int id,bool atTime)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0, vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onActivityClose(id,atTime);
		}
	}
	
	/// <summary>
	/// 活动重置
	/// </summary>
	public virtual void onActivityReset(int id,bool atTime)
	{
		PlayerBasePart[] list=_list;
		for(int vI=0, vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onActivityReset(id,atTime);
		}
	}
	
	/// <summary>
	/// 是否有空数据
	/// </summary>
	public bool hasEmptyData()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			if(list[vI].getData()==null)
			{
				warnLog("Player readListData,存在空数据",list[vI].GetType().Name);
				return true;
			}
		}

		return false;
	}
	
	public int randomInt(int range)
	{
		if(CommonSetting.needClientRandomSeeds)
		{
			return system.clientRandomInt(range);
		}

		return MathUtils.randomInt(range);
	}
	
	public bool randomProb(int prob,int max)
	{
		if(CommonSetting.needClientRandomSeeds)
		{
			return system.clientRandomProb(prob,max);
		}

		return MathUtils.randomProb(prob,max);
	}
	
	/// <summary>
	/// 随一整形(start<=value<end)
	/// </summary>
	public int randomRange(int start,int end)
	{
		if(end<=start)
			return -1;

		return start+randomInt(end-start);
	}
	
	/// <summary>
	/// 随一整形(start<=value<=end)(包括结尾)
	/// </summary>
	public int randomRange2(int start,int end)
	{
		return randomRange(start,end+1);
	}
	
	/// <summary>
	/// 新创建时(该主对象在服务器上第一次被创建时的动作(一生只一次),(只对数据赋值就好,自定义数据构造的部分写到afterReadData里,因为这个完事儿就会回调到))
	/// </summary>
	public virtual void onNewCreate()
	{
		PlayerBasePart[] list=_list;
		for(int vI=0,vLen=list.Length;vI<vLen;++vI)
		{
			list[vI].onNewCreate();
		}
	}
	
}
