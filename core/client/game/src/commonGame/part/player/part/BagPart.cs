using ShineEngine;
using System;

/// <summary>
/// 背包(generated by shine)
/// </summary>
public class BagPart:PlayerBasePart
{
	/** 数据 */
	private BagPartData _d;
	
	private IntIntMap _tempMap=new IntIntMap();
	
	/** 临时物品组 */
	private SList<ItemData> _tempItems=new SList<ItemData>();
	
	public override void setData(BaseData data)
	{
		base.setData(data);
		
		_d=(BagPartData)data;
	}
	
	/// <summary>
	/// 获取数据
	/// </summary>
	public BagPartData getPartData()
	{
		return _d;
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public override void construct()
	{
	}
	
	/// <summary>
	/// 构造数据前
	/// </summary>
	protected override void beforeMakeData()
	{
		
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public override void init()
	{

	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public override void dispose()
	{
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public override void afterReadData()
	{

	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public override void onFunctionOpen(int id)
	{
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public override void onFunctionClose(int id)
	{
	}
	
	/// <summary>
	/// 创建物品通过类型(只创建物品)
	/// </summary>
	public ItemData createItemByType(int type)
	{
		return GameC.pool.createItemData(type);
	}
	
	/// <summary>
	/// 创建物品数据
	/// </summary>
	public ItemData createItem(int id,int num)
	{
		ItemConfig config=ItemConfig.get(id);

		ItemData data=createItemByType(config.type);
		data.id=id;
		data.num=num;
		data.config=config;
		//失效时间
		data.disableTime=config.enableTimeT.getNextTime();

		//额外初始化
		BaseC.logic.initItem(data,id);

		return data;
	}
	
	/// <summary>
	/// 回收物品
	/// </summary>
	public void releaseItem(ItemData data)
	{
		GameC.pool.releaseItemData(data);
	}
	
	/// <summary>
	/// 获取某序号的物品
	/// </summary>
	public virtual ItemData getItem(int index)
	{
		Ctrl.throwError("must override");
		return null;
	}
	
	/// <summary>
	/// 是否有空余格子
	/// </summary>
	public virtual bool hasFreeGrid(int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 是否有物品位置
	/// </summary>
	public virtual bool hasItemPlace(ItemData data)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 是否有物品位置
	/// </summary>
	public virtual bool hasItemPlace(int id,int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 是否有物品位置
	/// </summary>
	public virtual bool hasItemPlace(SList<ItemData> list)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 是否有物品位置
	/// </summary>
	public virtual bool hasItemPlace(DIntData[] dataArr)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 获取某ID的物品数目
	/// </summary>
	public virtual int getItemNum(int itemID)
	{
		Ctrl.throwError("must override");
		return 0;
	}
	
	/// <summary>
	/// 添加物品数据
	/// </summary>
	public bool addItem(ItemData data,int way)
	{
		int num=data.num;

		if(toAddItem(data,way))
		{
			toLogAddItem(data.id,num,way);
			return true;
		}

		return false;
	}
	
	protected virtual bool toAddItem(ItemData data,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	public bool addItem(int id,int way)
	{
		return addItem(id,1,way);
	}
	
	/// <summary>
	/// 添加指定id和数目的道具
	/// </summary>
	public bool addItem(int id,int num,int way)
	{
		if(toAddItem(id,num,way))
		{
			toLogAddItem(id,num,way);
			return true;
		}

		return false;
	}
	
	protected virtual bool toAddItem(int id,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 添加新物品到指定序号
	/// </summary>
	public bool addNewItemToIndex(int index,ItemData data,int way)
	{
    	if(toAddNewItemToIndex(index,data,way))
    	{
    		toLogAddItem(data.id,data.num,way);
    		return true;
    	}

    	return false;
    }
	
	/// <summary>
	/// 添加新物品到指定序号
	/// </summary>
	protected virtual bool toAddNewItemToIndex(int index,ItemData data,int way)
	{
    	Ctrl.throwError("must override");
    	return false;
    }
	
	private void toLogTempMap(int way)
	{
//		int free=_tempMap.getFreeValue();
//		long[] tab=_tempMap.getTable();
//		long entry;
//		int key;
//
//		for(int i=(tab.length) - 1;i >= 0;--i)
//		{
//			if((key=((int)(entry=tab[i])))!=free)
//			{
//				toLogAddItem(key,(int)(entry >>> 32),way);
//			}
//		}
//
//		_tempMap.clear();
	}
	
	private void toLogTempMapToMail(int way)
	{
//		int free=_tempMap.getFreeValue();
//		long[] tab=_tempMap.getTable();
//		long entry;
//		int key;
//
//		for(int i=(tab.length) - 1;i >= 0;--i)
//		{
//			if((key=((int)(entry=tab[i])))!=free)
//			{
//				toLogAddItemToMail(key,(int)(entry >>> 32),way);
//			}
//		}
//
//		_tempMap.clear();
	}
	
	/// <summary>
	/// 添加一组物品
	/// </summary>
	public bool addItems(SList<ItemData> list,int way)
	{
		_tempMap.clear();
		ItemData data;
		for(int i=list.size()-1;i>=0;--i)
		{
			_tempMap.addValue((data=list.get(i)).id,data.num);
		}

		if(toAddItems(list,way))
		{
			toLogTempMap(way);
			return true;
		}
		else
		{
			_tempMap.clear();
			return false;
		}
	}
	
	/// <summary>
	/// 添加一组物品(包满邮件)
	/// </summary>
	public void addItemsAbs(SList<ItemData> list,int way)
	{
		_tempMap.clear();
		ItemData data;
		for(int i=list.size()-1;i>=0;--i)
		{
			_tempMap.addValue((data=list.get(i)).id,data.num);
		}

		if(toAddItems(list,way))
		{
			toLogTempMap(way);
		}
		else
		{
			Ctrl.throwError("不该出现背包空间不足");
			// me.mail.addMailForItem(list,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected virtual bool toAddItems(SList<ItemData> list,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 添加一组物品
	/// </summary>
	public bool addItems(DIntData[] list,int num,int way)
	{
		_tempMap.clear();
		for(int i=list.Length-1;i>=0;--i)
		{
			_tempMap.addValue(list[i].key,list[i].value*num);
		}

		if(toAddItems(list,num,way))
		{
			toLogTempMap(way);
			return true;
		}
		else
		{
			_tempMap.clear();
			return false;
		}
	}
	
	/// <summary>
	/// 添加一组物品(包满邮件)
	/// </summary>
	public void addItemsAbs(DIntData[] list,int num,int way)
	{
		_tempMap.clear();
		for(int i=list.Length-1;i>=0;--i)
		{
			_tempMap.addValue(list[i].key,list[i].value*num);
		}

		if(toAddItems(list,num,way))
		{
			toLogTempMap(way);
		}
		else
		{
			Ctrl.errorLog("不该出现背包空间不足",way);
			// me.mail.addMailForItem(list,way);
			toLogTempMapToMail(way);
		}
	}
	
	protected virtual bool toAddItems(DIntData[] list,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 是否有指定id的物品
	/// </summary>
	public bool containsItem(int id)
	{
		return containsItem(id,1);
	}
	
	/// <summary>
	/// 是否有指定id数目的物品
	/// </summary>
	public virtual bool containsItem(int id,int num)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 是否有指定物品组(不考虑id重复)
	/// </summary>
	public bool containsItems(DIntData[] items,int num=1)
	{
		foreach(DIntData v in items)
		{
			if(!containsItem(v.key,v.value*num))
				return false;
		}

		return true;
	}
	
	/// <summary>
	/// 移除道具(1个)(会回收)
	/// </summary>
	public bool removeItem(int id,int way)
	{
		return removeItem(id,1,way);
	}
	
	/// <summary>
	/// 移除道具(会回收)
	/// </summary>
	public virtual bool removeItem(int id,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 移除指定序号的物品(全部数目)(不回收)
	/// </summary>
	public virtual bool removeItemByIndex(int index,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 移除指定序号的物品(部分数目)(不回收)
	/// </summary>
	public virtual bool removeItemByIndex(int index,int num,int way)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 移除道具组(会回收)
	/// </summary>
	public virtual bool removeItems(DIntData[] items,int num,int way)
	{
		Ctrl.throwError("must override");

		return false;
	}
	
	/// <summary>
	/// 整理
	/// </summary>
	public virtual void cleanUp()
	{

	}
	
	/// <summary>
	/// 打印背包
	/// </summary>
	public virtual void printBag()
	{

	}
	
	/// <summary>
	/// 是否有某奖励的位置
	/// </summary>
	public bool hasRewardPlace(int rewardID,int num=1)
	{
		RewardConfig config=RewardConfig.get(rewardID);

		//没有随机
		if(config.randomListID<=0)
		{
			int n=0;
			int sMax;

			foreach(DIntData v in config.items)
			{
				if((sMax=ItemConfig.get(v.key).singlePlusMax)>0)
					n+=(v.value*num+sMax-1)/sMax;
				else
					n+=1;
			}

			return hasFreeGrid(n);
		}
		else
		{
			return hasFreeGrid(RewardConfig.get(rewardID).needGrid*num);
		}
	}
	
	/// <summary>
	/// 添加奖励
	/// </summary>
	public bool addReward(int rewardID,int way)
	{
		return addReward(rewardID,1,way);
	}
	
	/// <summary>
	/// 添加奖励
	/// </summary>
	public bool addReward(int rewardID,int num,int way)
	{
		return addRewardLevel(rewardID,me.role.getLevel(),num,way);
	}
	
	/// <summary>
	/// 添加对应等级奖励
	/// </summary>
	public bool addRewardLevel(int rewardID,int level,int num,int way)
	{
		RewardConfig config=RewardConfig.get(rewardID);

		//没位置
		if(!hasRewardPlace(rewardID,num))
		{
			return false;
		}

		return doAddRewardLevel(config,level,num,false,way);
	}
	
	/// <summary>
	/// 执行添加奖励
	/// </summary>
	protected bool doAddRewardLevel(RewardConfig config,int level,int num,bool isAbs,int way)
	{
		if(isAbs)
		{
			addItemsAbs(config.items,num,way);
		}
		else
		{
			//添加物品ok
			if(!addItems(config.items,num,way))
			{
				me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
				return false;
			}
		}

		if(config.randomListID>0)
		{
			randomItemList(_tempItems,config.randomListID,num);

			if(isAbs)
			{
				addItemsAbs(_tempItems,way);
			}
			else
			{
				if(!addItems(_tempItems,way))
				{
					_tempItems.clear();

					me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
					return false;
				}
			}
		}

		if(config.currency.Length>0)
		{
			if(config.needLevelAdapter)
			{
				int len=config.currency.Length;
				for(int i=0;i<len;i++)
				{
					int v=BaseC.logic.calculateRewardLevel(config.currency[i].value,level,config.currencyLevelFormula[i]);
					me.role.addCurrencyAbs(config.currency[i].key,v,way);
				}
			}
			else
			{
				me.role.addCurrenciesAbs(config.currency,num,way);
			}
		}

		if(config.roleExp>0)
		{
			if(config.needLevelAdapter)
			{
				long v=BaseC.logic.calculateRewardLevel(config.roleExp,level,config.roleExpLevelFormula);
				me.role.addExp(v,way);
			}
			else
			{
				me.role.addExp(config.roleExp,way);
			}
		}

		onAddReward(way,config.id,num,_tempItems.isEmpty() ? null : _tempItems);

		_tempItems.clear();

		return true;
	}
	
	public void addRewardAbs(int rewardID,int way)
	{
		addRewardAbs(rewardID,1,way);
	}
	
	public void addRewardAbs(int rewardID,int num,int way)
	{
		addRewardLevelAbs(rewardID,me.role.getLevel(),num,way);
	}
	
	/// <summary>
	/// 绝对添加奖励(包满进邮件)
	/// </summary>
	public void addRewardLevelAbs(int rewardID,int level,int num,int way)
	{
		RewardConfig config=RewardConfig.get(rewardID);

		doAddRewardLevel(config,level,num,true,way);
	}
	
	/// <summary>
	/// 是否有某cost的所需
	/// </summary>
	public bool hasCost(int costID)
	{
		CostConfig config=CostConfig.get(costID);

		if(!me.role.hasCurrencies(config.currency))
			return false;

		if(!containsItems(config.items))
			return false;

		return true;
	}
	
	/// <summary>
	/// 是否有某cost的所需
	/// </summary>
	public bool hasCost(int costID,int num)
	{
		CostConfig config=CostConfig.get(costID);

		if(!me.role.hasCurrencies(config.currency,num))
			return false;

		if(!containsItems(config.items,num))
			return false;

		return true;
	}
	
	/// <summary>
	/// 执行某id的消耗
	/// </summary>
	public bool doCost(int costID,int way)
	{
		return doCost(costID,1,way);
	}
	
	/// <summary>
	/// 执行某id的消耗
	/// </summary>
	public bool doCost(int costID,int num,int way)
	{
		CostConfig config=CostConfig.get(costID);

		if(!me.role.hasCurrencies(config.currency,num))
			return false;

		if(!removeItems(config.items,num,way))
			return false;

		if(!me.role.costCurrencies(config.currency,num,way))
		{
			Ctrl.errorLog("出严重错误，此时不该消耗不掉");
			addItems(config.items,num,way);
			return false;
		}

		return true;
	}
	
	/// <summary>
	/// 随机一个物品(可能为空)
	/// </summary>
	public ItemData randomItem(int randomItemConfigID)
	{
		return BaseC.logic.randomItem(randomItemConfigID,me,ClientRandomSeedType.Client);
	}
	
	/// <summary>
	/// 随机一组物品
	/// </summary>
	public void randomItemList(SList<ItemData> list,int randItemListConfigID,int num)
	{
		list.clear();

		for(int i=num-1;i>=0;--i)
		{
			BaseC.logic.randomItemList(list,randItemListConfigID,me);
		}
	}
	
	/// <summary>
	/// 检查物品使用条件
	/// </summary>
	public bool checkItemUseConditions(ItemData data,int num,UseItemArgData arg,bool needNotice)
	{
		int[][] conditions;

		if((conditions=data.config.useConditions)!=null)
		{
			foreach(int[] v in conditions)
			{
				if(!checkOneItemUseCondition(v,needNotice))
				{
					return false;
				}
			}
		}

		foreach(int[] v in data.config.useActions)
		{
			if(!checkOneItemUseConditionForAction(v,num,arg,needNotice))
			{
				return false;
			}
		}

		return true;
	}
	
	/// <summary>
	/// 执行使用物品
	/// </summary>
	public void toUseItem(ItemData data,int num,UseItemArgData arg)
	{
		int[][] actions;

		if((actions=data.config.useActions)!=null)
		{
			doItemUseActions(actions,num,arg);
		}

		toLogRemoveItem(data.id,num,CallWayType.UseItem);

		onItemUse(data.id,num,data,arg);
	}
	
	/// <summary>
	/// 执行使用物品
	/// </summary>
	public void toUseItem(int id,int num,UseItemArgData arg)
	{
		int[][] actions;

		if((actions=ItemConfig.get(id).useActions)!=null)
		{
			doItemUseActions(actions,num,arg);
		}

		toLogRemoveItem(id,num,CallWayType.UseItem);

		onItemUse(id,num,null,arg);
	}
	
	protected void doItemUseActions(int[][] actions,int num,UseItemArgData arg)
	{
		foreach(int[] v in actions)
		{
			doOneItemUseAction(v,num,arg);
		}
	}
	
	/// <summary>
	/// 物品使用
	/// </summary>
	protected virtual void onItemUse(int id,int num,ItemData itemData,UseItemArgData arg)
	{

	}
	
	/// <summary>
	/// 执行单个道具物品动作
	/// </summary>
	protected virtual bool checkOneItemUseCondition(int[] args,bool needNotice)
	{
		return me.role.checkOneRoleCondition(args,needNotice);
	}
	
	/// <summary>
	/// 执行单个道具物品动作
	/// </summary>
	protected virtual bool checkOneItemUseConditionForAction(int[] args,int num,UseItemArgData arg,bool needNotice)
	{
		return me.role.checkOneRoleConditionForAction(args,num);
	}
	
	/// <summary>
	/// 执行单个道具物品动作
	/// </summary>
	protected void doOneItemUseAction(int[] args,int num,UseItemArgData arg)
	{
		if(!CommonSetting.isClientDriveLogic)
			return;

		me.role.doOneRoleAction(args,num,CallWayType.UseItem);
	}
	
	/// <summary>
	/// 通过ID使用物品
	/// </summary>
	public bool useItemByID(int id)
	{
		return useItemByID(id,null);
	}
	
	/// <summary>
	/// 通过ID使用物品
	/// </summary>
	public virtual bool useItemByID(int id,UseItemArgData arg)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 使用物品
	/// </summary>
	public bool useItemByIndex(int index)
	{
		return useItemByIndex(index,1,null);
	}
	
	/// <summary>
	/// 使用物品
	/// </summary>
	public bool useItemByIndex(int index,UseItemArgData arg)
	{
		return useItemByIndex(index,1,arg);
	}
	
	/// <summary>
	/// 使用物品
	/// </summary>
	public virtual bool useItemByIndex(int index,int num,UseItemArgData arg)
	{
		Ctrl.throwError("must override");
		return false;
	}
	
	/// <summary>
	/// 获取红点数目
	/// </summary>
	public virtual int getRedPointCount()
	{
		return 0;
	}
	
	/// <summary>
	/// 移除某序号的红点
	/// </summary>
	public virtual void removeRedPoint(int index)
	{

	}
	
	/// <summary>
	/// 记录添加物品
	/// </summary>
	protected void toLogAddItem(int id,int num,int way)
	{
		GameC.log.playerAddItem(me,id,num,way);
	}
	
	/// <summary>
	/// 记录移除物品
	/// </summary>
	protected void toLogRemoveItem(int id,int num,int way)
	{
		GameC.log.playerRemoveItem(me,id,num,way);
	}
	
	/// <summary>
	/// 记录添加物品到邮件
	/// </summary>
	protected void toLogAddItemToMail(int id,int num,int way)
	{
		GameC.log.playerAddItemToMail(me,id,num,way);
	}
	
	/// <summary>
	/// 服务器返回使用物品结果
	/// </summary>
	public virtual void useItemResult(int id,int num,Boolean result)
	{
		
	}
	
	/// <summary>
	/// 添加奖励提示
	/// </summary>
	public virtual void onAddReward(int way,int rewarID,int num,SList<ItemData> randomItemDatas)
	{
		RewardShowData data=new RewardShowData();
		data.config=RewardConfig.get(rewarID);

		if(randomItemDatas==null)
			randomItemDatas=new SList<ItemData>();

		data.items=randomItemDatas;

		foreach(DIntData v in data.config.items)
		{
			data.items.add(createItem(v.key,v.value*num));
		}

		data.currency=new IntIntMap();

		foreach(var v in data.config.currency)
		{
			data.currency.addValue(v.key,v.value*num);
		}

		me.dispatch(GameEventType.AddReward,data);
	}
	
	protected override BaseData createPartData()
	{
		return new BagPartData();
	}
	
	/// <summary>
	/// 道具出售
	/// </summary>
	public bool sellItem(int index,int num,int itemID)
	{
		ItemData data;

		if((data=getItem(index))==null)
			return false;

		if(data.id!=itemID)
			return false;

		if(removeItemByIndex(index,num,CallWayType.SellItem))
		{
			me.role.addCurrency(CurrencyType.Coin,data.config.sellPrice*num,CallWayType.SellItem);
			return true;
		}

		return false;
	}
	
	/// <summary>
	/// 兑换
	/// </summary>
	public void exchange(int id,int num)
	{
		ExchangeConfig config=ExchangeConfig.get(id);

		if(config==null)
		{
			me.warnLog("兑换时,找不到兑换配置");
			return;
		}

		ExchangeGroupConfig gConfig=ExchangeGroupConfig.get(config.groupID);

		if(!gConfig.canClientUse)
		{
			me.warnLog("兑换时,该兑换不可客户端发起");
			return;
		}

		if(!me.role.checkRoleConditions(gConfig.conditions,true))
		{
			me.warnLog("兑换时,条件不满足");
			return;
		}

		if(!checkExchangeConditionEx(id,num))
		{
			me.warnLog("兑换时,附加条件不满足");
			return;
		}


		if(!hasCost(config.costID,num))
		{
			me.warnLog("兑换时,材料不足");
			return;
		}

		// if(CommonSetting.isClientDriveLogic)
		// {
		// 	doCost(config.costID,num,CallWayType.Exchange);
		// 	addReward(config.rewarID,num,CallWayType.Exchange);
		// }
		// else
		// {
			me.send(ExchangeRequest.create(id,num));
		// }
	}
	
	/// <summary>
	/// 检查附加条件
	/// </summary>
	protected virtual bool checkExchangeConditionEx(int id,int num)
	{
		return true;
	}
	
}
