using ShineEngine;

/// <summary>
/// 好友(generated by shine)
/// </summary>
public class FriendPart:PlayerBasePart
{
	/** 数据 */
	private FriendPartData _d;
	
	public override void setData(BaseData data)
	{
		base.setData(data);
		
		_d=(FriendPartData)data;
	}
	
	/// <summary>
	/// 获取数据
	/// </summary>
	public FriendPartData getPartData()
	{
		return _d;
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public override void construct()
	{
		
	}
	
	/// <summary>
	/// 构造数据前
	/// </summary>
	protected override void beforeMakeData()
	{
		
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public override void init()
	{
		
	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public override void dispose()
	{
		
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public override void afterReadData()
	{
		if(!_d.blackList.isEmpty())
		{
			ContactData[] values;
			ContactData v;

			for(int i=(values=_d.blackList.getValues()).Length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//唯一实例
					v.data=me.social.addPlayerRoleSocial(v.playerID,v.data);
				}
			}
		}

		if(!_d.friends.isEmpty())
		{
			FriendData[] values1;
			FriendData v1;

			for(int i1=(values1=_d.friends.getValues()).Length-1;i1>=0;--i1)
			{
				if((v1=values1[i1])!=null)
				{
					//唯一实例
					v1.data=me.social.addPlayerRoleSocial(v1.playerID,v1.data);
				}
			}
		}
	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public override void onFunctionOpen(int id)
	{
		
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public override void onFunctionClose(int id)
	{
		
	}
	
	private int compareApplyAddFriend(ApplyAddFriendData arg1,ApplyAddFriendData arg2)
	{
		if(arg1.applyTime<arg2.applyTime)
			return -1;

		if(arg1.applyTime==arg2.applyTime)
			return 0;

		return 1;
	}
	
	/// <summary>
	/// 好友列表是否已满
	/// </summary>
	public bool isFriendListFull()
	{
		return Global.friendMaxNum>0 && _d.friends.size()>=Global.friendMaxNum;
	}
	
	/// <summary>
	/// 黑名单列表是否已满
	/// </summary>
	public bool isBlackListFull()
	{
		return Global.friendBlackListMaxNum>0 && _d.blackList.size()>=Global.friendBlackListMaxNum;
	}
	
	/// <summary>
	/// 是否为好友
	/// </summary>
	public bool isFriend(long playerID)
	{
		return _d.friends.contains(playerID);
	}
	
	/// <summary>
	/// 获取好友数据
	/// </summary>
	public FriendData getFriend(long playerID)
	{
		return _d.friends.get(playerID);
	}
	
	/// <summary>
	/// 添加好友
	/// </summary>
	public void onAddFriend(FriendData data)
	{
		data.data=me.social.addPlayerRoleSocial(data.playerID,data.data);//唯一实例

		_d.friends.put(data.playerID,data);

		me.dispatch(GameEventType.AddFriend,data.playerID);

		if(_d.applyDic.remove(data.playerID)!=null)
		{
			me.dispatch(GameEventType.RefreshApplyFriendList);
		}
	}
	
	/// <summary>
	/// 移除好友
	/// </summary>
	public void onRemoveFriend(long playerID)
	{
		_d.friends.remove(playerID);

		me.dispatch(GameEventType.RemoveFriend,playerID);
	}
	
	/// <summary>
	/// 申请添加好友
	/// </summary>
	public void onApplyAddFriend(ApplyAddFriendData data)
	{
		//快捷方式
		OtherUtils.putObjInDicWithMax(data.playerID,data,_d.applyDic,Global.applyAddFriendMaxNum,compareApplyAddFriend);

		me.dispatch(GameEventType.ReceiveApplyFriend,data.playerID);
		me.dispatch(GameEventType.RefreshApplyFriendList);
		onApplyAddFriendForG(data);
	}
	
	/// <summary>
	/// 申请添加好友
	/// </summary>
	public virtual void onApplyAddFriendForG(ApplyAddFriendData data)
	{
		
	}
	
	/// <summary>
	/// 添加黑名单
	/// </summary>
	public void onAddBlackList(ContactData data)
	{
		data.data=me.social.addPlayerRoleSocial(data.playerID,data.data);//唯一实例

		_d.blackList.put(data.playerID,data);

		me.dispatch(GameEventType.AddFriendBlackList);
	}
	
	/// <summary>
	/// 移除黑名单
	/// </summary>
	public void onRemoveBlackList(long playerID)
	{
		_d.blackList.remove(playerID);

		me.dispatch(GameEventType.RemoveFriendBlackList);
	}
	
	/// <summary>
	/// 同意添加好友
	/// </summary>
	public void agreeApplyFriend(long playerID)
	{
		//好友列表已满
		if(isFriendListFull())
		{
			me.showInfoCode(InfoCodeType.Friend_friendListIsFull);
			return;
		}

		//已是好友
		if(_d.friends.contains(playerID))
		{
			me.showInfoCode(InfoCodeType.Friend_targetIsAlreadyFriend);
			return;
		}

		if(_d.applyDic.remove(playerID)!=null)
		{
			me.dispatch(GameEventType.RefreshApplyFriendList);
		}

		me.send(AgreeAddFriendRequest.create(playerID));
	}
	
	/// <summary>
	/// 拒绝好友申请
	/// </summary>
	public void refuseApplyAddFriend(long playerID)
	{
		ApplyAddFriendData data=_d.applyDic.get(playerID);
		
		if(data==null)
		{
			me.warnLog("拒绝好友申请时,不存在");
			return;
		}
		
		_d.applyDic.remove(playerID);
		
		RefuseApplyAddFriendRequest.create(playerID).send();
	}
	
	protected override BaseData createPartData()
	{
		return new FriendPartData();
	}
	
}
