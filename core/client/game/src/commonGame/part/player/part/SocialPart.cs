using ShineEngine;
using System;

/// <summary>
/// 社交(generated by shine)
/// </summary>
public class SocialPart:PlayerBasePart
{
	/** 数据 */
	private SocialPartData _d;
	
	/** 角色社交数据(自己需要的所有角色社交数据) */
	private LongObjectMap<RoleSocialData> _roleSocialDic=new LongObjectMap<RoleSocialData>();
	
	/** 注册的查询角色数据回调字典(接收返回数据) */
	private IntObjectMap<Action<QueryPlayerResultData>> _reQueryPlayerFuncDic=new IntObjectMap<Action<QueryPlayerResultData>>();
	
	/** 多频道组 */
	private IntObjectMap<LongObjectMap<ChatChannelData>> _multiChannels;
	
	/** 单一频道组 */
	private IntObjectMap<ChatChannelData> _singleChannels;
	
	/** 聊天接收序号改变 */
	private bool _chatReceiveIndexModified=false;
	
	/** 聊天接收序号 */
	private int _chatReceiveIndex;
	
	public override void setData(BaseData data)
	{
		base.setData(data);
		
		_d=(SocialPartData)data;
	}
	
	/// <summary>
	/// 获取数据
	/// </summary>
	public SocialPartData getPartData()
	{
		return _d;
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public override void construct()
	{
		
	}
	
	/// <summary>
	/// 构造数据前
	/// </summary>
	protected override void beforeMakeData()
	{
		
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public override void init()
	{
		
	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public override void dispose()
	{
		_roleSocialDic.clear();
		_multiChannels=null;
		_singleChannels=null;
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public override void afterReadData()
	{
		//TODO:读取本地记录
		_multiChannels=_d.multiChannels;
		_singleChannels=_d.singleChannels;

		_chatReceiveIndex=_d.chatSendIndex;
	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public override void onFunctionOpen(int id)
	{
		
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public override void onFunctionClose(int id)
	{
		
	}
	
	public override void onSecond(int delay)
	{
		if(_chatReceiveIndexModified)
		{
			_chatReceiveIndexModified=false;

			me.send(PlayerReceiveChatIndexRequest.create(_chatReceiveIndex));
		}
	}
	
	/// <summary>
	/// 创建角色社交数据
	/// </summary>
	public RoleSocialData createRoleSocialData()
	{
		RoleSocialData re=GameC.factory.createRoleSocialData();
		makeRoleSocialData(re);
		return re;
	}
	
	/// <summary>
	/// 构造角色自身社交数据
	/// </summary>
	public void makeRoleSocialData(RoleSocialData data)
	{
		if(data.showData!=null)
		{
			me.role.makeRoleShowData(data.showData);
		}
		else
		{
			data.showData=me.role.createRoleShowData();
		}

		data.isOnline=true;//在线
		data.lastOnlineTime=me.getTimeMillis();
	}
	
	/// <summary>
	/// 添加角色社交数据
	/// </summary>
	public RoleSocialData addPlayerRoleSocial(long playerID,RoleSocialData data)
	{
		RoleSocialData oldData;

		if((oldData=_roleSocialDic.get(playerID))!=null)
		{
			oldData.copy(data);
			return oldData;
		}
		else
		{
			_roleSocialDic.put(playerID,data);
			return data;
		}
	}
	
	/// <summary>
	/// 移除角色社交数据
	/// </summary>
	public void removePlayerRoleSocial(long playerID)
	{
		_roleSocialDic.remove(playerID);
	}
	
	/// <summary>
	/// 更新全部社交数据组(客户端调用)
	/// </summary>
	public void updateRoleSocialDatas()
	{
		me.send(UpdateRoleSocialDataRequest.create());
	}
	
	/// <summary>
	/// 更新社交数据组返回
	/// </summary>
	public void onUpdateRoleSocialDatas(LongObjectMap<RoleSocialData> dic)
	{
		if(!dic.isEmpty())
		{
			long[] keys=dic.getKeys();
			RoleSocialData[] values=dic.getValues();
			long fv=dic.getFreeValue();
			long k;
			RoleSocialData v;

			for(int i=keys.Length-1;i>=0;--i)
			{
				if((k=keys[i])!=fv)
				{
					v=values[i];

					addPlayerRoleSocial(k,v);
				}
			}

			me.dispatch(GameEventType.UpdateSocialData);
		}
	}
	
	/// <summary>
	/// 更新社交数据单个返回
	/// </summary>
	public void onUpdateRoleSocialDataOne(RoleSocialData data)
	{
		addPlayerRoleSocial(data.showData.playerID,data);

		me.dispatch(GameEventType.UpdateSocialData);
	}
	
	protected override BaseData createPartData()
	{
		return new SocialPartData();
	}
	
	/// <summary>
	/// 注册某类型的查询角色接收回调(接收返回数据)(construct阶段用)
	/// </summary>
	public void registReQueryPlayerFunc(int type,Action<QueryPlayerResultData> func)
	{
		_reQueryPlayerFuncDic.put(type,func);
	}
	
	/// <summary>
	/// 查询角色数据
	/// </summary>
	public void queryPlayer(long playerID,int type)
	{
		queryPlayer(playerID,type,null);
	}
	
	/// <summary>
	/// 查询角色数据
	/// </summary>
	public void queryPlayer(long playerID,int type,int[] args)
	{
		me.send(QueryPlayerRequest.create(playerID,type,args));
	}
	
	/// <summary>
	/// 接收到查询角色事务结果
	/// </summary>
	public void onQueryPlayerResult(QueryPlayerResultData result)
	{
		Action<QueryPlayerResultData> func=_reQueryPlayerFuncDic.get(result.queryType);

		if(func==null)
		{
			me.errorLog("接收到查询角色事务结果时,未注册事务类型:"+result.queryType);
			return;
		}

		func(result);
	}
	
	/// <summary>
	/// 获取单一聊天数据
	/// </summary>
	public ChatChannelData getSingleChatChannelData(int channel)
	{
		return getChatChannelData(channel,0);
	}
	
	/// <summary>
	/// 获取聊天频道数据
	/// </summary>
	public ChatChannelData getChatChannelData(int channel,long key)
	{
		ChatChannelConfig config=ChatChannelConfig.get(channel);

		ChatChannelData re;

		if(config.isMulti)
		{
			LongObjectMap<ChatChannelData> dic=_multiChannels.get(channel);

			if(dic==null)
			{
				_multiChannels.put(channel,dic=new LongObjectMap<ChatChannelData>());
			}

			if((re=dic.get(key))==null)
			{
				dic.put(key,re=new ChatChannelData());
				re.initDefault();
			}
		}
		else
		{
			if((re=_singleChannels.get(channel))==null)
			{
				_singleChannels.put(channel,re=new ChatChannelData());
				re.initDefault();
			}
		}

		return re;
	}
	
	/// <summary>
	/// 接收聊天内容
	/// </summary>
	public void onReceiveChat(RoleChatData chatData,int channel,long key)
	{
		ChatChannelConfig config=ChatChannelConfig.get(channel);

		ChatChannelData cData=getChatChannelData(channel,key);

		cData.queue.offer(chatData);

		if(config.keepNum>0 && cData.queue.size()>config.keepNum)
		{
			cData.queue.poll();
		}

		if(config.offlineReceive)
		{
			_chatReceiveIndex=chatData.sendIndex;
			_chatReceiveIndexModified=true;
		}

		NormalEvt evt=me.nEvt;
		evt.int0=channel;
		evt.long0=key;
		me.dispatchNormal(GameEventType.ReceiveChat);
	}
	
	/// <summary>
	/// 发送聊天
	/// </summary>
	public void chat(ChatData data,int channel,long key)
	{
		ChatChannelConfig config=ChatChannelConfig.get(channel);

		//条件不满足
		if(!me.role.checkRoleConditions(config.useConditions,true))
		{
			me.warnLog("聊天条件不满足",channel);
			return;
		}

		ChatChannelData cData=getChatChannelData(channel,key);

		long now=me.getTimeMillis();

		if(config.cd>0 && (cData.lastChatTime+config.cd>now))
		{
			me.warnLog("聊天cd中",channel);
			return;
		}

		if(config.costID>0 && !me.bag.hasCost(config.costID))
		{
			me.warnLog("聊天cost不足",channel);
			return;
		}

		//文字
		if(data.type==ChatType.Text && BaseGameUtils.hasSensitiveWord(data.text))
		{
			me.warnLog("聊天有屏蔽字内容",data.text);
			return;
		}

		if(config.cd>0)
			cData.lastChatTime=now;

		//需要自行添加的
		if(channel==ChatChannelType.Whisper)
		{
			RoleChatData rData=new RoleChatData();
			rData.chatData=data;
			rData.showData=me.role.createRoleSimpleShowData();
			rData.time=me.getTimeMillis();
			rData.sendIndex=_chatReceiveIndex;//当前序号
			onReceiveChat(rData,channel,key);
		}

		me.send(PlayerChatRequest.create(data,channel,key));
	}
	
}
