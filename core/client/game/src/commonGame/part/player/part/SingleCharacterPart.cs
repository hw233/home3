using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
public class SingleCharacterPart:CharacterPart
{
	/** 数据 */
	private SingleCharacterPartData _d;
	
	/** 主角色 */
	private CharacterUseLogic _hero;
	
	public override void setData(BaseData data)
	{
		base.setData(data);
		
		_d=(SingleCharacterPartData)data;
	}
	
	/// <summary>
	/// 获取数据
	/// </summary>
	public SingleCharacterPartData getPartData()
	{
		return _d;
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public override void construct()
	{
		base.construct();

		_hero=GameC.factory.createCharacterUseLogic();
	}
	
	/// <summary>
	/// 构造数据前
	/// </summary>
	protected override void beforeMakeData()
	{
		base.beforeMakeData();
		
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public override void init()
	{
		base.init();
		
	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public override void dispose()
	{
		base.dispose();

		_hero.dispose();
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public override void afterReadData()
	{
		base.afterReadData();

		initUseLogicByUseData(_hero,_d.hero,true,true,false);
		_hero.setIsWorking(true);
	}
	
	/// <summary>
	/// 配置表更新后(配置替换)
	/// </summary>
	public override void onReloadConfig()
	{
		base.onReloadConfig();

		if(_hero!=null)
		{
			_hero.getFightLogic().reloadConfig();
		}
	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public override void onFunctionOpen(int id)
	{
		base.onFunctionOpen(id);
		
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public override void onFunctionClose(int id)
	{
		base.onFunctionClose(id);
		
	}
	
	public override void onNewCreate()
	{
		base.onNewCreate();

		_d.hero=GameC.factory.createCharacterUseData();

		onNewCreateHero(_d.hero);
	}
	
	public override CharacterUseLogic getCurrentCharacterUseLogic()
	{
		return _hero;
	}
	
	protected override BaseData createPartData()
	{
		return new SingleCharacterPartData();
	}
	
	/// <summary>
	/// 新创建主角
	/// </summary>
	protected void onNewCreateHero(CharacterUseData useData)
	{
		useData.initDefault();

		CharacterConfig cConfig=CharacterConfig.getCharacterConfigByVocationAndSex(me.role.vocation,me.role.getPartData().sex);

		if(cConfig==null)
		{
			Ctrl.errorLog("找不到单角色配置",me.role.vocation,me.role.getPartData().sex);
			return;
		}

		useData.id=cConfig.id;
		useData.level=me.role.getLevel();

		newCreateUseData(useData);
	}
	
}
