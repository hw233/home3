using ShineEngine;

/// <summary>
/// 场景(generated by shine)
/// </summary>
public class ScenePart:PlayerBasePart
{
	/** 数据 */
	private ScenePartData _d;
	
	/** 是否匹配的功能ID(-1就是没在匹配中) */
	private int _matchingFuncID=-1;
	
	public override void setData(BaseData data)
	{
		base.setData(data);
		
		_d=(ScenePartData)data;
	}
	
	/// <summary>
	/// 获取数据
	/// </summary>
	public ScenePartData getPartData()
	{
		return _d;
	}
	
	/// <summary>
	/// 构造函数(只在new后调用一次,再次从池中取出不会调用)
	/// </summary>
	public override void construct()
	{
	}
	
	/// <summary>
	/// 构造数据前
	/// </summary>
	protected override void beforeMakeData()
	{
		
	}
	
	/// <summary>
	/// 初始化(创建后刚调用,与dispose成对)
	/// </summary>
	public override void init()
	{
	}
	
	/// <summary>
	/// 析构(回池前调用,与init成对)
	/// </summary>
	public override void dispose()
	{
	}
	
	/// <summary>
	/// 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程)
	/// </summary>
	public override void afterReadData()
	{
	}
	
	/// <summary>
	/// 功能开启(id:功能ID)
	/// </summary>
	public override void onFunctionOpen(int id)
	{
	}
	
	/// <summary>
	/// 功能关闭(id:功能ID)
	/// </summary>
	public override void onFunctionClose(int id)
	{
	}
	
	public override void onNewCreate()
	{

	}
	
	/// <summary>
	/// 当前是否匹配中
	/// </summary>
	public bool isMatching()
	{
		return _matchingFuncID!=-1;
	}
	
	/// <summary>
	/// 获取当前的匹配功能ID
	/// </summary>
	public int getMatchingFuncID()
	{
		return _matchingFuncID;
	}
	
	public void setMatchingFuncID(int funcID)
	{
		_matchingFuncID=funcID;
	}
	
	protected override BaseData createPartData()
	{
		return new ScenePartData();
	}
	
}
