using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
public class ActivityPartData:BaseData
{
	/// <summary>
	/// 数据组
	/// </summary>
	public IntObjectMap<ActivityData> datas;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=PlayerPartDataType.Activity;
	
	public ActivityPartData()
	{
		_dataID=PlayerPartDataType.Activity;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		int datasLen=stream.readLen();
		if(this.datas!=null)
		{
			this.datas.clear();
			this.datas.ensureCapacity(datasLen);
		}
		else
		{
			this.datas=new IntObjectMap<ActivityData>(datasLen);
		}
		
		IntObjectMap<ActivityData> datasT=this.datas;
		for(int datasI=datasLen-1;datasI>=0;--datasI)
		{
			ActivityData datasV;
			datasV=(ActivityData)stream.readDataSimpleNotNull();
			
			datasT.put(datasV.id,datasV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.datas!=null)
		{
			stream.writeLen(this.datas.size());
			if(!this.datas.isEmpty())
			{
				ActivityData[] datasVValues=this.datas.getValues();
				for(int datasVI=datasVValues.Length-1;datasVI>=0;--datasVI)
				{
					ActivityData datasV=datasVValues[datasVI];
					if(datasV!=null)
					{
						if(datasV!=null)
						{
							stream.writeDataSimpleNotNull(datasV);
						}
						else
						{
							nullObjError("datasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("datas");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is ActivityPartData))
			return;
		
		ActivityPartData mData=(ActivityPartData)data;
		
		this.datas=mData.datas;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is ActivityPartData))
			return;
		
		ActivityPartData mData=(ActivityPartData)data;
		
		if(mData.datas!=null)
		{
			if(this.datas!=null)
			{
				this.datas.clear();
				this.datas.ensureCapacity(mData.datas.size());
			}
			else
			{
				this.datas=new IntObjectMap<ActivityData>(mData.datas.size());
			}
			
			IntObjectMap<ActivityData> datasT=this.datas;
			if(!mData.datas.isEmpty())
			{
				ActivityData[] datasVValues=mData.datas.getValues();
				for(int datasVI=datasVValues.Length-1;datasVI>=0;--datasVI)
				{
					ActivityData datasV=datasVValues[datasVI];
					if(datasV!=null)
					{
						ActivityData datasU;
						if(datasV!=null)
						{
							datasU=(ActivityData)datasV.clone();
						}
						else
						{
							datasU=null;
							nullObjError("datasU");
						}
						
						datasT.put(datasU.id,datasU);
					}
				}
			}
		}
		else
		{
			this.datas=null;
			nullObjError("datas");
		}
		
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ActivityPartData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int datasLen=stream.readLen();
		if(this.datas!=null)
		{
			this.datas.clear();
			this.datas.ensureCapacity(datasLen);
		}
		else
		{
			this.datas=new IntObjectMap<ActivityData>(datasLen);
		}
		
		IntObjectMap<ActivityData> datasT=this.datas;
		for(int datasI=datasLen-1;datasI>=0;--datasI)
		{
			ActivityData datasV;
			BaseData datasVT=stream.readDataFullNotNull();
			if(datasVT!=null)
			{
				if(datasVT is ActivityData)
				{
					datasV=(ActivityData)datasVT;
				}
				else
				{
					datasV=new ActivityData();
					if(!(datasVT.GetType().IsAssignableFrom(typeof(ActivityData))))
					{
						stream.throwTypeReadError(typeof(ActivityData),datasVT.GetType());
					}
					datasV.shadowCopy(datasVT);
				}
			}
			else
			{
				datasV=null;
			}
			
			datasT.put(datasV.id,datasV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.datas!=null)
		{
			stream.writeLen(this.datas.size());
			if(!this.datas.isEmpty())
			{
				ActivityData[] datasVValues=this.datas.getValues();
				for(int datasVI=datasVValues.Length-1;datasVI>=0;--datasVI)
				{
					ActivityData datasV=datasVValues[datasVI];
					if(datasV!=null)
					{
						if(datasV!=null)
						{
							stream.writeDataFullNotNull(datasV);
						}
						else
						{
							nullObjError("datasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("datas");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		ActivityPartData mData=(ActivityPartData)data;
		if(mData.datas!=null)
		{
			if(this.datas==null)
				return false;
			if(this.datas.size()!=mData.datas.size())
				return false;
			IntObjectMap<ActivityData> datasR=mData.datas;
			if(!this.datas.isEmpty())
			{
				int datasKFreeValue=this.datas.getFreeValue();
				int[] datasKKeys=this.datas.getKeys();
				ActivityData[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.Length-1;datasKI>=0;--datasKI)
				{
					int datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						ActivityData datasV=datasVValues[datasKI];
						ActivityData datasU=datasR.get(datasK);
						if(datasU!=null)
						{
							if(datasV==null)
								return false;
							if(!datasV.dataEquals(datasU))
								return false;
						}
						else
						{
							if(datasV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.datas!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("datas");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,ActivityData>");
		if(this.datas!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.datas.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.datas.isEmpty())
			{
				int datasKFreeValue=this.datas.getFreeValue();
				int[] datasKKeys=this.datas.getKeys();
				ActivityData[] datasVValues=this.datas.getValues();
				for(int datasKI=datasKKeys.Length-1;datasKI>=0;--datasKI)
				{
					int datasK=datasKKeys[datasKI];
					if(datasK!=datasKFreeValue)
					{
						ActivityData datasV=datasVValues[datasKI];
						writer.writeTabs();
						writer.sb.Append(datasK);
						
						writer.sb.Append(':');
						if(datasV!=null)
						{
							datasV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("ActivityData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.datas=new IntObjectMap<ActivityData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.datas=null;
	}
	
}
