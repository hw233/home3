using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
public class AchievementPartData:BaseData
{
	/// <summary>
	/// 完成数据组
	/// </summary>
	public IntObjectMap<AchievementCompleteData> completeDatas;
	
	/// <summary>
	/// 运行中数据组
	/// </summary>
	public IntObjectMap<AchievementData> runningDatas;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=PlayerPartDataType.Achievement;
	
	public AchievementPartData()
	{
		_dataID=PlayerPartDataType.Achievement;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		int runningDatasLen=stream.readLen();
		if(this.runningDatas!=null)
		{
			this.runningDatas.clear();
			this.runningDatas.ensureCapacity(runningDatasLen);
		}
		else
		{
			this.runningDatas=new IntObjectMap<AchievementData>(runningDatasLen);
		}
		
		IntObjectMap<AchievementData> runningDatasT=this.runningDatas;
		for(int runningDatasI=runningDatasLen-1;runningDatasI>=0;--runningDatasI)
		{
			AchievementData runningDatasV;
			runningDatasV=(AchievementData)stream.readDataSimpleNotNull();
			
			runningDatasT.put(runningDatasV.id,runningDatasV);
		}
		
		int completeDatasLen=stream.readLen();
		if(this.completeDatas!=null)
		{
			this.completeDatas.clear();
			this.completeDatas.ensureCapacity(completeDatasLen);
		}
		else
		{
			this.completeDatas=new IntObjectMap<AchievementCompleteData>(completeDatasLen);
		}
		
		IntObjectMap<AchievementCompleteData> completeDatasT=this.completeDatas;
		for(int completeDatasI=completeDatasLen-1;completeDatasI>=0;--completeDatasI)
		{
			AchievementCompleteData completeDatasV;
			completeDatasV=(AchievementCompleteData)stream.readDataSimpleNotNull();
			
			completeDatasT.put(completeDatasV.id,completeDatasV);
		}
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		if(this.runningDatas!=null)
		{
			stream.writeLen(this.runningDatas.size());
			if(!this.runningDatas.isEmpty())
			{
				AchievementData[] runningDatasVValues=this.runningDatas.getValues();
				for(int runningDatasVI=runningDatasVValues.Length-1;runningDatasVI>=0;--runningDatasVI)
				{
					AchievementData runningDatasV=runningDatasVValues[runningDatasVI];
					if(runningDatasV!=null)
					{
						if(runningDatasV!=null)
						{
							stream.writeDataSimpleNotNull(runningDatasV);
						}
						else
						{
							nullObjError("runningDatasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("runningDatas");
		}
		
		if(this.completeDatas!=null)
		{
			stream.writeLen(this.completeDatas.size());
			if(!this.completeDatas.isEmpty())
			{
				AchievementCompleteData[] completeDatasVValues=this.completeDatas.getValues();
				for(int completeDatasVI=completeDatasVValues.Length-1;completeDatasVI>=0;--completeDatasVI)
				{
					AchievementCompleteData completeDatasV=completeDatasVValues[completeDatasVI];
					if(completeDatasV!=null)
					{
						if(completeDatasV!=null)
						{
							stream.writeDataSimpleNotNull(completeDatasV);
						}
						else
						{
							nullObjError("completeDatasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeDatas");
		}
		
	}
	
	/// <summary>
	/// 复制(潜拷贝)
	/// </summary>
	protected override void toShadowCopy(BaseData data)
	{
		if(!(data is AchievementPartData))
			return;
		
		AchievementPartData mData=(AchievementPartData)data;
		
		this.runningDatas=mData.runningDatas;
		this.completeDatas=mData.completeDatas;
	}
	
	/// <summary>
	/// 复制(深拷贝)
	/// </summary>
	protected override void toCopy(BaseData data)
	{
		if(!(data is AchievementPartData))
			return;
		
		AchievementPartData mData=(AchievementPartData)data;
		
		if(mData.runningDatas!=null)
		{
			if(this.runningDatas!=null)
			{
				this.runningDatas.clear();
				this.runningDatas.ensureCapacity(mData.runningDatas.size());
			}
			else
			{
				this.runningDatas=new IntObjectMap<AchievementData>(mData.runningDatas.size());
			}
			
			IntObjectMap<AchievementData> runningDatasT=this.runningDatas;
			if(!mData.runningDatas.isEmpty())
			{
				AchievementData[] runningDatasVValues=mData.runningDatas.getValues();
				for(int runningDatasVI=runningDatasVValues.Length-1;runningDatasVI>=0;--runningDatasVI)
				{
					AchievementData runningDatasV=runningDatasVValues[runningDatasVI];
					if(runningDatasV!=null)
					{
						AchievementData runningDatasU;
						if(runningDatasV!=null)
						{
							runningDatasU=(AchievementData)runningDatasV.clone();
						}
						else
						{
							runningDatasU=null;
							nullObjError("runningDatasU");
						}
						
						runningDatasT.put(runningDatasU.id,runningDatasU);
					}
				}
			}
		}
		else
		{
			this.runningDatas=null;
			nullObjError("runningDatas");
		}
		
		if(mData.completeDatas!=null)
		{
			if(this.completeDatas!=null)
			{
				this.completeDatas.clear();
				this.completeDatas.ensureCapacity(mData.completeDatas.size());
			}
			else
			{
				this.completeDatas=new IntObjectMap<AchievementCompleteData>(mData.completeDatas.size());
			}
			
			IntObjectMap<AchievementCompleteData> completeDatasT=this.completeDatas;
			if(!mData.completeDatas.isEmpty())
			{
				AchievementCompleteData[] completeDatasVValues=mData.completeDatas.getValues();
				for(int completeDatasVI=completeDatasVValues.Length-1;completeDatasVI>=0;--completeDatasVI)
				{
					AchievementCompleteData completeDatasV=completeDatasVValues[completeDatasVI];
					if(completeDatasV!=null)
					{
						AchievementCompleteData completeDatasU;
						if(completeDatasV!=null)
						{
							completeDatasU=(AchievementCompleteData)completeDatasV.clone();
						}
						else
						{
							completeDatasU=null;
							nullObjError("completeDatasU");
						}
						
						completeDatasT.put(completeDatasU.id,completeDatasU);
					}
				}
			}
		}
		else
		{
			this.completeDatas=null;
			nullObjError("completeDatas");
		}
		
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "AchievementPartData";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		stream.startReadObj();
		
		int runningDatasLen=stream.readLen();
		if(this.runningDatas!=null)
		{
			this.runningDatas.clear();
			this.runningDatas.ensureCapacity(runningDatasLen);
		}
		else
		{
			this.runningDatas=new IntObjectMap<AchievementData>(runningDatasLen);
		}
		
		IntObjectMap<AchievementData> runningDatasT=this.runningDatas;
		for(int runningDatasI=runningDatasLen-1;runningDatasI>=0;--runningDatasI)
		{
			AchievementData runningDatasV;
			BaseData runningDatasVT=stream.readDataFullNotNull();
			if(runningDatasVT!=null)
			{
				if(runningDatasVT is AchievementData)
				{
					runningDatasV=(AchievementData)runningDatasVT;
				}
				else
				{
					runningDatasV=new AchievementData();
					if(!(runningDatasVT.GetType().IsAssignableFrom(typeof(AchievementData))))
					{
						stream.throwTypeReadError(typeof(AchievementData),runningDatasVT.GetType());
					}
					runningDatasV.shadowCopy(runningDatasVT);
				}
			}
			else
			{
				runningDatasV=null;
			}
			
			runningDatasT.put(runningDatasV.id,runningDatasV);
		}
		
		int completeDatasLen=stream.readLen();
		if(this.completeDatas!=null)
		{
			this.completeDatas.clear();
			this.completeDatas.ensureCapacity(completeDatasLen);
		}
		else
		{
			this.completeDatas=new IntObjectMap<AchievementCompleteData>(completeDatasLen);
		}
		
		IntObjectMap<AchievementCompleteData> completeDatasT=this.completeDatas;
		for(int completeDatasI=completeDatasLen-1;completeDatasI>=0;--completeDatasI)
		{
			AchievementCompleteData completeDatasV;
			BaseData completeDatasVT=stream.readDataFullNotNull();
			if(completeDatasVT!=null)
			{
				if(completeDatasVT is AchievementCompleteData)
				{
					completeDatasV=(AchievementCompleteData)completeDatasVT;
				}
				else
				{
					completeDatasV=new AchievementCompleteData();
					if(!(completeDatasVT.GetType().IsAssignableFrom(typeof(AchievementCompleteData))))
					{
						stream.throwTypeReadError(typeof(AchievementCompleteData),completeDatasVT.GetType());
					}
					completeDatasV.shadowCopy(completeDatasVT);
				}
			}
			else
			{
				completeDatasV=null;
			}
			
			completeDatasT.put(completeDatasV.id,completeDatasV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		stream.startWriteObj();
		
		if(this.runningDatas!=null)
		{
			stream.writeLen(this.runningDatas.size());
			if(!this.runningDatas.isEmpty())
			{
				AchievementData[] runningDatasVValues=this.runningDatas.getValues();
				for(int runningDatasVI=runningDatasVValues.Length-1;runningDatasVI>=0;--runningDatasVI)
				{
					AchievementData runningDatasV=runningDatasVValues[runningDatasVI];
					if(runningDatasV!=null)
					{
						if(runningDatasV!=null)
						{
							stream.writeDataFullNotNull(runningDatasV);
						}
						else
						{
							nullObjError("runningDatasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("runningDatas");
		}
		
		if(this.completeDatas!=null)
		{
			stream.writeLen(this.completeDatas.size());
			if(!this.completeDatas.isEmpty())
			{
				AchievementCompleteData[] completeDatasVValues=this.completeDatas.getValues();
				for(int completeDatasVI=completeDatasVValues.Length-1;completeDatasVI>=0;--completeDatasVI)
				{
					AchievementCompleteData completeDatasV=completeDatasVValues[completeDatasVI];
					if(completeDatasV!=null)
					{
						if(completeDatasV!=null)
						{
							stream.writeDataFullNotNull(completeDatasV);
						}
						else
						{
							nullObjError("completeDatasV");
						}
						
					}
				}
			}
		}
		else
		{
			nullObjError("completeDatas");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 是否数据一致
	/// </summary>
	protected override bool toDataEquals(BaseData data)
	{
		AchievementPartData mData=(AchievementPartData)data;
		if(mData.runningDatas!=null)
		{
			if(this.runningDatas==null)
				return false;
			if(this.runningDatas.size()!=mData.runningDatas.size())
				return false;
			IntObjectMap<AchievementData> runningDatasR=mData.runningDatas;
			if(!this.runningDatas.isEmpty())
			{
				int runningDatasKFreeValue=this.runningDatas.getFreeValue();
				int[] runningDatasKKeys=this.runningDatas.getKeys();
				AchievementData[] runningDatasVValues=this.runningDatas.getValues();
				for(int runningDatasKI=runningDatasKKeys.Length-1;runningDatasKI>=0;--runningDatasKI)
				{
					int runningDatasK=runningDatasKKeys[runningDatasKI];
					if(runningDatasK!=runningDatasKFreeValue)
					{
						AchievementData runningDatasV=runningDatasVValues[runningDatasKI];
						AchievementData runningDatasU=runningDatasR.get(runningDatasK);
						if(runningDatasU!=null)
						{
							if(runningDatasV==null)
								return false;
							if(!runningDatasV.dataEquals(runningDatasU))
								return false;
						}
						else
						{
							if(runningDatasV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.runningDatas!=null)
				return false;
		}
		
		if(mData.completeDatas!=null)
		{
			if(this.completeDatas==null)
				return false;
			if(this.completeDatas.size()!=mData.completeDatas.size())
				return false;
			IntObjectMap<AchievementCompleteData> completeDatasR=mData.completeDatas;
			if(!this.completeDatas.isEmpty())
			{
				int completeDatasKFreeValue=this.completeDatas.getFreeValue();
				int[] completeDatasKKeys=this.completeDatas.getKeys();
				AchievementCompleteData[] completeDatasVValues=this.completeDatas.getValues();
				for(int completeDatasKI=completeDatasKKeys.Length-1;completeDatasKI>=0;--completeDatasKI)
				{
					int completeDatasK=completeDatasKKeys[completeDatasKI];
					if(completeDatasK!=completeDatasKFreeValue)
					{
						AchievementCompleteData completeDatasV=completeDatasVValues[completeDatasKI];
						AchievementCompleteData completeDatasU=completeDatasR.get(completeDatasK);
						if(completeDatasU!=null)
						{
							if(completeDatasV==null)
								return false;
							if(!completeDatasV.dataEquals(completeDatasU))
								return false;
						}
						else
						{
							if(completeDatasV!=null)
								return false;
						}
						
					}
				}
			}
		}
		else
		{
			if(this.completeDatas!=null)
				return false;
		}
		
		return true;
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		writer.writeTabs();
		writer.sb.Append("runningDatas");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,AchievementData>");
		if(this.runningDatas!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.runningDatas.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.runningDatas.isEmpty())
			{
				int runningDatasKFreeValue=this.runningDatas.getFreeValue();
				int[] runningDatasKKeys=this.runningDatas.getKeys();
				AchievementData[] runningDatasVValues=this.runningDatas.getValues();
				for(int runningDatasKI=runningDatasKKeys.Length-1;runningDatasKI>=0;--runningDatasKI)
				{
					int runningDatasK=runningDatasKKeys[runningDatasKI];
					if(runningDatasK!=runningDatasKFreeValue)
					{
						AchievementData runningDatasV=runningDatasVValues[runningDatasKI];
						writer.writeTabs();
						writer.sb.Append(runningDatasK);
						
						writer.sb.Append(':');
						if(runningDatasV!=null)
						{
							runningDatasV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("AchievementData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("completeDatas");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,AchievementCompleteData>");
		if(this.completeDatas!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.completeDatas.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.completeDatas.isEmpty())
			{
				int completeDatasKFreeValue=this.completeDatas.getFreeValue();
				int[] completeDatasKKeys=this.completeDatas.getKeys();
				AchievementCompleteData[] completeDatasVValues=this.completeDatas.getValues();
				for(int completeDatasKI=completeDatasKKeys.Length-1;completeDatasKI>=0;--completeDatasKI)
				{
					int completeDatasK=completeDatasKKeys[completeDatasKI];
					if(completeDatasK!=completeDatasKFreeValue)
					{
						AchievementCompleteData completeDatasV=completeDatasVValues[completeDatasKI];
						writer.writeTabs();
						writer.sb.Append(completeDatasK);
						
						writer.sb.Append(':');
						if(completeDatasV!=null)
						{
							completeDatasV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("AchievementCompleteData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 初始化初值
	/// </summary>
	public override void initDefault()
	{
		this.runningDatas=new IntObjectMap<AchievementData>();
		this.completeDatas=new IntObjectMap<AchievementCompleteData>();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		this.runningDatas=null;
		this.completeDatas=null;
	}
	
}
