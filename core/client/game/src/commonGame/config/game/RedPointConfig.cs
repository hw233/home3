using ShineEngine;

/// <summary>
/// 红点类型(generated by shine)
/// </summary>
public class RedPointConfig:BaseConfig
{
	/** 存储集合 */
	private static RedPointConfig[] _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 父级节点
	/// </summary>
	public int parentID;
	
	/// <summary>
	/// 子项组
	/// </summary>
	public IntList children=new IntList();
	
	/// <summary>
	/// 获取
	/// </summary>
	public static RedPointConfig get(int id)
	{
		return id>=0 && id<_dic.Length ? _dic[id] : null;
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(RedPointConfig[] dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(RedPointConfig[] dic)
	{
		ObjectUtils.arrayPutAll(_dic,dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static RedPointConfig[] getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.parentID=stream.readInt();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		foreach(RedPointConfig v in _dic)
		{
			if(v!=null)
			{
				if(v.parentID>0)
				{
					_dic[v.parentID].children.add(v.id);
				}
			}
		}
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.parentID);
		
	}
	
}
