using ShineEngine;
using System;
using UnityEngine;

/// <summary>
/// 界面表(generated by shine)
/// </summary>
public class UIConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<UIConfig> _dic;
	
	/// <summary>
	/// 活动id到uiID关系存储集合
	/// </summary>
	public static IntIntMap activityIDToUIIDdic=new IntIntMap();
	
	/// <summary>
	/// 功能id到uiID关系存储集合
	/// </summary>
	public static IntIntMap functionIDToUIIDdic=new IntIntMap();
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/// <summary>
	/// 界面id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 存在类型
	/// </summary>
	public int existType;
	
	/// <summary>
	/// 显示条件
	/// </summary>
	public int[][] showConditions;
	
	/// <summary>
	/// 包名
	/// </summary>
	public string packageName;
	
	/// <summary>
	/// 显示隐藏时刻
	/// </summary>
	public int[] doMoments;
	
	/// <summary>
	/// 是否模态
	/// </summary>
	public bool isModal;
	
	/// <summary>
	/// 绑定的功能id
	/// </summary>
	public int[] functionIDs;
	
	/// <summary>
	/// 绑定的活动id
	/// </summary>
	public int[] activityIDs;
	
	/// <summary>
	/// 模态颜色
	/// </summary>
	public string modalColor;
	
	/// <summary>
	/// 模态颜色
	/// </summary>
	public Color modalColorT;
	
	/// <summary>
	/// 层级
	/// </summary>
	public int layer;
	
	/// <summary>
	/// 资源名(资源转)
	/// </summary>
	public int resourceNameT;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static UIConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<UIConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<UIConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<UIConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.existType=stream.readInt();
		
		this.packageName=stream.readUTF();
		
		this.layer=stream.readInt();
		
		int doMomentsLen=stream.readLen();
		if(this.doMoments==null || this.doMoments.Length!=doMomentsLen)
		{
			this.doMoments=new int[doMomentsLen];
		}
		int[] doMomentsT=this.doMoments;
		for(int doMomentsI=0;doMomentsI<doMomentsLen;++doMomentsI)
		{
			int doMomentsV;
			doMomentsV=stream.readInt();
			
			doMomentsT[doMomentsI]=doMomentsV;
		}
		
		int showConditionsLen=stream.readLen();
		if(this.showConditions==null || this.showConditions.Length!=showConditionsLen)
		{
			this.showConditions=new int[showConditionsLen][];
		}
		int[][] showConditionsT=this.showConditions;
		for(int showConditionsI=0;showConditionsI<showConditionsLen;++showConditionsI)
		{
			int[] showConditionsV;
			int showConditionsVLen=stream.readLen();
			showConditionsV=new int[showConditionsVLen];
			int[] showConditionsVT=showConditionsV;
			for(int showConditionsVI=0;showConditionsVI<showConditionsVLen;++showConditionsVI)
			{
				int showConditionsVV;
				showConditionsVV=stream.readInt();
				
				showConditionsVT[showConditionsVI]=showConditionsVV;
			}
			
			showConditionsT[showConditionsI]=showConditionsV;
		}
		
		this.isModal=stream.readBoolean();
		
		this.modalColor=stream.readUTF();
		
		int activityIDsLen=stream.readLen();
		if(this.activityIDs==null || this.activityIDs.Length!=activityIDsLen)
		{
			this.activityIDs=new int[activityIDsLen];
		}
		int[] activityIDsT=this.activityIDs;
		for(int activityIDsI=0;activityIDsI<activityIDsLen;++activityIDsI)
		{
			int activityIDsV;
			activityIDsV=stream.readInt();
			
			activityIDsT[activityIDsI]=activityIDsV;
		}
		
		int functionIDsLen=stream.readLen();
		if(this.functionIDs==null || this.functionIDs.Length!=functionIDsLen)
		{
			this.functionIDs=new int[functionIDsLen];
		}
		int[] functionIDsT=this.functionIDs;
		for(int functionIDsI=0;functionIDsI<functionIDsLen;++functionIDsI)
		{
			int functionIDsV;
			functionIDsV=stream.readInt();
			
			functionIDsT[functionIDsI]=functionIDsV;
		}
		
	}
	
	protected override void afterReadConfig()
	{
		resourceNameT=BaseGameUtils.getUIModelResourceID(name + "UI",true);

		modalColorT=Color.blue;
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		activityIDToUIIDdic.clear();
		functionIDToUIIDdic.clear();
		
		foreach(UIConfig config in _dic)
		{
			if(config!=null)
			{
				if (config.activityIDs.Length > 0)
				{
					for (int i=0;i<config.activityIDs.Length;++i)
					{
						activityIDToUIIDdic.put(config.activityIDs[i],config.id);
					}
				}

				if (config.functionIDs.Length > 0)
				{
					for (int i=0;i<config.functionIDs.Length;++i)
					{
						functionIDToUIIDdic.put(config.functionIDs[i],config.id);
					}
				}
			}
		}
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.existType);
		
		stream.writeUTF(this.packageName);
		
		stream.writeInt(this.layer);
		
		if(this.doMoments!=null)
		{
			int[] doMomentsT=this.doMoments;
			stream.writeLen(doMomentsT.Length);
			for(int doMomentsVI=0,doMomentsVLen=doMomentsT.Length;doMomentsVI<doMomentsVLen;++doMomentsVI)
			{
				int doMomentsV=doMomentsT[doMomentsVI];
				stream.writeInt(doMomentsV);
				
			}
		}
		else
		{
			nullObjError("doMoments");
		}
		
		if(this.showConditions!=null)
		{
			int[][] showConditionsT=this.showConditions;
			stream.writeLen(showConditionsT.Length);
			for(int showConditionsVI=0,showConditionsVLen=showConditionsT.Length;showConditionsVI<showConditionsVLen;++showConditionsVI)
			{
				int[] showConditionsV=showConditionsT[showConditionsVI];
				if(showConditionsV!=null)
				{
					int[] showConditionsVT=showConditionsV;
					stream.writeLen(showConditionsVT.Length);
					for(int showConditionsVVI=0,showConditionsVVLen=showConditionsVT.Length;showConditionsVVI<showConditionsVVLen;++showConditionsVVI)
					{
						int showConditionsVV=showConditionsVT[showConditionsVVI];
						stream.writeInt(showConditionsVV);
						
					}
				}
				else
				{
					nullObjError("showConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("showConditions");
		}
		
		stream.writeBoolean(this.isModal);
		
		stream.writeUTF(this.modalColor);
		
		if(this.activityIDs!=null)
		{
			int[] activityIDsT=this.activityIDs;
			stream.writeLen(activityIDsT.Length);
			for(int activityIDsVI=0,activityIDsVLen=activityIDsT.Length;activityIDsVI<activityIDsVLen;++activityIDsVI)
			{
				int activityIDsV=activityIDsT[activityIDsVI];
				stream.writeInt(activityIDsV);
				
			}
		}
		else
		{
			nullObjError("activityIDs");
		}
		
		if(this.functionIDs!=null)
		{
			int[] functionIDsT=this.functionIDs;
			stream.writeLen(functionIDsT.Length);
			for(int functionIDsVI=0,functionIDsVLen=functionIDsT.Length;functionIDsVI<functionIDsVLen;++functionIDsVI)
			{
				int functionIDsV=functionIDsT[functionIDsVI];
				stream.writeInt(functionIDsV);
				
			}
		}
		else
		{
			nullObjError("functionIDs");
		}
		
	}
	
}
