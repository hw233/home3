using ShineEngine;

/// <summary>
/// 傀儡等级表(generated by shine)
/// </summary>
public class PuppetLevelConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<PuppetLevelConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 时间结束动作组
	/// </summary>
	public int[][] timeUpActions;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static PuppetLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<PuppetLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<PuppetLevelConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<PuppetLevelConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		int timeUpActionsLen=stream.readLen();
		if(this.timeUpActions==null || this.timeUpActions.Length!=timeUpActionsLen)
		{
			this.timeUpActions=new int[timeUpActionsLen][];
		}
		int[][] timeUpActionsT=this.timeUpActions;
		for(int timeUpActionsI=0;timeUpActionsI<timeUpActionsLen;++timeUpActionsI)
		{
			int[] timeUpActionsV;
			int timeUpActionsVLen=stream.readLen();
			timeUpActionsV=new int[timeUpActionsVLen];
			int[] timeUpActionsVT=timeUpActionsV;
			for(int timeUpActionsVI=0;timeUpActionsVI<timeUpActionsVLen;++timeUpActionsVI)
			{
				int timeUpActionsVV;
				timeUpActionsVV=stream.readInt();
				
				timeUpActionsVT[timeUpActionsVI]=timeUpActionsVV;
			}
			
			timeUpActionsT[timeUpActionsI]=timeUpActionsV;
		}
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 获取
	/// </summary>
	public static PuppetLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		if(this.timeUpActions!=null)
		{
			int[][] timeUpActionsT=this.timeUpActions;
			stream.writeLen(timeUpActionsT.Length);
			for(int timeUpActionsVI=0,timeUpActionsVLen=timeUpActionsT.Length;timeUpActionsVI<timeUpActionsVLen;++timeUpActionsVI)
			{
				int[] timeUpActionsV=timeUpActionsT[timeUpActionsVI];
				if(timeUpActionsV!=null)
				{
					int[] timeUpActionsVT=timeUpActionsV;
					stream.writeLen(timeUpActionsVT.Length);
					for(int timeUpActionsVVI=0,timeUpActionsVVLen=timeUpActionsVT.Length;timeUpActionsVVI<timeUpActionsVVLen;++timeUpActionsVVI)
					{
						int timeUpActionsVV=timeUpActionsVT[timeUpActionsVVI];
						stream.writeInt(timeUpActionsVV);
						
					}
				}
				else
				{
					nullObjError("timeUpActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("timeUpActions");
		}
		
	}
	
}
