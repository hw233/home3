using ShineEngine;

/// <summary>
/// 子弹等级表(generated by shine)
/// </summary>
public class BulletLevelConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<BulletLevelConfig> _dic;
	
	/// <summary>
	/// 子弹id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 投掷类型
	/// </summary>
	public int castType;
	
	/// <summary>
	/// 投掷参数
	/// </summary>
	public float[] castArgs;
	
	/// <summary>
	/// 每个目标影响次数
	/// </summary>
	public int eachHitNum;
	
	/// <summary>
	/// 最大影响目标数
	/// </summary>
	public int maxInfluenceNum;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BulletLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<BulletLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<BulletLevelConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<BulletLevelConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		this.castType=stream.readInt();
		
		int castArgsLen=stream.readLen();
		if(this.castArgs==null || this.castArgs.Length!=castArgsLen)
		{
			this.castArgs=new float[castArgsLen];
		}
		float[] castArgsT=this.castArgs;
		for(int castArgsI=0;castArgsI<castArgsLen;++castArgsI)
		{
			float castArgsV;
			castArgsV=stream.readFloat();
			
			castArgsT[castArgsI]=castArgsV;
		}
		
		this.eachHitNum=stream.readInt();
		
		this.maxInfluenceNum=stream.readInt();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BulletLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		stream.writeInt(this.castType);
		
		if(this.castArgs!=null)
		{
			float[] castArgsT=this.castArgs;
			stream.writeLen(castArgsT.Length);
			for(int castArgsVI=0,castArgsVLen=castArgsT.Length;castArgsVI<castArgsVLen;++castArgsVI)
			{
				float castArgsV=castArgsT[castArgsVI];
				stream.writeFloat(castArgsV);
				
			}
		}
		else
		{
			nullObjError("castArgs");
		}
		
		stream.writeInt(this.eachHitNum);
		
		stream.writeInt(this.maxInfluenceNum);
		
	}
	
}
