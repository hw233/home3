using ShineEngine;
using System;

/// <summary>
/// 场景地图表(generated by shine)
/// </summary>
public class SceneMapConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<SceneMapConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 原点
	/// </summary>
	public int[] origin;
	
	/// <summary>
	/// 尺寸
	/// </summary>
	public int[] size;
	
	/// <summary>
	/// 资源
	/// </summary>
	public string source;
	
	/// <summary>
	/// 资源(资源转)
	/// </summary>
	public int sourceT;
	
	/// <summary>
	/// 附加资源列表
	/// </summary>
	public string[] sourceExList;
	
	/// <summary>
	/// 附加资源列表(资源转)
	/// </summary>
	public int[] sourceExListT;
	
	/// <summary>
	/// 背景音乐
	/// </summary>
	public string music;
	
	/// <summary>
	/// 背景音乐(资源转)
	/// </summary>
	public int musicT;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static SceneMapConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<SceneMapConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<SceneMapConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<SceneMapConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int originLen=stream.readLen();
		if(this.origin==null || this.origin.Length!=originLen)
		{
			this.origin=new int[originLen];
		}
		int[] originT=this.origin;
		for(int originI=0;originI<originLen;++originI)
		{
			int originV;
			originV=stream.readInt();
			
			originT[originI]=originV;
		}
		
		int sizeLen=stream.readLen();
		if(this.size==null || this.size.Length!=sizeLen)
		{
			this.size=new int[sizeLen];
		}
		int[] sizeT=this.size;
		for(int sizeI=0;sizeI<sizeLen;++sizeI)
		{
			int sizeV;
			sizeV=stream.readInt();
			
			sizeT[sizeI]=sizeV;
		}
		
		this.source=stream.readUTF();
		
		int sourceExListLen=stream.readLen();
		if(this.sourceExList==null || this.sourceExList.Length!=sourceExListLen)
		{
			this.sourceExList=new string[sourceExListLen];
		}
		string[] sourceExListT=this.sourceExList;
		for(int sourceExListI=0;sourceExListI<sourceExListLen;++sourceExListI)
		{
			string sourceExListV;
			sourceExListV=stream.readUTF();
			
			sourceExListT[sourceExListI]=sourceExListV;
		}
		
		this.music=stream.readUTF();
		
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		sourceExListT=LoadControl.getResourceIDsByNames(sourceExList);
		sourceT=LoadControl.getResourceIDByName(source);
		musicT=LoadControl.getResourceIDByName(music);
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.origin!=null)
		{
			int[] originT=this.origin;
			stream.writeLen(originT.Length);
			for(int originVI=0,originVLen=originT.Length;originVI<originVLen;++originVI)
			{
				int originV=originT[originVI];
				stream.writeInt(originV);
				
			}
		}
		else
		{
			nullObjError("origin");
		}
		
		if(this.size!=null)
		{
			int[] sizeT=this.size;
			stream.writeLen(sizeT.Length);
			for(int sizeVI=0,sizeVLen=sizeT.Length;sizeVI<sizeVLen;++sizeVI)
			{
				int sizeV=sizeT[sizeVI];
				stream.writeInt(sizeV);
				
			}
		}
		else
		{
			nullObjError("size");
		}
		
		stream.writeUTF(this.source);
		
		if(this.sourceExList!=null)
		{
			string[] sourceExListT=this.sourceExList;
			stream.writeLen(sourceExListT.Length);
			for(int sourceExListVI=0,sourceExListVLen=sourceExListT.Length;sourceExListVI<sourceExListVLen;++sourceExListVI)
			{
				string sourceExListV=sourceExListT[sourceExListVI];
				stream.writeUTF(sourceExListV);
				
			}
		}
		else
		{
			nullObjError("sourceExList");
		}
		
		stream.writeUTF(this.music);
		
	}
	
}
