using ShineEngine;

/// <summary>
/// 操作体表(generated by shine)
/// </summary>
public class OperationConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<OperationConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/// <summary>
	/// 是否一次性
	/// </summary>
	public bool isOnce;
	
	/// <summary>
	/// 可操作半径
	/// </summary>
	public float radius;
	
	/// <summary>
	/// 操作动作
	/// </summary>
	public int[][] operateActions;
	
	/// <summary>
	/// 显示模型
	/// </summary>
	public int modelID;
	
	/// <summary>
	/// 操作条件
	/// </summary>
	public int[][] operateConditions;
	
	/** 名字原值 */
	private string _name;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static OperationConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<OperationConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<OperationConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<OperationConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		int operateConditionsLen=stream.readLen();
		if(this.operateConditions==null || this.operateConditions.Length!=operateConditionsLen)
		{
			this.operateConditions=new int[operateConditionsLen][];
		}
		int[][] operateConditionsT=this.operateConditions;
		for(int operateConditionsI=0;operateConditionsI<operateConditionsLen;++operateConditionsI)
		{
			int[] operateConditionsV;
			int operateConditionsVLen=stream.readLen();
			operateConditionsV=new int[operateConditionsVLen];
			int[] operateConditionsVT=operateConditionsV;
			for(int operateConditionsVI=0;operateConditionsVI<operateConditionsVLen;++operateConditionsVI)
			{
				int operateConditionsVV;
				operateConditionsVV=stream.readInt();
				
				operateConditionsVT[operateConditionsVI]=operateConditionsVV;
			}
			
			operateConditionsT[operateConditionsI]=operateConditionsV;
		}
		
		int operateActionsLen=stream.readLen();
		if(this.operateActions==null || this.operateActions.Length!=operateActionsLen)
		{
			this.operateActions=new int[operateActionsLen][];
		}
		int[][] operateActionsT=this.operateActions;
		for(int operateActionsI=0;operateActionsI<operateActionsLen;++operateActionsI)
		{
			int[] operateActionsV;
			int operateActionsVLen=stream.readLen();
			operateActionsV=new int[operateActionsVLen];
			int[] operateActionsVT=operateActionsV;
			for(int operateActionsVI=0;operateActionsVI<operateActionsVLen;++operateActionsVI)
			{
				int operateActionsVV;
				operateActionsVV=stream.readInt();
				
				operateActionsVT[operateActionsVI]=operateActionsVV;
			}
			
			operateActionsT[operateActionsI]=operateActionsV;
		}
		
		this.radius=stream.readFloat();
		
		this.isOnce=stream.readBoolean();
		
		this.modelID=stream.readInt();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		if(this.operateConditions!=null)
		{
			int[][] operateConditionsT=this.operateConditions;
			stream.writeLen(operateConditionsT.Length);
			for(int operateConditionsVI=0,operateConditionsVLen=operateConditionsT.Length;operateConditionsVI<operateConditionsVLen;++operateConditionsVI)
			{
				int[] operateConditionsV=operateConditionsT[operateConditionsVI];
				if(operateConditionsV!=null)
				{
					int[] operateConditionsVT=operateConditionsV;
					stream.writeLen(operateConditionsVT.Length);
					for(int operateConditionsVVI=0,operateConditionsVVLen=operateConditionsVT.Length;operateConditionsVVI<operateConditionsVVLen;++operateConditionsVVI)
					{
						int operateConditionsVV=operateConditionsVT[operateConditionsVVI];
						stream.writeInt(operateConditionsVV);
						
					}
				}
				else
				{
					nullObjError("operateConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("operateConditions");
		}
		
		if(this.operateActions!=null)
		{
			int[][] operateActionsT=this.operateActions;
			stream.writeLen(operateActionsT.Length);
			for(int operateActionsVI=0,operateActionsVLen=operateActionsT.Length;operateActionsVI<operateActionsVLen;++operateActionsVI)
			{
				int[] operateActionsV=operateActionsT[operateActionsVI];
				if(operateActionsV!=null)
				{
					int[] operateActionsVT=operateActionsV;
					stream.writeLen(operateActionsVT.Length);
					for(int operateActionsVVI=0,operateActionsVVLen=operateActionsVT.Length;operateActionsVVI<operateActionsVVLen;++operateActionsVVI)
					{
						int operateActionsVV=operateActionsVT[operateActionsVVI];
						stream.writeInt(operateActionsVV);
						
					}
				}
				else
				{
					nullObjError("operateActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("operateActions");
		}
		
		stream.writeFloat(this.radius);
		
		stream.writeBoolean(this.isOnce);
		
		stream.writeInt(this.modelID);
		
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
}
