using ShineEngine;

/// <summary>
/// buff等级表(generated by shine)
/// </summary>
public class BuffLevelConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<BuffLevelConfig> _dic;
	
	/// <summary>
	/// 攻击id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 动作组
	/// </summary>
	public int[][] actions;
	
	/// <summary>
	/// 持续时间(ms)
	/// </summary>
	public int lastTime;
	
	/// <summary>
	/// 到(时间/次数)动作组
	/// </summary>
	public int[][] overActions;
	
	/// <summary>
	/// 到叠加次数动作组(只有叠层的有意义)
	/// </summary>
	public int[][] plusMaxActions;
	
	/// <summary>
	/// 持续次数
	/// </summary>
	public int lastNum;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BuffLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<BuffLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<BuffLevelConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<BuffLevelConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		int actionsLen=stream.readLen();
		if(this.actions==null || this.actions.Length!=actionsLen)
		{
			this.actions=new int[actionsLen][];
		}
		int[][] actionsT=this.actions;
		for(int actionsI=0;actionsI<actionsLen;++actionsI)
		{
			int[] actionsV;
			int actionsVLen=stream.readLen();
			actionsV=new int[actionsVLen];
			int[] actionsVT=actionsV;
			for(int actionsVI=0;actionsVI<actionsVLen;++actionsVI)
			{
				int actionsVV;
				actionsVV=stream.readInt();
				
				actionsVT[actionsVI]=actionsVV;
			}
			
			actionsT[actionsI]=actionsV;
		}
		
		this.lastTime=stream.readInt();
		
		this.lastNum=stream.readShort();
		
		int overActionsLen=stream.readLen();
		if(this.overActions==null || this.overActions.Length!=overActionsLen)
		{
			this.overActions=new int[overActionsLen][];
		}
		int[][] overActionsT=this.overActions;
		for(int overActionsI=0;overActionsI<overActionsLen;++overActionsI)
		{
			int[] overActionsV;
			int overActionsVLen=stream.readLen();
			overActionsV=new int[overActionsVLen];
			int[] overActionsVT=overActionsV;
			for(int overActionsVI=0;overActionsVI<overActionsVLen;++overActionsVI)
			{
				int overActionsVV;
				overActionsVV=stream.readInt();
				
				overActionsVT[overActionsVI]=overActionsVV;
			}
			
			overActionsT[overActionsI]=overActionsV;
		}
		
		int plusMaxActionsLen=stream.readLen();
		if(this.plusMaxActions==null || this.plusMaxActions.Length!=plusMaxActionsLen)
		{
			this.plusMaxActions=new int[plusMaxActionsLen][];
		}
		int[][] plusMaxActionsT=this.plusMaxActions;
		for(int plusMaxActionsI=0;plusMaxActionsI<plusMaxActionsLen;++plusMaxActionsI)
		{
			int[] plusMaxActionsV;
			int plusMaxActionsVLen=stream.readLen();
			plusMaxActionsV=new int[plusMaxActionsVLen];
			int[] plusMaxActionsVT=plusMaxActionsV;
			for(int plusMaxActionsVI=0;plusMaxActionsVI<plusMaxActionsVLen;++plusMaxActionsVI)
			{
				int plusMaxActionsVV;
				plusMaxActionsVV=stream.readInt();
				
				plusMaxActionsVT[plusMaxActionsVI]=plusMaxActionsVV;
			}
			
			plusMaxActionsT[plusMaxActionsI]=plusMaxActionsV;
		}
		
	}
	
	/// <summary>
	/// 读完表后处理
	/// </summary>
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		if(ShineSetting.openCheck)
		{
			if(actions.Length>= CommonSetting.buffActionIndexMax)
			{
				Ctrl.throwError("buffAction长度超出限制");
			}
		}
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BuffLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		if(this.actions!=null)
		{
			int[][] actionsT=this.actions;
			stream.writeLen(actionsT.Length);
			for(int actionsVI=0,actionsVLen=actionsT.Length;actionsVI<actionsVLen;++actionsVI)
			{
				int[] actionsV=actionsT[actionsVI];
				if(actionsV!=null)
				{
					int[] actionsVT=actionsV;
					stream.writeLen(actionsVT.Length);
					for(int actionsVVI=0,actionsVVLen=actionsVT.Length;actionsVVI<actionsVVLen;++actionsVVI)
					{
						int actionsVV=actionsVT[actionsVVI];
						stream.writeInt(actionsVV);
						
					}
				}
				else
				{
					nullObjError("actionsV");
				}
				
			}
		}
		else
		{
			nullObjError("actions");
		}
		
		stream.writeInt(this.lastTime);
		
		stream.writeShort(this.lastNum);
		
		if(this.overActions!=null)
		{
			int[][] overActionsT=this.overActions;
			stream.writeLen(overActionsT.Length);
			for(int overActionsVI=0,overActionsVLen=overActionsT.Length;overActionsVI<overActionsVLen;++overActionsVI)
			{
				int[] overActionsV=overActionsT[overActionsVI];
				if(overActionsV!=null)
				{
					int[] overActionsVT=overActionsV;
					stream.writeLen(overActionsVT.Length);
					for(int overActionsVVI=0,overActionsVVLen=overActionsVT.Length;overActionsVVI<overActionsVVLen;++overActionsVVI)
					{
						int overActionsVV=overActionsVT[overActionsVVI];
						stream.writeInt(overActionsVV);
						
					}
				}
				else
				{
					nullObjError("overActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("overActions");
		}
		
		if(this.plusMaxActions!=null)
		{
			int[][] plusMaxActionsT=this.plusMaxActions;
			stream.writeLen(plusMaxActionsT.Length);
			for(int plusMaxActionsVI=0,plusMaxActionsVLen=plusMaxActionsT.Length;plusMaxActionsVI<plusMaxActionsVLen;++plusMaxActionsVI)
			{
				int[] plusMaxActionsV=plusMaxActionsT[plusMaxActionsVI];
				if(plusMaxActionsV!=null)
				{
					int[] plusMaxActionsVT=plusMaxActionsV;
					stream.writeLen(plusMaxActionsVT.Length);
					for(int plusMaxActionsVVI=0,plusMaxActionsVVLen=plusMaxActionsVT.Length;plusMaxActionsVVI<plusMaxActionsVVLen;++plusMaxActionsVVI)
					{
						int plusMaxActionsVV=plusMaxActionsVT[plusMaxActionsVVI];
						stream.writeInt(plusMaxActionsVV);
						
					}
				}
				else
				{
					nullObjError("plusMaxActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("plusMaxActions");
		}
		
	}
	
}
