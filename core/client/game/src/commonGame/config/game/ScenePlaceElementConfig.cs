using ShineEngine;

/// <summary>
/// 场景布置元素表(编辑器对应)(generated by shine)
/// </summary>
public class ScenePlaceElementConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<ScenePlaceElementConfig> _dic;
	
	/// <summary>
	/// 场景ID
	/// </summary>
	public int sceneID;
	
	/// <summary>
	/// 实例ID
	/// </summary>
	public int instanceID;
	
	/// <summary>
	/// 类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 势力
	/// </summary>
	public int force;
	
	/// <summary>
	/// 是否初始化添加
	/// </summary>
	public bool isInitAdd;
	
	/// <summary>
	/// float参数组
	/// </summary>
	public float[] fArgs;
	
	/// <summary>
	/// int参数组
	/// </summary>
	public int[] iArgs;
	
	/// <summary>
	/// 位置
	/// </summary>
	public float[] pos;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static ScenePlaceElementConfig get(int sceneID,int instanceID)
	{
		return _dic.get((long)sceneID << 32 | (long)instanceID);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<ScenePlaceElementConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<ScenePlaceElementConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<ScenePlaceElementConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.sceneID=stream.readInt();
		
		this.instanceID=stream.readInt();
		
		this.type=stream.readInt();
		
		int posLen=stream.readLen();
		if(this.pos==null || this.pos.Length!=posLen)
		{
			this.pos=new float[posLen];
		}
		float[] posT=this.pos;
		for(int posI=0;posI<posLen;++posI)
		{
			float posV;
			posV=stream.readFloat();
			
			posT[posI]=posV;
		}
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		this.force=stream.readInt();
		
		this.isInitAdd=stream.readBoolean();
		
		int iArgsLen=stream.readLen();
		if(this.iArgs==null || this.iArgs.Length!=iArgsLen)
		{
			this.iArgs=new int[iArgsLen];
		}
		int[] iArgsT=this.iArgs;
		for(int iArgsI=0;iArgsI<iArgsLen;++iArgsI)
		{
			int iArgsV;
			iArgsV=stream.readInt();
			
			iArgsT[iArgsI]=iArgsV;
		}
		
		int fArgsLen=stream.readLen();
		if(this.fArgs==null || this.fArgs.Length!=fArgsLen)
		{
			this.fArgs=new float[fArgsLen];
		}
		float[] fArgsT=this.fArgs;
		for(int fArgsI=0;fArgsI<fArgsLen;++fArgsI)
		{
			float fArgsV;
			fArgsV=stream.readFloat();
			
			fArgsT[fArgsI]=fArgsV;
		}
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		LongObjectMap<ScenePlaceElementConfig> fDic;
		if(!(fDic=_dic).isEmpty())
		{
			ScenePlaceElementConfig[] values;
			ScenePlaceElementConfig v;

			for(int i=(values=fDic.getValues()).Length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					ScenePlaceConfig.get(v.sceneID).addElement(v);
				}
			}
		}
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.sceneID);
		
		stream.writeInt(this.instanceID);
		
		stream.writeInt(this.type);
		
		if(this.pos!=null)
		{
			float[] posT=this.pos;
			stream.writeLen(posT.Length);
			for(int posVI=0,posVLen=posT.Length;posVI<posVLen;++posVI)
			{
				float posV=posT[posVI];
				stream.writeFloat(posV);
				
			}
		}
		else
		{
			nullObjError("pos");
		}
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.level);
		
		stream.writeInt(this.force);
		
		stream.writeBoolean(this.isInitAdd);
		
		if(this.iArgs!=null)
		{
			int[] iArgsT=this.iArgs;
			stream.writeLen(iArgsT.Length);
			for(int iArgsVI=0,iArgsVLen=iArgsT.Length;iArgsVI<iArgsVLen;++iArgsVI)
			{
				int iArgsV=iArgsT[iArgsVI];
				stream.writeInt(iArgsV);
				
			}
		}
		else
		{
			nullObjError("iArgs");
		}
		
		if(this.fArgs!=null)
		{
			float[] fArgsT=this.fArgs;
			stream.writeLen(fArgsT.Length);
			for(int fArgsVI=0,fArgsVLen=fArgsT.Length;fArgsVI<fArgsVLen;++fArgsVI)
			{
				float fArgsV=fArgsT[fArgsVI];
				stream.writeFloat(fArgsV);
				
			}
		}
		else
		{
			nullObjError("fArgs");
		}
		
	}
	
}
