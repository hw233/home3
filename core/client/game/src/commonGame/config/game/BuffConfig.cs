using ShineEngine;

/// <summary>
/// buff表(generated by shine)
/// </summary>
public class BuffConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<BuffConfig> _dic;
	
	/// <summary>
	/// buffID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 组ID
	/// </summary>
	public int[] groups;
	
	/// <summary>
	/// 收益类型
	/// </summary>
	public int gainType;
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/// <summary>
	/// 叠加方式
	/// </summary>
	public int plusType;
	
	/// <summary>
	/// 叠加上限
	/// </summary>
	public int plusMax;
	
	/// <summary>
	/// 是否死亡移除
	/// </summary>
	public bool removeAtDead;
	
	/// <summary>
	/// 保留类型
	/// </summary>
	public int keepType;
	
	/// <summary>
	/// 次数消耗类型
	/// </summary>
	public int[][] subNums;
	
	/// <summary>
	/// 次数消耗类型转
	/// </summary>
	public int[] subNumsDicT;
	
	/// <summary>
	/// 特效
	/// </summary>
	public int effect;
	
	/// <summary>
	/// 目标影响类型
	/// </summary>
	public int[] influenceType;
	
	/// <summary>
	/// 目标影响类型转
	/// </summary>
	public bool[] influenceTypeT;
	
	/// <summary>
	/// 描述
	/// </summary>
	public string explain;
	
	/** 名字原值 */
	private string _name;
	
	/** 描述原值 */
	private string _explain;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BuffConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<BuffConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<BuffConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<BuffConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		int groupsLen=stream.readLen();
		if(this.groups==null || this.groups.Length!=groupsLen)
		{
			this.groups=new int[groupsLen];
		}
		int[] groupsT=this.groups;
		for(int groupsI=0;groupsI<groupsLen;++groupsI)
		{
			int groupsV;
			groupsV=stream.readInt();
			
			groupsT[groupsI]=groupsV;
		}
		
		this.gainType=stream.readInt();
		
		this.plusType=stream.readInt();
		
		this.plusMax=stream.readInt();
		
		this.keepType=stream.readInt();
		
		this.removeAtDead=stream.readBoolean();
		
		int subNumsLen=stream.readLen();
		if(this.subNums==null || this.subNums.Length!=subNumsLen)
		{
			this.subNums=new int[subNumsLen][];
		}
		int[][] subNumsT=this.subNums;
		for(int subNumsI=0;subNumsI<subNumsLen;++subNumsI)
		{
			int[] subNumsV;
			int subNumsVLen=stream.readLen();
			subNumsV=new int[subNumsVLen];
			int[] subNumsVT=subNumsV;
			for(int subNumsVI=0;subNumsVI<subNumsVLen;++subNumsVI)
			{
				int subNumsVV;
				subNumsVV=stream.readInt();
				
				subNumsVT[subNumsVI]=subNumsVV;
			}
			
			subNumsT[subNumsI]=subNumsV;
		}
		
		this.effect=stream.readInt();
		
		this.explain=stream.readUTF();
		
		int influenceTypeLen=stream.readLen();
		if(this.influenceType==null || this.influenceType.Length!=influenceTypeLen)
		{
			this.influenceType=new int[influenceTypeLen];
		}
		int[] influenceTypeT=this.influenceType;
		for(int influenceTypeI=0;influenceTypeI<influenceTypeLen;++influenceTypeI)
		{
			int influenceTypeV;
			influenceTypeV=stream.readInt();
			
			influenceTypeT[influenceTypeI]=influenceTypeV;
		}
		
	}
	
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		if(subNums.Length>0)
		{
			subNumsDicT=new int[BuffSubNumType.size];

			int[] arr;

			for(int i=0;i<subNums.Length;i++)
			{
				arr=subNums[i];

				if(arr.Length>1)
				{
					subNumsDicT[arr[0]]=arr[1];
				}
			}
		}

		influenceTypeT=SkillInfluenceTypeConfig.getInfluenceSet(influenceType);
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 是否包含某组
	/// </summary>
	public bool hasGroup(int groupID)
	{
		int[] groups;

		for(int i=(groups=this.groups).Length-1;i>=0;--i)
		{
			if(groups[i]==groupID)
				return true;
		}

		return false;
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
		if(_explain==null)
			_explain=explain;
		explain=LanguageConfig.getText(_explain);
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		if(this.groups!=null)
		{
			int[] groupsT=this.groups;
			stream.writeLen(groupsT.Length);
			for(int groupsVI=0,groupsVLen=groupsT.Length;groupsVI<groupsVLen;++groupsVI)
			{
				int groupsV=groupsT[groupsVI];
				stream.writeInt(groupsV);
				
			}
		}
		else
		{
			nullObjError("groups");
		}
		
		stream.writeInt(this.gainType);
		
		stream.writeInt(this.plusType);
		
		stream.writeInt(this.plusMax);
		
		stream.writeInt(this.keepType);
		
		stream.writeBoolean(this.removeAtDead);
		
		if(this.subNums!=null)
		{
			int[][] subNumsT=this.subNums;
			stream.writeLen(subNumsT.Length);
			for(int subNumsVI=0,subNumsVLen=subNumsT.Length;subNumsVI<subNumsVLen;++subNumsVI)
			{
				int[] subNumsV=subNumsT[subNumsVI];
				if(subNumsV!=null)
				{
					int[] subNumsVT=subNumsV;
					stream.writeLen(subNumsVT.Length);
					for(int subNumsVVI=0,subNumsVVLen=subNumsVT.Length;subNumsVVI<subNumsVVLen;++subNumsVVI)
					{
						int subNumsVV=subNumsVT[subNumsVVI];
						stream.writeInt(subNumsVV);
						
					}
				}
				else
				{
					nullObjError("subNumsV");
				}
				
			}
		}
		else
		{
			nullObjError("subNums");
		}
		
		stream.writeInt(this.effect);
		
		stream.writeUTF(this.explain);
		
		if(this.influenceType!=null)
		{
			int[] influenceTypeT=this.influenceType;
			stream.writeLen(influenceTypeT.Length);
			for(int influenceTypeVI=0,influenceTypeVLen=influenceTypeT.Length;influenceTypeVI<influenceTypeVLen;++influenceTypeVI)
			{
				int influenceTypeV=influenceTypeT[influenceTypeVI];
				stream.writeInt(influenceTypeV);
				
			}
		}
		else
		{
			nullObjError("influenceType");
		}
		
	}
	
}
