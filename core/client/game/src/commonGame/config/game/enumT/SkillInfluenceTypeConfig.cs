using ShineEngine;
using System;
using System.Text;

/// <summary>
/// 技能影响类型(generated by shine)
/// </summary>
public class SkillInfluenceTypeConfig:BaseConfig
{
	/** 存储集合 */
	private static SkillInfluenceTypeConfig[] _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 默认值
	/// </summary>
	public bool defaultValue;
	
	/** 样本 */
	private static bool[] _sample;
	
	/** 结果组 */
	private static SMap<string,bool[]> _resultDic=new SMap<string,bool[]>();
	
	/// <summary>
	/// 获取
	/// </summary>
	public static SkillInfluenceTypeConfig get(int id)
	{
		return id>=0 && id<_dic.Length ? _dic[id] : null;
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(SkillInfluenceTypeConfig[] dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(SkillInfluenceTypeConfig[] dic)
	{
		ObjectUtils.arrayPutAll(_dic,dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static SkillInfluenceTypeConfig[] getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.defaultValue=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeBoolean(this.defaultValue);
		
	}
	
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		if(_sample==null)
		{
			_sample=new bool[SkillInfluenceType.size];
		}

		//赋值
		_sample[id]=defaultValue;
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		SkillInfluenceType.enemyE=getInfluenceSet(new int[]{SkillInfluenceType.Enemy});
		SkillInfluenceType.friendE=getInfluenceSet(new int[]{SkillInfluenceType.Friend});
	}
	
	/// <summary>
	/// 获取影响组
	/// </summary>
	public static bool[] getInfluenceSet(int[] arr)
	{
		string key=countKey(arr);

		bool[] re;
		if((re=_resultDic.get(key))==null)
		{
			re=new bool[SkillInfluenceType.size];
			Array.Copy(_sample,0,re,0,re.Length);

			foreach(int v in arr)
			{
				if(v>0)
				{
					re[v]=true;
				}
				else
				{
					re[-v]=false;
				}
			}

			_resultDic.put(key,re);
		}

		return re;
	}
	
	private static String countKey(int[] arr)
	{
		StringBuilder sb=StringBuilderPool.create();

		foreach(int v in arr)
		{
			sb.Append(v);
		}

		return StringBuilderPool.releaseStr(sb);
	}
	
}
