using ShineEngine;

/// <summary>
/// 状态类型表(generated by shine)
/// </summary>
public class StatusConfig:BaseConfig
{
	/** 存储集合 */
	private static StatusConfig[] _dic;
	
	/// <summary>
	/// 状态id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 显示名字
	/// </summary>
	public string showName;
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/// <summary>
	/// 自己是否推送
	/// </summary>
	public bool needSendSelf;
	
	/** 显示名字原值 */
	private string _showName;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static StatusConfig get(int id)
	{
		return id>=0 && id<_dic.Length ? _dic[id] : null;
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(StatusConfig[] dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(StatusConfig[] dic)
	{
		ObjectUtils.arrayPutAll(_dic,dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static StatusConfig[] getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.showName=stream.readUTF();
		
		this.needSendSelf=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		SList<StatusOneInfo> list=new SList<StatusOneInfo>();

		foreach(StatusConfig config in _dic)
		{
			if(config!=null)
				list.add(config.createInfo());
		}

		AttributeControl.status.init(list,StatusType.size);
	}
	
	/// <summary>
	/// 获取显示名
	/// </summary>
	public static string getShowName(int type)
	{
		return get(type).showName;
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_showName==null)
			_showName=showName;
		showName=LanguageConfig.getText(_showName);
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeUTF(this.showName);
		
		stream.writeBoolean(this.needSendSelf);
		
	}
	
	public StatusOneInfo createInfo()
	{
		StatusOneInfo re=new StatusOneInfo();
		re.id=id;
		re.needSendSelf=needSendSelf;
		return re;
	}
	
}
