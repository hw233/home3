using ShineEngine;
using UnityEngine;

/// <summary>
/// 单位模型动作表(generated by shine)
/// </summary>
public class ModelMotionConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<ModelMotionConfig> _dic;
	
	/// <summary>
	/// 模型id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 动作时间(ms) 
	/// </summary>
	public int motionTime;
	
	/// <summary>
	/// 动作id
	/// </summary>
	public int motionID;
	
	/// <summary>
	/// 绑点组
	/// </summary>
	public float[][] bindPoints;
	
	/// <summary>
	/// 绑点组
	/// </summary>
	public SMap<int,Vector3> bindPointMap;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static ModelMotionConfig get(int id,int motionID)
	{
		return _dic.get((long)id << 32 | (long)motionID);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<ModelMotionConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<ModelMotionConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<ModelMotionConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.motionID=stream.readInt();
		
		this.motionTime=stream.readInt();
		
		int bindPointsLen=stream.readLen();
		if(this.bindPoints==null || this.bindPoints.Length!=bindPointsLen)
		{
			this.bindPoints=new float[bindPointsLen][];
		}
		float[][] bindPointsT=this.bindPoints;
		for(int bindPointsI=0;bindPointsI<bindPointsLen;++bindPointsI)
		{
			float[] bindPointsV;
			int bindPointsVLen=stream.readLen();
			bindPointsV=new float[bindPointsVLen];
			float[] bindPointsVT=bindPointsV;
			for(int bindPointsVI=0;bindPointsVI<bindPointsVLen;++bindPointsVI)
			{
				float bindPointsVV;
				bindPointsVV=stream.readFloat();
				
				bindPointsVT[bindPointsVI]=bindPointsVV;
			}
			
			bindPointsT[bindPointsI]=bindPointsV;
		}
		
	}
	
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		bindPointMap=new SMap<int,Vector3>();
		for(int i=bindPoints.Length - 1;i>=0;--i)
		{
			float[] tmp=bindPoints[i];
			if(tmp.Length>3)
				bindPointMap.put((int)tmp[0],new Vector3(tmp[1],tmp[2],tmp[3]));
			else if(tmp.Length>2)
				bindPointMap.put((int)tmp[0],new Vector3(tmp[1],tmp[2]));
		}
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{

	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.motionID);
		
		stream.writeInt(this.motionTime);
		
		if(this.bindPoints!=null)
		{
			float[][] bindPointsT=this.bindPoints;
			stream.writeLen(bindPointsT.Length);
			for(int bindPointsVI=0,bindPointsVLen=bindPointsT.Length;bindPointsVI<bindPointsVLen;++bindPointsVI)
			{
				float[] bindPointsV=bindPointsT[bindPointsVI];
				if(bindPointsV!=null)
				{
					float[] bindPointsVT=bindPointsV;
					stream.writeLen(bindPointsVT.Length);
					for(int bindPointsVVI=0,bindPointsVVLen=bindPointsVT.Length;bindPointsVVI<bindPointsVVLen;++bindPointsVVI)
					{
						float bindPointsVV=bindPointsVT[bindPointsVVI];
						stream.writeFloat(bindPointsVV);
						
					}
				}
				else
				{
					nullObjError("bindPointsV");
				}
				
			}
		}
		else
		{
			nullObjError("bindPoints");
		}
		
	}
	
}
