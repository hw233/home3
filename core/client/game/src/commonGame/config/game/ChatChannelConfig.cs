using ShineEngine;

/// <summary>
/// 聊天频道表(generated by shine)
/// </summary>
public class ChatChannelConfig:BaseConfig
{
	/** 存储集合 */
	private static ChatChannelConfig[] _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 发言cd(ms)
	/// </summary>
	public int cd;
	
	/// <summary>
	/// 使用条件
	/// </summary>
	public int[][] useConditions;
	
	/// <summary>
	/// 是否为多实例
	/// </summary>
	public bool isMulti;
	
	/// <summary>
	/// 是否可离线接收
	/// </summary>
	public bool offlineReceive;
	
	/// <summary>
	/// 保留数目
	/// </summary>
	public int keepNum;
	
	/// <summary>
	/// 保留时间(小时)
	/// </summary>
	public int keepHour;
	
	/// <summary>
	/// 发言开销
	/// </summary>
	public int costID;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static ChatChannelConfig get(int id)
	{
		return id>=0 && id<_dic.Length ? _dic[id] : null;
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(ChatChannelConfig[] dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(ChatChannelConfig[] dic)
	{
		ObjectUtils.arrayPutAll(_dic,dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static ChatChannelConfig[] getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.cd=stream.readInt();
		
		int useConditionsLen=stream.readLen();
		if(this.useConditions==null || this.useConditions.Length!=useConditionsLen)
		{
			this.useConditions=new int[useConditionsLen][];
		}
		int[][] useConditionsT=this.useConditions;
		for(int useConditionsI=0;useConditionsI<useConditionsLen;++useConditionsI)
		{
			int[] useConditionsV;
			int useConditionsVLen=stream.readLen();
			useConditionsV=new int[useConditionsVLen];
			int[] useConditionsVT=useConditionsV;
			for(int useConditionsVI=0;useConditionsVI<useConditionsVLen;++useConditionsVI)
			{
				int useConditionsVV;
				useConditionsVV=stream.readInt();
				
				useConditionsVT[useConditionsVI]=useConditionsVV;
			}
			
			useConditionsT[useConditionsI]=useConditionsV;
		}
		
		this.costID=stream.readInt();
		
		this.keepHour=stream.readInt();
		
		this.keepNum=stream.readInt();
		
		this.offlineReceive=stream.readBoolean();
		
		this.isMulti=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.cd);
		
		if(this.useConditions!=null)
		{
			int[][] useConditionsT=this.useConditions;
			stream.writeLen(useConditionsT.Length);
			for(int useConditionsVI=0,useConditionsVLen=useConditionsT.Length;useConditionsVI<useConditionsVLen;++useConditionsVI)
			{
				int[] useConditionsV=useConditionsT[useConditionsVI];
				if(useConditionsV!=null)
				{
					int[] useConditionsVT=useConditionsV;
					stream.writeLen(useConditionsVT.Length);
					for(int useConditionsVVI=0,useConditionsVVLen=useConditionsVT.Length;useConditionsVVI<useConditionsVVLen;++useConditionsVVI)
					{
						int useConditionsVV=useConditionsVT[useConditionsVVI];
						stream.writeInt(useConditionsVV);
						
					}
				}
				else
				{
					nullObjError("useConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("useConditions");
		}
		
		stream.writeInt(this.costID);
		
		stream.writeInt(this.keepHour);
		
		stream.writeInt(this.keepNum);
		
		stream.writeBoolean(this.offlineReceive);
		
		stream.writeBoolean(this.isMulti);
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
}
