using ShineEngine;

/// <summary>
/// 技能攻击表(generated by shine)
/// </summary>
public class AttackConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<AttackConfig> _dic;
	
	/// <summary>
	/// 攻击id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 是否为增益
	/// </summary>
	public bool isGain;
	
	/// <summary>
	/// 是否跳过伤害阶段
	/// </summary>
	public bool passDamage;
	
	/// <summary>
	/// 影响类型
	/// </summary>
	public int[] influenceType;
	
	/// <summary>
	/// 影响类型(转)
	/// </summary>
	public bool[] influenceTypeT;
	
	/// <summary>
	/// 是否可暴击
	/// </summary>
	public bool canCrit;
	
	/// <summary>
	/// 是否可闪避
	/// </summary>
	public bool canDodge;
	
	/// <summary>
	/// 所在攻击组
	/// </summary>
	public int[] groups;
	
	/// <summary>
	/// 是否可反伤
	/// </summary>
	public bool canReDamage;
	
	/// <summary>
	/// 攻击特效
	/// </summary>
	public int attackEffect;
	
	/// <summary>
	/// 攻击地面特效
	/// </summary>
	public int attackGroundEffect;
	
	/// <summary>
	/// 击中特效
	/// </summary>
	public int hitEffect;
	
	/// <summary>
	/// 攻击重量(定帧系数)
	/// </summary>
	public int attackWeight;
	
	/// <summary>
	/// 是否击中浮空
	/// </summary>
	public bool canAttackBlow;
	
	/// <summary>
	/// 是否击中倒地
	/// </summary>
	public bool canAttackDown;
	
	/// <summary>
	/// 是否可攻击倒地目标
	/// </summary>
	public bool canAttackLie;
	
	/// <summary>
	/// 击杀方式
	/// </summary>
	public int killType;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static AttackConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<AttackConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<AttackConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<AttackConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int influenceTypeLen=stream.readLen();
		if(this.influenceType==null || this.influenceType.Length!=influenceTypeLen)
		{
			this.influenceType=new int[influenceTypeLen];
		}
		int[] influenceTypeT=this.influenceType;
		for(int influenceTypeI=0;influenceTypeI<influenceTypeLen;++influenceTypeI)
		{
			int influenceTypeV;
			influenceTypeV=stream.readInt();
			
			influenceTypeT[influenceTypeI]=influenceTypeV;
		}
		
		this.isGain=stream.readBoolean();
		
		this.passDamage=stream.readBoolean();
		
		this.canCrit=stream.readBoolean();
		
		this.canDodge=stream.readBoolean();
		
		this.canReDamage=stream.readBoolean();
		
		int groupsLen=stream.readLen();
		if(this.groups==null || this.groups.Length!=groupsLen)
		{
			this.groups=new int[groupsLen];
		}
		int[] groupsT=this.groups;
		for(int groupsI=0;groupsI<groupsLen;++groupsI)
		{
			int groupsV;
			groupsV=stream.readInt();
			
			groupsT[groupsI]=groupsV;
		}
		
		this.killType=stream.readInt();
		
		this.attackEffect=stream.readInt();
		
		this.attackGroundEffect=stream.readInt();
		
		this.hitEffect=stream.readInt();
		
		this.attackWeight=stream.readInt();
		
		this.canAttackBlow=stream.readBoolean();
		
		this.canAttackDown=stream.readBoolean();
		
		this.canAttackLie=stream.readBoolean();
		
	}
	
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		influenceTypeT=SkillInfluenceTypeConfig.getInfluenceSet(influenceType);
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 是否包含某组
	/// </summary>
	public bool hasGroup(int groupID)
	{
		int[] groups;

		for(int i=(groups=this.groups).Length-1;i>=0;--i)
		{
			if(groups[i]==groupID)
				return true;
		}

		return false;
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.influenceType!=null)
		{
			int[] influenceTypeT=this.influenceType;
			stream.writeLen(influenceTypeT.Length);
			for(int influenceTypeVI=0,influenceTypeVLen=influenceTypeT.Length;influenceTypeVI<influenceTypeVLen;++influenceTypeVI)
			{
				int influenceTypeV=influenceTypeT[influenceTypeVI];
				stream.writeInt(influenceTypeV);
				
			}
		}
		else
		{
			nullObjError("influenceType");
		}
		
		stream.writeBoolean(this.isGain);
		
		stream.writeBoolean(this.passDamage);
		
		stream.writeBoolean(this.canCrit);
		
		stream.writeBoolean(this.canDodge);
		
		stream.writeBoolean(this.canReDamage);
		
		if(this.groups!=null)
		{
			int[] groupsT=this.groups;
			stream.writeLen(groupsT.Length);
			for(int groupsVI=0,groupsVLen=groupsT.Length;groupsVI<groupsVLen;++groupsVI)
			{
				int groupsV=groupsT[groupsVI];
				stream.writeInt(groupsV);
				
			}
		}
		else
		{
			nullObjError("groups");
		}
		
		stream.writeInt(this.killType);
		
		stream.writeInt(this.attackEffect);
		
		stream.writeInt(this.attackGroundEffect);
		
		stream.writeInt(this.hitEffect);
		
		stream.writeInt(this.attackWeight);
		
		stream.writeBoolean(this.canAttackBlow);
		
		stream.writeBoolean(this.canAttackDown);
		
		stream.writeBoolean(this.canAttackLie);
		
	}
	
}
