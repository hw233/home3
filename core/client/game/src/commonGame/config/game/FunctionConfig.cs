using ShineEngine;

/// <summary>
/// 功能表(generated by shine)
/// </summary>
public class FunctionConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<FunctionConfig> _dic;
	
	/// <summary>
	/// 显示名字
	/// </summary>
	public string showName;
	
	/// <summary>
	/// 关闭条件
	/// </summary>
	public int[][] closeConditions;
	
	/// <summary>
	/// 开启条件
	/// </summary>
	public int[][] openConditions;
	
	/// <summary>
	/// 功能id
	/// </summary>
	public int id;
	
	/** 显示名字原值 */
	private string _showName;
	
	/// <summary>
	/// 是否需要关闭(T)
	/// </summary>
	public bool needClose;
	
	/// <summary>
	/// 条件组
	/// </summary>
	public static IntObjectMap<IntObjectMap<FunctionConfig>> conditionDic;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static FunctionConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<FunctionConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<FunctionConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<FunctionConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readShort();
		
		this.showName=stream.readUTF();
		
		int openConditionsLen=stream.readLen();
		if(this.openConditions==null || this.openConditions.Length!=openConditionsLen)
		{
			this.openConditions=new int[openConditionsLen][];
		}
		int[][] openConditionsT=this.openConditions;
		for(int openConditionsI=0;openConditionsI<openConditionsLen;++openConditionsI)
		{
			int[] openConditionsV;
			int openConditionsVLen=stream.readLen();
			openConditionsV=new int[openConditionsVLen];
			int[] openConditionsVT=openConditionsV;
			for(int openConditionsVI=0;openConditionsVI<openConditionsVLen;++openConditionsVI)
			{
				int openConditionsVV;
				openConditionsVV=stream.readInt();
				
				openConditionsVT[openConditionsVI]=openConditionsVV;
			}
			
			openConditionsT[openConditionsI]=openConditionsV;
		}
		
		int closeConditionsLen=stream.readLen();
		if(this.closeConditions==null || this.closeConditions.Length!=closeConditionsLen)
		{
			this.closeConditions=new int[closeConditionsLen][];
		}
		int[][] closeConditionsT=this.closeConditions;
		for(int closeConditionsI=0;closeConditionsI<closeConditionsLen;++closeConditionsI)
		{
			int[] closeConditionsV;
			int closeConditionsVLen=stream.readLen();
			closeConditionsV=new int[closeConditionsVLen];
			int[] closeConditionsVT=closeConditionsV;
			for(int closeConditionsVI=0;closeConditionsVI<closeConditionsVLen;++closeConditionsVI)
			{
				int closeConditionsVV;
				closeConditionsVV=stream.readInt();
				
				closeConditionsVT[closeConditionsVI]=closeConditionsVV;
			}
			
			closeConditionsT[closeConditionsI]=closeConditionsV;
		}
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		conditionDic=new IntObjectMap<IntObjectMap<FunctionConfig>>();

		foreach(FunctionConfig v in getDic())
		{
			foreach(int[] arr in v.openConditions)
			{
				conditionDic.computeIfAbsent(arr[0],k=>new IntObjectMap<FunctionConfig>()).put(v.id,v);
			}

			if(v.closeConditions.Length==0)
			{
				v.needClose=false;
			}
			else
			{
				v.needClose=true;

				foreach(int[] arr in v.closeConditions)
				{
					conditionDic.computeIfAbsent(arr[0],k=>new IntObjectMap<FunctionConfig>()).put(v.id,v);
				}
			}
		}
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeShort(this.id);
		
		stream.writeUTF(this.showName);
		
		if(this.openConditions!=null)
		{
			int[][] openConditionsT=this.openConditions;
			stream.writeLen(openConditionsT.Length);
			for(int openConditionsVI=0,openConditionsVLen=openConditionsT.Length;openConditionsVI<openConditionsVLen;++openConditionsVI)
			{
				int[] openConditionsV=openConditionsT[openConditionsVI];
				if(openConditionsV!=null)
				{
					int[] openConditionsVT=openConditionsV;
					stream.writeLen(openConditionsVT.Length);
					for(int openConditionsVVI=0,openConditionsVVLen=openConditionsVT.Length;openConditionsVVI<openConditionsVVLen;++openConditionsVVI)
					{
						int openConditionsVV=openConditionsVT[openConditionsVVI];
						stream.writeInt(openConditionsVV);
						
					}
				}
				else
				{
					nullObjError("openConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("openConditions");
		}
		
		if(this.closeConditions!=null)
		{
			int[][] closeConditionsT=this.closeConditions;
			stream.writeLen(closeConditionsT.Length);
			for(int closeConditionsVI=0,closeConditionsVLen=closeConditionsT.Length;closeConditionsVI<closeConditionsVLen;++closeConditionsVI)
			{
				int[] closeConditionsV=closeConditionsT[closeConditionsVI];
				if(closeConditionsV!=null)
				{
					int[] closeConditionsVT=closeConditionsV;
					stream.writeLen(closeConditionsVT.Length);
					for(int closeConditionsVVI=0,closeConditionsVVLen=closeConditionsVT.Length;closeConditionsVVI<closeConditionsVVLen;++closeConditionsVVI)
					{
						int closeConditionsVV=closeConditionsVT[closeConditionsVVI];
						stream.writeInt(closeConditionsVV);
						
					}
				}
				else
				{
					nullObjError("closeConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("closeConditions");
		}
		
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_showName==null)
			_showName=showName;
		showName=LanguageConfig.getText(_showName);
		
	}
	
}
