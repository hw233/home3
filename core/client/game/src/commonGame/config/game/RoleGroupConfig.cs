using ShineEngine;

/// <summary>
/// 玩家群表(generated by shine)
/// </summary>
public class RoleGroupConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<RoleGroupConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 加入者给予职位
	/// </summary>
	public int joinTitle;
	
	/// <summary>
	/// 默认公告
	/// </summary>
	public string defaultNotice;
	
	/// <summary>
	/// 默认名字
	/// </summary>
	public string defaultName;
	
	/// <summary>
	/// 是否禁止重名
	/// </summary>
	public bool needUniqueName;
	
	/// <summary>
	/// 公告字符数限制
	/// </summary>
	public int noticeCharLimit;
	
	/// <summary>
	/// 名字字符数限制
	/// </summary>
	public int nameCharLimit;
	
	/// <summary>
	/// 创建条件
	/// </summary>
	public int[][] createConditions;
	
	/// <summary>
	/// 创建开销
	/// </summary>
	public int createCostID;
	
	/// <summary>
	/// 加入/邀请/申请条件
	/// </summary>
	public int[][] joinConditions;
	
	/// <summary>
	/// 是否只是本服玩家群(不可与其他服角色同群)
	/// </summary>
	public bool isOnlyLocalGame;
	
	/// <summary>
	/// 申请保留上限
	/// </summary>
	public int applyKeepMax;
	
	/// <summary>
	/// 是否允许申请入群
	/// </summary>
	public bool canApply;
	
	/// <summary>
	/// 初始化客户端时是否包含成员组
	/// </summary>
	public bool initClientContainsMembers;
	
	/// <summary>
	/// 邀请保留上限
	/// </summary>
	public int inviteKeepMax;
	
	/// <summary>
	/// 是否可以邀请直接创建
	/// </summary>
	public bool canInviteCreate;
	
	/// <summary>
	/// 拒绝申请间隔时间(s)
	/// </summary>
	public int refuseApplyTime;
	
	/// <summary>
	/// 申请有效时间(s)
	/// </summary>
	public int applyEnableTime;
	
	/// <summary>
	/// 邀请有效时间(s)
	/// </summary>
	public int inviteEnableTime;
	
	/// <summary>
	/// 重复申请间隔时间(s)
	/// </summary>
	public int applyRepeatTime;
	
	/// <summary>
	/// 只剩一人时是否解散玩家群(剩两人时，一旦离开解散队伍)
	/// </summary>
	public bool removeWithOnlyOne;
	
	/// <summary>
	/// 是否需要简版信息列表
	/// </summary>
	public bool needSimpleList;
	
	/// <summary>
	/// 日志保留数目
	/// </summary>
	public int infoLogKeepNum;
	
	/// <summary>
	/// 日志保留时间(day)
	/// </summary>
	public int infoLogKeepTime;
	
	/// <summary>
	/// 每个玩家可入群数
	/// </summary>
	public int eachPlayerGroupNum;
	
	/** 默认名字原值 */
	private string _defaultName;
	
	/// <summary>
	/// 专属场景id
	/// </summary>
	public int ownSceneID;
	
	/// <summary>
	/// 是否实时更新角色社交数据
	/// </summary>
	public bool isUpdateRoleSocialAbs;
	
	/// <summary>
	/// 是否需要中心服保存玩家群数据
	/// </summary>
	public bool needCenterSaveRoleGroup;
	
	/// <summary>
	/// 是否保留离线邀请
	/// </summary>
	public bool needKeepOfflineInvite;
	
	/** 默认公告原值 */
	private string _defaultNotice;
	
	/// <summary>
	/// 邀请时是否可直接入群(无需同意)
	/// </summary>
	public bool defaultCanInviteInAbs;
	
	/// <summary>
	/// 申请时是否可直接入群(无需同意)
	/// </summary>
	public bool defaultCanApplyInAbs;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static RoleGroupConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<RoleGroupConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<RoleGroupConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<RoleGroupConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.eachPlayerGroupNum=stream.readInt();
		
		this.joinTitle=stream.readInt();
		
		this.defaultName=stream.readUTF();
		
		this.defaultNotice=stream.readUTF();
		
		this.needUniqueName=stream.readBoolean();
		
		this.nameCharLimit=stream.readInt();
		
		this.noticeCharLimit=stream.readInt();
		
		this.createCostID=stream.readInt();
		
		int createConditionsLen=stream.readLen();
		if(this.createConditions==null || this.createConditions.Length!=createConditionsLen)
		{
			this.createConditions=new int[createConditionsLen][];
		}
		int[][] createConditionsT=this.createConditions;
		for(int createConditionsI=0;createConditionsI<createConditionsLen;++createConditionsI)
		{
			int[] createConditionsV;
			int createConditionsVLen=stream.readLen();
			createConditionsV=new int[createConditionsVLen];
			int[] createConditionsVT=createConditionsV;
			for(int createConditionsVI=0;createConditionsVI<createConditionsVLen;++createConditionsVI)
			{
				int createConditionsVV;
				createConditionsVV=stream.readInt();
				
				createConditionsVT[createConditionsVI]=createConditionsVV;
			}
			
			createConditionsT[createConditionsI]=createConditionsV;
		}
		
		int joinConditionsLen=stream.readLen();
		if(this.joinConditions==null || this.joinConditions.Length!=joinConditionsLen)
		{
			this.joinConditions=new int[joinConditionsLen][];
		}
		int[][] joinConditionsT=this.joinConditions;
		for(int joinConditionsI=0;joinConditionsI<joinConditionsLen;++joinConditionsI)
		{
			int[] joinConditionsV;
			int joinConditionsVLen=stream.readLen();
			joinConditionsV=new int[joinConditionsVLen];
			int[] joinConditionsVT=joinConditionsV;
			for(int joinConditionsVI=0;joinConditionsVI<joinConditionsVLen;++joinConditionsVI)
			{
				int joinConditionsVV;
				joinConditionsVV=stream.readInt();
				
				joinConditionsVT[joinConditionsVI]=joinConditionsVV;
			}
			
			joinConditionsT[joinConditionsI]=joinConditionsV;
		}
		
		this.isOnlyLocalGame=stream.readBoolean();
		
		this.initClientContainsMembers=stream.readBoolean();
		
		this.inviteKeepMax=stream.readInt();
		
		this.applyKeepMax=stream.readInt();
		
		this.canApply=stream.readBoolean();
		
		this.canInviteCreate=stream.readBoolean();
		
		this.defaultCanInviteInAbs=stream.readBoolean();
		
		this.defaultCanApplyInAbs=stream.readBoolean();
		
		this.inviteEnableTime=stream.readInt();
		
		this.applyEnableTime=stream.readInt();
		
		this.applyRepeatTime=stream.readInt();
		
		this.refuseApplyTime=stream.readInt();
		
		this.removeWithOnlyOne=stream.readBoolean();
		
		this.needSimpleList=stream.readBoolean();
		
		this.infoLogKeepTime=stream.readInt();
		
		this.infoLogKeepNum=stream.readInt();
		
		this.ownSceneID=stream.readInt();
		
		this.isUpdateRoleSocialAbs=stream.readBoolean();
		
		this.needCenterSaveRoleGroup=stream.readBoolean();
		
		this.needKeepOfflineInvite=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.eachPlayerGroupNum);
		
		stream.writeInt(this.joinTitle);
		
		stream.writeUTF(this.defaultName);
		
		stream.writeUTF(this.defaultNotice);
		
		stream.writeBoolean(this.needUniqueName);
		
		stream.writeInt(this.nameCharLimit);
		
		stream.writeInt(this.noticeCharLimit);
		
		stream.writeInt(this.createCostID);
		
		if(this.createConditions!=null)
		{
			int[][] createConditionsT=this.createConditions;
			stream.writeLen(createConditionsT.Length);
			for(int createConditionsVI=0,createConditionsVLen=createConditionsT.Length;createConditionsVI<createConditionsVLen;++createConditionsVI)
			{
				int[] createConditionsV=createConditionsT[createConditionsVI];
				if(createConditionsV!=null)
				{
					int[] createConditionsVT=createConditionsV;
					stream.writeLen(createConditionsVT.Length);
					for(int createConditionsVVI=0,createConditionsVVLen=createConditionsVT.Length;createConditionsVVI<createConditionsVVLen;++createConditionsVVI)
					{
						int createConditionsVV=createConditionsVT[createConditionsVVI];
						stream.writeInt(createConditionsVV);
						
					}
				}
				else
				{
					nullObjError("createConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("createConditions");
		}
		
		if(this.joinConditions!=null)
		{
			int[][] joinConditionsT=this.joinConditions;
			stream.writeLen(joinConditionsT.Length);
			for(int joinConditionsVI=0,joinConditionsVLen=joinConditionsT.Length;joinConditionsVI<joinConditionsVLen;++joinConditionsVI)
			{
				int[] joinConditionsV=joinConditionsT[joinConditionsVI];
				if(joinConditionsV!=null)
				{
					int[] joinConditionsVT=joinConditionsV;
					stream.writeLen(joinConditionsVT.Length);
					for(int joinConditionsVVI=0,joinConditionsVVLen=joinConditionsVT.Length;joinConditionsVVI<joinConditionsVVLen;++joinConditionsVVI)
					{
						int joinConditionsVV=joinConditionsVT[joinConditionsVVI];
						stream.writeInt(joinConditionsVV);
						
					}
				}
				else
				{
					nullObjError("joinConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("joinConditions");
		}
		
		stream.writeBoolean(this.isOnlyLocalGame);
		
		stream.writeBoolean(this.initClientContainsMembers);
		
		stream.writeInt(this.inviteKeepMax);
		
		stream.writeInt(this.applyKeepMax);
		
		stream.writeBoolean(this.canApply);
		
		stream.writeBoolean(this.canInviteCreate);
		
		stream.writeBoolean(this.defaultCanInviteInAbs);
		
		stream.writeBoolean(this.defaultCanApplyInAbs);
		
		stream.writeInt(this.inviteEnableTime);
		
		stream.writeInt(this.applyEnableTime);
		
		stream.writeInt(this.applyRepeatTime);
		
		stream.writeInt(this.refuseApplyTime);
		
		stream.writeBoolean(this.removeWithOnlyOne);
		
		stream.writeBoolean(this.needSimpleList);
		
		stream.writeInt(this.infoLogKeepTime);
		
		stream.writeInt(this.infoLogKeepNum);
		
		stream.writeInt(this.ownSceneID);
		
		stream.writeBoolean(this.isUpdateRoleSocialAbs);
		
		stream.writeBoolean(this.needCenterSaveRoleGroup);
		
		stream.writeBoolean(this.needKeepOfflineInvite);
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_defaultName==null)
			_defaultName=defaultName;
		defaultName=LanguageConfig.getText(_defaultName);
		
		if(_defaultNotice==null)
			_defaultNotice=defaultNotice;
		defaultNotice=LanguageConfig.getText(_defaultNotice);
		
	}
	
	/// <summary>
	/// 是否只可加入1个群
	/// </summary>
	public bool isSingleJoin()
	{
		return eachPlayerGroupNum==1;
	}
	
}
