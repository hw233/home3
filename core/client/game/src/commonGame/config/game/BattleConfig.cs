using ShineEngine;

/// <summary>
/// 副本基础表(generated by shine)
/// </summary>
public class BattleConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<BattleConfig> _dic;
	
	/// <summary>
	/// 副本ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 副本进入阶段最长等待时间(s)
	/// </summary>
	public int enterStateTime;
	
	/// <summary>
	/// 副本准备阶段最长等待时间(321倒计时)(s)
	/// </summary>
	public int preStateTime;
	
	/// <summary>
	/// 副本过程持续时间(s)
	/// </summary>
	public int runningStateTime;
	
	/// <summary>
	/// 副本完成阶段时间(出结果前)(s)
	/// </summary>
	public int overStateTime;
	
	/// <summary>
	/// 是否独立当前属性buffCD
	/// </summary>
	public bool isIndependent;
	
	/// <summary>
	/// 副本结算阶段时间(s)
	/// </summary>
	public int resultStateTime;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BattleConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<BattleConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<BattleConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<BattleConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.enterStateTime=stream.readInt();
		
		this.preStateTime=stream.readInt();
		
		this.runningStateTime=stream.readInt();
		
		this.overStateTime=stream.readInt();
		
		this.resultStateTime=stream.readInt();
		
		this.isIndependent=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeInt(this.enterStateTime);
		
		stream.writeInt(this.preStateTime);
		
		stream.writeInt(this.runningStateTime);
		
		stream.writeInt(this.overStateTime);
		
		stream.writeInt(this.resultStateTime);
		
		stream.writeBoolean(this.isIndependent);
		
	}
	
}
