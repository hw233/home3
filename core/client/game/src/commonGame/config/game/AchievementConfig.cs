using ShineEngine;

/// <summary>
/// 成就表(generated by shine)
/// </summary>
public class AchievementConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<AchievementConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/// <summary>
	/// 类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// 前置成就组
	/// </summary>
	public int[] pres;
	
	/// <summary>
	/// 后置成就组
	/// </summary>
	public IntList afters;
	
	/// <summary>
	/// 任务目标
	/// </summary>
	public int taskID;
	
	/// <summary>
	/// 奖励id
	/// </summary>
	public int rewardID;
	
	/// <summary>
	/// 成就描述
	/// </summary>
	public string explain;
	
	/** 名字原值 */
	private string _name;
	
	/** 成就描述原值 */
	private string _explain;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static AchievementConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<AchievementConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<AchievementConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<AchievementConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.type=stream.readInt();
		
		this.taskID=stream.readInt();
		
		int presLen=stream.readLen();
		if(this.pres==null || this.pres.Length!=presLen)
		{
			this.pres=new int[presLen];
		}
		int[] presT=this.pres;
		for(int presI=0;presI<presLen;++presI)
		{
			int presV;
			presV=stream.readInt();
			
			presT[presI]=presV;
		}
		
		this.rewardID=stream.readInt();
		
		this.explain=stream.readUTF();
		
	}
	
	/// <summary>
	/// 读完表后处理
	/// </summary>
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		afters=new IntList();
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;

		AchievementConfig[] values;
		AchievementConfig v;

		for(int i=(values=_dic.getValues()).Length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				if(v.pres.Length>0)
				{
					foreach (int v2 in v.pres)
					{
						_dic.get(v2).afters.add(v.id);
					}
				}
			}
		}
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
		if(_explain==null)
			_explain=explain;
		explain=LanguageConfig.getText(_explain);
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.type);
		
		stream.writeInt(this.taskID);
		
		if(this.pres!=null)
		{
			int[] presT=this.pres;
			stream.writeLen(presT.Length);
			for(int presVI=0,presVLen=presT.Length;presVI<presVLen;++presVI)
			{
				int presV=presT[presVI];
				stream.writeInt(presV);
				
			}
		}
		else
		{
			nullObjError("pres");
		}
		
		stream.writeInt(this.rewardID);
		
		stream.writeUTF(this.explain);
		
	}
	
}
