using ShineEngine;

/// <summary>
/// 任务表(generated by shine)
/// </summary>
public class QuestConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<QuestConfig> _dic;
	
	/// <summary>
	/// 任务链字典
	/// </summary>
	public static IntObjectMap<SList<QuestConfig>> questLineDic;
	
	/// <summary>
	/// 初始化任务组
	/// </summary>
	public static IntList initQuests;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 任务描述
	/// </summary>
	public string explain;
	
	/// <summary>
	/// 奖励id
	/// </summary>
	public int rewardID;
	
	/// <summary>
	/// 任务目标组执行方式
	/// </summary>
	public int executeType;
	
	/// <summary>
	/// 提交npc
	/// </summary>
	public int commitNPC;
	
	/// <summary>
	/// 提交方式
	/// </summary>
	public int commitType;
	
	/// <summary>
	/// 任务链
	/// </summary>
	public DIntData questLine;
	
	/// <summary>
	/// 任务链比较序号
	/// </summary>
	public int questLineIndex=-1;
	
	/// <summary>
	/// 接取npc
	/// </summary>
	public int acceptNPC;
	
	/// <summary>
	/// 接取方式
	/// </summary>
	public int acceptType;
	
	/// <summary>
	/// 接取条件
	/// </summary>
	public int[][] acceptConditions;
	
	/// <summary>
	/// 前置任务组
	/// </summary>
	public int[] preQuests;
	
	/// <summary>
	/// 后置任务组
	/// </summary>
	public IntList afterQuests;
	
	/// <summary>
	/// 周期时间
	/// </summary>
	public string cycleTime;
	
	/// <summary>
	/// 任务物品
	/// </summary>
	public DIntData[] questItem;
	
	/// <summary>
	/// 完成动作组
	/// </summary>
	public int[][] completeActions;
	
	/// <summary>
	/// 重复类型
	/// </summary>
	public int repeatType;
	
	/// <summary>
	/// 失败时间
	/// </summary>
	public string failTime;
	
	/// <summary>
	/// 周期任务失败后是否不可接取(在时间周期内)
	/// </summary>
	public bool cantAcceptFailed;
	
	/// <summary>
	/// 是否可放弃
	/// </summary>
	public bool canGiveUp;
	
	/// <summary>
	/// 任务目标组
	/// </summary>
	public int[] tasks;
	
	/// <summary>
	/// 是否关键任务
	/// </summary>
	public bool isKeyQuest;
	
	/// <summary>
	/// 是否已废弃
	/// </summary>
	public bool isDeprecated;
	
	/// <summary>
	/// 类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// 名字
	/// </summary>
	public string name;
	
	/** 名字原值 */
	private string _name;
	
	/** 任务描述原值 */
	private string _explain;
	
	/// <summary>
	/// 周期时间(时间表达式)
	/// </summary>
	public TimeExpression cycleTimeT;
	
	/// <summary>
	/// 失败时间(时间表达式)
	/// </summary>
	public TimeExpression failTimeT;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static QuestConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<QuestConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<QuestConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<QuestConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.name=stream.readUTF();
		
		this.type=stream.readInt();
		
		int tasksLen=stream.readLen();
		if(this.tasks==null || this.tasks.Length!=tasksLen)
		{
			this.tasks=new int[tasksLen];
		}
		int[] tasksT=this.tasks;
		for(int tasksI=0;tasksI<tasksLen;++tasksI)
		{
			int tasksV;
			tasksV=stream.readInt();
			
			tasksT[tasksI]=tasksV;
		}
		
		this.executeType=stream.readInt();
		
		this.repeatType=stream.readInt();
		
		this.questLine=(DIntData)stream.createData(DIntData.dataID);
		this.questLine.readBytesSimple(stream);
		
		this.cycleTime=stream.readUTF();
		
		int preQuestsLen=stream.readLen();
		if(this.preQuests==null || this.preQuests.Length!=preQuestsLen)
		{
			this.preQuests=new int[preQuestsLen];
		}
		int[] preQuestsT=this.preQuests;
		for(int preQuestsI=0;preQuestsI<preQuestsLen;++preQuestsI)
		{
			int preQuestsV;
			preQuestsV=stream.readInt();
			
			preQuestsT[preQuestsI]=preQuestsV;
		}
		
		int acceptConditionsLen=stream.readLen();
		if(this.acceptConditions==null || this.acceptConditions.Length!=acceptConditionsLen)
		{
			this.acceptConditions=new int[acceptConditionsLen][];
		}
		int[][] acceptConditionsT=this.acceptConditions;
		for(int acceptConditionsI=0;acceptConditionsI<acceptConditionsLen;++acceptConditionsI)
		{
			int[] acceptConditionsV;
			int acceptConditionsVLen=stream.readLen();
			acceptConditionsV=new int[acceptConditionsVLen];
			int[] acceptConditionsVT=acceptConditionsV;
			for(int acceptConditionsVI=0;acceptConditionsVI<acceptConditionsVLen;++acceptConditionsVI)
			{
				int acceptConditionsVV;
				acceptConditionsVV=stream.readInt();
				
				acceptConditionsVT[acceptConditionsVI]=acceptConditionsVV;
			}
			
			acceptConditionsT[acceptConditionsI]=acceptConditionsV;
		}
		
		this.acceptType=stream.readInt();
		
		this.acceptNPC=stream.readInt();
		
		this.commitType=stream.readInt();
		
		this.commitNPC=stream.readInt();
		
		int questItemLen=stream.readLen();
		if(this.questItem==null || this.questItem.Length!=questItemLen)
		{
			this.questItem=new DIntData[questItemLen];
		}
		DIntData[] questItemT=this.questItem;
		for(int questItemI=0;questItemI<questItemLen;++questItemI)
		{
			DIntData questItemV;
			questItemV=(DIntData)stream.createData(DIntData.dataID);
			questItemV.readBytesSimple(stream);
			
			questItemT[questItemI]=questItemV;
		}
		
		int completeActionsLen=stream.readLen();
		if(this.completeActions==null || this.completeActions.Length!=completeActionsLen)
		{
			this.completeActions=new int[completeActionsLen][];
		}
		int[][] completeActionsT=this.completeActions;
		for(int completeActionsI=0;completeActionsI<completeActionsLen;++completeActionsI)
		{
			int[] completeActionsV;
			int completeActionsVLen=stream.readLen();
			completeActionsV=new int[completeActionsVLen];
			int[] completeActionsVT=completeActionsV;
			for(int completeActionsVI=0;completeActionsVI<completeActionsVLen;++completeActionsVI)
			{
				int completeActionsVV;
				completeActionsVV=stream.readInt();
				
				completeActionsVT[completeActionsVI]=completeActionsVV;
			}
			
			completeActionsT[completeActionsI]=completeActionsV;
		}
		
		this.failTime=stream.readUTF();
		
		this.canGiveUp=stream.readBoolean();
		
		this.cantAcceptFailed=stream.readBoolean();
		
		this.rewardID=stream.readInt();
		
		this.explain=stream.readUTF();
		
		this.isDeprecated=stream.readBoolean();
		
		this.isKeyQuest=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 读完表后处理
	/// </summary>
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		afterQuests=new IntList();
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;

		initQuests=new IntList();
		questLineDic=new IntObjectMap<SList<QuestConfig>>();

		QuestConfig[] values;
		QuestConfig v;
		QuestConfig v2;

		for(int i=(values=_dic.getValues()).Length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				//可主动接
				if(v.acceptType!=QuestAcceptType.Passive)
				{
					if(v.preQuests.Length>0)
					{
						foreach(int v3 in v.preQuests)
						{
							//只能以单次任务作为前置
							if((v2=_dic.get(v3)).repeatType!=QuestRepeatType.Once)
							{
								Ctrl.throwError("只能以单次任务作为前置");
								return;
							}

							v2.afterQuests.add(v.id);
						}
					}
					else
					{
						//满足自动接取
						if(v.acceptType==QuestAcceptType.Auto)
						{
							initQuests.add(v.id);
						}
					}
				}

				if(!v.questLine.isEmpty())
				{
					SList<QuestConfig> list=questLineDic.computeIfAbsent(v.questLine.key,k=>new SList<QuestConfig>());
					list.add(v);
				}
			}
		}


		SList<QuestConfig>[] values1;
		SList<QuestConfig> v1;

		for(int i1=(values1=questLineDic.getValues()).Length-1;i1>=0;--i1)
		{
			if((v1=values1[i1])!=null)
			{
				v1.sort(sortQuestLine);

				QuestConfig[] values3=v1.getValues();
				QuestConfig v3;

				for(int i3=0,len3=v1.size();i3<len3;++i3)
				{
					//现算序号
					values3[i3].questLineIndex=i3;
				}
			}
		}
	}
	
	/// <summary>
	/// 生成刷新配置
	/// </summary>
	protected override void generateRefresh()
	{
		if(_name==null)
			_name=name;
		name=LanguageConfig.getText(_name);
		
		if(_explain==null)
			_explain=explain;
		explain=LanguageConfig.getText(_explain);
		
		cycleTimeT=new TimeExpression(cycleTime);
		
		failTimeT=new TimeExpression(failTime);
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.name);
		
		stream.writeInt(this.type);
		
		if(this.tasks!=null)
		{
			int[] tasksT=this.tasks;
			stream.writeLen(tasksT.Length);
			for(int tasksVI=0,tasksVLen=tasksT.Length;tasksVI<tasksVLen;++tasksVI)
			{
				int tasksV=tasksT[tasksVI];
				stream.writeInt(tasksV);
				
			}
		}
		else
		{
			nullObjError("tasks");
		}
		
		stream.writeInt(this.executeType);
		
		stream.writeInt(this.repeatType);
		
		if(this.questLine!=null)
		{
			this.questLine.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("questLine");
		}
		
		stream.writeUTF(this.cycleTime);
		
		if(this.preQuests!=null)
		{
			int[] preQuestsT=this.preQuests;
			stream.writeLen(preQuestsT.Length);
			for(int preQuestsVI=0,preQuestsVLen=preQuestsT.Length;preQuestsVI<preQuestsVLen;++preQuestsVI)
			{
				int preQuestsV=preQuestsT[preQuestsVI];
				stream.writeInt(preQuestsV);
				
			}
		}
		else
		{
			nullObjError("preQuests");
		}
		
		if(this.acceptConditions!=null)
		{
			int[][] acceptConditionsT=this.acceptConditions;
			stream.writeLen(acceptConditionsT.Length);
			for(int acceptConditionsVI=0,acceptConditionsVLen=acceptConditionsT.Length;acceptConditionsVI<acceptConditionsVLen;++acceptConditionsVI)
			{
				int[] acceptConditionsV=acceptConditionsT[acceptConditionsVI];
				if(acceptConditionsV!=null)
				{
					int[] acceptConditionsVT=acceptConditionsV;
					stream.writeLen(acceptConditionsVT.Length);
					for(int acceptConditionsVVI=0,acceptConditionsVVLen=acceptConditionsVT.Length;acceptConditionsVVI<acceptConditionsVVLen;++acceptConditionsVVI)
					{
						int acceptConditionsVV=acceptConditionsVT[acceptConditionsVVI];
						stream.writeInt(acceptConditionsVV);
						
					}
				}
				else
				{
					nullObjError("acceptConditionsV");
				}
				
			}
		}
		else
		{
			nullObjError("acceptConditions");
		}
		
		stream.writeInt(this.acceptType);
		
		stream.writeInt(this.acceptNPC);
		
		stream.writeInt(this.commitType);
		
		stream.writeInt(this.commitNPC);
		
		if(this.questItem!=null)
		{
			DIntData[] questItemT=this.questItem;
			stream.writeLen(questItemT.Length);
			for(int questItemVI=0,questItemVLen=questItemT.Length;questItemVI<questItemVLen;++questItemVI)
			{
				DIntData questItemV=questItemT[questItemVI];
				if(questItemV!=null)
				{
					questItemV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("questItemV");
				}
				
			}
		}
		else
		{
			nullObjError("questItem");
		}
		
		if(this.completeActions!=null)
		{
			int[][] completeActionsT=this.completeActions;
			stream.writeLen(completeActionsT.Length);
			for(int completeActionsVI=0,completeActionsVLen=completeActionsT.Length;completeActionsVI<completeActionsVLen;++completeActionsVI)
			{
				int[] completeActionsV=completeActionsT[completeActionsVI];
				if(completeActionsV!=null)
				{
					int[] completeActionsVT=completeActionsV;
					stream.writeLen(completeActionsVT.Length);
					for(int completeActionsVVI=0,completeActionsVVLen=completeActionsVT.Length;completeActionsVVI<completeActionsVVLen;++completeActionsVVI)
					{
						int completeActionsVV=completeActionsVT[completeActionsVVI];
						stream.writeInt(completeActionsVV);
						
					}
				}
				else
				{
					nullObjError("completeActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("completeActions");
		}
		
		stream.writeUTF(this.failTime);
		
		stream.writeBoolean(this.canGiveUp);
		
		stream.writeBoolean(this.cantAcceptFailed);
		
		stream.writeInt(this.rewardID);
		
		stream.writeUTF(this.explain);
		
		stream.writeBoolean(this.isDeprecated);
		
		stream.writeBoolean(this.isKeyQuest);
		
	}
	
	private static int sortQuestLine(QuestConfig config0,QuestConfig config1)
	{
		return MathUtils.intCompare(config0.questLine.value,config1.questLine.value);
	}
	
}
