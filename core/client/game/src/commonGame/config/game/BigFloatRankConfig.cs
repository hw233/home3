using ShineEngine;

/// <summary>
/// 大浮点数阶位(generated by shine)
/// </summary>
public class BigFloatRankConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<BigFloatRankConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 文本
	/// </summary>
	public string str;
	
	/** 反向查找 */
	private static StringIntMap _dicT;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static BigFloatRankConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<BigFloatRankConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<BigFloatRankConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<BigFloatRankConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.str=stream.readUTF();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		_dicT=new StringIntMap();

		BigFloatRankConfig[] values;
		BigFloatRankConfig v;

		for(int i=(values=_dic.getValues()).Length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				_dicT.put(v.str,v.id);
			}
		}
	}
	
	/// <summary>
	/// 获取每阶文字
	/// </summary>
	public static string getRankStr(int rank)
	{
		BigFloatRankConfig config=get(rank);

		if(config!=null)
			return config.str;

		return "rank("+rank+")";
	}
	
	/// <summary>
	/// 通过文字获取阶数
	/// </summary>
	public static int getRankByStr(string str)
	{
		int rank=_dicT.get(str);

		if(rank==0)
		{
			Ctrl.warnLog("未找到BigFloatRank配置:"+str);
			return 0;
		}

		return rank;
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeUTF(this.str);
		
	}
	
}
