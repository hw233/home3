using ShineEngine;

/// <summary>
/// 敏感词表(generated by shine)
/// </summary>
public class SensitiveWordConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<SensitiveWordConfig> _dic;
	
	/// <summary>
	/// 键
	/// </summary>
	public int key;
	
	/// <summary>
	/// 简体中文
	/// </summary>
	public string zh_CN;
	
	/// <summary>
	/// 美国英语
	/// </summary>
	public string en_US;
	
	private static SList<string>[] _sList;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static SensitiveWordConfig get(int key)
	{
		return _dic.get(key);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<SensitiveWordConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<SensitiveWordConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<SensitiveWordConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.key=stream.readInt();
		
		this.zh_CN=stream.readUTF();
		
		this.en_US=stream.readUTF();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	public static void init()
	{
		_sList=new SList<string>[LanguageType.size];

		SensitiveWordConfig[] values;
		SensitiveWordConfig v;
		string str;
		SList<string> list;

		for(int i=(values=_dic.getValues()).Length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				for(int j=1;j<LanguageType.size;j++)
				{
					if((str=v.getStr(j))!=null)
					{
						if((list=_sList[j])==null)
						{
							_sList[j]=list=new SList<string>();
						}

						list.add(str);
					}
				}
			}
		}
	}
	
	protected string getStr(int type)
	{
		switch(type)
		{
			case LanguageType.Zh_CN:
				return zh_CN;
			case LanguageType.En_US:
				return en_US;
		}

		return null;
	}
	
	public static SList<string> getWordList(int type)
	{
		return _sList[type];
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.key);
		
		stream.writeUTF(this.zh_CN);
		
		stream.writeUTF(this.en_US);
		
	}
	
}
