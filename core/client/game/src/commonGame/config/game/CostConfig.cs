using ShineEngine;

/// <summary>
/// 消耗表(generated by shine)
/// </summary>
public class CostConfig:BaseConfig
{
	/** 存储集合 */
	private static IntObjectMap<CostConfig> _dic;
	
	/// <summary>
	/// id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 消耗货币组(固定)
	/// </summary>
	public DIntData[] currency;
	
	/// <summary>
	/// 消耗物品组(固定)
	/// </summary>
	public DIntData[] items;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static CostConfig get(int id)
	{
		return _dic.get(id);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(IntObjectMap<CostConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(IntObjectMap<CostConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static IntObjectMap<CostConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		int currencyLen=stream.readLen();
		if(this.currency==null || this.currency.Length!=currencyLen)
		{
			this.currency=new DIntData[currencyLen];
		}
		DIntData[] currencyT=this.currency;
		for(int currencyI=0;currencyI<currencyLen;++currencyI)
		{
			DIntData currencyV;
			currencyV=(DIntData)stream.createData(DIntData.dataID);
			currencyV.readBytesSimple(stream);
			
			currencyT[currencyI]=currencyV;
		}
		
		int itemsLen=stream.readLen();
		if(this.items==null || this.items.Length!=itemsLen)
		{
			this.items=new DIntData[itemsLen];
		}
		DIntData[] itemsT=this.items;
		for(int itemsI=0;itemsI<itemsLen;++itemsI)
		{
			DIntData itemsV;
			itemsV=(DIntData)stream.createData(DIntData.dataID);
			itemsV.readBytesSimple(stream);
			
			itemsT[itemsI]=itemsV;
		}
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		if(this.currency!=null)
		{
			DIntData[] currencyT=this.currency;
			stream.writeLen(currencyT.Length);
			for(int currencyVI=0,currencyVLen=currencyT.Length;currencyVI<currencyVLen;++currencyVI)
			{
				DIntData currencyV=currencyT[currencyVI];
				if(currencyV!=null)
				{
					currencyV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("currencyV");
				}
				
			}
		}
		else
		{
			nullObjError("currency");
		}
		
		if(this.items!=null)
		{
			DIntData[] itemsT=this.items;
			stream.writeLen(itemsT.Length);
			for(int itemsVI=0,itemsVLen=itemsT.Length;itemsVI<itemsVLen;++itemsVI)
			{
				DIntData itemsV=itemsT[itemsVI];
				if(itemsV!=null)
				{
					itemsV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("itemsV");
				}
				
			}
		}
		else
		{
			nullObjError("items");
		}
		
	}
	
}
