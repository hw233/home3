using ShineEngine;
using System;

/// <summary>
/// 技能攻击等级表(generated by shine)
/// </summary>
public class AttackLevelConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<AttackLevelConfig> _dic;
	
	/// <summary>
	/// 攻击id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 攻击范围参数
	/// </summary>
	public float[] scopeArgs;
	
	/// <summary>
	/// 攻击范围
	/// </summary>
	public int scope;
	
	/// <summary>
	/// 产生子弹
	/// </summary>
	public DIntData bullet;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 命中添加buff组
	/// </summary>
	public DIntData[] addBuffs;
	
	/// <summary>
	/// 命中添加buff几率ID
	/// </summary>
	public int addBuffProbID;
	
	/// <summary>
	/// 攻击时刻动作组
	/// </summary>
	public int[][] momentActions;
	
	/// <summary>
	/// 攻击时刻动作组T
	/// </summary>
	public int[][][] momentActionsT;
	
	/// <summary>
	/// 伤害组
	/// </summary>
	public int[][] damages;
	
	/// <summary>
	/// 变量配置组
	/// </summary>
	public SkillVarConfig[] varConfigT;
	
	/// <summary>
	/// 变量数据组
	/// </summary>
	public int varNumT;
	
	/// <summary>
	/// 伤害类型组
	/// </summary>
	public int[] damageTypesT;
	
	/// <summary>
	/// 造成僵直
	/// </summary>
	public int spasticityValue;
	
	/// <summary>
	/// 浮空力
	/// </summary>
	public int attackBlowForce;
	
	/// <summary>
	/// 击退力
	/// </summary>
	public int attackPushForce;
	
	/// <summary>
	/// 倒地击退力
	/// </summary>
	public int attackLiePushForce;
	
	/// <summary>
	/// 碰撞矩形
	/// </summary>
	public SRect hitRect;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static AttackLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<AttackLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<AttackLevelConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<AttackLevelConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		this.scope=stream.readInt();
		
		int scopeArgsLen=stream.readLen();
		if(this.scopeArgs==null || this.scopeArgs.Length!=scopeArgsLen)
		{
			this.scopeArgs=new float[scopeArgsLen];
		}
		float[] scopeArgsT=this.scopeArgs;
		for(int scopeArgsI=0;scopeArgsI<scopeArgsLen;++scopeArgsI)
		{
			float scopeArgsV;
			scopeArgsV=stream.readFloat();
			
			scopeArgsT[scopeArgsI]=scopeArgsV;
		}
		
		this.bullet=(DIntData)stream.createData(DIntData.dataID);
		this.bullet.readBytesSimple(stream);
		
		int damagesLen=stream.readLen();
		if(this.damages==null || this.damages.Length!=damagesLen)
		{
			this.damages=new int[damagesLen][];
		}
		int[][] damagesT=this.damages;
		for(int damagesI=0;damagesI<damagesLen;++damagesI)
		{
			int[] damagesV;
			int damagesVLen=stream.readLen();
			damagesV=new int[damagesVLen];
			int[] damagesVT=damagesV;
			for(int damagesVI=0;damagesVI<damagesVLen;++damagesVI)
			{
				int damagesVV;
				damagesVV=stream.readInt();
				
				damagesVT[damagesVI]=damagesVV;
			}
			
			damagesT[damagesI]=damagesV;
		}
		
		this.addBuffProbID=stream.readInt();
		
		int addBuffsLen=stream.readLen();
		if(this.addBuffs==null || this.addBuffs.Length!=addBuffsLen)
		{
			this.addBuffs=new DIntData[addBuffsLen];
		}
		DIntData[] addBuffsT=this.addBuffs;
		for(int addBuffsI=0;addBuffsI<addBuffsLen;++addBuffsI)
		{
			DIntData addBuffsV;
			addBuffsV=(DIntData)stream.createData(DIntData.dataID);
			addBuffsV.readBytesSimple(stream);
			
			addBuffsT[addBuffsI]=addBuffsV;
		}
		
		int momentActionsLen=stream.readLen();
		if(this.momentActions==null || this.momentActions.Length!=momentActionsLen)
		{
			this.momentActions=new int[momentActionsLen][];
		}
		int[][] momentActionsT=this.momentActions;
		for(int momentActionsI=0;momentActionsI<momentActionsLen;++momentActionsI)
		{
			int[] momentActionsV;
			int momentActionsVLen=stream.readLen();
			momentActionsV=new int[momentActionsVLen];
			int[] momentActionsVT=momentActionsV;
			for(int momentActionsVI=0;momentActionsVI<momentActionsVLen;++momentActionsVI)
			{
				int momentActionsVV;
				momentActionsVV=stream.readInt();
				
				momentActionsVT[momentActionsVI]=momentActionsVV;
			}
			
			momentActionsT[momentActionsI]=momentActionsV;
		}
		
		this.spasticityValue=stream.readInt();
		
		this.attackBlowForce=stream.readInt();
		
		this.attackPushForce=stream.readInt();
		
		this.attackLiePushForce=stream.readInt();
		
	}
	
	protected override void afterReadConfig()
	{
		base.afterReadConfig();

		damageTypesT=new int[damages.Length];

		for(int i=damages.Length-1;i>=0;--i)
		{
			damageTypesT[i]=damages[i][0];
		}

		momentActionsT=new int[AttackMomentType.size][][];

		for(int i=momentActions.Length-1;i>=0;--i)
		{
			int[] arr=momentActions[i];

			int[][] arr2=momentActionsT[arr[0]];

			if(arr2==null)
			{
				arr2=new int[1][];
				arr2[0]=arr;
			}
			else
			{
				int[][] arr3=new int[arr2.Length+1][];
				Array.Copy(arr2,0,arr3,0,arr2.Length);
				arr3[arr2.Length]=arr;
				arr2=arr3;
			}

			momentActionsT[arr[0]]=arr2;
		}

		if(scope==AttackScopeType.AttackRect)
		{
			hitRect=SRect.createByConfig(scopeArgs);
		}
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{
		if(_dic==null)
			return;

		AttackLevelConfig[] values=_dic.getValues();
		AttackLevelConfig v;

		for(int i=values.Length-1;i>=0;--i)
		{
			if((v=values[i])!=null)
			{
				v.varConfigT=new SkillVarConfig[v.damages.Length];
				v.varNumT=0;

				for(int j=v.damages.Length-1;j>=0;--j)
				{
					v.varNumT+=(v.varConfigT[j]=SkillVarConfig.get(v.damages[j][1])).args.Length;
				}
			}
		}
	}
	
	/// <summary>
	/// 获取
	/// </summary>
	public static AttackLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		stream.writeInt(this.scope);
		
		if(this.scopeArgs!=null)
		{
			float[] scopeArgsT=this.scopeArgs;
			stream.writeLen(scopeArgsT.Length);
			for(int scopeArgsVI=0,scopeArgsVLen=scopeArgsT.Length;scopeArgsVI<scopeArgsVLen;++scopeArgsVI)
			{
				float scopeArgsV=scopeArgsT[scopeArgsVI];
				stream.writeFloat(scopeArgsV);
				
			}
		}
		else
		{
			nullObjError("scopeArgs");
		}
		
		if(this.bullet!=null)
		{
			this.bullet.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("bullet");
		}
		
		if(this.damages!=null)
		{
			int[][] damagesT=this.damages;
			stream.writeLen(damagesT.Length);
			for(int damagesVI=0,damagesVLen=damagesT.Length;damagesVI<damagesVLen;++damagesVI)
			{
				int[] damagesV=damagesT[damagesVI];
				if(damagesV!=null)
				{
					int[] damagesVT=damagesV;
					stream.writeLen(damagesVT.Length);
					for(int damagesVVI=0,damagesVVLen=damagesVT.Length;damagesVVI<damagesVVLen;++damagesVVI)
					{
						int damagesVV=damagesVT[damagesVVI];
						stream.writeInt(damagesVV);
						
					}
				}
				else
				{
					nullObjError("damagesV");
				}
				
			}
		}
		else
		{
			nullObjError("damages");
		}
		
		stream.writeInt(this.addBuffProbID);
		
		if(this.addBuffs!=null)
		{
			DIntData[] addBuffsT=this.addBuffs;
			stream.writeLen(addBuffsT.Length);
			for(int addBuffsVI=0,addBuffsVLen=addBuffsT.Length;addBuffsVI<addBuffsVLen;++addBuffsVI)
			{
				DIntData addBuffsV=addBuffsT[addBuffsVI];
				if(addBuffsV!=null)
				{
					addBuffsV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("addBuffsV");
				}
				
			}
		}
		else
		{
			nullObjError("addBuffs");
		}
		
		if(this.momentActions!=null)
		{
			int[][] momentActionsT=this.momentActions;
			stream.writeLen(momentActionsT.Length);
			for(int momentActionsVI=0,momentActionsVLen=momentActionsT.Length;momentActionsVI<momentActionsVLen;++momentActionsVI)
			{
				int[] momentActionsV=momentActionsT[momentActionsVI];
				if(momentActionsV!=null)
				{
					int[] momentActionsVT=momentActionsV;
					stream.writeLen(momentActionsVT.Length);
					for(int momentActionsVVI=0,momentActionsVVLen=momentActionsVT.Length;momentActionsVVI<momentActionsVVLen;++momentActionsVVI)
					{
						int momentActionsVV=momentActionsVT[momentActionsVVI];
						stream.writeInt(momentActionsVV);
						
					}
				}
				else
				{
					nullObjError("momentActionsV");
				}
				
			}
		}
		else
		{
			nullObjError("momentActions");
		}
		
		stream.writeInt(this.spasticityValue);
		
		stream.writeInt(this.attackBlowForce);
		
		stream.writeInt(this.attackPushForce);
		
		stream.writeInt(this.attackLiePushForce);
		
	}
	
}
