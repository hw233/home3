using ShineEngine;
using System;

/// <summary>
/// 技能等级表(generated by shine)
/// </summary>
public class SkillLevelConfig:BaseConfig
{
	/** 存储集合 */
	private static LongObjectMap<SkillLevelConfig> _dic;
	
	/// <summary>
	/// 技能id
	/// </summary>
	public int id;
	
	/// <summary>
	/// 等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 产生冷却ID
	/// </summary>
	public int[] bringCDs;
	
	/// <summary>
	/// 技能消耗
	/// </summary>
	public DIntData[] cost;
	
	/// <summary>
	/// 施法距离附加变量ID
	/// </summary>
	public int useDistanceVar;
	
	/// <summary>
	/// 吟唱读条id
	/// </summary>
	public int singBarID;
	
	/// <summary>
	/// 引导/持续时间
	/// </summary>
	public int lastTime;
	
	/// <summary>
	/// 施法距离
	/// </summary>
	public float useDistance;
	
	/// <summary>
	/// 技能描述
	/// </summary>
	public string explain;
	
	/// <summary>
	/// 获取
	/// </summary>
	public static SkillLevelConfig get(int id,int level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 设置字典
	/// </summary>
	public static void setDic(LongObjectMap<SkillLevelConfig> dic)
	{
		_dic=dic;
	}
	
	/// <summary>
	/// 添加字典(热更用)
	/// </summary>
	public static void addDic(LongObjectMap<SkillLevelConfig> dic)
	{
		_dic.putAll(dic);
	}
	
	/// <summary>
	/// 获取全部
	/// </summary>
	public static LongObjectMap<SkillLevelConfig> getDic()
	{
		return _dic;
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.level=stream.readShort();
		
		int bringCDsLen=stream.readLen();
		if(this.bringCDs==null || this.bringCDs.Length!=bringCDsLen)
		{
			this.bringCDs=new int[bringCDsLen];
		}
		int[] bringCDsT=this.bringCDs;
		for(int bringCDsI=0;bringCDsI<bringCDsLen;++bringCDsI)
		{
			int bringCDsV;
			bringCDsV=stream.readInt();
			
			bringCDsT[bringCDsI]=bringCDsV;
		}
		
		int costLen=stream.readLen();
		if(this.cost==null || this.cost.Length!=costLen)
		{
			this.cost=new DIntData[costLen];
		}
		DIntData[] costT=this.cost;
		for(int costI=0;costI<costLen;++costI)
		{
			DIntData costV;
			costV=(DIntData)stream.createData(DIntData.dataID);
			costV.readBytesSimple(stream);
			
			costT[costI]=costV;
		}
		
		this.useDistance=stream.readFloat();
		
		this.useDistanceVar=stream.readInt();
		
		this.singBarID=stream.readInt();
		
		this.lastTime=stream.readInt();
		
		this.explain=stream.readUTF();
		
	}
	
	/// <summary>
	/// 读完所有表后处理
	/// </summary>
	public static void afterReadConfigAll()
	{

	}
	
	/// <summary>
	/// 获取
	/// </summary>
	public static SkillLevelConfig get(int id,short level)
	{
		return _dic.get((long)id << 16 | (long)level);
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.id);
		
		stream.writeShort(this.level);
		
		if(this.bringCDs!=null)
		{
			int[] bringCDsT=this.bringCDs;
			stream.writeLen(bringCDsT.Length);
			for(int bringCDsVI=0,bringCDsVLen=bringCDsT.Length;bringCDsVI<bringCDsVLen;++bringCDsVI)
			{
				int bringCDsV=bringCDsT[bringCDsVI];
				stream.writeInt(bringCDsV);
				
			}
		}
		else
		{
			nullObjError("bringCDs");
		}
		
		if(this.cost!=null)
		{
			DIntData[] costT=this.cost;
			stream.writeLen(costT.Length);
			for(int costVI=0,costVLen=costT.Length;costVI<costVLen;++costVI)
			{
				DIntData costV=costT[costVI];
				if(costV!=null)
				{
					costV.writeBytesSimple(stream);
				}
				else
				{
					nullObjError("costV");
				}
				
			}
		}
		else
		{
			nullObjError("cost");
		}
		
		stream.writeFloat(this.useDistance);
		
		stream.writeInt(this.useDistanceVar);
		
		stream.writeInt(this.singBarID);
		
		stream.writeInt(this.lastTime);
		
		stream.writeUTF(this.explain);
		
	}
	
}
