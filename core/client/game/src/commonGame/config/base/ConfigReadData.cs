using ShineEngine;

/// <summary>
/// (generated by shine)
/// </summary>
[Hotfix]
public class ConfigReadData
{
	/** 列表 */
	private IntList _list=new IntList();
	
	/// <summary>
	/// CD表字典
	/// </summary>
	public IntObjectMap<CDConfig> cdDic;
	
	/// <summary>
	/// 活动表字典
	/// </summary>
	public IntObjectMap<ActivityConfig> activityDic;
	
	/// <summary>
	/// 调用方式表字典
	/// </summary>
	public IntObjectMap<CallWayConfig> callWayDic;
	
	/// <summary>
	/// buff表字典
	/// </summary>
	public IntObjectMap<BuffConfig> buffDic;
	
	/// <summary>
	/// 单位效果表字典
	/// </summary>
	public IntObjectMap<EffectConfig> effectDic;
	
	/// <summary>
	/// 场景特效表字典
	/// </summary>
	public IntObjectMap<SceneEffectConfig> sceneEffectDic;
	
	/// <summary>
	/// 技能几率表字典
	/// </summary>
	public IntObjectMap<SkillProbConfig> skillProbDic;
	
	/// <summary>
	/// 特殊移动表字典
	/// </summary>
	public IntObjectMap<SpecialMoveConfig> specialMoveDic;
	
	/// <summary>
	/// 随机单个物品配置字典
	/// </summary>
	public IntObjectMap<RandomItemConfig> randomItemDic;
	
	/// <summary>
	/// 文本表(程序用)(需国际化)字典
	/// </summary>
	public SMap<string,TextConfig> textDic;
	
	/// <summary>
	/// 流程步骤类型字典
	/// </summary>
	public IntObjectMap<FlowStepConfig> flowStepDic;
	
	/// <summary>
	/// 角色表字典
	/// </summary>
	public IntObjectMap<CharacterConfig> characterDic;
	
	/// <summary>
	/// 怪物表字典
	/// </summary>
	public IntObjectMap<MonsterConfig> monsterDic;
	
	/// <summary>
	/// 状态类型表字典
	/// </summary>
	public StatusConfig[] statusDic;
	
	/// <summary>
	/// 进度条表字典
	/// </summary>
	public IntObjectMap<ProgressBarConfig> progressBarDic;
	
	/// <summary>
	/// 成就表字典
	/// </summary>
	public IntObjectMap<AchievementConfig> achievementDic;
	
	/// <summary>
	/// 随机物品组配置字典
	/// </summary>
	public IntObjectMap<RandomItemListConfig> randomItemListDic;
	
	/// <summary>
	/// 技能等级表字典
	/// </summary>
	public LongObjectMap<SkillLevelConfig> skillLevelDic;
	
	/// <summary>
	/// 技能攻击等级表字典
	/// </summary>
	public LongObjectMap<AttackLevelConfig> attackLevelDic;
	
	/// <summary>
	/// 技能攻击表字典
	/// </summary>
	public IntObjectMap<AttackConfig> attackDic;
	
	/// <summary>
	/// 邮件表字典
	/// </summary>
	public IntObjectMap<MailConfig> mailDic;
	
	/// <summary>
	/// 副本基础表字典
	/// </summary>
	public IntObjectMap<BattleConfig> battleDic;
	
	/// <summary>
	/// 场景类型字典
	/// </summary>
	public SceneTypeConfig[] sceneTypeDic;
	
	/// <summary>
	/// 任务目标类型字典
	/// </summary>
	public TaskTypeConfig[] taskTypeDic;
	
	/// <summary>
	/// 单位移动方式字典
	/// </summary>
	public UnitMoveTypeConfig[] unitMoveTypeDic;
	
	/// <summary>
	/// 角色显示数据部件类型字典
	/// </summary>
	public RoleShowDataPartTypeConfig[] roleShowDataPartTypeDic;
	
	/// <summary>
	/// 邮件类型字典
	/// </summary>
	public MailTypeConfig[] mailTypeDic;
	
	/// <summary>
	/// 模型绑点位置类型字典
	/// </summary>
	public ModelBindPosTypeConfig[] modelBindPosTypeDic;
	
	/// <summary>
	/// 单位特殊移动类型字典
	/// </summary>
	public UnitSpecialMoveTypeConfig[] unitSpecialMoveTypeDic;
	
	/// <summary>
	/// 语言类型字典
	/// </summary>
	public LanguageTypeConfig[] languageTypeDic;
	
	/// <summary>
	/// 玩家等级表字典
	/// </summary>
	public IntObjectMap<RoleLevelConfig> roleLevelDic;
	
	/// <summary>
	/// 随机名字表字典
	/// </summary>
	public IntObjectMap<RandomNameConfig> randomNameDic;
	
	/// <summary>
	/// 技能变量表字典
	/// </summary>
	public IntObjectMap<SkillVarConfig> skillVarDic;
	
	/// <summary>
	/// 技能表字典
	/// </summary>
	public IntObjectMap<SkillConfig> skillDic;
	
	/// <summary>
	/// 属性类型表字典
	/// </summary>
	public AttributeConfig[] attributeDic;
	
	/// <summary>
	/// buff等级表字典
	/// </summary>
	public LongObjectMap<BuffLevelConfig> buffLevelDic;
	
	/// <summary>
	/// 平台表字典
	/// </summary>
	public SMap<string,PlatformConfig> platformDic;
	
	/// <summary>
	/// 任务目标表字典
	/// </summary>
	public IntObjectMap<TaskConfig> taskDic;
	
	/// <summary>
	/// 界面表字典
	/// </summary>
	public IntObjectMap<UIConfig> uiDic;
	
	/// <summary>
	/// cd组表字典
	/// </summary>
	public IntObjectMap<CDGroupConfig> cdGroupDic;
	
	/// <summary>
	/// 单位模型表字典
	/// </summary>
	public IntObjectMap<ModelConfig> modelDic;
	
	/// <summary>
	/// 加载资源表字典
	/// </summary>
	public SMap<string,MarkResourceConfig> markResourceDic;
	
	/// <summary>
	/// 技能步骤表字典
	/// </summary>
	public LongObjectMap<SkillStepConfig> skillStepDic;
	
	/// <summary>
	/// 技能组表字典
	/// </summary>
	public IntObjectMap<SkillGroupConfig> skillGroupDic;
	
	/// <summary>
	/// 攻击组表字典
	/// </summary>
	public IntObjectMap<AttackGroupConfig> attackGroupDic;
	
	/// <summary>
	/// 单位模型动作表字典
	/// </summary>
	public LongObjectMap<ModelMotionConfig> modelMotionDic;
	
	/// <summary>
	/// buff组表字典
	/// </summary>
	public IntObjectMap<BuffGroupConfig> buffGroupDic;
	
	/// <summary>
	/// 任务表字典
	/// </summary>
	public IntObjectMap<QuestConfig> questDic;
	
	/// <summary>
	/// bullet表字典
	/// </summary>
	public IntObjectMap<BulletConfig> bulletDic;
	
	/// <summary>
	/// NPC表字典
	/// </summary>
	public IntObjectMap<NPCConfig> npcDic;
	
	/// <summary>
	/// 货币表字典
	/// </summary>
	public CurrencyConfig[] currencyDic;
	
	/// <summary>
	/// 技能步骤等级表字典
	/// </summary>
	public LongObjectMap<SkillStepLevelConfig> skillStepLevelDic;
	
	/// <summary>
	/// 傀儡表字典
	/// </summary>
	public IntObjectMap<PuppetConfig> puppetDic;
	
	/// <summary>
	/// 傀儡等级表字典
	/// </summary>
	public LongObjectMap<PuppetLevelConfig> puppetLevelDic;
	
	/// <summary>
	/// 单位显示部件表字典
	/// </summary>
	public LongObjectMap<AvatarPartConfig> avatarPartDic;
	
	/// <summary>
	/// 国际化表字典
	/// </summary>
	public SMap<string,LanguageConfig> languageDic;
	
	/// <summary>
	/// 单位外观表字典
	/// </summary>
	public IntObjectMap<FacadeConfig> facadeDic;
	
	/// <summary>
	/// 宠物表字典
	/// </summary>
	public IntObjectMap<PetConfig> petDic;
	
	/// <summary>
	/// 模型动作类型字典
	/// </summary>
	public MotionConfig[] motionDic;
	
	/// <summary>
	/// 道具表字典
	/// </summary>
	public IntObjectMap<ItemConfig> itemDic;
	
	/// <summary>
	/// 子弹等级表字典
	/// </summary>
	public LongObjectMap<BulletLevelConfig> bulletLevelDic;
	
	/// <summary>
	/// 战斗单位表字典
	/// </summary>
	public IntObjectMap<FightUnitConfig> fightUnitDic;
	
	/// <summary>
	/// 信息码类型表字典
	/// </summary>
	public IntObjectMap<InfoCodeConfig> infoCodeDic;
	
	/// <summary>
	/// 红点类型字典
	/// </summary>
	public RedPointConfig[] redPointDic;
	
	/// <summary>
	/// 战斗单位等级表字典
	/// </summary>
	public LongObjectMap<FightUnitLevelConfig> fightUnitLevelDic;
	
	/// <summary>
	/// 国际化资源表字典
	/// </summary>
	public SMap<string,InternationalResourceConfig> internationalResourceDic;
	
	/// <summary>
	/// 场景布置元素表(编辑器对应)字典
	/// </summary>
	public LongObjectMap<ScenePlaceElementConfig> scenePlaceElementDic;
	
	/// <summary>
	/// 创建单个物品配置(不包含数量)字典
	/// </summary>
	public IntObjectMap<CreateItemConfig> createItemDic;
	
	/// <summary>
	/// 场景表字典
	/// </summary>
	public IntObjectMap<SceneConfig> sceneDic;
	
	/// <summary>
	/// 功能表字典
	/// </summary>
	public IntObjectMap<FunctionConfig> functionDic;
	
	/// <summary>
	/// 奖励表字典
	/// </summary>
	public IntObjectMap<RewardConfig> rewardDic;
	
	/// <summary>
	/// 全局配置表
	/// </summary>
	public GlobalReadData global;
	
	/// <summary>
	/// trigger表
	/// </summary>
	public IntObjectMap<TriggerConfigData> triggerDic;
	
	/// <summary>
	/// 场景摆放配置(editor部分)
	/// </summary>
	public IntObjectMap<ScenePlaceConfig> scenePlaceEditorDic;
	
	/// <summary>
	/// 敏感词表字典
	/// </summary>
	public IntObjectMap<SensitiveWordConfig> sensitiveWordDic;
	
	/// <summary>
	/// 字体表(程序用)(需国际化)字典
	/// </summary>
	public FontConfig[] fontDic;
	
	/// <summary>
	/// 国家地区表(登录用)字典
	/// </summary>
	public IntObjectMap<CountryCodeConfig> countryCodeDic;
	
	/// <summary>
	/// gm类型字典
	/// </summary>
	public GMTypeConfig[] gMTypeDic;
	
	/// <summary>
	/// 消耗表字典
	/// </summary>
	public IntObjectMap<CostConfig> costDic;
	
	/// <summary>
	/// 兑换表字典
	/// </summary>
	public IntObjectMap<ExchangeConfig> exchangeDic;
	
	/// <summary>
	/// 大浮点数阶位字典
	/// </summary>
	public IntObjectMap<BigFloatRankConfig> bigFloatRankDic;
	
	/// <summary>
	/// 职业表字典
	/// </summary>
	public VocationConfig[] vocationDic;
	
	/// <summary>
	/// 场景地图表字典
	/// </summary>
	public IntObjectMap<SceneMapConfig> sceneMapDic;
	
	/// <summary>
	/// 推送表字典
	/// </summary>
	public PushNotifyConfig[] pushNotifyDic;
	
	/// <summary>
	/// 操作体表字典
	/// </summary>
	public IntObjectMap<OperationConfig> operationDic;
	
	/// <summary>
	/// 装备槽位类型字典
	/// </summary>
	public EquipSlotTypeConfig[] equipSlotTypeDic;
	
	/// <summary>
	/// 场景角色属性类型表字典
	/// </summary>
	public SceneRoleAttributeConfig[] sceneRoleAttributeDic;
	
	/// <summary>
	/// 建筑等级表字典
	/// </summary>
	public LongObjectMap<BuildingLevelConfig> buildingLevelDic;
	
	/// <summary>
	/// 技能影响类型字典
	/// </summary>
	public SkillInfluenceTypeConfig[] skillInfluenceTypeDic;
	
	/// <summary>
	/// 建筑表字典
	/// </summary>
	public IntObjectMap<BuildingConfig> buildingDic;
	
	/// <summary>
	/// 技能读条表字典
	/// </summary>
	public IntObjectMap<SkillBarConfig> skillBarDic;
	
	/// <summary>
	/// 玩家群表字典
	/// </summary>
	public IntObjectMap<RoleGroupConfig> roleGroupDic;
	
	/// <summary>
	/// 玩家群等级表字典
	/// </summary>
	public LongObjectMap<RoleGroupLevelConfig> roleGroupLevelDic;
	
	/// <summary>
	/// 玩家群职位表字典
	/// </summary>
	public RoleGroupTitleConfig[] roleGroupTitleDic;
	
	/// <summary>
	/// 信息日志表字典
	/// </summary>
	public IntObjectMap<InfoLogConfig> infoLogDic;
	
	/// <summary>
	/// 兑换组表字典
	/// </summary>
	public IntObjectMap<ExchangeGroupConfig> exchangeGroupDic;
	
	/// <summary>
	/// 界面逻辑体表字典
	/// </summary>
	public UILogicConfig[] uiLogicDic;
	
	/// <summary>
	/// 怪物等级表字典
	/// </summary>
	public LongObjectMap<MonsterLevelConfig> monsterLevelDic;
	
	/// <summary>
	/// 单位模型位置类型字典
	/// </summary>
	public UnitModelSlotTypeConfig[] unitModelSlotTypeDic;
	
	/// <summary>
	/// 角色属性类型表字典
	/// </summary>
	public RoleAttributeConfig[] roleAttributeDic;
	
	/// <summary>
	/// 聊天频道表字典
	/// </summary>
	public ChatChannelConfig[] chatChannelDic;
	
	/// <summary>
	/// 区域表字典
	/// </summary>
	public IntObjectMap<RegionConfig> regionDic;
	
	/// <summary>
	/// 客户端平台类型字典
	/// </summary>
	public ClientPlatformTypeConfig[] clientPlatformTypeDic;
	
	/// <summary>
	/// 地图格子阻挡类型类型字典
	/// </summary>
	public MapBlockTypeConfig[] mapBlockTypeDic;
	
	/// <summary>
	/// buff行为类型字典
	/// </summary>
	public BuffActionTypeConfig[] buffActionTypeDic;
	
	/// <summary>
	/// 场景势力类型字典
	/// </summary>
	public SceneForceTypeConfig[] sceneForceTypeDic;
	
	/// <summary>
	/// 载具表字典
	/// </summary>
	public IntObjectMap<VehicleConfig> vehicleDic;
	
	/// <summary>
	/// 地图移动类型字典
	/// </summary>
	public MapMoveTypeConfig[] mapMoveTypeDic;
	
	/// <summary>
	/// 拍卖行表字典
	/// </summary>
	public IntObjectMap<AuctionConfig> auctionDic;
	
	/// <summary>
	/// 拍卖行查询条件类型字典
	/// </summary>
	public AuctionQueryConditionTypeConfig[] auctionQueryConditionTypeDic;
	
	/// <summary>
	/// 队伍目标表字典
	/// </summary>
	public TeamTargetConfig[] teamTargetDic;
	
	/// <summary>
	/// 分段排行表字典
	/// </summary>
	public IntObjectMap<SubsectionRankConfig> subsectionRankDic;
	
	/// <summary>
	/// 初始化创建表字典
	/// </summary>
	public IntObjectMap<InitCreateConfig> initCreateDic;
	
	/// <summary>
	/// 推送标签类型字典
	/// </summary>
	public PushTopicTypeConfig[] pushTopicTypeDic;
	
	/// <summary>
	/// 单位组表字典
	/// </summary>
	public IntObjectMap<UnitGroupConfig> unitGroupDic;
	
	/// <summary>
	/// 从流读取
	/// </summary>
	public void readBytes(BytesReadStream stream)
	{
		_list.clear();

		int len=stream.readLen();
		int type;

		for(int i=0;i<len;i++)
		{
			stream.clearBooleanPos();
			_list.add((type=stream.readShort()));
			readBytesOne(type,stream);
		}
	}
	
	/// <summary>
	/// 刷新数据
	/// </summary>
	public void refreshData()
	{
		int[] values=_list.getValues();

		for(int i=0, len=_list.size();i<len;++i)
		{
			refreshDataOne(values[i]);
		}
	}
	
	/// <summary>
	/// 设置值到Config上
	/// </summary>
	public void setToConfig()
	{
		int[] values=_list.getValues();

		for(int i=0, len=_list.size();i<len;++i)
		{
			setToConfigOne(values[i]);
		}
	}
	
	/// <summary>
	/// 添加到Config上
	/// </summary>
	public void addToConfig()
	{
		int[] values=_list.getValues();

		for(int i=0, len=_list.size();i<len;++i)
		{
			addToConfigOne(values[i]);
		}
	}
	
	/// <summary>
	/// 读完所有配置
	/// </summary>
	public virtual void afterReadConfigAll()
	{
		int[] values=_list.getValues();

		for(int i=0, len=_list.size();i<len;++i)
		{
			afterReadConfigAllOne(values[i]);
		}
	}
	
	/// <summary>
	/// 构造常量size
	/// </summary>
	public virtual void makeConstSize()
	{
		
	}
	
	/// <summary>
	/// 设置值到Config上
	/// </summary>
	public virtual void setToConfigOne(int type)
	{
		switch(type)
		{
			case ConfigType.Global:
			{
				Global.readFromData(global);
				Global.afterReadConfig();
			}
				break;
			case ConfigType.Trigger:
			{
				setToConfigTrigger();
			}
				break;
			case ConfigType.Language:
			{
				LanguageConfig.setDic(languageDic);
			}
				break;
			case ConfigType.BigFloatRank:
			{
				BigFloatRankConfig.setDic(bigFloatRankDic);
			}
				break;
			case ConfigType.SkillInfluenceType:
			{
				SkillInfluenceTypeConfig.setDic(skillInfluenceTypeDic);
			}
				break;
			case ConfigType.Achievement:
			{
				AchievementConfig.setDic(achievementDic);
			}
				break;
			case ConfigType.Activity:
			{
				ActivityConfig.setDic(activityDic);
			}
				break;
			case ConfigType.Attack:
			{
				AttackConfig.setDic(attackDic);
			}
				break;
			case ConfigType.AttackGroup:
			{
				AttackGroupConfig.setDic(attackGroupDic);
			}
				break;
			case ConfigType.AttackLevel:
			{
				AttackLevelConfig.setDic(attackLevelDic);
			}
				break;
			case ConfigType.Attribute:
			{
				AttributeConfig.setDic(attributeDic);
			}
				break;
			case ConfigType.Auction:
			{
				AuctionConfig.setDic(auctionDic);
			}
				break;
			case ConfigType.AuctionQueryConditionType:
			{
				AuctionQueryConditionTypeConfig.setDic(auctionQueryConditionTypeDic);
			}
				break;
			case ConfigType.AvatarPart:
			{
				AvatarPartConfig.setDic(avatarPartDic);
			}
				break;
			case ConfigType.Battle:
			{
				BattleConfig.setDic(battleDic);
			}
				break;
			case ConfigType.Buff:
			{
				BuffConfig.setDic(buffDic);
			}
				break;
			case ConfigType.BuffActionType:
			{
				BuffActionTypeConfig.setDic(buffActionTypeDic);
			}
				break;
			case ConfigType.BuffGroup:
			{
				BuffGroupConfig.setDic(buffGroupDic);
			}
				break;
			case ConfigType.BuffLevel:
			{
				BuffLevelConfig.setDic(buffLevelDic);
			}
				break;
			case ConfigType.Building:
			{
				BuildingConfig.setDic(buildingDic);
			}
				break;
			case ConfigType.BuildingLevel:
			{
				BuildingLevelConfig.setDic(buildingLevelDic);
			}
				break;
			case ConfigType.Bullet:
			{
				BulletConfig.setDic(bulletDic);
			}
				break;
			case ConfigType.BulletLevel:
			{
				BulletLevelConfig.setDic(bulletLevelDic);
			}
				break;
			case ConfigType.CallWay:
			{
				CallWayConfig.setDic(callWayDic);
			}
				break;
			case ConfigType.CD:
			{
				CDConfig.setDic(cdDic);
			}
				break;
			case ConfigType.CDGroup:
			{
				CDGroupConfig.setDic(cdGroupDic);
			}
				break;
			case ConfigType.Character:
			{
				CharacterConfig.setDic(characterDic);
			}
				break;
			case ConfigType.ChatChannel:
			{
				ChatChannelConfig.setDic(chatChannelDic);
			}
				break;
			case ConfigType.ClientPlatformType:
			{
				ClientPlatformTypeConfig.setDic(clientPlatformTypeDic);
			}
				break;
			case ConfigType.Cost:
			{
				CostConfig.setDic(costDic);
			}
				break;
			case ConfigType.CountryCode:
			{
				CountryCodeConfig.setDic(countryCodeDic);
			}
				break;
			case ConfigType.CreateItem:
			{
				CreateItemConfig.setDic(createItemDic);
			}
				break;
			case ConfigType.Currency:
			{
				CurrencyConfig.setDic(currencyDic);
			}
				break;
			case ConfigType.Effect:
			{
				EffectConfig.setDic(effectDic);
			}
				break;
			case ConfigType.EquipSlotType:
			{
				EquipSlotTypeConfig.setDic(equipSlotTypeDic);
			}
				break;
			case ConfigType.Exchange:
			{
				ExchangeConfig.setDic(exchangeDic);
			}
				break;
			case ConfigType.ExchangeGroup:
			{
				ExchangeGroupConfig.setDic(exchangeGroupDic);
			}
				break;
			case ConfigType.Facade:
			{
				FacadeConfig.setDic(facadeDic);
			}
				break;
			case ConfigType.FightUnit:
			{
				FightUnitConfig.setDic(fightUnitDic);
			}
				break;
			case ConfigType.FightUnitLevel:
			{
				FightUnitLevelConfig.setDic(fightUnitLevelDic);
			}
				break;
			case ConfigType.FlowStep:
			{
				FlowStepConfig.setDic(flowStepDic);
			}
				break;
			case ConfigType.Font:
			{
				FontConfig.setDic(fontDic);
			}
				break;
			case ConfigType.Function:
			{
				FunctionConfig.setDic(functionDic);
			}
				break;
			case ConfigType.GMType:
			{
				GMTypeConfig.setDic(gMTypeDic);
			}
				break;
			case ConfigType.InfoCode:
			{
				InfoCodeConfig.setDic(infoCodeDic);
			}
				break;
			case ConfigType.InfoLog:
			{
				InfoLogConfig.setDic(infoLogDic);
			}
				break;
			case ConfigType.InitCreate:
			{
				InitCreateConfig.setDic(initCreateDic);
			}
				break;
			case ConfigType.InternationalResource:
			{
				InternationalResourceConfig.setDic(internationalResourceDic);
			}
				break;
			case ConfigType.Item:
			{
				ItemConfig.setDic(itemDic);
			}
				break;
			case ConfigType.LanguageType:
			{
				LanguageTypeConfig.setDic(languageTypeDic);
			}
				break;
			case ConfigType.Mail:
			{
				MailConfig.setDic(mailDic);
			}
				break;
			case ConfigType.MailType:
			{
				MailTypeConfig.setDic(mailTypeDic);
			}
				break;
			case ConfigType.MapBlockType:
			{
				MapBlockTypeConfig.setDic(mapBlockTypeDic);
			}
				break;
			case ConfigType.MapMoveType:
			{
				MapMoveTypeConfig.setDic(mapMoveTypeDic);
			}
				break;
			case ConfigType.MarkResource:
			{
				MarkResourceConfig.setDic(markResourceDic);
			}
				break;
			case ConfigType.Model:
			{
				ModelConfig.setDic(modelDic);
			}
				break;
			case ConfigType.ModelBindPosType:
			{
				ModelBindPosTypeConfig.setDic(modelBindPosTypeDic);
			}
				break;
			case ConfigType.ModelMotion:
			{
				ModelMotionConfig.setDic(modelMotionDic);
			}
				break;
			case ConfigType.Monster:
			{
				MonsterConfig.setDic(monsterDic);
			}
				break;
			case ConfigType.MonsterLevel:
			{
				MonsterLevelConfig.setDic(monsterLevelDic);
			}
				break;
			case ConfigType.Motion:
			{
				MotionConfig.setDic(motionDic);
			}
				break;
			case ConfigType.NPC:
			{
				NPCConfig.setDic(npcDic);
			}
				break;
			case ConfigType.Operation:
			{
				OperationConfig.setDic(operationDic);
			}
				break;
			case ConfigType.Pet:
			{
				PetConfig.setDic(petDic);
			}
				break;
			case ConfigType.Platform:
			{
				PlatformConfig.setDic(platformDic);
			}
				break;
			case ConfigType.ProgressBar:
			{
				ProgressBarConfig.setDic(progressBarDic);
			}
				break;
			case ConfigType.Puppet:
			{
				PuppetConfig.setDic(puppetDic);
			}
				break;
			case ConfigType.PuppetLevel:
			{
				PuppetLevelConfig.setDic(puppetLevelDic);
			}
				break;
			case ConfigType.PushNotify:
			{
				PushNotifyConfig.setDic(pushNotifyDic);
			}
				break;
			case ConfigType.PushTopicType:
			{
				PushTopicTypeConfig.setDic(pushTopicTypeDic);
			}
				break;
			case ConfigType.Quest:
			{
				QuestConfig.setDic(questDic);
			}
				break;
			case ConfigType.RandomItem:
			{
				RandomItemConfig.setDic(randomItemDic);
			}
				break;
			case ConfigType.RandomItemList:
			{
				RandomItemListConfig.setDic(randomItemListDic);
			}
				break;
			case ConfigType.RandomName:
			{
				RandomNameConfig.setDic(randomNameDic);
			}
				break;
			case ConfigType.RedPoint:
			{
				RedPointConfig.setDic(redPointDic);
			}
				break;
			case ConfigType.Region:
			{
				RegionConfig.setDic(regionDic);
			}
				break;
			case ConfigType.Reward:
			{
				RewardConfig.setDic(rewardDic);
			}
				break;
			case ConfigType.RoleAttribute:
			{
				RoleAttributeConfig.setDic(roleAttributeDic);
			}
				break;
			case ConfigType.RoleGroup:
			{
				RoleGroupConfig.setDic(roleGroupDic);
			}
				break;
			case ConfigType.RoleGroupLevel:
			{
				RoleGroupLevelConfig.setDic(roleGroupLevelDic);
			}
				break;
			case ConfigType.RoleGroupTitle:
			{
				RoleGroupTitleConfig.setDic(roleGroupTitleDic);
			}
				break;
			case ConfigType.RoleLevel:
			{
				RoleLevelConfig.setDic(roleLevelDic);
			}
				break;
			case ConfigType.RoleShowDataPartType:
			{
				RoleShowDataPartTypeConfig.setDic(roleShowDataPartTypeDic);
			}
				break;
			case ConfigType.Scene:
			{
				SceneConfig.setDic(sceneDic);
			}
				break;
			case ConfigType.SceneEffect:
			{
				SceneEffectConfig.setDic(sceneEffectDic);
			}
				break;
			case ConfigType.SceneForceType:
			{
				SceneForceTypeConfig.setDic(sceneForceTypeDic);
			}
				break;
			case ConfigType.SceneMap:
			{
				SceneMapConfig.setDic(sceneMapDic);
			}
				break;
			case ConfigType.ScenePlaceElement:
			{
				ScenePlaceElementConfig.setDic(scenePlaceElementDic);
			}
				break;
			case ConfigType.SceneRoleAttribute:
			{
				SceneRoleAttributeConfig.setDic(sceneRoleAttributeDic);
			}
				break;
			case ConfigType.SceneType:
			{
				SceneTypeConfig.setDic(sceneTypeDic);
			}
				break;
			case ConfigType.SensitiveWord:
			{
				SensitiveWordConfig.setDic(sensitiveWordDic);
			}
				break;
			case ConfigType.Skill:
			{
				SkillConfig.setDic(skillDic);
			}
				break;
			case ConfigType.SkillBar:
			{
				SkillBarConfig.setDic(skillBarDic);
			}
				break;
			case ConfigType.SkillGroup:
			{
				SkillGroupConfig.setDic(skillGroupDic);
			}
				break;
			case ConfigType.SkillLevel:
			{
				SkillLevelConfig.setDic(skillLevelDic);
			}
				break;
			case ConfigType.SkillProb:
			{
				SkillProbConfig.setDic(skillProbDic);
			}
				break;
			case ConfigType.SkillStep:
			{
				SkillStepConfig.setDic(skillStepDic);
			}
				break;
			case ConfigType.SkillStepLevel:
			{
				SkillStepLevelConfig.setDic(skillStepLevelDic);
			}
				break;
			case ConfigType.SkillVar:
			{
				SkillVarConfig.setDic(skillVarDic);
			}
				break;
			case ConfigType.SpecialMove:
			{
				SpecialMoveConfig.setDic(specialMoveDic);
			}
				break;
			case ConfigType.Status:
			{
				StatusConfig.setDic(statusDic);
			}
				break;
			case ConfigType.SubsectionRank:
			{
				SubsectionRankConfig.setDic(subsectionRankDic);
			}
				break;
			case ConfigType.Task:
			{
				TaskConfig.setDic(taskDic);
			}
				break;
			case ConfigType.TaskType:
			{
				TaskTypeConfig.setDic(taskTypeDic);
			}
				break;
			case ConfigType.TeamTarget:
			{
				TeamTargetConfig.setDic(teamTargetDic);
			}
				break;
			case ConfigType.Text:
			{
				TextConfig.setDic(textDic);
			}
				break;
			case ConfigType.UI:
			{
				UIConfig.setDic(uiDic);
			}
				break;
			case ConfigType.UILogic:
			{
				UILogicConfig.setDic(uiLogicDic);
			}
				break;
			case ConfigType.UnitGroup:
			{
				UnitGroupConfig.setDic(unitGroupDic);
			}
				break;
			case ConfigType.UnitModelSlotType:
			{
				UnitModelSlotTypeConfig.setDic(unitModelSlotTypeDic);
			}
				break;
			case ConfigType.UnitMoveType:
			{
				UnitMoveTypeConfig.setDic(unitMoveTypeDic);
			}
				break;
			case ConfigType.UnitSpecialMoveType:
			{
				UnitSpecialMoveTypeConfig.setDic(unitSpecialMoveTypeDic);
			}
				break;
			case ConfigType.Vehicle:
			{
				VehicleConfig.setDic(vehicleDic);
			}
				break;
			case ConfigType.Vocation:
			{
				VocationConfig.setDic(vocationDic);
			}
				break;
		}
	}
	
	/// <summary>
	/// 读完所有配置
	/// </summary>
	public virtual void afterReadConfigAllOne(int type)
	{
		switch(type)
		{
			case ConfigType.Global:
			{
				Global.afterReadConfigAll();
			}
				break;
			case ConfigType.Trigger:
			{
				afterReadConfigAllTrigger();
			}
				break;
			case ConfigType.Language:
			{
				LanguageConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.BigFloatRank:
			{
				BigFloatRankConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillInfluenceType:
			{
				SkillInfluenceTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Achievement:
			{
				AchievementConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Activity:
			{
				ActivityConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Attack:
			{
				AttackConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.AttackGroup:
			{
				AttackGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.AttackLevel:
			{
				AttackLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Attribute:
			{
				AttributeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Auction:
			{
				AuctionConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.AuctionQueryConditionType:
			{
				AuctionQueryConditionTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.AvatarPart:
			{
				AvatarPartConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Battle:
			{
				BattleConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Buff:
			{
				BuffConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.BuffActionType:
			{
				BuffActionTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.BuffGroup:
			{
				BuffGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.BuffLevel:
			{
				BuffLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Building:
			{
				BuildingConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.BuildingLevel:
			{
				BuildingLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Bullet:
			{
				BulletConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.BulletLevel:
			{
				BulletLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.CallWay:
			{
				CallWayConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.CD:
			{
				CDConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.CDGroup:
			{
				CDGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Character:
			{
				CharacterConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ChatChannel:
			{
				ChatChannelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ClientPlatformType:
			{
				ClientPlatformTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Cost:
			{
				CostConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.CountryCode:
			{
				CountryCodeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.CreateItem:
			{
				CreateItemConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Currency:
			{
				CurrencyConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Effect:
			{
				EffectConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.EquipSlotType:
			{
				EquipSlotTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Exchange:
			{
				ExchangeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ExchangeGroup:
			{
				ExchangeGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Facade:
			{
				FacadeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.FightUnit:
			{
				FightUnitConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.FightUnitLevel:
			{
				FightUnitLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.FlowStep:
			{
				FlowStepConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Font:
			{
				FontConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Function:
			{
				FunctionConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.GMType:
			{
				GMTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.InfoCode:
			{
				InfoCodeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.InfoLog:
			{
				InfoLogConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.InitCreate:
			{
				InitCreateConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.InternationalResource:
			{
				InternationalResourceConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Item:
			{
				ItemConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.LanguageType:
			{
				LanguageTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Mail:
			{
				MailConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.MailType:
			{
				MailTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.MapBlockType:
			{
				MapBlockTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.MapMoveType:
			{
				MapMoveTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.MarkResource:
			{
				MarkResourceConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Model:
			{
				ModelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ModelBindPosType:
			{
				ModelBindPosTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ModelMotion:
			{
				ModelMotionConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Monster:
			{
				MonsterConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.MonsterLevel:
			{
				MonsterLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Motion:
			{
				MotionConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.NPC:
			{
				NPCConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Operation:
			{
				OperationConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Pet:
			{
				PetConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Platform:
			{
				PlatformConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ProgressBar:
			{
				ProgressBarConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Puppet:
			{
				PuppetConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.PuppetLevel:
			{
				PuppetLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.PushNotify:
			{
				PushNotifyConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.PushTopicType:
			{
				PushTopicTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Quest:
			{
				QuestConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RandomItem:
			{
				RandomItemConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RandomItemList:
			{
				RandomItemListConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RandomName:
			{
				RandomNameConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RedPoint:
			{
				RedPointConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Region:
			{
				RegionConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Reward:
			{
				RewardConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RoleAttribute:
			{
				RoleAttributeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RoleGroup:
			{
				RoleGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RoleGroupLevel:
			{
				RoleGroupLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RoleGroupTitle:
			{
				RoleGroupTitleConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RoleLevel:
			{
				RoleLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.RoleShowDataPartType:
			{
				RoleShowDataPartTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Scene:
			{
				SceneConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SceneEffect:
			{
				SceneEffectConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SceneForceType:
			{
				SceneForceTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SceneMap:
			{
				SceneMapConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.ScenePlaceElement:
			{
				ScenePlaceElementConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SceneRoleAttribute:
			{
				SceneRoleAttributeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SceneType:
			{
				SceneTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SensitiveWord:
			{
				SensitiveWordConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Skill:
			{
				SkillConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillBar:
			{
				SkillBarConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillGroup:
			{
				SkillGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillLevel:
			{
				SkillLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillProb:
			{
				SkillProbConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillStep:
			{
				SkillStepConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillStepLevel:
			{
				SkillStepLevelConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SkillVar:
			{
				SkillVarConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SpecialMove:
			{
				SpecialMoveConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Status:
			{
				StatusConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.SubsectionRank:
			{
				SubsectionRankConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Task:
			{
				TaskConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.TaskType:
			{
				TaskTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.TeamTarget:
			{
				TeamTargetConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Text:
			{
				TextConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UI:
			{
				UIConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UILogic:
			{
				UILogicConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UnitGroup:
			{
				UnitGroupConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UnitModelSlotType:
			{
				UnitModelSlotTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UnitMoveType:
			{
				UnitMoveTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.UnitSpecialMoveType:
			{
				UnitSpecialMoveTypeConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Vehicle:
			{
				VehicleConfig.afterReadConfigAll();
			}
				break;
			case ConfigType.Vocation:
			{
				VocationConfig.afterReadConfigAll();
			}
				break;
		}
	}
	
	/// <summary>
	/// 从流读取单个
	/// </summary>
	protected virtual void readBytesOne(int type,BytesReadStream stream)
	{
		switch(type)
		{
			case ConfigType.Global:
			{
				readGlobal(stream);
			}
				break;
			case ConfigType.Trigger:
			{
				readTrigger(stream);
			}
				break;
			case ConfigType.Language:
			{
				readLanguage(stream);
			}
				break;
			case ConfigType.BigFloatRank:
			{
				readBigFloatRank(stream);
			}
				break;
			case ConfigType.SkillInfluenceType:
			{
				readSkillInfluenceType(stream);
			}
				break;
			case ConfigType.Achievement:
			{
				readAchievement(stream);
			}
				break;
			case ConfigType.Activity:
			{
				readActivity(stream);
			}
				break;
			case ConfigType.Attack:
			{
				readAttack(stream);
			}
				break;
			case ConfigType.AttackGroup:
			{
				readAttackGroup(stream);
			}
				break;
			case ConfigType.AttackLevel:
			{
				readAttackLevel(stream);
			}
				break;
			case ConfigType.Attribute:
			{
				readAttribute(stream);
			}
				break;
			case ConfigType.Auction:
			{
				readAuction(stream);
			}
				break;
			case ConfigType.AuctionQueryConditionType:
			{
				readAuctionQueryConditionType(stream);
			}
				break;
			case ConfigType.AvatarPart:
			{
				readAvatarPart(stream);
			}
				break;
			case ConfigType.Battle:
			{
				readBattle(stream);
			}
				break;
			case ConfigType.Buff:
			{
				readBuff(stream);
			}
				break;
			case ConfigType.BuffActionType:
			{
				readBuffActionType(stream);
			}
				break;
			case ConfigType.BuffGroup:
			{
				readBuffGroup(stream);
			}
				break;
			case ConfigType.BuffLevel:
			{
				readBuffLevel(stream);
			}
				break;
			case ConfigType.Building:
			{
				readBuilding(stream);
			}
				break;
			case ConfigType.BuildingLevel:
			{
				readBuildingLevel(stream);
			}
				break;
			case ConfigType.Bullet:
			{
				readBullet(stream);
			}
				break;
			case ConfigType.BulletLevel:
			{
				readBulletLevel(stream);
			}
				break;
			case ConfigType.CallWay:
			{
				readCallWay(stream);
			}
				break;
			case ConfigType.CD:
			{
				readCD(stream);
			}
				break;
			case ConfigType.CDGroup:
			{
				readCDGroup(stream);
			}
				break;
			case ConfigType.Character:
			{
				readCharacter(stream);
			}
				break;
			case ConfigType.ChatChannel:
			{
				readChatChannel(stream);
			}
				break;
			case ConfigType.ClientPlatformType:
			{
				readClientPlatformType(stream);
			}
				break;
			case ConfigType.Cost:
			{
				readCost(stream);
			}
				break;
			case ConfigType.CountryCode:
			{
				readCountryCode(stream);
			}
				break;
			case ConfigType.CreateItem:
			{
				readCreateItem(stream);
			}
				break;
			case ConfigType.Currency:
			{
				readCurrency(stream);
			}
				break;
			case ConfigType.Effect:
			{
				readEffect(stream);
			}
				break;
			case ConfigType.EquipSlotType:
			{
				readEquipSlotType(stream);
			}
				break;
			case ConfigType.Exchange:
			{
				readExchange(stream);
			}
				break;
			case ConfigType.ExchangeGroup:
			{
				readExchangeGroup(stream);
			}
				break;
			case ConfigType.Facade:
			{
				readFacade(stream);
			}
				break;
			case ConfigType.FightUnit:
			{
				readFightUnit(stream);
			}
				break;
			case ConfigType.FightUnitLevel:
			{
				readFightUnitLevel(stream);
			}
				break;
			case ConfigType.FlowStep:
			{
				readFlowStep(stream);
			}
				break;
			case ConfigType.Font:
			{
				readFont(stream);
			}
				break;
			case ConfigType.Function:
			{
				readFunction(stream);
			}
				break;
			case ConfigType.GMType:
			{
				readGMType(stream);
			}
				break;
			case ConfigType.InfoCode:
			{
				readInfoCode(stream);
			}
				break;
			case ConfigType.InfoLog:
			{
				readInfoLog(stream);
			}
				break;
			case ConfigType.InitCreate:
			{
				readInitCreate(stream);
			}
				break;
			case ConfigType.InternationalResource:
			{
				readInternationalResource(stream);
			}
				break;
			case ConfigType.Item:
			{
				readItem(stream);
			}
				break;
			case ConfigType.LanguageType:
			{
				readLanguageType(stream);
			}
				break;
			case ConfigType.Mail:
			{
				readMail(stream);
			}
				break;
			case ConfigType.MailType:
			{
				readMailType(stream);
			}
				break;
			case ConfigType.MapBlockType:
			{
				readMapBlockType(stream);
			}
				break;
			case ConfigType.MapMoveType:
			{
				readMapMoveType(stream);
			}
				break;
			case ConfigType.MarkResource:
			{
				readMarkResource(stream);
			}
				break;
			case ConfigType.Model:
			{
				readModel(stream);
			}
				break;
			case ConfigType.ModelBindPosType:
			{
				readModelBindPosType(stream);
			}
				break;
			case ConfigType.ModelMotion:
			{
				readModelMotion(stream);
			}
				break;
			case ConfigType.Monster:
			{
				readMonster(stream);
			}
				break;
			case ConfigType.MonsterLevel:
			{
				readMonsterLevel(stream);
			}
				break;
			case ConfigType.Motion:
			{
				readMotion(stream);
			}
				break;
			case ConfigType.NPC:
			{
				readNPC(stream);
			}
				break;
			case ConfigType.Operation:
			{
				readOperation(stream);
			}
				break;
			case ConfigType.Pet:
			{
				readPet(stream);
			}
				break;
			case ConfigType.Platform:
			{
				readPlatform(stream);
			}
				break;
			case ConfigType.ProgressBar:
			{
				readProgressBar(stream);
			}
				break;
			case ConfigType.Puppet:
			{
				readPuppet(stream);
			}
				break;
			case ConfigType.PuppetLevel:
			{
				readPuppetLevel(stream);
			}
				break;
			case ConfigType.PushNotify:
			{
				readPushNotify(stream);
			}
				break;
			case ConfigType.PushTopicType:
			{
				readPushTopicType(stream);
			}
				break;
			case ConfigType.Quest:
			{
				readQuest(stream);
			}
				break;
			case ConfigType.RandomItem:
			{
				readRandomItem(stream);
			}
				break;
			case ConfigType.RandomItemList:
			{
				readRandomItemList(stream);
			}
				break;
			case ConfigType.RandomName:
			{
				readRandomName(stream);
			}
				break;
			case ConfigType.RedPoint:
			{
				readRedPoint(stream);
			}
				break;
			case ConfigType.Region:
			{
				readRegion(stream);
			}
				break;
			case ConfigType.Reward:
			{
				readReward(stream);
			}
				break;
			case ConfigType.RoleAttribute:
			{
				readRoleAttribute(stream);
			}
				break;
			case ConfigType.RoleGroup:
			{
				readRoleGroup(stream);
			}
				break;
			case ConfigType.RoleGroupLevel:
			{
				readRoleGroupLevel(stream);
			}
				break;
			case ConfigType.RoleGroupTitle:
			{
				readRoleGroupTitle(stream);
			}
				break;
			case ConfigType.RoleLevel:
			{
				readRoleLevel(stream);
			}
				break;
			case ConfigType.RoleShowDataPartType:
			{
				readRoleShowDataPartType(stream);
			}
				break;
			case ConfigType.Scene:
			{
				readScene(stream);
			}
				break;
			case ConfigType.SceneEffect:
			{
				readSceneEffect(stream);
			}
				break;
			case ConfigType.SceneForceType:
			{
				readSceneForceType(stream);
			}
				break;
			case ConfigType.SceneMap:
			{
				readSceneMap(stream);
			}
				break;
			case ConfigType.ScenePlaceElement:
			{
				readScenePlaceElement(stream);
			}
				break;
			case ConfigType.SceneRoleAttribute:
			{
				readSceneRoleAttribute(stream);
			}
				break;
			case ConfigType.SceneType:
			{
				readSceneType(stream);
			}
				break;
			case ConfigType.SensitiveWord:
			{
				readSensitiveWord(stream);
			}
				break;
			case ConfigType.Skill:
			{
				readSkill(stream);
			}
				break;
			case ConfigType.SkillBar:
			{
				readSkillBar(stream);
			}
				break;
			case ConfigType.SkillGroup:
			{
				readSkillGroup(stream);
			}
				break;
			case ConfigType.SkillLevel:
			{
				readSkillLevel(stream);
			}
				break;
			case ConfigType.SkillProb:
			{
				readSkillProb(stream);
			}
				break;
			case ConfigType.SkillStep:
			{
				readSkillStep(stream);
			}
				break;
			case ConfigType.SkillStepLevel:
			{
				readSkillStepLevel(stream);
			}
				break;
			case ConfigType.SkillVar:
			{
				readSkillVar(stream);
			}
				break;
			case ConfigType.SpecialMove:
			{
				readSpecialMove(stream);
			}
				break;
			case ConfigType.Status:
			{
				readStatus(stream);
			}
				break;
			case ConfigType.SubsectionRank:
			{
				readSubsectionRank(stream);
			}
				break;
			case ConfigType.Task:
			{
				readTask(stream);
			}
				break;
			case ConfigType.TaskType:
			{
				readTaskType(stream);
			}
				break;
			case ConfigType.TeamTarget:
			{
				readTeamTarget(stream);
			}
				break;
			case ConfigType.Text:
			{
				readText(stream);
			}
				break;
			case ConfigType.UI:
			{
				readUI(stream);
			}
				break;
			case ConfigType.UILogic:
			{
				readUILogic(stream);
			}
				break;
			case ConfigType.UnitGroup:
			{
				readUnitGroup(stream);
			}
				break;
			case ConfigType.UnitModelSlotType:
			{
				readUnitModelSlotType(stream);
			}
				break;
			case ConfigType.UnitMoveType:
			{
				readUnitMoveType(stream);
			}
				break;
			case ConfigType.UnitSpecialMoveType:
			{
				readUnitSpecialMoveType(stream);
			}
				break;
			case ConfigType.Vehicle:
			{
				readVehicle(stream);
			}
				break;
			case ConfigType.Vocation:
			{
				readVocation(stream);
			}
				break;
		}
	}
	
	/// <summary>
	/// 刷新数据
	/// </summary>
	public virtual void refreshDataOne(int type)
	{
		switch(type)
		{
			case ConfigType.Language:
			{
				refreshLanguage();
			}
				break;
			case ConfigType.BigFloatRank:
			{
				refreshBigFloatRank();
			}
				break;
			case ConfigType.SkillInfluenceType:
			{
				refreshSkillInfluenceType();
			}
				break;
			case ConfigType.Achievement:
			{
				refreshAchievement();
			}
				break;
			case ConfigType.Activity:
			{
				refreshActivity();
			}
				break;
			case ConfigType.Attack:
			{
				refreshAttack();
			}
				break;
			case ConfigType.AttackGroup:
			{
				refreshAttackGroup();
			}
				break;
			case ConfigType.AttackLevel:
			{
				refreshAttackLevel();
			}
				break;
			case ConfigType.Attribute:
			{
				refreshAttribute();
			}
				break;
			case ConfigType.Auction:
			{
				refreshAuction();
			}
				break;
			case ConfigType.AuctionQueryConditionType:
			{
				refreshAuctionQueryConditionType();
			}
				break;
			case ConfigType.AvatarPart:
			{
				refreshAvatarPart();
			}
				break;
			case ConfigType.Battle:
			{
				refreshBattle();
			}
				break;
			case ConfigType.Buff:
			{
				refreshBuff();
			}
				break;
			case ConfigType.BuffActionType:
			{
				refreshBuffActionType();
			}
				break;
			case ConfigType.BuffGroup:
			{
				refreshBuffGroup();
			}
				break;
			case ConfigType.BuffLevel:
			{
				refreshBuffLevel();
			}
				break;
			case ConfigType.Building:
			{
				refreshBuilding();
			}
				break;
			case ConfigType.BuildingLevel:
			{
				refreshBuildingLevel();
			}
				break;
			case ConfigType.Bullet:
			{
				refreshBullet();
			}
				break;
			case ConfigType.BulletLevel:
			{
				refreshBulletLevel();
			}
				break;
			case ConfigType.CallWay:
			{
				refreshCallWay();
			}
				break;
			case ConfigType.CD:
			{
				refreshCD();
			}
				break;
			case ConfigType.CDGroup:
			{
				refreshCDGroup();
			}
				break;
			case ConfigType.Character:
			{
				refreshCharacter();
			}
				break;
			case ConfigType.ChatChannel:
			{
				refreshChatChannel();
			}
				break;
			case ConfigType.ClientPlatformType:
			{
				refreshClientPlatformType();
			}
				break;
			case ConfigType.Cost:
			{
				refreshCost();
			}
				break;
			case ConfigType.CountryCode:
			{
				refreshCountryCode();
			}
				break;
			case ConfigType.CreateItem:
			{
				refreshCreateItem();
			}
				break;
			case ConfigType.Currency:
			{
				refreshCurrency();
			}
				break;
			case ConfigType.Effect:
			{
				refreshEffect();
			}
				break;
			case ConfigType.EquipSlotType:
			{
				refreshEquipSlotType();
			}
				break;
			case ConfigType.Exchange:
			{
				refreshExchange();
			}
				break;
			case ConfigType.ExchangeGroup:
			{
				refreshExchangeGroup();
			}
				break;
			case ConfigType.Facade:
			{
				refreshFacade();
			}
				break;
			case ConfigType.FightUnit:
			{
				refreshFightUnit();
			}
				break;
			case ConfigType.FightUnitLevel:
			{
				refreshFightUnitLevel();
			}
				break;
			case ConfigType.FlowStep:
			{
				refreshFlowStep();
			}
				break;
			case ConfigType.Font:
			{
				refreshFont();
			}
				break;
			case ConfigType.Function:
			{
				refreshFunction();
			}
				break;
			case ConfigType.GMType:
			{
				refreshGMType();
			}
				break;
			case ConfigType.InfoCode:
			{
				refreshInfoCode();
			}
				break;
			case ConfigType.InfoLog:
			{
				refreshInfoLog();
			}
				break;
			case ConfigType.InitCreate:
			{
				refreshInitCreate();
			}
				break;
			case ConfigType.InternationalResource:
			{
				refreshInternationalResource();
			}
				break;
			case ConfigType.Item:
			{
				refreshItem();
			}
				break;
			case ConfigType.LanguageType:
			{
				refreshLanguageType();
			}
				break;
			case ConfigType.Mail:
			{
				refreshMail();
			}
				break;
			case ConfigType.MailType:
			{
				refreshMailType();
			}
				break;
			case ConfigType.MapBlockType:
			{
				refreshMapBlockType();
			}
				break;
			case ConfigType.MapMoveType:
			{
				refreshMapMoveType();
			}
				break;
			case ConfigType.MarkResource:
			{
				refreshMarkResource();
			}
				break;
			case ConfigType.Model:
			{
				refreshModel();
			}
				break;
			case ConfigType.ModelBindPosType:
			{
				refreshModelBindPosType();
			}
				break;
			case ConfigType.ModelMotion:
			{
				refreshModelMotion();
			}
				break;
			case ConfigType.Monster:
			{
				refreshMonster();
			}
				break;
			case ConfigType.MonsterLevel:
			{
				refreshMonsterLevel();
			}
				break;
			case ConfigType.Motion:
			{
				refreshMotion();
			}
				break;
			case ConfigType.NPC:
			{
				refreshNPC();
			}
				break;
			case ConfigType.Operation:
			{
				refreshOperation();
			}
				break;
			case ConfigType.Pet:
			{
				refreshPet();
			}
				break;
			case ConfigType.Platform:
			{
				refreshPlatform();
			}
				break;
			case ConfigType.ProgressBar:
			{
				refreshProgressBar();
			}
				break;
			case ConfigType.Puppet:
			{
				refreshPuppet();
			}
				break;
			case ConfigType.PuppetLevel:
			{
				refreshPuppetLevel();
			}
				break;
			case ConfigType.PushNotify:
			{
				refreshPushNotify();
			}
				break;
			case ConfigType.PushTopicType:
			{
				refreshPushTopicType();
			}
				break;
			case ConfigType.Quest:
			{
				refreshQuest();
			}
				break;
			case ConfigType.RandomItem:
			{
				refreshRandomItem();
			}
				break;
			case ConfigType.RandomItemList:
			{
				refreshRandomItemList();
			}
				break;
			case ConfigType.RandomName:
			{
				refreshRandomName();
			}
				break;
			case ConfigType.RedPoint:
			{
				refreshRedPoint();
			}
				break;
			case ConfigType.Region:
			{
				refreshRegion();
			}
				break;
			case ConfigType.Reward:
			{
				refreshReward();
			}
				break;
			case ConfigType.RoleAttribute:
			{
				refreshRoleAttribute();
			}
				break;
			case ConfigType.RoleGroup:
			{
				refreshRoleGroup();
			}
				break;
			case ConfigType.RoleGroupLevel:
			{
				refreshRoleGroupLevel();
			}
				break;
			case ConfigType.RoleGroupTitle:
			{
				refreshRoleGroupTitle();
			}
				break;
			case ConfigType.RoleLevel:
			{
				refreshRoleLevel();
			}
				break;
			case ConfigType.RoleShowDataPartType:
			{
				refreshRoleShowDataPartType();
			}
				break;
			case ConfigType.Scene:
			{
				refreshScene();
			}
				break;
			case ConfigType.SceneEffect:
			{
				refreshSceneEffect();
			}
				break;
			case ConfigType.SceneForceType:
			{
				refreshSceneForceType();
			}
				break;
			case ConfigType.SceneMap:
			{
				refreshSceneMap();
			}
				break;
			case ConfigType.ScenePlaceElement:
			{
				refreshScenePlaceElement();
			}
				break;
			case ConfigType.SceneRoleAttribute:
			{
				refreshSceneRoleAttribute();
			}
				break;
			case ConfigType.SceneType:
			{
				refreshSceneType();
			}
				break;
			case ConfigType.SensitiveWord:
			{
				refreshSensitiveWord();
			}
				break;
			case ConfigType.Skill:
			{
				refreshSkill();
			}
				break;
			case ConfigType.SkillBar:
			{
				refreshSkillBar();
			}
				break;
			case ConfigType.SkillGroup:
			{
				refreshSkillGroup();
			}
				break;
			case ConfigType.SkillLevel:
			{
				refreshSkillLevel();
			}
				break;
			case ConfigType.SkillProb:
			{
				refreshSkillProb();
			}
				break;
			case ConfigType.SkillStep:
			{
				refreshSkillStep();
			}
				break;
			case ConfigType.SkillStepLevel:
			{
				refreshSkillStepLevel();
			}
				break;
			case ConfigType.SkillVar:
			{
				refreshSkillVar();
			}
				break;
			case ConfigType.SpecialMove:
			{
				refreshSpecialMove();
			}
				break;
			case ConfigType.Status:
			{
				refreshStatus();
			}
				break;
			case ConfigType.SubsectionRank:
			{
				refreshSubsectionRank();
			}
				break;
			case ConfigType.Task:
			{
				refreshTask();
			}
				break;
			case ConfigType.TaskType:
			{
				refreshTaskType();
			}
				break;
			case ConfigType.TeamTarget:
			{
				refreshTeamTarget();
			}
				break;
			case ConfigType.Text:
			{
				refreshText();
			}
				break;
			case ConfigType.UI:
			{
				refreshUI();
			}
				break;
			case ConfigType.UILogic:
			{
				refreshUILogic();
			}
				break;
			case ConfigType.UnitGroup:
			{
				refreshUnitGroup();
			}
				break;
			case ConfigType.UnitModelSlotType:
			{
				refreshUnitModelSlotType();
			}
				break;
			case ConfigType.UnitMoveType:
			{
				refreshUnitMoveType();
			}
				break;
			case ConfigType.UnitSpecialMoveType:
			{
				refreshUnitSpecialMoveType();
			}
				break;
			case ConfigType.Vehicle:
			{
				refreshVehicle();
			}
				break;
			case ConfigType.Vocation:
			{
				refreshVocation();
			}
				break;
		}
	}
	
	public virtual BaseConfig readBytesOneSplit(int type,BytesReadStream stream)
	{
		switch(type)
		{
			case ConfigType.ScenePlaceEditor:
			{
				return readScenePlaceEditorSplit(stream);
			}
				break;
			case ConfigType.MapInfo:
			{
				return readMapInfoSplit(stream);
			}
				break;
		}

		return null;
	}
	
	/// <summary>
	/// 读取CD表
	/// </summary>
	protected virtual void readCD(BytesReadStream stream)
	{
		CDConfig config;
		int len=stream.readLen();
		cdDic=new IntObjectMap<CDConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CDConfig();
			config.readBytesSimple(stream);
			cdDic.put(config.id,config);
		}
	}
	
	/** 刷新CD表 */
	private void refreshCD()
	{
		if(!cdDic.isEmpty())
		{
			CDConfig[] configValues=cdDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CDConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取活动表
	/// </summary>
	protected virtual void readActivity(BytesReadStream stream)
	{
		ActivityConfig config;
		int len=stream.readLen();
		activityDic=new IntObjectMap<ActivityConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ActivityConfig();
			config.readBytesSimple(stream);
			activityDic.put(config.id,config);
		}
	}
	
	/** 刷新活动表 */
	private void refreshActivity()
	{
		if(!activityDic.isEmpty())
		{
			ActivityConfig[] configValues=activityDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ActivityConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取调用方式表
	/// </summary>
	protected virtual void readCallWay(BytesReadStream stream)
	{
		CallWayConfig config;
		int len=stream.readLen();
		callWayDic=new IntObjectMap<CallWayConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CallWayConfig();
			config.readBytesSimple(stream);
			callWayDic.put(config.id,config);
		}
	}
	
	/** 刷新调用方式表 */
	private void refreshCallWay()
	{
		if(!callWayDic.isEmpty())
		{
			CallWayConfig[] configValues=callWayDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CallWayConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取buff表
	/// </summary>
	protected virtual void readBuff(BytesReadStream stream)
	{
		BuffConfig config;
		int len=stream.readLen();
		buffDic=new IntObjectMap<BuffConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BuffConfig();
			config.readBytesSimple(stream);
			buffDic.put(config.id,config);
		}
	}
	
	/** 刷新buff表 */
	private void refreshBuff()
	{
		if(!buffDic.isEmpty())
		{
			BuffConfig[] configValues=buffDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BuffConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取单位效果表
	/// </summary>
	protected virtual void readEffect(BytesReadStream stream)
	{
		EffectConfig config;
		int len=stream.readLen();
		effectDic=new IntObjectMap<EffectConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new EffectConfig();
			config.readBytesSimple(stream);
			effectDic.put(config.id,config);
		}
	}
	
	/** 刷新单位效果表 */
	private void refreshEffect()
	{
		if(!effectDic.isEmpty())
		{
			EffectConfig[] configValues=effectDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				EffectConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取场景特效表
	/// </summary>
	protected virtual void readSceneEffect(BytesReadStream stream)
	{
		SceneEffectConfig config;
		int len=stream.readLen();
		sceneEffectDic=new IntObjectMap<SceneEffectConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SceneEffectConfig();
			config.readBytesSimple(stream);
			sceneEffectDic.put(config.id,config);
		}
	}
	
	/** 刷新场景特效表 */
	private void refreshSceneEffect()
	{
		if(!sceneEffectDic.isEmpty())
		{
			SceneEffectConfig[] configValues=sceneEffectDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SceneEffectConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能几率表
	/// </summary>
	protected virtual void readSkillProb(BytesReadStream stream)
	{
		SkillProbConfig config;
		int len=stream.readLen();
		skillProbDic=new IntObjectMap<SkillProbConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillProbConfig();
			config.readBytesSimple(stream);
			skillProbDic.put(config.id,config);
		}
	}
	
	/** 刷新技能几率表 */
	private void refreshSkillProb()
	{
		if(!skillProbDic.isEmpty())
		{
			SkillProbConfig[] configValues=skillProbDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillProbConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取特殊移动表
	/// </summary>
	protected virtual void readSpecialMove(BytesReadStream stream)
	{
		SpecialMoveConfig config;
		int len=stream.readLen();
		specialMoveDic=new IntObjectMap<SpecialMoveConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SpecialMoveConfig();
			config.readBytesSimple(stream);
			specialMoveDic.put(config.id,config);
		}
	}
	
	/** 刷新特殊移动表 */
	private void refreshSpecialMove()
	{
		if(!specialMoveDic.isEmpty())
		{
			SpecialMoveConfig[] configValues=specialMoveDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SpecialMoveConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取随机单个物品配置
	/// </summary>
	protected virtual void readRandomItem(BytesReadStream stream)
	{
		RandomItemConfig config;
		int len=stream.readLen();
		randomItemDic=new IntObjectMap<RandomItemConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RandomItemConfig();
			config.readBytesSimple(stream);
			randomItemDic.put(config.id,config);
		}
	}
	
	/** 刷新随机单个物品配置 */
	private void refreshRandomItem()
	{
		if(!randomItemDic.isEmpty())
		{
			RandomItemConfig[] configValues=randomItemDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RandomItemConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取文本表(程序用)(需国际化)
	/// </summary>
	protected virtual void readText(BytesReadStream stream)
	{
		TextConfig config;
		int len=stream.readLen();
		textDic=new SMap<string,TextConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new TextConfig();
			config.readBytesSimple(stream);
			textDic.put(config.key,config);
		}
	}
	
	/** 刷新文本表(程序用)(需国际化) */
	private void refreshText()
	{
		if(!textDic.isEmpty())
		{
			TextConfig[] configValues=textDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				TextConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取流程步骤类型
	/// </summary>
	protected virtual void readFlowStep(BytesReadStream stream)
	{
		FlowStepConfig config;
		int len=stream.readLen();
		flowStepDic=new IntObjectMap<FlowStepConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new FlowStepConfig();
			config.readBytesSimple(stream);
			flowStepDic.put(config.id,config);
		}
	}
	
	/** 刷新流程步骤类型 */
	private void refreshFlowStep()
	{
		if(!flowStepDic.isEmpty())
		{
			FlowStepConfig[] configValues=flowStepDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				FlowStepConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取角色表
	/// </summary>
	protected virtual void readCharacter(BytesReadStream stream)
	{
		CharacterConfig config;
		int len=stream.readLen();
		characterDic=new IntObjectMap<CharacterConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CharacterConfig();
			config.readBytesSimple(stream);
			characterDic.put(config.id,config);
		}
	}
	
	/** 刷新角色表 */
	private void refreshCharacter()
	{
		if(!characterDic.isEmpty())
		{
			CharacterConfig[] configValues=characterDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CharacterConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取怪物表
	/// </summary>
	protected virtual void readMonster(BytesReadStream stream)
	{
		MonsterConfig config;
		int len=stream.readLen();
		monsterDic=new IntObjectMap<MonsterConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new MonsterConfig();
			config.readBytesSimple(stream);
			monsterDic.put(config.id,config);
		}
	}
	
	/** 刷新怪物表 */
	private void refreshMonster()
	{
		if(!monsterDic.isEmpty())
		{
			MonsterConfig[] configValues=monsterDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				MonsterConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取状态类型表
	/// </summary>
	protected virtual void readStatus(BytesReadStream stream)
	{
		StatusConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		statusDic=new StatusConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new StatusConfig();
			config.readBytesSimple(stream);
			statusDic[config.id]=config;
		}
	}
	
	/** 刷新状态类型表 */
	private void refreshStatus()
	{
		for(int configI=0,configLen=statusDic.Length;configI<configLen;++configI)
		{
			StatusConfig config=statusDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取进度条表
	/// </summary>
	protected virtual void readProgressBar(BytesReadStream stream)
	{
		ProgressBarConfig config;
		int len=stream.readLen();
		progressBarDic=new IntObjectMap<ProgressBarConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ProgressBarConfig();
			config.readBytesSimple(stream);
			progressBarDic.put(config.id,config);
		}
	}
	
	/** 刷新进度条表 */
	private void refreshProgressBar()
	{
		if(!progressBarDic.isEmpty())
		{
			ProgressBarConfig[] configValues=progressBarDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ProgressBarConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取成就表
	/// </summary>
	protected virtual void readAchievement(BytesReadStream stream)
	{
		AchievementConfig config;
		int len=stream.readLen();
		achievementDic=new IntObjectMap<AchievementConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new AchievementConfig();
			config.readBytesSimple(stream);
			achievementDic.put(config.id,config);
		}
	}
	
	/** 刷新成就表 */
	private void refreshAchievement()
	{
		if(!achievementDic.isEmpty())
		{
			AchievementConfig[] configValues=achievementDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				AchievementConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取随机物品组配置
	/// </summary>
	protected virtual void readRandomItemList(BytesReadStream stream)
	{
		RandomItemListConfig config;
		int len=stream.readLen();
		randomItemListDic=new IntObjectMap<RandomItemListConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RandomItemListConfig();
			config.readBytesSimple(stream);
			randomItemListDic.put(config.id,config);
		}
	}
	
	/** 刷新随机物品组配置 */
	private void refreshRandomItemList()
	{
		if(!randomItemListDic.isEmpty())
		{
			RandomItemListConfig[] configValues=randomItemListDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RandomItemListConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能等级表
	/// </summary>
	protected virtual void readSkillLevel(BytesReadStream stream)
	{
		SkillLevelConfig config;
		int len=stream.readLen();
		skillLevelDic=new LongObjectMap<SkillLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillLevelConfig();
			config.readBytesSimple(stream);
			skillLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新技能等级表 */
	private void refreshSkillLevel()
	{
		if(!skillLevelDic.isEmpty())
		{
			SkillLevelConfig[] configValues=skillLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能攻击等级表
	/// </summary>
	protected virtual void readAttackLevel(BytesReadStream stream)
	{
		AttackLevelConfig config;
		int len=stream.readLen();
		attackLevelDic=new LongObjectMap<AttackLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new AttackLevelConfig();
			config.readBytesSimple(stream);
			attackLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新技能攻击等级表 */
	private void refreshAttackLevel()
	{
		if(!attackLevelDic.isEmpty())
		{
			AttackLevelConfig[] configValues=attackLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				AttackLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能攻击表
	/// </summary>
	protected virtual void readAttack(BytesReadStream stream)
	{
		AttackConfig config;
		int len=stream.readLen();
		attackDic=new IntObjectMap<AttackConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new AttackConfig();
			config.readBytesSimple(stream);
			attackDic.put(config.id,config);
		}
	}
	
	/** 刷新技能攻击表 */
	private void refreshAttack()
	{
		if(!attackDic.isEmpty())
		{
			AttackConfig[] configValues=attackDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				AttackConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取邮件表
	/// </summary>
	protected virtual void readMail(BytesReadStream stream)
	{
		MailConfig config;
		int len=stream.readLen();
		mailDic=new IntObjectMap<MailConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new MailConfig();
			config.readBytesSimple(stream);
			mailDic.put(config.id,config);
		}
	}
	
	/** 刷新邮件表 */
	private void refreshMail()
	{
		if(!mailDic.isEmpty())
		{
			MailConfig[] configValues=mailDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				MailConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取副本基础表
	/// </summary>
	protected virtual void readBattle(BytesReadStream stream)
	{
		BattleConfig config;
		int len=stream.readLen();
		battleDic=new IntObjectMap<BattleConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BattleConfig();
			config.readBytesSimple(stream);
			battleDic.put(config.id,config);
		}
	}
	
	/** 刷新副本基础表 */
	private void refreshBattle()
	{
		if(!battleDic.isEmpty())
		{
			BattleConfig[] configValues=battleDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BattleConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取场景类型
	/// </summary>
	protected virtual void readSceneType(BytesReadStream stream)
	{
		SceneTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		sceneTypeDic=new SceneTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new SceneTypeConfig();
			config.readBytesSimple(stream);
			sceneTypeDic[config.id]=config;
		}
	}
	
	/** 刷新场景类型 */
	private void refreshSceneType()
	{
		for(int configI=0,configLen=sceneTypeDic.Length;configI<configLen;++configI)
		{
			SceneTypeConfig config=sceneTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取任务目标类型
	/// </summary>
	protected virtual void readTaskType(BytesReadStream stream)
	{
		TaskTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		taskTypeDic=new TaskTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new TaskTypeConfig();
			config.readBytesSimple(stream);
			taskTypeDic[config.id]=config;
		}
	}
	
	/** 刷新任务目标类型 */
	private void refreshTaskType()
	{
		for(int configI=0,configLen=taskTypeDic.Length;configI<configLen;++configI)
		{
			TaskTypeConfig config=taskTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取单位移动方式
	/// </summary>
	protected virtual void readUnitMoveType(BytesReadStream stream)
	{
		UnitMoveTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		unitMoveTypeDic=new UnitMoveTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new UnitMoveTypeConfig();
			config.readBytesSimple(stream);
			unitMoveTypeDic[config.id]=config;
		}
	}
	
	/** 刷新单位移动方式 */
	private void refreshUnitMoveType()
	{
		for(int configI=0,configLen=unitMoveTypeDic.Length;configI<configLen;++configI)
		{
			UnitMoveTypeConfig config=unitMoveTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取角色显示数据部件类型
	/// </summary>
	protected virtual void readRoleShowDataPartType(BytesReadStream stream)
	{
		RoleShowDataPartTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		roleShowDataPartTypeDic=new RoleShowDataPartTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new RoleShowDataPartTypeConfig();
			config.readBytesSimple(stream);
			roleShowDataPartTypeDic[config.id]=config;
		}
	}
	
	/** 刷新角色显示数据部件类型 */
	private void refreshRoleShowDataPartType()
	{
		for(int configI=0,configLen=roleShowDataPartTypeDic.Length;configI<configLen;++configI)
		{
			RoleShowDataPartTypeConfig config=roleShowDataPartTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取邮件类型
	/// </summary>
	protected virtual void readMailType(BytesReadStream stream)
	{
		MailTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		mailTypeDic=new MailTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new MailTypeConfig();
			config.readBytesSimple(stream);
			mailTypeDic[config.id]=config;
		}
	}
	
	/** 刷新邮件类型 */
	private void refreshMailType()
	{
		for(int configI=0,configLen=mailTypeDic.Length;configI<configLen;++configI)
		{
			MailTypeConfig config=mailTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取模型绑点位置类型
	/// </summary>
	protected virtual void readModelBindPosType(BytesReadStream stream)
	{
		ModelBindPosTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		modelBindPosTypeDic=new ModelBindPosTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new ModelBindPosTypeConfig();
			config.readBytesSimple(stream);
			modelBindPosTypeDic[config.id]=config;
		}
	}
	
	/** 刷新模型绑点位置类型 */
	private void refreshModelBindPosType()
	{
		for(int configI=0,configLen=modelBindPosTypeDic.Length;configI<configLen;++configI)
		{
			ModelBindPosTypeConfig config=modelBindPosTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取单位特殊移动类型
	/// </summary>
	protected virtual void readUnitSpecialMoveType(BytesReadStream stream)
	{
		UnitSpecialMoveTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		unitSpecialMoveTypeDic=new UnitSpecialMoveTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new UnitSpecialMoveTypeConfig();
			config.readBytesSimple(stream);
			unitSpecialMoveTypeDic[config.id]=config;
		}
	}
	
	/** 刷新单位特殊移动类型 */
	private void refreshUnitSpecialMoveType()
	{
		for(int configI=0,configLen=unitSpecialMoveTypeDic.Length;configI<configLen;++configI)
		{
			UnitSpecialMoveTypeConfig config=unitSpecialMoveTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取语言类型
	/// </summary>
	protected virtual void readLanguageType(BytesReadStream stream)
	{
		LanguageTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		languageTypeDic=new LanguageTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new LanguageTypeConfig();
			config.readBytesSimple(stream);
			languageTypeDic[config.id]=config;
		}
	}
	
	/** 刷新语言类型 */
	private void refreshLanguageType()
	{
		for(int configI=0,configLen=languageTypeDic.Length;configI<configLen;++configI)
		{
			LanguageTypeConfig config=languageTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取玩家等级表
	/// </summary>
	protected virtual void readRoleLevel(BytesReadStream stream)
	{
		RoleLevelConfig config;
		int len=stream.readLen();
		roleLevelDic=new IntObjectMap<RoleLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RoleLevelConfig();
			config.readBytesSimple(stream);
			roleLevelDic.put(config.level,config);
		}
	}
	
	/** 刷新玩家等级表 */
	private void refreshRoleLevel()
	{
		if(!roleLevelDic.isEmpty())
		{
			RoleLevelConfig[] configValues=roleLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RoleLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取随机名字表
	/// </summary>
	protected virtual void readRandomName(BytesReadStream stream)
	{
		RandomNameConfig config;
		int len=stream.readLen();
		randomNameDic=new IntObjectMap<RandomNameConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RandomNameConfig();
			config.readBytesSimple(stream);
			randomNameDic.put(config.id,config);
		}
	}
	
	/** 刷新随机名字表 */
	private void refreshRandomName()
	{
		if(!randomNameDic.isEmpty())
		{
			RandomNameConfig[] configValues=randomNameDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RandomNameConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能变量表
	/// </summary>
	protected virtual void readSkillVar(BytesReadStream stream)
	{
		SkillVarConfig config;
		int len=stream.readLen();
		skillVarDic=new IntObjectMap<SkillVarConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillVarConfig();
			config.readBytesSimple(stream);
			skillVarDic.put(config.id,config);
		}
	}
	
	/** 刷新技能变量表 */
	private void refreshSkillVar()
	{
		if(!skillVarDic.isEmpty())
		{
			SkillVarConfig[] configValues=skillVarDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillVarConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能表
	/// </summary>
	protected virtual void readSkill(BytesReadStream stream)
	{
		SkillConfig config;
		int len=stream.readLen();
		skillDic=new IntObjectMap<SkillConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillConfig();
			config.readBytesSimple(stream);
			skillDic.put(config.id,config);
		}
	}
	
	/** 刷新技能表 */
	private void refreshSkill()
	{
		if(!skillDic.isEmpty())
		{
			SkillConfig[] configValues=skillDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取属性类型表
	/// </summary>
	protected virtual void readAttribute(BytesReadStream stream)
	{
		AttributeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		attributeDic=new AttributeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new AttributeConfig();
			config.readBytesSimple(stream);
			attributeDic[config.id]=config;
		}
	}
	
	/** 刷新属性类型表 */
	private void refreshAttribute()
	{
		for(int configI=0,configLen=attributeDic.Length;configI<configLen;++configI)
		{
			AttributeConfig config=attributeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取buff等级表
	/// </summary>
	protected virtual void readBuffLevel(BytesReadStream stream)
	{
		BuffLevelConfig config;
		int len=stream.readLen();
		buffLevelDic=new LongObjectMap<BuffLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BuffLevelConfig();
			config.readBytesSimple(stream);
			buffLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新buff等级表 */
	private void refreshBuffLevel()
	{
		if(!buffLevelDic.isEmpty())
		{
			BuffLevelConfig[] configValues=buffLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BuffLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取平台表
	/// </summary>
	protected virtual void readPlatform(BytesReadStream stream)
	{
		PlatformConfig config;
		int len=stream.readLen();
		platformDic=new SMap<string,PlatformConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new PlatformConfig();
			config.readBytesSimple(stream);
			platformDic.put(config.id,config);
		}
	}
	
	/** 刷新平台表 */
	private void refreshPlatform()
	{
		if(!platformDic.isEmpty())
		{
			PlatformConfig[] configValues=platformDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				PlatformConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取任务目标表
	/// </summary>
	protected virtual void readTask(BytesReadStream stream)
	{
		TaskConfig config;
		int len=stream.readLen();
		taskDic=new IntObjectMap<TaskConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new TaskConfig();
			config.readBytesSimple(stream);
			taskDic.put(config.id,config);
		}
	}
	
	/** 刷新任务目标表 */
	private void refreshTask()
	{
		if(!taskDic.isEmpty())
		{
			TaskConfig[] configValues=taskDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				TaskConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取界面表
	/// </summary>
	protected virtual void readUI(BytesReadStream stream)
	{
		UIConfig config;
		int len=stream.readLen();
		uiDic=new IntObjectMap<UIConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new UIConfig();
			config.readBytesSimple(stream);
			uiDic.put(config.id,config);
		}
	}
	
	/** 刷新界面表 */
	private void refreshUI()
	{
		if(!uiDic.isEmpty())
		{
			UIConfig[] configValues=uiDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				UIConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取cd组表
	/// </summary>
	protected virtual void readCDGroup(BytesReadStream stream)
	{
		CDGroupConfig config;
		int len=stream.readLen();
		cdGroupDic=new IntObjectMap<CDGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CDGroupConfig();
			config.readBytesSimple(stream);
			cdGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新cd组表 */
	private void refreshCDGroup()
	{
		if(!cdGroupDic.isEmpty())
		{
			CDGroupConfig[] configValues=cdGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CDGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取单位模型表
	/// </summary>
	protected virtual void readModel(BytesReadStream stream)
	{
		ModelConfig config;
		int len=stream.readLen();
		modelDic=new IntObjectMap<ModelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ModelConfig();
			config.readBytesSimple(stream);
			modelDic.put(config.id,config);
		}
	}
	
	/** 刷新单位模型表 */
	private void refreshModel()
	{
		if(!modelDic.isEmpty())
		{
			ModelConfig[] configValues=modelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ModelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取加载资源表
	/// </summary>
	protected virtual void readMarkResource(BytesReadStream stream)
	{
		MarkResourceConfig config;
		int len=stream.readLen();
		markResourceDic=new SMap<string,MarkResourceConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new MarkResourceConfig();
			config.readBytesSimple(stream);
			markResourceDic.put(config.url,config);
		}
	}
	
	/** 刷新加载资源表 */
	private void refreshMarkResource()
	{
		if(!markResourceDic.isEmpty())
		{
			MarkResourceConfig[] configValues=markResourceDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				MarkResourceConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能步骤表
	/// </summary>
	protected virtual void readSkillStep(BytesReadStream stream)
	{
		SkillStepConfig config;
		int len=stream.readLen();
		skillStepDic=new LongObjectMap<SkillStepConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillStepConfig();
			config.readBytesSimple(stream);
			skillStepDic.put((long)config.id << 8 | (long)config.step,config);
		}
	}
	
	/** 刷新技能步骤表 */
	private void refreshSkillStep()
	{
		if(!skillStepDic.isEmpty())
		{
			SkillStepConfig[] configValues=skillStepDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillStepConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能组表
	/// </summary>
	protected virtual void readSkillGroup(BytesReadStream stream)
	{
		SkillGroupConfig config;
		int len=stream.readLen();
		skillGroupDic=new IntObjectMap<SkillGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillGroupConfig();
			config.readBytesSimple(stream);
			skillGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新技能组表 */
	private void refreshSkillGroup()
	{
		if(!skillGroupDic.isEmpty())
		{
			SkillGroupConfig[] configValues=skillGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取攻击组表
	/// </summary>
	protected virtual void readAttackGroup(BytesReadStream stream)
	{
		AttackGroupConfig config;
		int len=stream.readLen();
		attackGroupDic=new IntObjectMap<AttackGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new AttackGroupConfig();
			config.readBytesSimple(stream);
			attackGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新攻击组表 */
	private void refreshAttackGroup()
	{
		if(!attackGroupDic.isEmpty())
		{
			AttackGroupConfig[] configValues=attackGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				AttackGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取单位模型动作表
	/// </summary>
	protected virtual void readModelMotion(BytesReadStream stream)
	{
		ModelMotionConfig config;
		int len=stream.readLen();
		modelMotionDic=new LongObjectMap<ModelMotionConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ModelMotionConfig();
			config.readBytesSimple(stream);
			modelMotionDic.put((long)config.id << 32 | (long)config.motionID,config);
		}
	}
	
	/** 刷新单位模型动作表 */
	private void refreshModelMotion()
	{
		if(!modelMotionDic.isEmpty())
		{
			ModelMotionConfig[] configValues=modelMotionDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ModelMotionConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取buff组表
	/// </summary>
	protected virtual void readBuffGroup(BytesReadStream stream)
	{
		BuffGroupConfig config;
		int len=stream.readLen();
		buffGroupDic=new IntObjectMap<BuffGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BuffGroupConfig();
			config.readBytesSimple(stream);
			buffGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新buff组表 */
	private void refreshBuffGroup()
	{
		if(!buffGroupDic.isEmpty())
		{
			BuffGroupConfig[] configValues=buffGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BuffGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取任务表
	/// </summary>
	protected virtual void readQuest(BytesReadStream stream)
	{
		QuestConfig config;
		int len=stream.readLen();
		questDic=new IntObjectMap<QuestConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new QuestConfig();
			config.readBytesSimple(stream);
			questDic.put(config.id,config);
		}
	}
	
	/** 刷新任务表 */
	private void refreshQuest()
	{
		if(!questDic.isEmpty())
		{
			QuestConfig[] configValues=questDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				QuestConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取bullet表
	/// </summary>
	protected virtual void readBullet(BytesReadStream stream)
	{
		BulletConfig config;
		int len=stream.readLen();
		bulletDic=new IntObjectMap<BulletConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BulletConfig();
			config.readBytesSimple(stream);
			bulletDic.put(config.id,config);
		}
	}
	
	/** 刷新bullet表 */
	private void refreshBullet()
	{
		if(!bulletDic.isEmpty())
		{
			BulletConfig[] configValues=bulletDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BulletConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取NPC表
	/// </summary>
	protected virtual void readNPC(BytesReadStream stream)
	{
		NPCConfig config;
		int len=stream.readLen();
		npcDic=new IntObjectMap<NPCConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new NPCConfig();
			config.readBytesSimple(stream);
			npcDic.put(config.id,config);
		}
	}
	
	/** 刷新NPC表 */
	private void refreshNPC()
	{
		if(!npcDic.isEmpty())
		{
			NPCConfig[] configValues=npcDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				NPCConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取货币表
	/// </summary>
	protected virtual void readCurrency(BytesReadStream stream)
	{
		CurrencyConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		currencyDic=new CurrencyConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new CurrencyConfig();
			config.readBytesSimple(stream);
			currencyDic[config.id]=config;
		}
	}
	
	/** 刷新货币表 */
	private void refreshCurrency()
	{
		for(int configI=0,configLen=currencyDic.Length;configI<configLen;++configI)
		{
			CurrencyConfig config=currencyDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取技能步骤等级表
	/// </summary>
	protected virtual void readSkillStepLevel(BytesReadStream stream)
	{
		SkillStepLevelConfig config;
		int len=stream.readLen();
		skillStepLevelDic=new LongObjectMap<SkillStepLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillStepLevelConfig();
			config.readBytesSimple(stream);
			skillStepLevelDic.put((long)config.id << 24 | (long)config.step << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新技能步骤等级表 */
	private void refreshSkillStepLevel()
	{
		if(!skillStepLevelDic.isEmpty())
		{
			SkillStepLevelConfig[] configValues=skillStepLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillStepLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取傀儡表
	/// </summary>
	protected virtual void readPuppet(BytesReadStream stream)
	{
		PuppetConfig config;
		int len=stream.readLen();
		puppetDic=new IntObjectMap<PuppetConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new PuppetConfig();
			config.readBytesSimple(stream);
			puppetDic.put(config.id,config);
		}
	}
	
	/** 刷新傀儡表 */
	private void refreshPuppet()
	{
		if(!puppetDic.isEmpty())
		{
			PuppetConfig[] configValues=puppetDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				PuppetConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取傀儡等级表
	/// </summary>
	protected virtual void readPuppetLevel(BytesReadStream stream)
	{
		PuppetLevelConfig config;
		int len=stream.readLen();
		puppetLevelDic=new LongObjectMap<PuppetLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new PuppetLevelConfig();
			config.readBytesSimple(stream);
			puppetLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新傀儡等级表 */
	private void refreshPuppetLevel()
	{
		if(!puppetLevelDic.isEmpty())
		{
			PuppetLevelConfig[] configValues=puppetLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				PuppetLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取单位显示部件表
	/// </summary>
	protected virtual void readAvatarPart(BytesReadStream stream)
	{
		AvatarPartConfig config;
		int len=stream.readLen();
		avatarPartDic=new LongObjectMap<AvatarPartConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new AvatarPartConfig();
			config.readBytesSimple(stream);
			avatarPartDic.put((long)config.type << 32 | (long)config.id,config);
		}
	}
	
	/** 刷新单位显示部件表 */
	private void refreshAvatarPart()
	{
		if(!avatarPartDic.isEmpty())
		{
			AvatarPartConfig[] configValues=avatarPartDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				AvatarPartConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取国际化表
	/// </summary>
	protected virtual void readLanguage(BytesReadStream stream)
	{
		LanguageConfig config;
		int len=stream.readLen();
		languageDic=new SMap<string,LanguageConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new LanguageConfig();
			config.readBytesSimple(stream);
			languageDic.put(config.key,config);
		}
	}
	
	/** 刷新国际化表 */
	private void refreshLanguage()
	{
		if(!languageDic.isEmpty())
		{
			LanguageConfig[] configValues=languageDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				LanguageConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取单位外观表
	/// </summary>
	protected virtual void readFacade(BytesReadStream stream)
	{
		FacadeConfig config;
		int len=stream.readLen();
		facadeDic=new IntObjectMap<FacadeConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new FacadeConfig();
			config.readBytesSimple(stream);
			facadeDic.put(config.id,config);
		}
	}
	
	/** 刷新单位外观表 */
	private void refreshFacade()
	{
		if(!facadeDic.isEmpty())
		{
			FacadeConfig[] configValues=facadeDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				FacadeConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取宠物表
	/// </summary>
	protected virtual void readPet(BytesReadStream stream)
	{
		PetConfig config;
		int len=stream.readLen();
		petDic=new IntObjectMap<PetConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new PetConfig();
			config.readBytesSimple(stream);
			petDic.put(config.id,config);
		}
	}
	
	/** 刷新宠物表 */
	private void refreshPet()
	{
		if(!petDic.isEmpty())
		{
			PetConfig[] configValues=petDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				PetConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取模型动作类型
	/// </summary>
	protected virtual void readMotion(BytesReadStream stream)
	{
		MotionConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		motionDic=new MotionConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new MotionConfig();
			config.readBytesSimple(stream);
			motionDic[config.id]=config;
		}
	}
	
	/** 刷新模型动作类型 */
	private void refreshMotion()
	{
		for(int configI=0,configLen=motionDic.Length;configI<configLen;++configI)
		{
			MotionConfig config=motionDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取道具表
	/// </summary>
	protected virtual void readItem(BytesReadStream stream)
	{
		ItemConfig config;
		int len=stream.readLen();
		itemDic=new IntObjectMap<ItemConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ItemConfig();
			config.readBytesSimple(stream);
			itemDic.put(config.id,config);
		}
	}
	
	/** 刷新道具表 */
	private void refreshItem()
	{
		if(!itemDic.isEmpty())
		{
			ItemConfig[] configValues=itemDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ItemConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取子弹等级表
	/// </summary>
	protected virtual void readBulletLevel(BytesReadStream stream)
	{
		BulletLevelConfig config;
		int len=stream.readLen();
		bulletLevelDic=new LongObjectMap<BulletLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BulletLevelConfig();
			config.readBytesSimple(stream);
			bulletLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新子弹等级表 */
	private void refreshBulletLevel()
	{
		if(!bulletLevelDic.isEmpty())
		{
			BulletLevelConfig[] configValues=bulletLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BulletLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取战斗单位表
	/// </summary>
	protected virtual void readFightUnit(BytesReadStream stream)
	{
		FightUnitConfig config;
		int len=stream.readLen();
		fightUnitDic=new IntObjectMap<FightUnitConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new FightUnitConfig();
			config.readBytesSimple(stream);
			fightUnitDic.put(config.id,config);
		}
	}
	
	/** 刷新战斗单位表 */
	private void refreshFightUnit()
	{
		if(!fightUnitDic.isEmpty())
		{
			FightUnitConfig[] configValues=fightUnitDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				FightUnitConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取信息码类型表
	/// </summary>
	protected virtual void readInfoCode(BytesReadStream stream)
	{
		InfoCodeConfig config;
		int len=stream.readLen();
		infoCodeDic=new IntObjectMap<InfoCodeConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new InfoCodeConfig();
			config.readBytesSimple(stream);
			infoCodeDic.put(config.id,config);
		}
	}
	
	/** 刷新信息码类型表 */
	private void refreshInfoCode()
	{
		if(!infoCodeDic.isEmpty())
		{
			InfoCodeConfig[] configValues=infoCodeDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				InfoCodeConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取红点类型
	/// </summary>
	protected virtual void readRedPoint(BytesReadStream stream)
	{
		RedPointConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		redPointDic=new RedPointConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new RedPointConfig();
			config.readBytesSimple(stream);
			redPointDic[config.id]=config;
		}
	}
	
	/** 刷新红点类型 */
	private void refreshRedPoint()
	{
		for(int configI=0,configLen=redPointDic.Length;configI<configLen;++configI)
		{
			RedPointConfig config=redPointDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取战斗单位等级表
	/// </summary>
	protected virtual void readFightUnitLevel(BytesReadStream stream)
	{
		FightUnitLevelConfig config;
		int len=stream.readLen();
		fightUnitLevelDic=new LongObjectMap<FightUnitLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new FightUnitLevelConfig();
			config.readBytesSimple(stream);
			fightUnitLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新战斗单位等级表 */
	private void refreshFightUnitLevel()
	{
		if(!fightUnitLevelDic.isEmpty())
		{
			FightUnitLevelConfig[] configValues=fightUnitLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				FightUnitLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取国际化资源表
	/// </summary>
	protected virtual void readInternationalResource(BytesReadStream stream)
	{
		InternationalResourceConfig config;
		int len=stream.readLen();
		internationalResourceDic=new SMap<string,InternationalResourceConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new InternationalResourceConfig();
			config.readBytesSimple(stream);
			internationalResourceDic.put(config.key,config);
		}
	}
	
	/** 刷新国际化资源表 */
	private void refreshInternationalResource()
	{
		if(!internationalResourceDic.isEmpty())
		{
			InternationalResourceConfig[] configValues=internationalResourceDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				InternationalResourceConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取场景布置元素表(编辑器对应)
	/// </summary>
	protected virtual void readScenePlaceElement(BytesReadStream stream)
	{
		ScenePlaceElementConfig config;
		int len=stream.readLen();
		scenePlaceElementDic=new LongObjectMap<ScenePlaceElementConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ScenePlaceElementConfig();
			config.readBytesSimple(stream);
			scenePlaceElementDic.put((long)config.sceneID << 32 | (long)config.instanceID,config);
		}
	}
	
	/** 刷新场景布置元素表(编辑器对应) */
	private void refreshScenePlaceElement()
	{
		if(!scenePlaceElementDic.isEmpty())
		{
			ScenePlaceElementConfig[] configValues=scenePlaceElementDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ScenePlaceElementConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取创建单个物品配置(不包含数量)
	/// </summary>
	protected virtual void readCreateItem(BytesReadStream stream)
	{
		CreateItemConfig config;
		int len=stream.readLen();
		createItemDic=new IntObjectMap<CreateItemConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CreateItemConfig();
			config.readBytesSimple(stream);
			createItemDic.put(config.id,config);
		}
	}
	
	/** 刷新创建单个物品配置(不包含数量) */
	private void refreshCreateItem()
	{
		if(!createItemDic.isEmpty())
		{
			CreateItemConfig[] configValues=createItemDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CreateItemConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取场景表
	/// </summary>
	protected virtual void readScene(BytesReadStream stream)
	{
		SceneConfig config;
		int len=stream.readLen();
		sceneDic=new IntObjectMap<SceneConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SceneConfig();
			config.readBytesSimple(stream);
			sceneDic.put(config.id,config);
		}
	}
	
	/** 刷新场景表 */
	private void refreshScene()
	{
		if(!sceneDic.isEmpty())
		{
			SceneConfig[] configValues=sceneDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SceneConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取功能表
	/// </summary>
	protected virtual void readFunction(BytesReadStream stream)
	{
		FunctionConfig config;
		int len=stream.readLen();
		functionDic=new IntObjectMap<FunctionConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new FunctionConfig();
			config.readBytesSimple(stream);
			functionDic.put(config.id,config);
		}
	}
	
	/** 刷新功能表 */
	private void refreshFunction()
	{
		if(!functionDic.isEmpty())
		{
			FunctionConfig[] configValues=functionDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				FunctionConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取奖励表
	/// </summary>
	protected virtual void readReward(BytesReadStream stream)
	{
		RewardConfig config;
		int len=stream.readLen();
		rewardDic=new IntObjectMap<RewardConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RewardConfig();
			config.readBytesSimple(stream);
			rewardDic.put(config.id,config);
		}
	}
	
	/** 刷新奖励表 */
	private void refreshReward()
	{
		if(!rewardDic.isEmpty())
		{
			RewardConfig[] configValues=rewardDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RewardConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取全局配置表
	/// </summary>
	protected virtual void readGlobal(BytesReadStream stream)
	{
		global=new GlobalReadData();
		global.readBytesSimple(stream);
	}
	
	/** 读取trigger */
	private void readTrigger(BytesReadStream stream)
	{
		TriggerConfigData config;
		int len=stream.readLen();
		triggerDic=new IntObjectMap<TriggerConfigData>(len);
		for(int i=0;i<len;++i)
		{
			config=new TriggerConfigData();
			config.readBytesSimple(stream);
			triggerDic.put(config.id,config);
		}
	}
	
	/** 从数据设置到控制类上 */
	private void setToConfigTrigger()
	{
		TriggerConfig.setDic(triggerDic);
	}
	
	/** 读完全部trigger */
	private void afterReadConfigAllTrigger()
	{
		TriggerConfig.afterReadConfigAll();
	}
	
	private BaseConfig readScenePlaceEditorSplit(BytesReadStream stream)
	{
		ScenePlaceConfig config=new ScenePlaceConfig();
		config.id=stream.readInt();
		config.elements=new IntObjectMap<ScenePlaceElementConfig>();

		int len2=stream.readLen();

		ScenePlaceElementConfig eConfig;

		for(int j=0;j<len2;j++)
		{
			eConfig=new ScenePlaceElementConfig();
			eConfig.readBytesSimple(stream);
			config.elements.put(eConfig.instanceID,eConfig);
		}

		return config;
	}
	
	private BaseConfig readMapInfoSplit(BytesReadStream stream)
	{
		MapInfoConfig config=new MapInfoConfig();

		config.readBytesSimple(stream);

		return config;
	}
	
	/// <summary>
	/// 读取敏感词表
	/// </summary>
	protected virtual void readSensitiveWord(BytesReadStream stream)
	{
		SensitiveWordConfig config;
		int len=stream.readLen();
		sensitiveWordDic=new IntObjectMap<SensitiveWordConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SensitiveWordConfig();
			config.readBytesSimple(stream);
			sensitiveWordDic.put(config.key,config);
		}
	}
	
	/** 刷新敏感词表 */
	private void refreshSensitiveWord()
	{
		if(!sensitiveWordDic.isEmpty())
		{
			SensitiveWordConfig[] configValues=sensitiveWordDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SensitiveWordConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取字体表(程序用)(需国际化)
	/// </summary>
	protected virtual void readFont(BytesReadStream stream)
	{
		FontConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		fontDic=new FontConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new FontConfig();
			config.readBytesSimple(stream);
			fontDic[config.id]=config;
		}
	}
	
	/** 刷新字体表(程序用)(需国际化) */
	private void refreshFont()
	{
		for(int configI=0,configLen=fontDic.Length;configI<configLen;++configI)
		{
			FontConfig config=fontDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取国家地区表(登录用)
	/// </summary>
	protected virtual void readCountryCode(BytesReadStream stream)
	{
		CountryCodeConfig config;
		int len=stream.readLen();
		countryCodeDic=new IntObjectMap<CountryCodeConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CountryCodeConfig();
			config.readBytesSimple(stream);
			countryCodeDic.put(config.id,config);
		}
	}
	
	/** 刷新国家地区表(登录用) */
	private void refreshCountryCode()
	{
		if(!countryCodeDic.isEmpty())
		{
			CountryCodeConfig[] configValues=countryCodeDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CountryCodeConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取gm类型
	/// </summary>
	protected virtual void readGMType(BytesReadStream stream)
	{
		GMTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		gMTypeDic=new GMTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new GMTypeConfig();
			config.readBytesSimple(stream);
			gMTypeDic[config.id]=config;
		}
	}
	
	/** 刷新gm类型 */
	private void refreshGMType()
	{
		for(int configI=0,configLen=gMTypeDic.Length;configI<configLen;++configI)
		{
			GMTypeConfig config=gMTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取消耗表
	/// </summary>
	protected virtual void readCost(BytesReadStream stream)
	{
		CostConfig config;
		int len=stream.readLen();
		costDic=new IntObjectMap<CostConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new CostConfig();
			config.readBytesSimple(stream);
			costDic.put(config.id,config);
		}
	}
	
	/** 刷新消耗表 */
	private void refreshCost()
	{
		if(!costDic.isEmpty())
		{
			CostConfig[] configValues=costDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				CostConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取兑换表
	/// </summary>
	protected virtual void readExchange(BytesReadStream stream)
	{
		ExchangeConfig config;
		int len=stream.readLen();
		exchangeDic=new IntObjectMap<ExchangeConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ExchangeConfig();
			config.readBytesSimple(stream);
			exchangeDic.put(config.id,config);
		}
	}
	
	/** 刷新兑换表 */
	private void refreshExchange()
	{
		if(!exchangeDic.isEmpty())
		{
			ExchangeConfig[] configValues=exchangeDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ExchangeConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取大浮点数阶位
	/// </summary>
	protected virtual void readBigFloatRank(BytesReadStream stream)
	{
		BigFloatRankConfig config;
		int len=stream.readLen();
		bigFloatRankDic=new IntObjectMap<BigFloatRankConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BigFloatRankConfig();
			config.readBytesSimple(stream);
			bigFloatRankDic.put(config.id,config);
		}
	}
	
	/** 刷新大浮点数阶位 */
	private void refreshBigFloatRank()
	{
		if(!bigFloatRankDic.isEmpty())
		{
			BigFloatRankConfig[] configValues=bigFloatRankDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BigFloatRankConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取职业表
	/// </summary>
	protected virtual void readVocation(BytesReadStream stream)
	{
		VocationConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		vocationDic=new VocationConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new VocationConfig();
			config.readBytesSimple(stream);
			vocationDic[config.id]=config;
		}
	}
	
	/** 刷新职业表 */
	private void refreshVocation()
	{
		for(int configI=0,configLen=vocationDic.Length;configI<configLen;++configI)
		{
			VocationConfig config=vocationDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取场景地图表
	/// </summary>
	protected virtual void readSceneMap(BytesReadStream stream)
	{
		SceneMapConfig config;
		int len=stream.readLen();
		sceneMapDic=new IntObjectMap<SceneMapConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SceneMapConfig();
			config.readBytesSimple(stream);
			sceneMapDic.put(config.id,config);
		}
	}
	
	/** 刷新场景地图表 */
	private void refreshSceneMap()
	{
		if(!sceneMapDic.isEmpty())
		{
			SceneMapConfig[] configValues=sceneMapDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SceneMapConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取推送表
	/// </summary>
	protected virtual void readPushNotify(BytesReadStream stream)
	{
		PushNotifyConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		pushNotifyDic=new PushNotifyConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new PushNotifyConfig();
			config.readBytesSimple(stream);
			pushNotifyDic[config.id]=config;
		}
	}
	
	/** 刷新推送表 */
	private void refreshPushNotify()
	{
		for(int configI=0,configLen=pushNotifyDic.Length;configI<configLen;++configI)
		{
			PushNotifyConfig config=pushNotifyDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取操作体表
	/// </summary>
	protected virtual void readOperation(BytesReadStream stream)
	{
		OperationConfig config;
		int len=stream.readLen();
		operationDic=new IntObjectMap<OperationConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new OperationConfig();
			config.readBytesSimple(stream);
			operationDic.put(config.id,config);
		}
	}
	
	/** 刷新操作体表 */
	private void refreshOperation()
	{
		if(!operationDic.isEmpty())
		{
			OperationConfig[] configValues=operationDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				OperationConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取装备槽位类型
	/// </summary>
	protected virtual void readEquipSlotType(BytesReadStream stream)
	{
		EquipSlotTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		equipSlotTypeDic=new EquipSlotTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new EquipSlotTypeConfig();
			config.readBytesSimple(stream);
			equipSlotTypeDic[config.id]=config;
		}
	}
	
	/** 刷新装备槽位类型 */
	private void refreshEquipSlotType()
	{
		for(int configI=0,configLen=equipSlotTypeDic.Length;configI<configLen;++configI)
		{
			EquipSlotTypeConfig config=equipSlotTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取场景角色属性类型表
	/// </summary>
	protected virtual void readSceneRoleAttribute(BytesReadStream stream)
	{
		SceneRoleAttributeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		sceneRoleAttributeDic=new SceneRoleAttributeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new SceneRoleAttributeConfig();
			config.readBytesSimple(stream);
			sceneRoleAttributeDic[config.id]=config;
		}
	}
	
	/** 刷新场景角色属性类型表 */
	private void refreshSceneRoleAttribute()
	{
		for(int configI=0,configLen=sceneRoleAttributeDic.Length;configI<configLen;++configI)
		{
			SceneRoleAttributeConfig config=sceneRoleAttributeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取建筑等级表
	/// </summary>
	protected virtual void readBuildingLevel(BytesReadStream stream)
	{
		BuildingLevelConfig config;
		int len=stream.readLen();
		buildingLevelDic=new LongObjectMap<BuildingLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BuildingLevelConfig();
			config.readBytesSimple(stream);
			buildingLevelDic.put((long)config.id << 16 | (long)config.level,config);
		}
	}
	
	/** 刷新建筑等级表 */
	private void refreshBuildingLevel()
	{
		if(!buildingLevelDic.isEmpty())
		{
			BuildingLevelConfig[] configValues=buildingLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BuildingLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能影响类型
	/// </summary>
	protected virtual void readSkillInfluenceType(BytesReadStream stream)
	{
		SkillInfluenceTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		skillInfluenceTypeDic=new SkillInfluenceTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new SkillInfluenceTypeConfig();
			config.readBytesSimple(stream);
			skillInfluenceTypeDic[config.id]=config;
		}
	}
	
	/** 刷新技能影响类型 */
	private void refreshSkillInfluenceType()
	{
		for(int configI=0,configLen=skillInfluenceTypeDic.Length;configI<configLen;++configI)
		{
			SkillInfluenceTypeConfig config=skillInfluenceTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取建筑表
	/// </summary>
	protected virtual void readBuilding(BytesReadStream stream)
	{
		BuildingConfig config;
		int len=stream.readLen();
		buildingDic=new IntObjectMap<BuildingConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new BuildingConfig();
			config.readBytesSimple(stream);
			buildingDic.put(config.id,config);
		}
	}
	
	/** 刷新建筑表 */
	private void refreshBuilding()
	{
		if(!buildingDic.isEmpty())
		{
			BuildingConfig[] configValues=buildingDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				BuildingConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取技能读条表
	/// </summary>
	protected virtual void readSkillBar(BytesReadStream stream)
	{
		SkillBarConfig config;
		int len=stream.readLen();
		skillBarDic=new IntObjectMap<SkillBarConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SkillBarConfig();
			config.readBytesSimple(stream);
			skillBarDic.put(config.id,config);
		}
	}
	
	/** 刷新技能读条表 */
	private void refreshSkillBar()
	{
		if(!skillBarDic.isEmpty())
		{
			SkillBarConfig[] configValues=skillBarDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SkillBarConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取玩家群表
	/// </summary>
	protected virtual void readRoleGroup(BytesReadStream stream)
	{
		RoleGroupConfig config;
		int len=stream.readLen();
		roleGroupDic=new IntObjectMap<RoleGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RoleGroupConfig();
			config.readBytesSimple(stream);
			roleGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新玩家群表 */
	private void refreshRoleGroup()
	{
		if(!roleGroupDic.isEmpty())
		{
			RoleGroupConfig[] configValues=roleGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RoleGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取玩家群等级表
	/// </summary>
	protected virtual void readRoleGroupLevel(BytesReadStream stream)
	{
		RoleGroupLevelConfig config;
		int len=stream.readLen();
		roleGroupLevelDic=new LongObjectMap<RoleGroupLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RoleGroupLevelConfig();
			config.readBytesSimple(stream);
			roleGroupLevelDic.put((long)config.id << 32 | (long)config.level,config);
		}
	}
	
	/** 刷新玩家群等级表 */
	private void refreshRoleGroupLevel()
	{
		if(!roleGroupLevelDic.isEmpty())
		{
			RoleGroupLevelConfig[] configValues=roleGroupLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RoleGroupLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取玩家群职位表
	/// </summary>
	protected virtual void readRoleGroupTitle(BytesReadStream stream)
	{
		RoleGroupTitleConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		roleGroupTitleDic=new RoleGroupTitleConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new RoleGroupTitleConfig();
			config.readBytesSimple(stream);
			roleGroupTitleDic[config.id]=config;
		}
	}
	
	/** 刷新玩家群职位表 */
	private void refreshRoleGroupTitle()
	{
		for(int configI=0,configLen=roleGroupTitleDic.Length;configI<configLen;++configI)
		{
			RoleGroupTitleConfig config=roleGroupTitleDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取信息日志表
	/// </summary>
	protected virtual void readInfoLog(BytesReadStream stream)
	{
		InfoLogConfig config;
		int len=stream.readLen();
		infoLogDic=new IntObjectMap<InfoLogConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new InfoLogConfig();
			config.readBytesSimple(stream);
			infoLogDic.put(config.id,config);
		}
	}
	
	/** 刷新信息日志表 */
	private void refreshInfoLog()
	{
		if(!infoLogDic.isEmpty())
		{
			InfoLogConfig[] configValues=infoLogDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				InfoLogConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 添加到Config上
	/// </summary>
	public virtual void addToConfigOne(int type)
	{
		switch(type)
		{
			case ConfigType.Language:
			{
				LanguageConfig.addDic(languageDic);
			}
				break;
			case ConfigType.BigFloatRank:
			{
				BigFloatRankConfig.addDic(bigFloatRankDic);
			}
				break;
			case ConfigType.SkillInfluenceType:
			{
				SkillInfluenceTypeConfig.addDic(skillInfluenceTypeDic);
			}
				break;
			case ConfigType.Achievement:
			{
				AchievementConfig.addDic(achievementDic);
			}
				break;
			case ConfigType.Activity:
			{
				ActivityConfig.addDic(activityDic);
			}
				break;
			case ConfigType.Attack:
			{
				AttackConfig.addDic(attackDic);
			}
				break;
			case ConfigType.AttackGroup:
			{
				AttackGroupConfig.addDic(attackGroupDic);
			}
				break;
			case ConfigType.AttackLevel:
			{
				AttackLevelConfig.addDic(attackLevelDic);
			}
				break;
			case ConfigType.Attribute:
			{
				AttributeConfig.addDic(attributeDic);
			}
				break;
			case ConfigType.Auction:
			{
				AuctionConfig.addDic(auctionDic);
			}
				break;
			case ConfigType.AuctionQueryConditionType:
			{
				AuctionQueryConditionTypeConfig.addDic(auctionQueryConditionTypeDic);
			}
				break;
			case ConfigType.AvatarPart:
			{
				AvatarPartConfig.addDic(avatarPartDic);
			}
				break;
			case ConfigType.Battle:
			{
				BattleConfig.addDic(battleDic);
			}
				break;
			case ConfigType.Buff:
			{
				BuffConfig.addDic(buffDic);
			}
				break;
			case ConfigType.BuffActionType:
			{
				BuffActionTypeConfig.addDic(buffActionTypeDic);
			}
				break;
			case ConfigType.BuffGroup:
			{
				BuffGroupConfig.addDic(buffGroupDic);
			}
				break;
			case ConfigType.BuffLevel:
			{
				BuffLevelConfig.addDic(buffLevelDic);
			}
				break;
			case ConfigType.Building:
			{
				BuildingConfig.addDic(buildingDic);
			}
				break;
			case ConfigType.BuildingLevel:
			{
				BuildingLevelConfig.addDic(buildingLevelDic);
			}
				break;
			case ConfigType.Bullet:
			{
				BulletConfig.addDic(bulletDic);
			}
				break;
			case ConfigType.BulletLevel:
			{
				BulletLevelConfig.addDic(bulletLevelDic);
			}
				break;
			case ConfigType.CallWay:
			{
				CallWayConfig.addDic(callWayDic);
			}
				break;
			case ConfigType.CD:
			{
				CDConfig.addDic(cdDic);
			}
				break;
			case ConfigType.CDGroup:
			{
				CDGroupConfig.addDic(cdGroupDic);
			}
				break;
			case ConfigType.Character:
			{
				CharacterConfig.addDic(characterDic);
			}
				break;
			case ConfigType.ChatChannel:
			{
				ChatChannelConfig.addDic(chatChannelDic);
			}
				break;
			case ConfigType.ClientPlatformType:
			{
				ClientPlatformTypeConfig.addDic(clientPlatformTypeDic);
			}
				break;
			case ConfigType.Cost:
			{
				CostConfig.addDic(costDic);
			}
				break;
			case ConfigType.CountryCode:
			{
				CountryCodeConfig.addDic(countryCodeDic);
			}
				break;
			case ConfigType.CreateItem:
			{
				CreateItemConfig.addDic(createItemDic);
			}
				break;
			case ConfigType.Currency:
			{
				CurrencyConfig.addDic(currencyDic);
			}
				break;
			case ConfigType.Effect:
			{
				EffectConfig.addDic(effectDic);
			}
				break;
			case ConfigType.EquipSlotType:
			{
				EquipSlotTypeConfig.addDic(equipSlotTypeDic);
			}
				break;
			case ConfigType.Exchange:
			{
				ExchangeConfig.addDic(exchangeDic);
			}
				break;
			case ConfigType.ExchangeGroup:
			{
				ExchangeGroupConfig.addDic(exchangeGroupDic);
			}
				break;
			case ConfigType.Facade:
			{
				FacadeConfig.addDic(facadeDic);
			}
				break;
			case ConfigType.FightUnit:
			{
				FightUnitConfig.addDic(fightUnitDic);
			}
				break;
			case ConfigType.FightUnitLevel:
			{
				FightUnitLevelConfig.addDic(fightUnitLevelDic);
			}
				break;
			case ConfigType.FlowStep:
			{
				FlowStepConfig.addDic(flowStepDic);
			}
				break;
			case ConfigType.Font:
			{
				FontConfig.addDic(fontDic);
			}
				break;
			case ConfigType.Function:
			{
				FunctionConfig.addDic(functionDic);
			}
				break;
			case ConfigType.GMType:
			{
				GMTypeConfig.addDic(gMTypeDic);
			}
				break;
			case ConfigType.InfoCode:
			{
				InfoCodeConfig.addDic(infoCodeDic);
			}
				break;
			case ConfigType.InfoLog:
			{
				InfoLogConfig.addDic(infoLogDic);
			}
				break;
			case ConfigType.InitCreate:
			{
				InitCreateConfig.addDic(initCreateDic);
			}
				break;
			case ConfigType.InternationalResource:
			{
				InternationalResourceConfig.addDic(internationalResourceDic);
			}
				break;
			case ConfigType.Item:
			{
				ItemConfig.addDic(itemDic);
			}
				break;
			case ConfigType.LanguageType:
			{
				LanguageTypeConfig.addDic(languageTypeDic);
			}
				break;
			case ConfigType.Mail:
			{
				MailConfig.addDic(mailDic);
			}
				break;
			case ConfigType.MailType:
			{
				MailTypeConfig.addDic(mailTypeDic);
			}
				break;
			case ConfigType.MapBlockType:
			{
				MapBlockTypeConfig.addDic(mapBlockTypeDic);
			}
				break;
			case ConfigType.MapMoveType:
			{
				MapMoveTypeConfig.addDic(mapMoveTypeDic);
			}
				break;
			case ConfigType.MarkResource:
			{
				MarkResourceConfig.addDic(markResourceDic);
			}
				break;
			case ConfigType.Model:
			{
				ModelConfig.addDic(modelDic);
			}
				break;
			case ConfigType.ModelBindPosType:
			{
				ModelBindPosTypeConfig.addDic(modelBindPosTypeDic);
			}
				break;
			case ConfigType.ModelMotion:
			{
				ModelMotionConfig.addDic(modelMotionDic);
			}
				break;
			case ConfigType.Monster:
			{
				MonsterConfig.addDic(monsterDic);
			}
				break;
			case ConfigType.MonsterLevel:
			{
				MonsterLevelConfig.addDic(monsterLevelDic);
			}
				break;
			case ConfigType.Motion:
			{
				MotionConfig.addDic(motionDic);
			}
				break;
			case ConfigType.NPC:
			{
				NPCConfig.addDic(npcDic);
			}
				break;
			case ConfigType.Operation:
			{
				OperationConfig.addDic(operationDic);
			}
				break;
			case ConfigType.Pet:
			{
				PetConfig.addDic(petDic);
			}
				break;
			case ConfigType.Platform:
			{
				PlatformConfig.addDic(platformDic);
			}
				break;
			case ConfigType.ProgressBar:
			{
				ProgressBarConfig.addDic(progressBarDic);
			}
				break;
			case ConfigType.Puppet:
			{
				PuppetConfig.addDic(puppetDic);
			}
				break;
			case ConfigType.PuppetLevel:
			{
				PuppetLevelConfig.addDic(puppetLevelDic);
			}
				break;
			case ConfigType.PushNotify:
			{
				PushNotifyConfig.addDic(pushNotifyDic);
			}
				break;
			case ConfigType.PushTopicType:
			{
				PushTopicTypeConfig.addDic(pushTopicTypeDic);
			}
				break;
			case ConfigType.Quest:
			{
				QuestConfig.addDic(questDic);
			}
				break;
			case ConfigType.RandomItem:
			{
				RandomItemConfig.addDic(randomItemDic);
			}
				break;
			case ConfigType.RandomItemList:
			{
				RandomItemListConfig.addDic(randomItemListDic);
			}
				break;
			case ConfigType.RandomName:
			{
				RandomNameConfig.addDic(randomNameDic);
			}
				break;
			case ConfigType.RedPoint:
			{
				RedPointConfig.addDic(redPointDic);
			}
				break;
			case ConfigType.Region:
			{
				RegionConfig.addDic(regionDic);
			}
				break;
			case ConfigType.Reward:
			{
				RewardConfig.addDic(rewardDic);
			}
				break;
			case ConfigType.RoleAttribute:
			{
				RoleAttributeConfig.addDic(roleAttributeDic);
			}
				break;
			case ConfigType.RoleGroup:
			{
				RoleGroupConfig.addDic(roleGroupDic);
			}
				break;
			case ConfigType.RoleGroupLevel:
			{
				RoleGroupLevelConfig.addDic(roleGroupLevelDic);
			}
				break;
			case ConfigType.RoleGroupTitle:
			{
				RoleGroupTitleConfig.addDic(roleGroupTitleDic);
			}
				break;
			case ConfigType.RoleLevel:
			{
				RoleLevelConfig.addDic(roleLevelDic);
			}
				break;
			case ConfigType.RoleShowDataPartType:
			{
				RoleShowDataPartTypeConfig.addDic(roleShowDataPartTypeDic);
			}
				break;
			case ConfigType.Scene:
			{
				SceneConfig.addDic(sceneDic);
			}
				break;
			case ConfigType.SceneEffect:
			{
				SceneEffectConfig.addDic(sceneEffectDic);
			}
				break;
			case ConfigType.SceneForceType:
			{
				SceneForceTypeConfig.addDic(sceneForceTypeDic);
			}
				break;
			case ConfigType.SceneMap:
			{
				SceneMapConfig.addDic(sceneMapDic);
			}
				break;
			case ConfigType.ScenePlaceElement:
			{
				ScenePlaceElementConfig.addDic(scenePlaceElementDic);
			}
				break;
			case ConfigType.SceneRoleAttribute:
			{
				SceneRoleAttributeConfig.addDic(sceneRoleAttributeDic);
			}
				break;
			case ConfigType.SceneType:
			{
				SceneTypeConfig.addDic(sceneTypeDic);
			}
				break;
			case ConfigType.SensitiveWord:
			{
				SensitiveWordConfig.addDic(sensitiveWordDic);
			}
				break;
			case ConfigType.Skill:
			{
				SkillConfig.addDic(skillDic);
			}
				break;
			case ConfigType.SkillBar:
			{
				SkillBarConfig.addDic(skillBarDic);
			}
				break;
			case ConfigType.SkillGroup:
			{
				SkillGroupConfig.addDic(skillGroupDic);
			}
				break;
			case ConfigType.SkillLevel:
			{
				SkillLevelConfig.addDic(skillLevelDic);
			}
				break;
			case ConfigType.SkillProb:
			{
				SkillProbConfig.addDic(skillProbDic);
			}
				break;
			case ConfigType.SkillStep:
			{
				SkillStepConfig.addDic(skillStepDic);
			}
				break;
			case ConfigType.SkillStepLevel:
			{
				SkillStepLevelConfig.addDic(skillStepLevelDic);
			}
				break;
			case ConfigType.SkillVar:
			{
				SkillVarConfig.addDic(skillVarDic);
			}
				break;
			case ConfigType.SpecialMove:
			{
				SpecialMoveConfig.addDic(specialMoveDic);
			}
				break;
			case ConfigType.Status:
			{
				StatusConfig.addDic(statusDic);
			}
				break;
			case ConfigType.SubsectionRank:
			{
				SubsectionRankConfig.addDic(subsectionRankDic);
			}
				break;
			case ConfigType.Task:
			{
				TaskConfig.addDic(taskDic);
			}
				break;
			case ConfigType.TaskType:
			{
				TaskTypeConfig.addDic(taskTypeDic);
			}
				break;
			case ConfigType.TeamTarget:
			{
				TeamTargetConfig.addDic(teamTargetDic);
			}
				break;
			case ConfigType.Text:
			{
				TextConfig.addDic(textDic);
			}
				break;
			case ConfigType.UI:
			{
				UIConfig.addDic(uiDic);
			}
				break;
			case ConfigType.UILogic:
			{
				UILogicConfig.addDic(uiLogicDic);
			}
				break;
			case ConfigType.UnitGroup:
			{
				UnitGroupConfig.addDic(unitGroupDic);
			}
				break;
			case ConfigType.UnitModelSlotType:
			{
				UnitModelSlotTypeConfig.addDic(unitModelSlotTypeDic);
			}
				break;
			case ConfigType.UnitMoveType:
			{
				UnitMoveTypeConfig.addDic(unitMoveTypeDic);
			}
				break;
			case ConfigType.UnitSpecialMoveType:
			{
				UnitSpecialMoveTypeConfig.addDic(unitSpecialMoveTypeDic);
			}
				break;
			case ConfigType.Vehicle:
			{
				VehicleConfig.addDic(vehicleDic);
			}
				break;
			case ConfigType.Vocation:
			{
				VocationConfig.addDic(vocationDic);
			}
				break;
		}
	}
	
	/// <summary>
	/// 读取兑换组表
	/// </summary>
	protected virtual void readExchangeGroup(BytesReadStream stream)
	{
		ExchangeGroupConfig config;
		int len=stream.readLen();
		exchangeGroupDic=new IntObjectMap<ExchangeGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new ExchangeGroupConfig();
			config.readBytesSimple(stream);
			exchangeGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新兑换组表 */
	private void refreshExchangeGroup()
	{
		if(!exchangeGroupDic.isEmpty())
		{
			ExchangeGroupConfig[] configValues=exchangeGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				ExchangeGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取界面逻辑体表
	/// </summary>
	protected virtual void readUILogic(BytesReadStream stream)
	{
		UILogicConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		uiLogicDic=new UILogicConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new UILogicConfig();
			config.readBytesSimple(stream);
			uiLogicDic[config.id]=config;
		}
	}
	
	/** 刷新界面逻辑体表 */
	private void refreshUILogic()
	{
		for(int configI=0,configLen=uiLogicDic.Length;configI<configLen;++configI)
		{
			UILogicConfig config=uiLogicDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取怪物等级表
	/// </summary>
	protected virtual void readMonsterLevel(BytesReadStream stream)
	{
		MonsterLevelConfig config;
		int len=stream.readLen();
		monsterLevelDic=new LongObjectMap<MonsterLevelConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new MonsterLevelConfig();
			config.readBytesSimple(stream);
			monsterLevelDic.put((long)config.id << 32 | (long)config.level,config);
		}
	}
	
	/** 刷新怪物等级表 */
	private void refreshMonsterLevel()
	{
		if(!monsterLevelDic.isEmpty())
		{
			MonsterLevelConfig[] configValues=monsterLevelDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				MonsterLevelConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取单位模型位置类型
	/// </summary>
	protected virtual void readUnitModelSlotType(BytesReadStream stream)
	{
		UnitModelSlotTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		unitModelSlotTypeDic=new UnitModelSlotTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new UnitModelSlotTypeConfig();
			config.readBytesSimple(stream);
			unitModelSlotTypeDic[config.id]=config;
		}
	}
	
	/** 刷新单位模型位置类型 */
	private void refreshUnitModelSlotType()
	{
		for(int configI=0,configLen=unitModelSlotTypeDic.Length;configI<configLen;++configI)
		{
			UnitModelSlotTypeConfig config=unitModelSlotTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取角色属性类型表
	/// </summary>
	protected virtual void readRoleAttribute(BytesReadStream stream)
	{
		RoleAttributeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		roleAttributeDic=new RoleAttributeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new RoleAttributeConfig();
			config.readBytesSimple(stream);
			roleAttributeDic[config.id]=config;
		}
	}
	
	/** 刷新角色属性类型表 */
	private void refreshRoleAttribute()
	{
		for(int configI=0,configLen=roleAttributeDic.Length;configI<configLen;++configI)
		{
			RoleAttributeConfig config=roleAttributeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取聊天频道表
	/// </summary>
	protected virtual void readChatChannel(BytesReadStream stream)
	{
		ChatChannelConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		chatChannelDic=new ChatChannelConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new ChatChannelConfig();
			config.readBytesSimple(stream);
			chatChannelDic[config.id]=config;
		}
	}
	
	/** 刷新聊天频道表 */
	private void refreshChatChannel()
	{
		for(int configI=0,configLen=chatChannelDic.Length;configI<configLen;++configI)
		{
			ChatChannelConfig config=chatChannelDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取区域表
	/// </summary>
	protected virtual void readRegion(BytesReadStream stream)
	{
		RegionConfig config;
		int len=stream.readLen();
		regionDic=new IntObjectMap<RegionConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new RegionConfig();
			config.readBytesSimple(stream);
			regionDic.put(config.id,config);
		}
	}
	
	/** 刷新区域表 */
	private void refreshRegion()
	{
		if(!regionDic.isEmpty())
		{
			RegionConfig[] configValues=regionDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				RegionConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取客户端平台类型
	/// </summary>
	protected virtual void readClientPlatformType(BytesReadStream stream)
	{
		ClientPlatformTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		clientPlatformTypeDic=new ClientPlatformTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new ClientPlatformTypeConfig();
			config.readBytesSimple(stream);
			clientPlatformTypeDic[config.id]=config;
		}
	}
	
	/** 刷新客户端平台类型 */
	private void refreshClientPlatformType()
	{
		for(int configI=0,configLen=clientPlatformTypeDic.Length;configI<configLen;++configI)
		{
			ClientPlatformTypeConfig config=clientPlatformTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取地图格子阻挡类型类型
	/// </summary>
	protected virtual void readMapBlockType(BytesReadStream stream)
	{
		MapBlockTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		mapBlockTypeDic=new MapBlockTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new MapBlockTypeConfig();
			config.readBytesSimple(stream);
			mapBlockTypeDic[config.id]=config;
		}
	}
	
	/** 刷新地图格子阻挡类型类型 */
	private void refreshMapBlockType()
	{
		for(int configI=0,configLen=mapBlockTypeDic.Length;configI<configLen;++configI)
		{
			MapBlockTypeConfig config=mapBlockTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取buff行为类型
	/// </summary>
	protected virtual void readBuffActionType(BytesReadStream stream)
	{
		BuffActionTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		buffActionTypeDic=new BuffActionTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new BuffActionTypeConfig();
			config.readBytesSimple(stream);
			buffActionTypeDic[config.id]=config;
		}
	}
	
	/** 刷新buff行为类型 */
	private void refreshBuffActionType()
	{
		for(int configI=0,configLen=buffActionTypeDic.Length;configI<configLen;++configI)
		{
			BuffActionTypeConfig config=buffActionTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取场景势力类型
	/// </summary>
	protected virtual void readSceneForceType(BytesReadStream stream)
	{
		SceneForceTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		sceneForceTypeDic=new SceneForceTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new SceneForceTypeConfig();
			config.readBytesSimple(stream);
			sceneForceTypeDic[config.id]=config;
		}
	}
	
	/** 刷新场景势力类型 */
	private void refreshSceneForceType()
	{
		for(int configI=0,configLen=sceneForceTypeDic.Length;configI<configLen;++configI)
		{
			SceneForceTypeConfig config=sceneForceTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取载具表
	/// </summary>
	protected virtual void readVehicle(BytesReadStream stream)
	{
		VehicleConfig config;
		int len=stream.readLen();
		vehicleDic=new IntObjectMap<VehicleConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new VehicleConfig();
			config.readBytesSimple(stream);
			vehicleDic.put(config.id,config);
		}
	}
	
	/** 刷新载具表 */
	private void refreshVehicle()
	{
		if(!vehicleDic.isEmpty())
		{
			VehicleConfig[] configValues=vehicleDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				VehicleConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取地图移动类型
	/// </summary>
	protected virtual void readMapMoveType(BytesReadStream stream)
	{
		MapMoveTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		mapMoveTypeDic=new MapMoveTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new MapMoveTypeConfig();
			config.readBytesSimple(stream);
			mapMoveTypeDic[config.id]=config;
		}
	}
	
	/** 刷新地图移动类型 */
	private void refreshMapMoveType()
	{
		for(int configI=0,configLen=mapMoveTypeDic.Length;configI<configLen;++configI)
		{
			MapMoveTypeConfig config=mapMoveTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取拍卖行表
	/// </summary>
	protected virtual void readAuction(BytesReadStream stream)
	{
		AuctionConfig config;
		int len=stream.readLen();
		auctionDic=new IntObjectMap<AuctionConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new AuctionConfig();
			config.readBytesSimple(stream);
			auctionDic.put(config.id,config);
		}
	}
	
	/** 刷新拍卖行表 */
	private void refreshAuction()
	{
		if(!auctionDic.isEmpty())
		{
			AuctionConfig[] configValues=auctionDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				AuctionConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取拍卖行查询条件类型
	/// </summary>
	protected virtual void readAuctionQueryConditionType(BytesReadStream stream)
	{
		AuctionQueryConditionTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		auctionQueryConditionTypeDic=new AuctionQueryConditionTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new AuctionQueryConditionTypeConfig();
			config.readBytesSimple(stream);
			auctionQueryConditionTypeDic[config.id]=config;
		}
	}
	
	/** 刷新拍卖行查询条件类型 */
	private void refreshAuctionQueryConditionType()
	{
		for(int configI=0,configLen=auctionQueryConditionTypeDic.Length;configI<configLen;++configI)
		{
			AuctionQueryConditionTypeConfig config=auctionQueryConditionTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取队伍目标表
	/// </summary>
	protected virtual void readTeamTarget(BytesReadStream stream)
	{
		TeamTargetConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		teamTargetDic=new TeamTargetConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new TeamTargetConfig();
			config.readBytesSimple(stream);
			teamTargetDic[config.id]=config;
		}
	}
	
	/** 刷新队伍目标表 */
	private void refreshTeamTarget()
	{
		for(int configI=0,configLen=teamTargetDic.Length;configI<configLen;++configI)
		{
			TeamTargetConfig config=teamTargetDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取分段排行表
	/// </summary>
	protected virtual void readSubsectionRank(BytesReadStream stream)
	{
		SubsectionRankConfig config;
		int len=stream.readLen();
		subsectionRankDic=new IntObjectMap<SubsectionRankConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new SubsectionRankConfig();
			config.readBytesSimple(stream);
			subsectionRankDic.put(config.id,config);
		}
	}
	
	/** 刷新分段排行表 */
	private void refreshSubsectionRank()
	{
		if(!subsectionRankDic.isEmpty())
		{
			SubsectionRankConfig[] configValues=subsectionRankDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				SubsectionRankConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取初始化创建表
	/// </summary>
	protected virtual void readInitCreate(BytesReadStream stream)
	{
		InitCreateConfig config;
		int len=stream.readLen();
		initCreateDic=new IntObjectMap<InitCreateConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new InitCreateConfig();
			config.readBytesSimple(stream);
			initCreateDic.put(config.vocation,config);
		}
	}
	
	/** 刷新初始化创建表 */
	private void refreshInitCreate()
	{
		if(!initCreateDic.isEmpty())
		{
			InitCreateConfig[] configValues=initCreateDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				InitCreateConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
	/// <summary>
	/// 读取推送标签类型
	/// </summary>
	protected virtual void readPushTopicType(BytesReadStream stream)
	{
		PushTopicTypeConfig config;
		int len=stream.readLen();
		int size=stream.readLen();
		pushTopicTypeDic=new PushTopicTypeConfig[size];
		for(int i=0;i<len;++i)
		{
			config=new PushTopicTypeConfig();
			config.readBytesSimple(stream);
			pushTopicTypeDic[config.id]=config;
		}
	}
	
	/** 刷新推送标签类型 */
	private void refreshPushTopicType()
	{
		for(int configI=0,configLen=pushTopicTypeDic.Length;configI<configLen;++configI)
		{
			PushTopicTypeConfig config=pushTopicTypeDic[configI];
			if(config!=null)
				config.refresh();
		}
	}
	
	/// <summary>
	/// 读取单位组表
	/// </summary>
	protected virtual void readUnitGroup(BytesReadStream stream)
	{
		UnitGroupConfig config;
		int len=stream.readLen();
		unitGroupDic=new IntObjectMap<UnitGroupConfig>(len);
		for(int i=0;i<len;++i)
		{
			config=new UnitGroupConfig();
			config.readBytesSimple(stream);
			unitGroupDic.put(config.id,config);
		}
	}
	
	/** 刷新单位组表 */
	private void refreshUnitGroup()
	{
		if(!unitGroupDic.isEmpty())
		{
			UnitGroupConfig[] configValues=unitGroupDic.getValues();
			for(int configI=configValues.Length-1;configI>=0;--configI)
			{
				UnitGroupConfig config=configValues[configI];
				if(config!=null)
				{
					config.refresh();
				}
			}
		}
	}
	
}
