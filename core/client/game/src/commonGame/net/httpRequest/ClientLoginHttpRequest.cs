using ShineEngine;

/// <summary>
/// 客户端登录(自有登录)(generated by shine)
/// </summary>
public class ClientLoginHttpRequest:LoginHttpRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=LoginHttpRequestType.ClientLogin;
	
	/// <summary>
	/// 返回值
	/// </summary>
	protected ClientLoginResult _re;
	
	/// <summary>
	/// c层msg版本号
	/// </summary>
	public int cMsgVersion;
	
	/// <summary>
	/// g层msg版本号
	/// </summary>
	public int gMsgVersion;
	
	/// <summary>
	/// 登录数据
	/// </summary>
	public ClientLoginData data;
	
	public ClientLoginHttpRequest()
	{
		_dataID=LoginHttpRequestType.ClientLogin;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void toRead()
	{
		_re=new ClientLoginResult();
		readResult(_re,_resultStream);
	}
	
	protected override void onComplete()
	{
		if(_result==-1 || _re==null)
		{
			Ctrl.print("ClientLoginHttpRequest失败,errorCode",_result);
			GameC.main.onLoginHttpFailed(_result);
			return;
		}

		GameC.main.onLoginHttpSuccess(_re.data);
	}
	
	/// <summary>
	/// 获取结果
	/// </summary>
	public ClientLoginResult getResult()
	{
		return _re;
	}
	
	/// <summary>
	/// 同步执行
	/// </summary>
	public ClientLoginResult sendMSync()
	{
		doSendSync();
		return _re;
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.cMsgVersion);
		
		stream.writeInt(this.gMsgVersion);
		
		if(this.data!=null)
		{
			stream.writeDataFullNotNull(this.data);
		}
		else
		{
			nullObjError("data");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.cMsgVersion);
		
		stream.writeInt(this.gMsgVersion);
		
		if(this.data!=null)
		{
			stream.writeDataSimpleNotNull(this.data);
		}
		else
		{
			nullObjError("data");
		}
		
	}
	
	protected override void copyData()
	{
		base.copyData();
		ClientLoginData dataTemp=data;
		if(dataTemp!=null)
		{
			this.data=(ClientLoginData)dataTemp.clone();
		}
		else
		{
			this.data=null;
			nullObjError("data");
		}
		
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static ClientLoginHttpRequest create(int cMsgVersion,int gMsgVersion,ClientLoginData data)
	{
		ClientLoginHttpRequest re=new ClientLoginHttpRequest();
		re.cMsgVersion=cMsgVersion;
		re.gMsgVersion=gMsgVersion;
		re.data=data;
		return re;
	}
	
}
