using ShineEngine;

/// <summary>
/// 发送客户端流程步消息(generated by shine)
/// </summary>
public class SendHttpClientFlowStepHttpRequest:LoginHttpRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=LoginHttpRequestType.SendHttpClientFlowStep;
	
	/// <summary>
	/// uid
	/// </summary>
	public string uid;
	
	/// <summary>
	/// 步骤
	/// </summary>
	public int step;
	
	public SendHttpClientFlowStepHttpRequest()
	{
		_dataID=LoginHttpRequestType.SendHttpClientFlowStep;
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeUTF(this.uid);
		
		stream.writeInt(this.step);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeUTF(this.uid);
		
		stream.writeInt(this.step);
		
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void onComplete()
	{
		
	}
	
	/// <summary>
	/// 同步执行
	/// </summary>
	public void sendMSync()
	{
		doSendSync();
		return;
	}
	
	protected override void copyData()
	{
		base.copyData();
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static SendHttpClientFlowStepHttpRequest create(string uid,int step)
	{
		SendHttpClientFlowStepHttpRequest re=new SendHttpClientFlowStepHttpRequest();
		re.uid=uid;
		re.step=step;
		return re;
	}
	
}
