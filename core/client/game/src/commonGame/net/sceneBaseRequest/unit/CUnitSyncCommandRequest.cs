using ShineEngine;

/// <summary>
/// 单位同步参数指令(generated by shine)
/// </summary>
public class CUnitSyncCommandRequest:CUnitRRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=SceneBaseRequestType.CUnitSyncCommand;
	
	/// <summary>
	/// 当前位置
	/// </summary>
	public PosDirData posDir;
	
	/// <summary>
	/// 指令
	/// </summary>
	public int type;
	
	/// <summary>
	/// 整形参数组
	/// </summary>
	public int[] ints;
	
	/// <summary>
	/// float参数组
	/// </summary>
	public float[] floats;
	
	public CUnitSyncCommandRequest()
	{
		_dataID=SceneBaseRequestType.CUnitSyncCommand;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "CUnitSyncCommandRequest";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("posDir");
		writer.sb.Append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("type");
		writer.sb.Append(':');
		writer.sb.Append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("ints");
		writer.sb.Append(':');
		writer.sb.Append("Array<int>");
		if(this.ints!=null)
		{
			int[] intsT=this.ints;
			int intsLen=intsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(intsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int intsI=0;intsI<intsLen;++intsI)
			{
				int intsV=intsT[intsI];
				writer.writeTabs();
				writer.sb.Append(intsI);
				writer.sb.Append(':');
				writer.sb.Append(intsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("floats");
		writer.sb.Append(':');
		writer.sb.Append("Array<float>");
		if(this.floats!=null)
		{
			float[] floatsT=this.floats;
			int floatsLen=floatsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(floatsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int floatsI=0;floatsI<floatsLen;++floatsI)
			{
				float floatsV=floatsT[floatsI];
				writer.writeTabs();
				writer.sb.Append(floatsI);
				writer.sb.Append(':');
				writer.sb.Append(floatsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.posDir!=null)
		{
			stream.writeBoolean(true);
			this.posDir.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			stream.writeBoolean(true);
			int[] intsT=this.ints;
			stream.writeLen(intsT.Length);
			for(int intsVI=0,intsVLen=intsT.Length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.floats!=null)
		{
			stream.writeBoolean(true);
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.Length);
			for(int floatsVI=0,floatsVLen=floatsT.Length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.posDir!=null)
		{
			stream.writeBoolean(true);
			this.posDir.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.type);
		
		if(this.ints!=null)
		{
			stream.writeBoolean(true);
			int[] intsT=this.ints;
			stream.writeLen(intsT.Length);
			for(int intsVI=0,intsVLen=intsT.Length;intsVI<intsVLen;++intsVI)
			{
				int intsV=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.floats!=null)
		{
			stream.writeBoolean(true);
			float[] floatsT=this.floats;
			stream.writeLen(floatsT.Length);
			for(int floatsVI=0,floatsVLen=floatsT.Length;floatsVI<floatsVLen;++floatsVI)
			{
				float floatsV=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		if(this.posDir!=null)
		{
			this.posDir.release(pool);
			this.posDir=null;
		}
		this.type=0;
	}
	
	protected override void copyData()
	{
		base.copyData();
		PosDirData posDirTemp=posDir;
		if(posDirTemp!=null)
		{
			this.posDir=(PosDirData)BytesControl.createData(PosDirData.dataID);
			this.posDir.copy(posDirTemp);
		}
		else
		{
			this.posDir=null;
		}
		
		int[] intsTemp=ints;
		if(intsTemp!=null)
		{
			int[] intsR=intsTemp;
			int intsLen=intsR.Length;
			this.ints=new int[intsLen];
			BytesControl.arrayCopy(intsTemp,this.ints,intsLen);
		}
		else
		{
			this.ints=null;
		}
		
		float[] floatsTemp=floats;
		if(floatsTemp!=null)
		{
			float[] floatsR=floatsTemp;
			int floatsLen=floatsR.Length;
			this.floats=new float[floatsLen];
			BytesControl.arrayCopy(floatsTemp,this.floats,floatsLen);
		}
		else
		{
			this.floats=null;
		}
		
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static CUnitSyncCommandRequest create(int instanceID,PosDirData posDir,int type,int[] ints,float[] floats)
	{
		CUnitSyncCommandRequest re=(CUnitSyncCommandRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.posDir=posDir;
		re.type=type;
		re.ints=ints;
		re.floats=floats;
		return re;
	}
	
}
