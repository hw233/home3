using ShineEngine;

/// <summary>
/// 客户端单位移动到点消息(generated by shine)
/// </summary>
public class CUnitMovePosRequest:CUnitRRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=SceneBaseRequestType.CUnitMovePos;
	
	/// <summary>
	/// 移动类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// 当前位置
	/// </summary>
	public PosData nowPos;
	
	/// <summary>
	/// 目标位置
	/// </summary>
	public PosData targetPos;
	
	public CUnitMovePosRequest()
	{
		_dataID=SceneBaseRequestType.CUnitMovePos;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "CUnitMovePosRequest";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("type");
		writer.sb.Append(':');
		writer.sb.Append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("nowPos");
		writer.sb.Append(':');
		if(this.nowPos!=null)
		{
			this.nowPos.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("targetPos");
		writer.sb.Append(':');
		if(this.targetPos!=null)
		{
			this.targetPos.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.type);
		
		if(this.nowPos!=null)
		{
			stream.writeBoolean(true);
			this.nowPos.writeBytesFull(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.targetPos!=null)
		{
			this.targetPos.writeBytesFull(stream);
		}
		else
		{
			nullObjError("targetPos");
		}
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.type);
		
		if(this.nowPos!=null)
		{
			stream.writeBoolean(true);
			this.nowPos.writeBytesSimple(stream);
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		if(this.targetPos!=null)
		{
			this.targetPos.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("targetPos");
		}
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.type=0;
		if(this.nowPos!=null)
		{
			this.nowPos.release(pool);
			this.nowPos=null;
		}
		this.targetPos.release(pool);
		this.targetPos=null;
	}
	
	protected override void copyData()
	{
		base.copyData();
		PosData nowPosTemp=nowPos;
		if(nowPosTemp!=null)
		{
			this.nowPos=(PosData)BytesControl.createData(PosData.dataID);
			this.nowPos.copy(nowPosTemp);
		}
		else
		{
			this.nowPos=null;
		}
		
		PosData targetPosTemp=targetPos;
		if(targetPosTemp!=null)
		{
			this.targetPos=(PosData)BytesControl.createData(PosData.dataID);
			this.targetPos.copy(targetPosTemp);
		}
		else
		{
			this.targetPos=null;
			nullObjError("targetPos");
		}
		
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static CUnitMovePosRequest create(int instanceID,int type,PosData nowPos,PosData targetPos)
	{
		CUnitMovePosRequest re=(CUnitMovePosRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.type=type;
		re.nowPos=nowPos;
		re.targetPos=targetPos;
		return re;
	}
	
}
