using ShineEngine;

/// <summary>
/// 角色刷新属性(generated by shine)
/// </summary>
public class RoleRefreshAttributeResponse:RoleSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=SceneBaseResponseType.RoleRefreshAttribute;
	
	/// <summary>
	/// 改变的属性组
	/// </summary>
	public IntIntMap attributes;
	
	public RoleRefreshAttributeResponse()
	{
		_dataID=SceneBaseResponseType.RoleRefreshAttribute;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RoleRefreshAttributeResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int attributesLen=stream.readLen();
		if(this.attributes!=null)
		{
			this.attributes.clear();
			this.attributes.ensureCapacity(attributesLen);
		}
		else
		{
			this.attributes=new IntIntMap(attributesLen);
		}
		
		IntIntMap attributesT=this.attributes;
		for(int attributesI=attributesLen-1;attributesI>=0;--attributesI)
		{
			int attributesK;
			int attributesV;
			attributesK=stream.readInt();
			
			attributesV=stream.readInt();
			
			attributesT.put(attributesK,attributesV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		int attributesLen=stream.readLen();
		if(this.attributes!=null)
		{
			this.attributes.clear();
			this.attributes.ensureCapacity(attributesLen);
		}
		else
		{
			this.attributes=new IntIntMap(attributesLen);
		}
		
		IntIntMap attributesT=this.attributes;
		for(int attributesI=attributesLen-1;attributesI>=0;--attributesI)
		{
			int attributesK;
			int attributesV;
			attributesK=stream.readInt();
			
			attributesV=stream.readInt();
			
			attributesT.put(attributesK,attributesV);
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("attributes");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,int>");
		if(this.attributes!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.attributes.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.attributes.isEmpty())
			{
				int attributesKFreeValue=this.attributes.getFreeValue();
				int[] attributesKKeys=this.attributes.getKeys();
				int[] attributesVValues=this.attributes.getValues();
				for(int attributesKI=attributesKKeys.Length-1;attributesKI>=0;--attributesKI)
				{
					int attributesK=attributesKKeys[attributesKI];
					if(attributesK!=attributesKFreeValue)
					{
						int attributesV=attributesVValues[attributesKI];
						writer.writeTabs();
						writer.sb.Append(attributesK);
						
						writer.sb.Append(':');
						writer.sb.Append(attributesV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		attributes.forEach((k,v)=>
		{
			Ctrl.print("AA",k,v);
		});

		role.attribute.getAttribute().setAttributesByServer(attributes);
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.attributes=null;
	}
	
}
