using ShineEngine;

/// <summary>
/// 攻击伤害数据(generated by shine)
/// </summary>
public class AttackDamageResponse:SceneSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=SceneBaseResponseType.AttackDamage;
	
	/// <summary>
	/// 来源单位
	/// </summary>
	public int fromInstanceID;
	
	/// <summary>
	/// 目标数据
	/// </summary>
	public SkillTargetData target;
	
	/// <summary>
	/// 攻击ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 攻击等级
	/// </summary>
	public int level;
	
	/// <summary>
	/// 伤害数据组
	/// </summary>
	public SList<DamageOneData> damageDatas;
	
	public AttackDamageResponse()
	{
		_dataID=SceneBaseResponseType.AttackDamage;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		scene.fight.onAttackDamageFromServer(fromInstanceID,id,level,target,damageDatas);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "AttackDamageResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.fromInstanceID=stream.readInt();
		
		BaseData targetT=stream.readDataFullNotNull();
		if(targetT!=null)
		{
			if(targetT is SkillTargetData)
			{
				this.target=(SkillTargetData)targetT;
			}
			else
			{
				this.target=new SkillTargetData();
				if(!(targetT.GetType().IsAssignableFrom(typeof(SkillTargetData))))
				{
					stream.throwTypeReadError(typeof(SkillTargetData),targetT.GetType());
				}
				this.target.shadowCopy(targetT);
			}
		}
		else
		{
			this.target=null;
		}
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		if(stream.readBoolean())
		{
			int damageDatasLen=stream.readLen();
			if(this.damageDatas!=null)
			{
				this.damageDatas.clear();
				this.damageDatas.ensureCapacity(damageDatasLen);
			}
			else
			{
				this.damageDatas=new SList<DamageOneData>();
			}
			
			SList<DamageOneData> damageDatasT=this.damageDatas;
			for(int damageDatasI=damageDatasLen-1;damageDatasI>=0;--damageDatasI)
			{
				DamageOneData damageDatasV;
				if(stream.readBoolean())
				{
					BaseData damageDatasVT=stream.readDataFullNotNull();
					if(damageDatasVT!=null)
					{
						if(damageDatasVT is DamageOneData)
						{
							damageDatasV=(DamageOneData)damageDatasVT;
						}
						else
						{
							damageDatasV=new DamageOneData();
							if(!(damageDatasVT.GetType().IsAssignableFrom(typeof(DamageOneData))))
							{
								stream.throwTypeReadError(typeof(DamageOneData),damageDatasVT.GetType());
							}
							damageDatasV.shadowCopy(damageDatasVT);
						}
					}
					else
					{
						damageDatasV=null;
					}
				}
				else
				{
					damageDatasV=null;
				}
				
				damageDatasT.add(damageDatasV);
			}
		}
		else
		{
			this.damageDatas=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.fromInstanceID=stream.readInt();
		
		this.target=(SkillTargetData)stream.readDataSimpleNotNull();
		
		this.id=stream.readInt();
		
		this.level=stream.readInt();
		
		if(stream.readBoolean())
		{
			int damageDatasLen=stream.readLen();
			if(this.damageDatas!=null)
			{
				this.damageDatas.clear();
				this.damageDatas.ensureCapacity(damageDatasLen);
			}
			else
			{
				this.damageDatas=new SList<DamageOneData>();
			}
			
			SList<DamageOneData> damageDatasT=this.damageDatas;
			for(int damageDatasI=damageDatasLen-1;damageDatasI>=0;--damageDatasI)
			{
				DamageOneData damageDatasV;
				if(stream.readBoolean())
				{
					damageDatasV=(DamageOneData)stream.readDataSimpleNotNull();
				}
				else
				{
					damageDatasV=null;
				}
				
				damageDatasT.add(damageDatasV);
			}
		}
		else
		{
			this.damageDatas=null;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("fromInstanceID");
		writer.sb.Append(':');
		writer.sb.Append(this.fromInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("target");
		writer.sb.Append(':');
		if(this.target!=null)
		{
			this.target.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("level");
		writer.sb.Append(':');
		writer.sb.Append(this.level);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("damageDatas");
		writer.sb.Append(':');
		writer.sb.Append("List<DamageOneData>");
		if(this.damageDatas!=null)
		{
			SList<DamageOneData> damageDatasT=this.damageDatas;
			int damageDatasLen=damageDatasT.size();
			writer.sb.Append('(');
			writer.sb.Append(damageDatasLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int damageDatasI=0;damageDatasI<damageDatasLen;++damageDatasI)
			{
				DamageOneData damageDatasV=damageDatasT.get(damageDatasI);
				writer.writeTabs();
				writer.sb.Append(damageDatasI);
				writer.sb.Append(':');
				if(damageDatasV!=null)
				{
					damageDatasV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("DamageOneData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.fromInstanceID=0;
		this.target=null;
		this.id=0;
		this.level=0;
		this.damageDatas=null;
	}
	
}
