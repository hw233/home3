using ShineEngine;

/// <summary>
/// 推送获取翻页显示内容，无缓存方式(generated by shine)
/// </summary>
public class FuncReGetPageShowListResponse:FuncSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.FuncReGetPageShowList;
	
	/// <summary>
	/// 页码
	/// </summary>
	public int page;
	
	/// <summary>
	/// 参数
	/// </summary>
	public int arg;
	
	/// <summary>
	/// 数据组
	/// </summary>
	public SList<KeyData> list;
	
	public FuncReGetPageShowListResponse()
	{
		_dataID=GameResponseType.FuncReGetPageShowList;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FuncReGetPageShowListResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.page=stream.readInt();
		
		this.arg=stream.readInt();
		
		if(stream.readBoolean())
		{
			int listLen=stream.readLen();
			if(this.list!=null)
			{
				this.list.clear();
				this.list.ensureCapacity(listLen);
			}
			else
			{
				this.list=new SList<KeyData>();
			}
			
			SList<KeyData> listT=this.list;
			for(int listI=listLen-1;listI>=0;--listI)
			{
				KeyData listV;
				if(stream.readBoolean())
				{
					BaseData listVT=stream.readDataFullNotNull();
					if(listVT!=null)
					{
						if(listVT is KeyData)
						{
							listV=(KeyData)listVT;
						}
						else
						{
							listV=new KeyData();
							if(!(listVT.GetType().IsAssignableFrom(typeof(KeyData))))
							{
								stream.throwTypeReadError(typeof(KeyData),listVT.GetType());
							}
							listV.shadowCopy(listVT);
						}
					}
					else
					{
						listV=null;
					}
				}
				else
				{
					listV=null;
				}
				
				listT.add(listV);
			}
		}
		else
		{
			this.list=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.page=stream.readInt();
		
		this.arg=stream.readInt();
		
		if(stream.readBoolean())
		{
			int listLen=stream.readLen();
			if(this.list!=null)
			{
				this.list.clear();
				this.list.ensureCapacity(listLen);
			}
			else
			{
				this.list=new SList<KeyData>();
			}
			
			SList<KeyData> listT=this.list;
			for(int listI=listLen-1;listI>=0;--listI)
			{
				KeyData listV;
				if(stream.readBoolean())
				{
					listV=(KeyData)stream.readDataSimpleNotNull();
				}
				else
				{
					listV=null;
				}
				
				listT.add(listV);
			}
		}
		else
		{
			this.list=null;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("page");
		writer.sb.Append(':');
		writer.sb.Append(this.page);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("arg");
		writer.sb.Append(':');
		writer.sb.Append(this.arg);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("list");
		writer.sb.Append(':');
		writer.sb.Append("List<KeyData>");
		if(this.list!=null)
		{
			SList<KeyData> listT=this.list;
			int listLen=listT.size();
			writer.sb.Append('(');
			writer.sb.Append(listLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int listI=0;listI<listLen;++listI)
			{
				KeyData listV=listT.get(listI);
				writer.writeTabs();
				writer.sb.Append(listI);
				writer.sb.Append(':');
				if(listV!=null)
				{
					listV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("KeyData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		me.func.getPageShowTool(funcID).onReceivePageList(page,list);
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.page=0;
		this.arg=0;
		this.list=null;
	}
	
}
