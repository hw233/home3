using ShineEngine;

/// <summary>
/// 返回拍卖行查询结果(generated by shine)
/// </summary>
public class FuncAuctionReQueryResponse:FuncSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.FuncAuctionReQuery;
	
	/// <summary>
	/// 结果页码
	/// </summary>
	public int page;
	
	/// <summary>
	/// 结果组
	/// </summary>
	public SList<AuctionItemData> resultList;
	
	public FuncAuctionReQueryResponse()
	{
		_dataID=GameResponseType.FuncAuctionReQuery;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FuncAuctionReQueryResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.page=stream.readInt();
		
		int resultListLen=stream.readLen();
		if(this.resultList!=null)
		{
			this.resultList.clear();
			this.resultList.ensureCapacity(resultListLen);
		}
		else
		{
			this.resultList=new SList<AuctionItemData>();
		}
		
		SList<AuctionItemData> resultListT=this.resultList;
		for(int resultListI=resultListLen-1;resultListI>=0;--resultListI)
		{
			AuctionItemData resultListV;
			BaseData resultListVT=stream.readDataFullNotNull();
			if(resultListVT!=null)
			{
				if(resultListVT is AuctionItemData)
				{
					resultListV=(AuctionItemData)resultListVT;
				}
				else
				{
					resultListV=new AuctionItemData();
					if(!(resultListVT.GetType().IsAssignableFrom(typeof(AuctionItemData))))
					{
						stream.throwTypeReadError(typeof(AuctionItemData),resultListVT.GetType());
					}
					resultListV.shadowCopy(resultListVT);
				}
			}
			else
			{
				resultListV=null;
			}
			
			resultListT.add(resultListV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.page=stream.readInt();
		
		int resultListLen=stream.readLen();
		if(this.resultList!=null)
		{
			this.resultList.clear();
			this.resultList.ensureCapacity(resultListLen);
		}
		else
		{
			this.resultList=new SList<AuctionItemData>();
		}
		
		SList<AuctionItemData> resultListT=this.resultList;
		for(int resultListI=resultListLen-1;resultListI>=0;--resultListI)
		{
			AuctionItemData resultListV;
			resultListV=(AuctionItemData)stream.readDataSimpleNotNull();
			
			resultListT.add(resultListV);
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("page");
		writer.sb.Append(':');
		writer.sb.Append(this.page);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("resultList");
		writer.sb.Append(':');
		writer.sb.Append("List<AuctionItemData>");
		if(this.resultList!=null)
		{
			SList<AuctionItemData> resultListT=this.resultList;
			int resultListLen=resultListT.size();
			writer.sb.Append('(');
			writer.sb.Append(resultListLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int resultListI=0;resultListI<resultListLen;++resultListI)
			{
				AuctionItemData resultListV=resultListT.get(resultListI);
				writer.writeTabs();
				writer.sb.Append(resultListI);
				writer.sb.Append(':');
				if(resultListV!=null)
				{
					resultListV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("AuctionItemData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.page=0;
		this.resultList=null;
	}
	
}
