using ShineEngine;

/// <summary>
/// 添加物品消息(generated by shine)
/// </summary>
public class FuncAddItemResponse:FuncSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.FuncAddItem;
	
	/// <summary>
	/// 途径
	/// </summary>
	public int way;
	
	/// <summary>
	/// 自动使用物品组
	/// </summary>
	public IntIntMap autoUseItems;
	
	/// <summary>
	/// 更新组
	/// </summary>
	public IntObjectMap<ItemData> items;
	
	public FuncAddItemResponse()
	{
		_dataID=GameResponseType.FuncAddItem;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		me.func.getBaseItemContainerTool(funcID).onAddItemsByServer(autoUseItems,items,way);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FuncAddItemResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.way=stream.readInt();
		
		if(stream.readBoolean())
		{
			int autoUseItemsLen=stream.readLen();
			if(this.autoUseItems!=null)
			{
				this.autoUseItems.clear();
				this.autoUseItems.ensureCapacity(autoUseItemsLen);
			}
			else
			{
				this.autoUseItems=new IntIntMap(autoUseItemsLen);
			}
			
			IntIntMap autoUseItemsT=this.autoUseItems;
			for(int autoUseItemsI=autoUseItemsLen-1;autoUseItemsI>=0;--autoUseItemsI)
			{
				int autoUseItemsK;
				int autoUseItemsV;
				autoUseItemsK=stream.readInt();
				
				autoUseItemsV=stream.readInt();
				
				autoUseItemsT.put(autoUseItemsK,autoUseItemsV);
			}
		}
		else
		{
			this.autoUseItems=null;
		}
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new IntObjectMap<ItemData>(itemsLen);
			}
			
			IntObjectMap<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				int itemsK;
				ItemData itemsV;
				itemsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					BaseData itemsVT=stream.readDataFullNotNull();
					if(itemsVT!=null)
					{
						if(itemsVT is ItemData)
						{
							itemsV=(ItemData)itemsVT;
						}
						else
						{
							itemsV=new ItemData();
							if(!(itemsVT.GetType().IsAssignableFrom(typeof(ItemData))))
							{
								stream.throwTypeReadError(typeof(ItemData),itemsVT.GetType());
							}
							itemsV.shadowCopy(itemsVT);
						}
					}
					else
					{
						itemsV=null;
					}
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.put(itemsK,itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.way=stream.readInt();
		
		if(stream.readBoolean())
		{
			int autoUseItemsLen=stream.readLen();
			if(this.autoUseItems!=null)
			{
				this.autoUseItems.clear();
				this.autoUseItems.ensureCapacity(autoUseItemsLen);
			}
			else
			{
				this.autoUseItems=new IntIntMap(autoUseItemsLen);
			}
			
			IntIntMap autoUseItemsT=this.autoUseItems;
			for(int autoUseItemsI=autoUseItemsLen-1;autoUseItemsI>=0;--autoUseItemsI)
			{
				int autoUseItemsK;
				int autoUseItemsV;
				autoUseItemsK=stream.readInt();
				
				autoUseItemsV=stream.readInt();
				
				autoUseItemsT.put(autoUseItemsK,autoUseItemsV);
			}
		}
		else
		{
			this.autoUseItems=null;
		}
		
		if(stream.readBoolean())
		{
			int itemsLen=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new IntObjectMap<ItemData>(itemsLen);
			}
			
			IntObjectMap<ItemData> itemsT=this.items;
			for(int itemsI=itemsLen-1;itemsI>=0;--itemsI)
			{
				int itemsK;
				ItemData itemsV;
				itemsK=stream.readInt();
				
				if(stream.readBoolean())
				{
					itemsV=(ItemData)stream.readDataSimpleNotNull();
				}
				else
				{
					itemsV=null;
				}
				
				itemsT.put(itemsK,itemsV);
			}
		}
		else
		{
			this.items=null;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("way");
		writer.sb.Append(':');
		writer.sb.Append(this.way);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("autoUseItems");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,int>");
		if(this.autoUseItems!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.autoUseItems.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.autoUseItems.isEmpty())
			{
				int autoUseItemsKFreeValue=this.autoUseItems.getFreeValue();
				int[] autoUseItemsKKeys=this.autoUseItems.getKeys();
				int[] autoUseItemsVValues=this.autoUseItems.getValues();
				for(int autoUseItemsKI=autoUseItemsKKeys.Length-1;autoUseItemsKI>=0;--autoUseItemsKI)
				{
					int autoUseItemsK=autoUseItemsKKeys[autoUseItemsKI];
					if(autoUseItemsK!=autoUseItemsKFreeValue)
					{
						int autoUseItemsV=autoUseItemsVValues[autoUseItemsKI];
						writer.writeTabs();
						writer.sb.Append(autoUseItemsK);
						
						writer.sb.Append(':');
						writer.sb.Append(autoUseItemsV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("items");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,ItemData>");
		if(this.items!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.items.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.items.isEmpty())
			{
				int itemsKFreeValue=this.items.getFreeValue();
				int[] itemsKKeys=this.items.getKeys();
				ItemData[] itemsVValues=this.items.getValues();
				for(int itemsKI=itemsKKeys.Length-1;itemsKI>=0;--itemsKI)
				{
					int itemsK=itemsKKeys[itemsKI];
					if(itemsK!=itemsKFreeValue)
					{
						ItemData itemsV=itemsVValues[itemsKI];
						writer.writeTabs();
						writer.sb.Append(itemsK);
						
						writer.sb.Append(':');
						if(itemsV!=null)
						{
							itemsV.writeDataString(writer);
						}
						else
						{
							writer.sb.Append("ItemData=null");
						}
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.way=0;
		this.autoUseItems=null;
		this.items=null;
	}
	
}
