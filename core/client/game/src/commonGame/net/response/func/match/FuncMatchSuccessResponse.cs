using ShineEngine;

/// <summary>
/// 匹配成功消息(generated by shine)
/// </summary>
public class FuncMatchSuccessResponse:FuncSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.FuncMatchSuccess;
	
	/// <summary>
	/// 匹配序号
	/// </summary>
	public int index;
	
	/// <summary>
	/// 匹配数据组
	/// </summary>
	public PlayerMatchData[] matchDatas;
	
	public FuncMatchSuccessResponse()
	{
		_dataID=GameResponseType.FuncMatchSuccess;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		GameC.scene.onMatchSuccess(funcID,index,matchDatas);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FuncMatchSuccessResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.index=stream.readInt();
		
		int matchDatasLen=stream.readLen();
		if(this.matchDatas==null || this.matchDatas.Length!=matchDatasLen)
		{
			this.matchDatas=new PlayerMatchData[matchDatasLen];
		}
		PlayerMatchData[] matchDatasT=this.matchDatas;
		for(int matchDatasI=0;matchDatasI<matchDatasLen;++matchDatasI)
		{
			PlayerMatchData matchDatasV;
			BaseData matchDatasVT=stream.readDataFullNotNull();
			if(matchDatasVT!=null)
			{
				if(matchDatasVT is PlayerMatchData)
				{
					matchDatasV=(PlayerMatchData)matchDatasVT;
				}
				else
				{
					matchDatasV=new PlayerMatchData();
					if(!(matchDatasVT.GetType().IsAssignableFrom(typeof(PlayerMatchData))))
					{
						stream.throwTypeReadError(typeof(PlayerMatchData),matchDatasVT.GetType());
					}
					matchDatasV.shadowCopy(matchDatasVT);
				}
			}
			else
			{
				matchDatasV=null;
			}
			
			matchDatasT[matchDatasI]=matchDatasV;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.index=stream.readInt();
		
		int matchDatasLen=stream.readLen();
		if(this.matchDatas==null || this.matchDatas.Length!=matchDatasLen)
		{
			this.matchDatas=new PlayerMatchData[matchDatasLen];
		}
		PlayerMatchData[] matchDatasT=this.matchDatas;
		for(int matchDatasI=0;matchDatasI<matchDatasLen;++matchDatasI)
		{
			PlayerMatchData matchDatasV;
			matchDatasV=(PlayerMatchData)stream.readDataSimpleNotNull();
			
			matchDatasT[matchDatasI]=matchDatasV;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("index");
		writer.sb.Append(':');
		writer.sb.Append(this.index);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("matchDatas");
		writer.sb.Append(':');
		writer.sb.Append("Array<PlayerMatchData>");
		if(this.matchDatas!=null)
		{
			PlayerMatchData[] matchDatasT=this.matchDatas;
			int matchDatasLen=matchDatasT.Length;
			writer.sb.Append('(');
			writer.sb.Append(matchDatasLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int matchDatasI=0;matchDatasI<matchDatasLen;++matchDatasI)
			{
				PlayerMatchData matchDatasV=matchDatasT[matchDatasI];
				writer.writeTabs();
				writer.sb.Append(matchDatasI);
				writer.sb.Append(':');
				if(matchDatasV!=null)
				{
					matchDatasV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("PlayerMatchData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.index=0;
		this.matchDatas=null;
	}
	
}
