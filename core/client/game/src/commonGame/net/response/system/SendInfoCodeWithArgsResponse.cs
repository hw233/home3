using ShineEngine;

/// <summary>
/// 推送带参信息码消息(generated by shine)
/// </summary>
public class SendInfoCodeWithArgsResponse:GameResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.SendInfoCodeWithArgs;
	
	/// <summary>
	/// 码
	/// </summary>
	public int code;
	
	/// <summary>
	/// 参数组
	/// </summary>
	public string[] args;
	
	public SendInfoCodeWithArgsResponse()
	{
		_dataID=GameResponseType.SendInfoCodeWithArgs;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		GameC.info.toShowInfoCode(code,true,args);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "SendInfoCodeWithArgsResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.code=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.Length!=argsLen)
		{
			this.args=new string[argsLen];
		}
		string[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			string argsV;
			argsV=stream.readUTF();
			
			argsT[argsI]=argsV;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.code=stream.readInt();
		
		int argsLen=stream.readLen();
		if(this.args==null || this.args.Length!=argsLen)
		{
			this.args=new string[argsLen];
		}
		string[] argsT=this.args;
		for(int argsI=0;argsI<argsLen;++argsI)
		{
			string argsV;
			argsV=stream.readUTF();
			
			argsT[argsI]=argsV;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("code");
		writer.sb.Append(':');
		writer.sb.Append(this.code);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("args");
		writer.sb.Append(':');
		writer.sb.Append("Array<string>");
		if(this.args!=null)
		{
			string[] argsT=this.args;
			int argsLen=argsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(argsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				string argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.Append(argsI);
				writer.sb.Append(':');
				writer.sb.Append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.code=0;
		this.args=null;
	}
	
}
