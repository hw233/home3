using ShineEngine;

/// <summary>
/// 中心服转发消息(generated by shine)
/// </summary>
public class CenterTransGameToClientResponse:GameResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.CenterTransGameToClient;
	
	public CenterTransGameToClientResponse()
	{
		_dataID=GameResponseType.CenterTransGameToClient;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		
	}
	
	public override BaseResponse readFromStream(BytesReadStream stream)
	{
		int mid=stream.natureReadUnsignedShort();

		BaseResponse response=GameC.server.createResponse(mid);

		if(response==null)
		{
			if(ShineSetting.needMessageExistCheck)
			{
				Ctrl.throwError("未解析mid为" + mid + "的协议");
			}

			return null;
		}

		response.socket=socket;

		//从流读取
		response.readFromStream(stream);

		return response;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "CenterTransGameToClientResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		stream.endReadObj();
	}
	
}
