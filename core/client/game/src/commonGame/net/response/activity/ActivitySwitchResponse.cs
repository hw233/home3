using ShineEngine;

/// <summary>
/// 活动开启/关闭消息(generated by shine)
/// </summary>
public class ActivitySwitchResponse:GameResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.ActivitySwitch;
	
	/// <summary>
	/// 活动ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 是否开启
	/// </summary>
	public bool isRunning;
	
	/// <summary>
	/// 上次触发时间
	/// </summary>
	public long lastTurnTime;
	
	/// <summary>
	/// 下次触发时间
	/// </summary>
	public long nextTurnTime;
	
	/// <summary>
	/// 是否到时间自然触发
	/// </summary>
	public bool atTime;
	
	public ActivitySwitchResponse()
	{
		_dataID=GameResponseType.ActivitySwitch;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ActivitySwitchResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.isRunning=stream.readBoolean();
		
		this.lastTurnTime=stream.readLong();
		
		this.nextTurnTime=stream.readLong();
		
		this.atTime=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.isRunning=stream.readBoolean();
		
		this.lastTurnTime=stream.readLong();
		
		this.nextTurnTime=stream.readLong();
		
		this.atTime=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isRunning");
		writer.sb.Append(':');
		writer.sb.Append(this.isRunning);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("lastTurnTime");
		writer.sb.Append(':');
		writer.sb.Append(this.lastTurnTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("nextTurnTime");
		writer.sb.Append(':');
		writer.sb.Append(this.nextTurnTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("atTime");
		writer.sb.Append(':');
		writer.sb.Append(this.atTime);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		me.activity.onActivitySwitchByServer(id,isRunning,lastTurnTime,nextTurnTime,atTime);
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.id=0;
		this.isRunning=false;
		this.lastTurnTime=0L;
		this.nextTurnTime=0L;
		this.atTime=false;
	}
	
}
