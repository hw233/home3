using ShineEngine;

/// <summary>
/// 回复角色列表消息(generated by shine)
/// </summary>
public class RePlayerListResponse:GameResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.RePlayerList;
	
	/// <summary>
	/// 角色列表
	/// </summary>
	public SList<PlayerLoginData> roles;
	
	/// <summary>
	/// 服务器出生码
	/// </summary>
	public int serverBornCode;
	
	public RePlayerListResponse()
	{
		_dataID=GameResponseType.RePlayerList;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		GameC.main.onRePlayerList(roles,serverBornCode);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RePlayerListResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int rolesLen=stream.readLen();
		if(this.roles!=null)
		{
			this.roles.clear();
			this.roles.ensureCapacity(rolesLen);
		}
		else
		{
			this.roles=new SList<PlayerLoginData>();
		}
		
		SList<PlayerLoginData> rolesT=this.roles;
		for(int rolesI=rolesLen-1;rolesI>=0;--rolesI)
		{
			PlayerLoginData rolesV;
			BaseData rolesVT=stream.readDataFullNotNull();
			if(rolesVT!=null)
			{
				if(rolesVT is PlayerLoginData)
				{
					rolesV=(PlayerLoginData)rolesVT;
				}
				else
				{
					rolesV=new PlayerLoginData();
					if(!(rolesVT.GetType().IsAssignableFrom(typeof(PlayerLoginData))))
					{
						stream.throwTypeReadError(typeof(PlayerLoginData),rolesVT.GetType());
					}
					rolesV.shadowCopy(rolesVT);
				}
			}
			else
			{
				rolesV=null;
			}
			
			rolesT.add(rolesV);
		}
		
		this.serverBornCode=stream.readInt();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		int rolesLen=stream.readLen();
		if(this.roles!=null)
		{
			this.roles.clear();
			this.roles.ensureCapacity(rolesLen);
		}
		else
		{
			this.roles=new SList<PlayerLoginData>();
		}
		
		SList<PlayerLoginData> rolesT=this.roles;
		for(int rolesI=rolesLen-1;rolesI>=0;--rolesI)
		{
			PlayerLoginData rolesV;
			rolesV=(PlayerLoginData)stream.readDataSimpleNotNull();
			
			rolesT.add(rolesV);
		}
		
		this.serverBornCode=stream.readInt();
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("roles");
		writer.sb.Append(':');
		writer.sb.Append("List<PlayerLoginData>");
		if(this.roles!=null)
		{
			SList<PlayerLoginData> rolesT=this.roles;
			int rolesLen=rolesT.size();
			writer.sb.Append('(');
			writer.sb.Append(rolesLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int rolesI=0;rolesI<rolesLen;++rolesI)
			{
				PlayerLoginData rolesV=rolesT.get(rolesI);
				writer.writeTabs();
				writer.sb.Append(rolesI);
				writer.sb.Append(':');
				if(rolesV!=null)
				{
					rolesV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("PlayerLoginData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("serverBornCode");
		writer.sb.Append(':');
		writer.sb.Append(this.serverBornCode);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.roles=null;
		this.serverBornCode=0;
	}
	
}
