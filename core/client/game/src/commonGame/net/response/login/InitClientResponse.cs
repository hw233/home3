using ShineEngine;

/// <summary>
/// 初始化客户端消息(ClientListData)(此处需要使用copy,因工具已改为潜拷,为了逻辑层避开深拷问题)(generated by shine)
/// </summary>
public class InitClientResponse:GameResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.InitClient;
	
	/// <summary>
	/// 配置热更数据
	/// </summary>
	public byte[] configHotfix;
	
	/// <summary>
	/// 客户端列表数据
	/// </summary>
	public BaseData listData;
	
	public InitClientResponse()
	{
		_dataID=GameResponseType.InitClient;
		setLongMessage();
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		BaseC.config.loadHotfix(configHotfix);
		GameC.main.initClient((PlayerListData)listData,true);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "InitClientResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		BaseData listDataT=stream.readDataFullNotNull();
		if(listDataT!=null)
		{
			if(listDataT is BaseData)
			{
				this.listData=(BaseData)listDataT;
			}
			else
			{
				this.listData=new BaseData();
				if(!(listDataT.GetType().IsAssignableFrom(typeof(BaseData))))
				{
					stream.throwTypeReadError(typeof(BaseData),listDataT.GetType());
				}
				this.listData.shadowCopy(listDataT);
			}
		}
		else
		{
			this.listData=null;
		}
		
		if(stream.readBoolean())
		{
			int configHotfixLen=stream.readLen();
			this.configHotfix=stream.readByteArr(configHotfixLen);
		}
		else
		{
			this.configHotfix=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.listData=(BaseData)stream.readDataSimpleNotNull();
		
		if(stream.readBoolean())
		{
			int configHotfixLen=stream.readLen();
			this.configHotfix=stream.readByteArr(configHotfixLen);
		}
		else
		{
			this.configHotfix=null;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("listData");
		writer.sb.Append(':');
		if(this.listData!=null)
		{
			this.listData.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("BaseData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("configHotfix");
		writer.sb.Append(':');
		writer.sb.Append("Array<byte>");
		if(this.configHotfix!=null)
		{
			byte[] configHotfixT=this.configHotfix;
			int configHotfixLen=configHotfixT.Length;
			writer.sb.Append('(');
			writer.sb.Append(configHotfixLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int configHotfixI=0;configHotfixI<configHotfixLen;++configHotfixI)
			{
				byte configHotfixV=configHotfixT[configHotfixI];
				writer.writeTabs();
				writer.sb.Append(configHotfixI);
				writer.sb.Append(':');
				writer.sb.Append(configHotfixV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.listData=null;
		this.configHotfix=null;
	}
	
}
