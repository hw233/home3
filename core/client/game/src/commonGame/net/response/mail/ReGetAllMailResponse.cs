using ShineEngine;

/// <summary>
/// 回复获取全部邮件消息(generated by shine)
/// </summary>
public class ReGetAllMailResponse:GameResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.ReGetAllMail;
	
	/// <summary>
	/// 数据
	/// </summary>
	public SList<MailData> list;
	
	public ReGetAllMailResponse()
	{
		_dataID=GameResponseType.ReGetAllMail;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		me.mail.onReGetAllMails(list);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "ReGetAllMailResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int listLen=stream.readLen();
		if(this.list!=null)
		{
			this.list.clear();
			this.list.ensureCapacity(listLen);
		}
		else
		{
			this.list=new SList<MailData>();
		}
		
		SList<MailData> listT=this.list;
		for(int listI=listLen-1;listI>=0;--listI)
		{
			MailData listV;
			BaseData listVT=stream.readDataFullNotNull();
			if(listVT!=null)
			{
				if(listVT is MailData)
				{
					listV=(MailData)listVT;
				}
				else
				{
					listV=new MailData();
					if(!(listVT.GetType().IsAssignableFrom(typeof(MailData))))
					{
						stream.throwTypeReadError(typeof(MailData),listVT.GetType());
					}
					listV.shadowCopy(listVT);
				}
			}
			else
			{
				listV=null;
			}
			
			listT.add(listV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		int listLen=stream.readLen();
		if(this.list!=null)
		{
			this.list.clear();
			this.list.ensureCapacity(listLen);
		}
		else
		{
			this.list=new SList<MailData>();
		}
		
		SList<MailData> listT=this.list;
		for(int listI=listLen-1;listI>=0;--listI)
		{
			MailData listV;
			listV=(MailData)stream.readDataSimpleNotNull();
			
			listT.add(listV);
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("list");
		writer.sb.Append(':');
		writer.sb.Append("List<MailData>");
		if(this.list!=null)
		{
			SList<MailData> listT=this.list;
			int listLen=listT.size();
			writer.sb.Append('(');
			writer.sb.Append(listLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int listI=0;listI<listLen;++listI)
			{
				MailData listV=listT.get(listI);
				writer.writeTabs();
				writer.sb.Append(listI);
				writer.sb.Append(':');
				if(listV!=null)
				{
					listV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("MailData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.list=null;
	}
	
}
