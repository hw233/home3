using ShineEngine;

/// <summary>
/// 单位释放技能结束(强制结束)(generated by shine)
/// </summary>
public class UnitSkillOverResponse:UnitSResponse
{
	/// <summary>
	/// 是否需要中断指令
	/// </summary>
	public bool needBreak;
	
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.UnitSkillOver;
	
	public UnitSkillOverResponse()
	{
		_dataID=GameResponseType.UnitSkillOver;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		unit.fight.onServerStopSkill(needBreak);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitSkillOverResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.needBreak=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.needBreak=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("needBreak");
		writer.sb.Append(':');
		writer.sb.Append(this.needBreak);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.needBreak=false;
	}
	
}
