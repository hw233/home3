using ShineEngine;

/// <summary>
/// 单位特殊移动消息(generated by shine)
/// </summary>
public class UnitSpecialMoveResponse:UnitSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.UnitSpecialMove;
	
	/// <summary>
	/// 特殊移动ID
	/// </summary>
	public int id;
	
	/// <summary>
	/// 当前位置
	/// </summary>
	public PosDirData posDir;
	
	/// <summary>
	/// 基元移动点位置
	/// </summary>
	public PosData baseMovePos;
	
	/// <summary>
	/// 特殊移动剩余时间
	/// </summary>
	public int specialMoveLastTime;
	
	/// <summary>
	/// 参数组
	/// </summary>
	public int[] args;
	
	public UnitSpecialMoveResponse()
	{
		_dataID=GameResponseType.UnitSpecialMove;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		unit.move.onServerSpecialMove(posDir,id,args,specialMoveLastTime,baseMovePos);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitSpecialMoveResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.id=stream.readInt();
		
		this.posDir=(PosDirData)stream.createData(PosDirData.dataID);
		this.posDir.readBytesFull(stream);
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new int[argsLen];
			}
			int[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV;
				argsV=stream.readInt();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		this.specialMoveLastTime=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.baseMovePos=(PosData)stream.createData(PosData.dataID);
			this.baseMovePos.readBytesFull(stream);
		}
		else
		{
			this.baseMovePos=null;
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.id=stream.readInt();
		
		this.posDir=(PosDirData)stream.createData(PosDirData.dataID);
		this.posDir.readBytesSimple(stream);
		
		if(stream.readBoolean())
		{
			int argsLen=stream.readLen();
			if(this.args==null || this.args.Length!=argsLen)
			{
				this.args=new int[argsLen];
			}
			int[] argsT=this.args;
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV;
				argsV=stream.readInt();
				
				argsT[argsI]=argsV;
			}
		}
		else
		{
			this.args=null;
		}
		
		this.specialMoveLastTime=stream.readInt();
		
		if(stream.readBoolean())
		{
			this.baseMovePos=(PosData)stream.createData(PosData.dataID);
			this.baseMovePos.readBytesSimple(stream);
		}
		else
		{
			this.baseMovePos=null;
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("id");
		writer.sb.Append(':');
		writer.sb.Append(this.id);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("posDir");
		writer.sb.Append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("args");
		writer.sb.Append(':');
		writer.sb.Append("Array<int>");
		if(this.args!=null)
		{
			int[] argsT=this.args;
			int argsLen=argsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(argsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int argsI=0;argsI<argsLen;++argsI)
			{
				int argsV=argsT[argsI];
				writer.writeTabs();
				writer.sb.Append(argsI);
				writer.sb.Append(':');
				writer.sb.Append(argsV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("specialMoveLastTime");
		writer.sb.Append(':');
		writer.sb.Append(this.specialMoveLastTime);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("baseMovePos");
		writer.sb.Append(':');
		if(this.baseMovePos!=null)
		{
			this.baseMovePos.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.id=0;
		this.posDir=null;
		this.args=null;
		this.specialMoveLastTime=0;
		this.baseMovePos=null;
	}
	
}
