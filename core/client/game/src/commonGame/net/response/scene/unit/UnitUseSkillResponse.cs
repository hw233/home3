using ShineEngine;

/// <summary>
/// 单位使用技能(generated by shine)
/// </summary>
public class UnitUseSkillResponse:UnitSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.UnitUseSkill;
	
	/// <summary>
	/// 技能ID
	/// </summary>
	public int skillID;
	
	/// <summary>
	/// 技能等级
	/// </summary>
	public int skillLevel;
	
	/// <summary>
	/// 当前单位位置数据
	/// </summary>
	public PosDirData posDir;
	
	/// <summary>
	/// 目标数据
	/// </summary>
	public SkillTargetData targetData;
	
	public UnitUseSkillResponse()
	{
		_dataID=GameResponseType.UnitUseSkill;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		unit.fight.onServerUseSkill(skillID,skillLevel,targetData,posDir);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitUseSkillResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.skillID=stream.readInt();
		
		this.skillLevel=stream.readInt();
		
		BaseData targetDataT=stream.readDataFullNotNull();
		if(targetDataT!=null)
		{
			if(targetDataT is SkillTargetData)
			{
				this.targetData=(SkillTargetData)targetDataT;
			}
			else
			{
				this.targetData=new SkillTargetData();
				if(!(targetDataT.GetType().IsAssignableFrom(typeof(SkillTargetData))))
				{
					stream.throwTypeReadError(typeof(SkillTargetData),targetDataT.GetType());
				}
				this.targetData.shadowCopy(targetDataT);
			}
		}
		else
		{
			this.targetData=null;
		}
		
		this.posDir=(PosDirData)stream.createData(PosDirData.dataID);
		this.posDir.readBytesFull(stream);
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.skillID=stream.readInt();
		
		this.skillLevel=stream.readInt();
		
		this.targetData=(SkillTargetData)stream.readDataSimpleNotNull();
		
		this.posDir=(PosDirData)stream.createData(PosDirData.dataID);
		this.posDir.readBytesSimple(stream);
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("skillID");
		writer.sb.Append(':');
		writer.sb.Append(this.skillID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("skillLevel");
		writer.sb.Append(':');
		writer.sb.Append(this.skillLevel);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("targetData");
		writer.sb.Append(':');
		if(this.targetData!=null)
		{
			this.targetData.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("posDir");
		writer.sb.Append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosDirData=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.skillID=0;
		this.skillLevel=0;
		this.targetData=null;
		this.posDir=null;
	}
	
}
