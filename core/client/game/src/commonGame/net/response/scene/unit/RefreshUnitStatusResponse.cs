using ShineEngine;

/// <summary>
/// 刷新单位状态(generated by shine)
/// </summary>
public class RefreshUnitStatusResponse:UnitSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.RefreshUnitStatus;
	
	/// <summary>
	/// 改变的状态组
	/// </summary>
	public IntBooleanMap status;
	
	public RefreshUnitStatusResponse()
	{
		_dataID=GameResponseType.RefreshUnitStatus;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		unit.fight.getDataLogic().status.setStatusByServer(status);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "RefreshUnitStatusResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		int statusLen=stream.readLen();
		if(this.status!=null)
		{
			this.status.clear();
			this.status.ensureCapacity(statusLen);
		}
		else
		{
			this.status=new IntBooleanMap(statusLen);
		}
		
		IntBooleanMap statusT=this.status;
		for(int statusI=statusLen-1;statusI>=0;--statusI)
		{
			int statusK;
			bool statusV;
			statusK=stream.readInt();
			
			statusV=stream.readBoolean();
			
			statusT.put(statusK,statusV);
		}
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		int statusLen=stream.readLen();
		if(this.status!=null)
		{
			this.status.clear();
			this.status.ensureCapacity(statusLen);
		}
		else
		{
			this.status=new IntBooleanMap(statusLen);
		}
		
		IntBooleanMap statusT=this.status;
		for(int statusI=statusLen-1;statusI>=0;--statusI)
		{
			int statusK;
			bool statusV;
			statusK=stream.readInt();
			
			statusV=stream.readBoolean();
			
			statusT.put(statusK,statusV);
		}
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("status");
		writer.sb.Append(':');
		writer.sb.Append("Map<int,bool>");
		if(this.status!=null)
		{
			writer.sb.Append('(');
			writer.sb.Append(this.status.size());
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.status.isEmpty())
			{
				int statusKFreeValue=this.status.getFreeValue();
				int[] statusKKeys=this.status.getKeys();
				bool[] statusVValues=this.status.getValues();
				for(int statusKI=statusKKeys.Length-1;statusKI>=0;--statusKI)
				{
					int statusK=statusKKeys[statusKI];
					if(statusK!=statusKFreeValue)
					{
						bool statusV=statusVValues[statusKI];
						writer.writeTabs();
						writer.sb.Append(statusK);
						
						writer.sb.Append(':');
						writer.sb.Append(statusV);
						
						writer.writeEnter();
					}
				}
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.status=null;
	}
	
}
