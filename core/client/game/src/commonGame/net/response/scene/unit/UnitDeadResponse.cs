using ShineEngine;

/// <summary>
/// 单位死亡消息(generated by shine)
/// </summary>
public class UnitDeadResponse:UnitSResponse
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameResponseType.UnitDead;
	
	/// <summary>
	/// 死亡类型
	/// </summary>
	public int type;
	
	/// <summary>
	/// 是否真死亡(否则就是死后复活)
	/// </summary>
	public bool isReal;
	
	/// <summary>
	/// 击杀者实例ID
	/// </summary>
	public int attackerInstanceID;
	
	public UnitDeadResponse()
	{
		_dataID=GameResponseType.UnitDead;
	}
	
	/// <summary>
	/// 执行
	/// </summary>
	protected override void execute()
	{
		unit.fight.onDead(scene.getFightUnit(attackerInstanceID),type,isReal);
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "UnitDeadResponse";
	}
	
	/// <summary>
	/// 读取字节流(完整版)
	/// </summary>
	protected override void toReadBytesFull(BytesReadStream stream)
	{
		base.toReadBytesFull(stream);
		
		stream.startReadObj();
		
		this.attackerInstanceID=stream.readInt();
		
		this.type=stream.readInt();
		
		this.isReal=stream.readBoolean();
		
		stream.endReadObj();
	}
	
	/// <summary>
	/// 读取字节流(简版)
	/// </summary>
	protected override void toReadBytesSimple(BytesReadStream stream)
	{
		base.toReadBytesSimple(stream);
		
		this.attackerInstanceID=stream.readInt();
		
		this.type=stream.readInt();
		
		this.isReal=stream.readBoolean();
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("attackerInstanceID");
		writer.sb.Append(':');
		writer.sb.Append(this.attackerInstanceID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("type");
		writer.sb.Append(':');
		writer.sb.Append(this.type);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isReal");
		writer.sb.Append(':');
		writer.sb.Append(this.isReal);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.attackerInstanceID=0;
		this.type=0;
		this.isReal=false;
	}
	
}
