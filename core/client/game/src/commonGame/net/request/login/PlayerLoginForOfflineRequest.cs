using ShineEngine;

/// <summary>
/// 离线角色登录消息(generated by shine)
/// </summary>
public class PlayerLoginForOfflineRequest:PlayerLoginRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameRequestType.PlayerLoginForOffline;
	
	/// <summary>
	/// 离线记录组
	/// </summary>
	public SList<ClientOfflineWorkData> records;
	
	/// <summary>
	/// 当前客户端种子序号
	/// </summary>
	public int clientRandomSeedIndex;
	
	public PlayerLoginForOfflineRequest()
	{
		_dataID=GameRequestType.PlayerLoginForOffline;
		setLongMessage();
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "PlayerLoginForOfflineRequest";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("records");
		writer.sb.Append(':');
		writer.sb.Append("List<ClientOfflineWorkData>");
		if(this.records!=null)
		{
			SList<ClientOfflineWorkData> recordsT=this.records;
			int recordsLen=recordsT.size();
			writer.sb.Append('(');
			writer.sb.Append(recordsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int recordsI=0;recordsI<recordsLen;++recordsI)
			{
				ClientOfflineWorkData recordsV=recordsT.get(recordsI);
				writer.writeTabs();
				writer.sb.Append(recordsI);
				writer.sb.Append(':');
				if(recordsV!=null)
				{
					recordsV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("ClientOfflineWorkData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("clientRandomSeedIndex");
		writer.sb.Append(':');
		writer.sb.Append(this.clientRandomSeedIndex);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.records!=null)
		{
			stream.writeLen(this.records.size());
			if(!this.records.isEmpty())
			{
				ClientOfflineWorkData[] recordsVValues=this.records.getValues();
				for(int recordsVI=0,recordsVLen=this.records.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=recordsVValues[recordsVI];
					if(recordsV!=null)
					{
						stream.writeDataFullNotNull(recordsV);
					}
					else
					{
						nullObjError("recordsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("records");
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.records!=null)
		{
			stream.writeLen(this.records.size());
			if(!this.records.isEmpty())
			{
				ClientOfflineWorkData[] recordsVValues=this.records.getValues();
				for(int recordsVI=0,recordsVLen=this.records.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=recordsVValues[recordsVI];
					if(recordsV!=null)
					{
						stream.writeDataSimpleNotNull(recordsV);
					}
					else
					{
						nullObjError("recordsV");
					}
					
				}
			}
		}
		else
		{
			nullObjError("records");
		}
		
		stream.writeInt(this.clientRandomSeedIndex);
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		if(this.records!=null)
		{
			if(!this.records.isEmpty())
			{
				ClientOfflineWorkData[] recordsVValues=this.records.getValues();
				for(int recordsVI=0,recordsVLen=this.records.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=recordsVValues[recordsVI];
					recordsV.release(pool);
					recordsV=null;
					recordsVValues[recordsVI]=null;
				}
			}
			this.records.justClearSize();
		}
		this.clientRandomSeedIndex=0;
	}
	
	protected override void copyData()
	{
		base.copyData();
		SList<ClientOfflineWorkData> recordsTemp=records;
		if(recordsTemp!=null)
		{
			this.records=new SList<ClientOfflineWorkData>();
			SList<ClientOfflineWorkData> recordsT=this.records;
			if(!recordsTemp.isEmpty())
			{
				ClientOfflineWorkData[] recordsVValues=recordsTemp.getValues();
				for(int recordsVI=0,recordsVLen=recordsTemp.length();recordsVI<recordsVLen;++recordsVI)
				{
					ClientOfflineWorkData recordsV=recordsVValues[recordsVI];
					ClientOfflineWorkData recordsU;
					if(recordsV!=null)
					{
						recordsU=(ClientOfflineWorkData)recordsV.clone();
					}
					else
					{
						recordsU=null;
						nullObjError("recordsU");
					}
					
					recordsT.add(recordsU);
				}
			}
		}
		else
		{
			this.records=null;
			nullObjError("records");
		}
		
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static PlayerLoginForOfflineRequest create(long playerID,SList<ClientOfflineWorkData> records,int clientRandomSeedIndex)
	{
		PlayerLoginForOfflineRequest re=(PlayerLoginForOfflineRequest)BytesControl.createRequest(dataID);
		re.playerID=playerID;
		re.records=records;
		re.clientRandomSeedIndex=clientRandomSeedIndex;
		return re;
	}
	
}
