using ShineEngine;

/// <summary>
/// 拍卖行查询(generated by shine)
/// </summary>
public class FuncAuctionQueryRequest:FuncRRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameRequestType.FuncAuctionQuery;
	
	/// <summary>
	/// 查询条件组(如为空则取上次条件组)
	/// </summary>
	public AuctionQueryConditionData[] conditions;
	
	/// <summary>
	/// 结果页码
	/// </summary>
	public int page;
	
	public FuncAuctionQueryRequest()
	{
		_dataID=GameRequestType.FuncAuctionQuery;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FuncAuctionQueryRequest";
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		if(this.conditions!=null)
		{
			stream.writeBoolean(true);
			AuctionQueryConditionData[] conditionsT=this.conditions;
			stream.writeLen(conditionsT.Length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.Length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				AuctionQueryConditionData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					stream.writeBoolean(true);
					stream.writeDataFullNotNull(conditionsV);
				}
				else
				{
					stream.writeBoolean(false);
				}
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.page);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		if(this.conditions!=null)
		{
			stream.writeBoolean(true);
			AuctionQueryConditionData[] conditionsT=this.conditions;
			stream.writeLen(conditionsT.Length);
			for(int conditionsVI=0,conditionsVLen=conditionsT.Length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				AuctionQueryConditionData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					stream.writeBoolean(true);
					stream.writeDataSimpleNotNull(conditionsV);
				}
				else
				{
					stream.writeBoolean(false);
				}
				
			}
		}
		else
		{
			stream.writeBoolean(false);
		}
		
		stream.writeInt(this.page);
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("conditions");
		writer.sb.Append(':');
		writer.sb.Append("Array<AuctionQueryConditionData>");
		if(this.conditions!=null)
		{
			AuctionQueryConditionData[] conditionsT=this.conditions;
			int conditionsLen=conditionsT.Length;
			writer.sb.Append('(');
			writer.sb.Append(conditionsLen);
			writer.sb.Append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				AuctionQueryConditionData conditionsV=conditionsT[conditionsI];
				writer.writeTabs();
				writer.sb.Append(conditionsI);
				writer.sb.Append(':');
				if(conditionsV!=null)
				{
					conditionsV.writeDataString(writer);
				}
				else
				{
					writer.sb.Append("AuctionQueryConditionData=null");
				}
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
		}
		else
		{
			writer.sb.Append("=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("page");
		writer.sb.Append(':');
		writer.sb.Append(this.page);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		if(this.conditions!=null)
		{
			AuctionQueryConditionData[] conditionsT=this.conditions;
			for(int conditionsVI=0,conditionsVLen=conditionsT.Length;conditionsVI<conditionsVLen;++conditionsVI)
			{
				AuctionQueryConditionData conditionsV=conditionsT[conditionsVI];
				if(conditionsV!=null)
				{
					conditionsV.release(pool);
					conditionsV=null;
				}
				conditionsT[conditionsVI]=null;
			}
		}
		this.page=0;
	}
	
	protected override void copyData()
	{
		base.copyData();
		AuctionQueryConditionData[] conditionsTemp=conditions;
		if(conditionsTemp!=null)
		{
			AuctionQueryConditionData[] conditionsR=conditionsTemp;
			int conditionsLen=conditionsR.Length;
			this.conditions=new AuctionQueryConditionData[conditionsLen];
			AuctionQueryConditionData[] conditionsT=this.conditions;
			for(int conditionsI=0;conditionsI<conditionsLen;++conditionsI)
			{
				AuctionQueryConditionData conditionsV=conditionsR[conditionsI];
				AuctionQueryConditionData conditionsU;
				if(conditionsV!=null)
				{
					conditionsU=(AuctionQueryConditionData)conditionsV.clone();
				}
				else
				{
					conditionsU=null;
				}
				
				conditionsT[conditionsI]=conditionsU;
			}
		}
		else
		{
			this.conditions=null;
		}
		
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static FuncAuctionQueryRequest create(int funcID,AuctionQueryConditionData[] conditions,int page)
	{
		FuncAuctionQueryRequest re=(FuncAuctionQueryRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.conditions=conditions;
		re.page=page;
		return re;
	}
	
}
