using ShineEngine;

/// <summary>
/// 移动装备消息(generated by shine)
/// </summary>
public class FuncMoveEquipRequest:FuncRRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameRequestType.FuncMoveEquip;
	
	public int fromSlot;
	
	public int toSlot;
	
	public FuncMoveEquipRequest()
	{
		_dataID=GameRequestType.FuncMoveEquip;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "FuncMoveEquipRequest";
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.fromSlot);
		
		stream.writeInt(this.toSlot);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.fromSlot);
		
		stream.writeInt(this.toSlot);
		
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("fromSlot");
		writer.sb.Append(':');
		writer.sb.Append(this.fromSlot);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("toSlot");
		writer.sb.Append(':');
		writer.sb.Append(this.toSlot);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.fromSlot=0;
		this.toSlot=0;
	}
	
	protected override void copyData()
	{
		base.copyData();
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static FuncMoveEquipRequest create(int funcID,int fromSlot,int toSlot)
	{
		FuncMoveEquipRequest re=(FuncMoveEquipRequest)BytesControl.createRequest(dataID);
		re.funcID=funcID;
		re.fromSlot=fromSlot;
		re.toSlot=toSlot;
		return re;
	}
	
}
