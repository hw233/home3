using ShineEngine;

/// <summary>
/// 玩家单位使用技能(generated by shine)
/// </summary>
public class CUnitUseSkillRequest:CUnitRRequest
{
	/// <summary>
	/// 数据类型ID
	/// </summary>
	public const int dataID=GameRequestType.CUnitUseSkill;
	
	/// <summary>
	/// 技能ID
	/// </summary>
	public int skillID;
	
	/// <summary>
	/// 目标数据
	/// </summary>
	public SkillTargetData targetData;
	
	/// <summary>
	/// 是否强制当前技能
	/// </summary>
	public bool isSuspend;
	
	/// <summary>
	/// 当前单位位置数据
	/// </summary>
	public PosDirData posDir;
	
	public CUnitUseSkillRequest()
	{
		_dataID=GameRequestType.CUnitUseSkill;
	}
	
	/// <summary>
	/// 获取数据类名
	/// </summary>
	public override string getDataClassName()
	{
		return "CUnitUseSkillRequest";
	}
	
	/// <summary>
	/// 转文本输出
	/// </summary>
	protected override void toWriteDataString(DataWriter writer)
	{
		base.toWriteDataString(writer);
		
		writer.writeTabs();
		writer.sb.Append("skillID");
		writer.sb.Append(':');
		writer.sb.Append(this.skillID);
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("targetData");
		writer.sb.Append(':');
		if(this.targetData!=null)
		{
			this.targetData.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("SkillTargetData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("posDir");
		writer.sb.Append(':');
		if(this.posDir!=null)
		{
			this.posDir.writeDataString(writer);
		}
		else
		{
			writer.sb.Append("PosDirData=null");
		}
		
		writer.writeEnter();
		writer.writeTabs();
		writer.sb.Append("isSuspend");
		writer.sb.Append(':');
		writer.sb.Append(this.isSuspend);
		
		writer.writeEnter();
	}
	
	/// <summary>
	/// 写入字节流(完整版)
	/// </summary>
	protected override void toWriteBytesFull(BytesWriteStream stream)
	{
		base.toWriteBytesFull(stream);
		
		stream.startWriteObj();
		
		stream.writeInt(this.skillID);
		
		if(this.targetData!=null)
		{
			stream.writeDataFullNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		if(this.posDir!=null)
		{
			this.posDir.writeBytesFull(stream);
		}
		else
		{
			nullObjError("posDir");
		}
		
		stream.writeBoolean(this.isSuspend);
		
		stream.endWriteObj();
	}
	
	/// <summary>
	/// 写入字节流(简版)
	/// </summary>
	protected override void toWriteBytesSimple(BytesWriteStream stream)
	{
		base.toWriteBytesSimple(stream);
		
		stream.writeInt(this.skillID);
		
		if(this.targetData!=null)
		{
			stream.writeDataSimpleNotNull(this.targetData);
		}
		else
		{
			nullObjError("targetData");
		}
		
		if(this.posDir!=null)
		{
			this.posDir.writeBytesSimple(stream);
		}
		else
		{
			nullObjError("posDir");
		}
		
		stream.writeBoolean(this.isSuspend);
		
	}
	
	/// <summary>
	/// 回池
	/// </summary>
	protected override void toRelease(DataPool pool)
	{
		base.toRelease(pool);
		
		this.skillID=0;
		this.targetData.release(pool);
		this.targetData=null;
		this.posDir.release(pool);
		this.posDir=null;
		this.isSuspend=false;
	}
	
	protected override void copyData()
	{
		base.copyData();
		SkillTargetData targetDataTemp=targetData;
		if(targetDataTemp!=null)
		{
			this.targetData=(SkillTargetData)targetDataTemp.clone();
		}
		else
		{
			this.targetData=null;
			nullObjError("targetData");
		}
		
		PosDirData posDirTemp=posDir;
		if(posDirTemp!=null)
		{
			this.posDir=(PosDirData)BytesControl.createData(PosDirData.dataID);
			this.posDir.copy(posDirTemp);
		}
		else
		{
			this.posDir=null;
			nullObjError("posDir");
		}
		
	}
	
	/// <summary>
	/// 创建实例
	/// </summary>
	public static CUnitUseSkillRequest create(int instanceID,int skillID,SkillTargetData targetData,PosDirData posDir,bool isSuspend)
	{
		CUnitUseSkillRequest re=(CUnitUseSkillRequest)BytesControl.createRequest(dataID);
		re.instanceID=instanceID;
		re.skillID=skillID;
		re.targetData=targetData;
		re.posDir=posDir;
		re.isSuspend=isSuspend;
		return re;
	}
	
}
