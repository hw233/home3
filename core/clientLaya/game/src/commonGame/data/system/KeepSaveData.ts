namespace Shine
{
	/** 保存数据(启动main过程用)(generated by shine) */
	export class KeepSaveData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.KeepSave;
		
		/** boolean字典 */
		public booleanDic:SMap<number,boolean>;
		
		/** int字典 */
		public intDic:SMap<number,number>;
		
		/** long字典 */
		public longDic:SMap<number,number>;
		
		/** string字典 */
		public stringDic:SMap<string,string>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.KeepSave;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "KeepSaveData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			var booleanDicLen:number=stream.readLen();
			if(this.booleanDic!=null)
			{
				this.booleanDic.clear();
				this.booleanDic.ensureCapacity(booleanDicLen);
			}
			else
			{
				this.booleanDic=new SMap<number,boolean>(booleanDicLen);
			}
			
			var booleanDicT:SMap<number,boolean>=this.booleanDic;
			for(var booleanDicI:number=booleanDicLen-1;booleanDicI>=0;--booleanDicI)
			{
				var booleanDicK:number;
				var booleanDicV:boolean;
				booleanDicK=stream.readInt();
				
				booleanDicV=stream.readBoolean();
				
				booleanDicT.put(booleanDicK,booleanDicV);
			}
			
			var intDicLen:number=stream.readLen();
			if(this.intDic!=null)
			{
				this.intDic.clear();
				this.intDic.ensureCapacity(intDicLen);
			}
			else
			{
				this.intDic=new SMap<number,number>(intDicLen);
			}
			
			var intDicT:SMap<number,number>=this.intDic;
			for(var intDicI:number=intDicLen-1;intDicI>=0;--intDicI)
			{
				var intDicK:number;
				var intDicV:number;
				intDicK=stream.readInt();
				
				intDicV=stream.readInt();
				
				intDicT.put(intDicK,intDicV);
			}
			
			var longDicLen:number=stream.readLen();
			if(this.longDic!=null)
			{
				this.longDic.clear();
				this.longDic.ensureCapacity(longDicLen);
			}
			else
			{
				this.longDic=new SMap<number,number>(longDicLen);
			}
			
			var longDicT:SMap<number,number>=this.longDic;
			for(var longDicI:number=longDicLen-1;longDicI>=0;--longDicI)
			{
				var longDicK:number;
				var longDicV:number;
				longDicK=stream.readInt();
				
				longDicV=stream.readLong();
				
				longDicT.put(longDicK,longDicV);
			}
			
			var stringDicLen:number=stream.readLen();
			if(this.stringDic!=null)
			{
				this.stringDic.clear();
				this.stringDic.ensureCapacity(stringDicLen);
			}
			else
			{
				this.stringDic=new SMap<string,string>(stringDicLen);
			}
			
			var stringDicT:SMap<string,string>=this.stringDic;
			for(var stringDicI:number=stringDicLen-1;stringDicI>=0;--stringDicI)
			{
				var stringDicK:string;
				var stringDicV:string;
				stringDicK=stream.readUTF();
				
				stringDicV=stream.readUTF();
				
				stringDicT.put(stringDicK,stringDicV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLen(this.booleanDic.size());
			if(!this.booleanDic.isEmpty())
			{
				for(var booleanDicK of this.booleanDic.getKeys())
				{
					var booleanDicV:boolean=this.booleanDic.get(booleanDicK);
					stream.writeInt(booleanDicK);
					
					stream.writeBoolean(booleanDicV);
					
				}
			}
			
			stream.writeLen(this.intDic.size());
			if(!this.intDic.isEmpty())
			{
				for(var intDicK of this.intDic.getKeys())
				{
					var intDicV:number=this.intDic.get(intDicK);
					stream.writeInt(intDicK);
					
					stream.writeInt(intDicV);
					
				}
			}
			
			stream.writeLen(this.longDic.size());
			if(!this.longDic.isEmpty())
			{
				for(var longDicK of this.longDic.getKeys())
				{
					var longDicV:number=this.longDic.get(longDicK);
					stream.writeInt(longDicK);
					
					stream.writeLong(longDicV);
					
				}
			}
			
			stream.writeLen(this.stringDic.size());
			if(!this.stringDic.isEmpty())
			{
				for(var stringDicK of this.stringDic.getKeys())
				{
					var stringDicV:string=this.stringDic.get(stringDicK);
					stream.writeUTF(stringDicK);
					
					stream.writeUTF(stringDicV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof KeepSaveData))
				return;
			
			var mData:KeepSaveData=data as KeepSaveData;
			
			this.booleanDic=mData.booleanDic;
			this.intDic=mData.intDic;
			this.longDic=mData.longDic;
			this.stringDic=mData.stringDic;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof KeepSaveData))
				return;
			
			var mData:KeepSaveData=data as KeepSaveData;
			
			if(this.booleanDic!=null)
			{
				this.booleanDic.clear();
				this.booleanDic.ensureCapacity(mData.booleanDic.size());
			}
			else
			{
				this.booleanDic=new SMap<number,boolean>(mData.booleanDic.size());
			}
			
			var booleanDicT:SMap<number,boolean>=this.booleanDic;
			if(!mData.booleanDic.isEmpty())
			{
				for(var booleanDicK of mData.booleanDic.getKeys())
				{
					var booleanDicV:boolean=mData.booleanDic.get(booleanDicK);
					var booleanDicW:number;
					var booleanDicU:boolean;
					booleanDicW=booleanDicK;
					
					booleanDicU=booleanDicV;
					
					booleanDicT.put(booleanDicW,booleanDicU);
				}
			}
			
			if(this.intDic!=null)
			{
				this.intDic.clear();
				this.intDic.ensureCapacity(mData.intDic.size());
			}
			else
			{
				this.intDic=new SMap<number,number>(mData.intDic.size());
			}
			
			var intDicT:SMap<number,number>=this.intDic;
			if(!mData.intDic.isEmpty())
			{
				for(var intDicK of mData.intDic.getKeys())
				{
					var intDicV:number=mData.intDic.get(intDicK);
					var intDicW:number;
					var intDicU:number;
					intDicW=intDicK;
					
					intDicU=intDicV;
					
					intDicT.put(intDicW,intDicU);
				}
			}
			
			if(this.longDic!=null)
			{
				this.longDic.clear();
				this.longDic.ensureCapacity(mData.longDic.size());
			}
			else
			{
				this.longDic=new SMap<number,number>(mData.longDic.size());
			}
			
			var longDicT:SMap<number,number>=this.longDic;
			if(!mData.longDic.isEmpty())
			{
				for(var longDicK of mData.longDic.getKeys())
				{
					var longDicV:number=mData.longDic.get(longDicK);
					var longDicW:number;
					var longDicU:number;
					longDicW=longDicK;
					
					longDicU=longDicV;
					
					longDicT.put(longDicW,longDicU);
				}
			}
			
			if(this.stringDic!=null)
			{
				this.stringDic.clear();
				this.stringDic.ensureCapacity(mData.stringDic.size());
			}
			else
			{
				this.stringDic=new SMap<string,string>(mData.stringDic.size());
			}
			
			var stringDicT:SMap<string,string>=this.stringDic;
			if(!mData.stringDic.isEmpty())
			{
				for(var stringDicK of mData.stringDic.getKeys())
				{
					var stringDicV:string=mData.stringDic.get(stringDicK);
					var stringDicW:string;
					var stringDicU:string;
					stringDicW=stringDicK;
					
					stringDicU=stringDicV;
					
					stringDicT.put(stringDicW,stringDicU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.booleanDic=new SMap<number,boolean>();
			this.intDic=new SMap<number,number>();
			this.longDic=new SMap<number,number>();
			this.stringDic=new SMap<string,string>();
		}
		
	}
}
