namespace Shine
{
	/** 事务发起者数据(generated by shine) */
	export class WorkSenderData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.WorkSender;
		
		/** 事务分配序号(自增) */
		public workInstanceID:number;
		
		/** 已发送事务记录字典 */
		public workRecordDic:SMap<number,WorkData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.WorkSender;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "WorkSenderData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.workInstanceID=stream.readLong();
			
			var workRecordDicLen:number=stream.readLen();
			if(this.workRecordDic!=null)
			{
				this.workRecordDic.clear();
				this.workRecordDic.ensureCapacity(workRecordDicLen);
			}
			else
			{
				this.workRecordDic=new SMap<number,WorkData>(workRecordDicLen);
			}
			
			var workRecordDicT:SMap<number,WorkData>=this.workRecordDic;
			for(var workRecordDicI:number=workRecordDicLen-1;workRecordDicI>=0;--workRecordDicI)
			{
				var workRecordDicK:number;
				var workRecordDicV:WorkData;
				workRecordDicK=stream.readLong();
				
				workRecordDicV=stream.readDataSimpleNotNull() as WorkData;
				
				workRecordDicT.put(workRecordDicK,workRecordDicV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLong(this.workInstanceID);
			
			stream.writeLen(this.workRecordDic.size());
			if(!this.workRecordDic.isEmpty())
			{
				for(var workRecordDicK of this.workRecordDic.getKeys())
				{
					var workRecordDicV:WorkData=this.workRecordDic.get(workRecordDicK);
					stream.writeLong(workRecordDicK);
					
					stream.writeDataSimpleNotNull(workRecordDicV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof WorkSenderData))
				return;
			
			var mData:WorkSenderData=data as WorkSenderData;
			
			this.workInstanceID=mData.workInstanceID;
			this.workRecordDic=mData.workRecordDic;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof WorkSenderData))
				return;
			
			var mData:WorkSenderData=data as WorkSenderData;
			
			this.workInstanceID=mData.workInstanceID;
			
			if(this.workRecordDic!=null)
			{
				this.workRecordDic.clear();
				this.workRecordDic.ensureCapacity(mData.workRecordDic.size());
			}
			else
			{
				this.workRecordDic=new SMap<number,WorkData>(mData.workRecordDic.size());
			}
			
			var workRecordDicT:SMap<number,WorkData>=this.workRecordDic;
			if(!mData.workRecordDic.isEmpty())
			{
				for(var workRecordDicK of mData.workRecordDic.getKeys())
				{
					var workRecordDicV:WorkData=mData.workRecordDic.get(workRecordDicK);
					var workRecordDicW:number;
					var workRecordDicU:WorkData;
					workRecordDicW=workRecordDicK;
					
					workRecordDicU=workRecordDicV.clone() as WorkData;
					
					workRecordDicT.put(workRecordDicW,workRecordDicU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.workRecordDic=new SMap<number,WorkData>();
		}
		
	}
}
