namespace Shine
{
	/** 信息日志数据(generated by shine) */
	export class InfoLogData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.InfoLog;
		
		/** 日志id */
		public id:number;
		
		/** 参数组 */
		public args:string[];
		
		/** 日志时间 */
		public logTime:number;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.InfoLog;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.id=stream.readInt();
			
			if(stream.readBoolean())
			{
				var argsLen:number=stream.readLen();
				this.args=new Array<string>(argsLen);
				var argsT:string[]=this.args;
				for(var argsI:number=0;argsI<argsLen;++argsI)
				{
					var argsV:string;
					argsV=stream.readUTF();
					
					argsT[argsI]=argsV;
				}
			}
			else
			{
				this.args=null;
			}
			
			this.logTime=stream.readLong();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.id);
			
			if(this.args!=null)
			{
				stream.writeBoolean(true);
				var argsT:string[]=this.args;
				stream.writeLen(argsT.length);
				for(var argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
				{
					var argsV:string=argsT[argsVI];
					stream.writeUTF(argsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeLong(this.logTime);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof InfoLogData))
				return;
			
			var mData:InfoLogData=data as InfoLogData;
			
			this.id=mData.id;
			this.args=mData.args;
			this.logTime=mData.logTime;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof InfoLogData))
				return;
			
			var mData:InfoLogData=data as InfoLogData;
			
			this.id=mData.id;
			
			if(mData.args!=null)
			{
				var argsR:string[]=mData.args;
				var argsLen:number=argsR.length;
				this.args=new Array<string>(argsLen);
				var argsT:string[]=this.args;
				for(var argsI:number=0;argsI<argsLen;++argsI)
				{
					var argsV:string=argsR[argsI];
					var argsU:string;
					argsU=argsV;
					
					argsT[argsI]=argsU;
				}
			}
			else
			{
				this.args=null;
			}
			
			this.logTime=mData.logTime;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
	}
}
