namespace Shine
{
	/** 大浮点数(generated by shine) */
	export class BigFloatData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.BigFloat;
		
		/** 阶 */
		public rank:number;
		
		/** 值 */
		public value:number;
		
		/** 十进制字符串dirty */
		private _numberStrDirty:boolean=true;
		
		/** 十进制字符串 */
		private _numberStr:string;
		
		private _tempData:BigFloatData;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.BigFloat;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "BigFloatData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.rank=stream.readInt();
			
			this.value=stream.readDouble();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.rank);
			
			stream.writeDouble(this.value);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof BigFloatData))
				return;
			
			var mData:BigFloatData=data as BigFloatData;
			
			this.rank=mData.rank;
			this.value=mData.value;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof BigFloatData))
				return;
			
			var mData:BigFloatData=data as BigFloatData;
			
			this.rank=mData.rank;
			
			this.value=mData.value;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
		private setDirty():void
		{
			this._numberStrDirty=true;
		}
		
		/** 是否为空(零) */
		public isEmpty():boolean
		{
			return this.value==0 && this.rank==0;
		}
		
		/** 是否为负数 */
		public isNegative():boolean
		{
			return this.value<0;
		}
		
		/** 是否为空(零) * */
		public setEmpty():void
		{
			this.value=0;
			this.rank=0;
			this.setDirty();
		}
		
		public ToString():string
		{
			return this.toNumberString();
		}
		
		/** 转化数字显示 */
		public toNumberString():string
		{
			if(this._numberStrDirty)
			{
				this._numberStrDirty=false;

				if(Global.bigFloatWei==0)
				{
					Ctrl.throwError("未初始化BigFloat配置");
				}

				if(this.rank==0)
				{
					this._numberStr=StringUtils.floor(this.value);
				}
				else
				{
					this._numberStr=StringUtils.floorStrD2(this.value)+BigFloatRankConfig.getRankStr(this.rank);
				}
			}

			return this._numberStr;
		}
		
		/** 转化为double */
		public toFloat():number
		{
			if(Global.bigFloatWeiValue==0.0)
			{
				Ctrl.throwError("未初始化BigFloat配置");
				return 0;
			}
			
			if(this.rank==0)
				return this.value;
			
			var re:number=this.value;
			
			while(this.rank<0)
			{
				re/=Global.bigFloatWeiValue;
				++this.rank;
			}
			
			while(this.rank>0)
			{
				re*=Global.bigFloatWeiValue;
				--this.rank;
			}
			
			return re;
		}
		
		/** 转化拼装long形 */
		public toMixLong():number
		{
			var isN:boolean=this.value<0;
			
			var vv:number=isN ? -this.value : this.value;
			
			var re:number=Math.floor(vv*Global.bigFloatWeiLastValue);
			
			re+=this.rank*4294967296;
			
			if(isN)
			{
				re=-re;
			}
			
			return re;
		}
		
		/** 刷新 */
		public refresh():void
		{
			if(Global.bigFloatWeiValue==0.0)
			{
				Ctrl.throwError("未初始化BigFloat配置");
				return;
			}
			
			if(this.value==0)
			{
				this.setEmpty();
				return;
			}
			
			if(this.value>0)
			{
				while(this.value>=Global.bigFloatWeiValue || this.rank<0)
				{
					this.value/=Global.bigFloatWeiValue;
					++this.rank;
				}
				
				while(this.value<1.0 && this.rank>0)
				{
					this.value*=Global.bigFloatWeiValue;
					--this.rank;
				}
			}
			else
			{
				while(this.value<=-Global.bigFloatWeiValue || this.rank<0)
				{
					this.value/=Global.bigFloatWeiValue;
					++this.rank;
				}
				
				while(this.value>-1.0 && this.rank>0)
				{
					this.value*=Global.bigFloatWeiValue;
					--this.rank;
				}
			}
			
			this.setDirty();
		}
		
		private static changeRank(value:number,rankD:number):number
		{
			if(rankD==0)
				return value;

			return value/Math.pow(Global.bigFloatWeiValue,rankD);
		}
		
		/** 通过字符串初始化 */
		public initByStr(str:string):void
		{
			if(str.length==0)
			{
				this.setEmpty();
				return;
			}

			var re:number=0;

			for(var i:number=str.length-1;i>=0;--i)
			{
				if(StringUtils.isCharIsNumber(str[i]))
				{
					re=i+1;
					break;
				}
			}

			//没有末尾
			if(re==str.length)
			{
				this.rank=0;
				this.value=parseFloat(str);
			}
			else
			{
				this.rank=BigFloatRankConfig.getRankByStr(str.substring(re));
				this.value= parseFloat(str.substring(0,re));
			}

			this.refresh();
		}
		
		/** 通过字符串初始化 */
		public initByDouble(vv:number):void
		{
			this.rank=0;
			this.value=vv;

			this.refresh();
		}
		
		/** 通过字符串初始化 */
		public initByMixLong(num:number):void
		{
			var isN:boolean=num<0;

			var vv:number=isN ? -num : num;

			this.rank=Math.floor(vv/4294967296);
			this.value=Math.floor(vv % 4294967296)/Global.bigFloatWeiLastValue;

			if(isN)
			{
				this.value=-this.value;
			}
		}
		
		/** 通过字符串初始化 */
		public initByRV(rank:number,vv:number):void
		{
			this.rank=rank;
			this.value=vv;

			this.refresh();
		}
		
		/** 通过字符串创建 * */
		public static createByStr(str:string):BigFloatData
		{
			var re:BigFloatData=new BigFloatData();
			re.initByStr(str);
			return re;
		}
		
		/** 通过int创建 */
		public static createByDouble(value:number):BigFloatData
		{
			var re:BigFloatData=new BigFloatData();
			re.initByDouble(value);
			return re;
		}
		
		/** 通过mixLong创建 */
		public static createByMixLong(value:number):BigFloatData
		{
			var re:BigFloatData=new BigFloatData();
			re.initByMixLong(value);
			return re;
		}
		
		/** 比大小(b1<b2返回-1),b1==b2返回0,b1>b2返回1 */
		public static compare(b1:BigFloatData,b2:BigFloatData):number
		{
			var i1:number=MathUtils.doubleCompare(b1.value,0);
			var i2:number=MathUtils.doubleCompare(b2.value,0);

			if(i1!=i2)
				return MathUtils.intCompare(i1,i2);

			if(i1==0)
				return 0;

			var rankRe:number=MathUtils.intCompare(b1.rank,b2.rank);

			if(rankRe!=0)
				return i1>0 ? rankRe : -rankRe;

			return MathUtils.doubleCompare(b1.value,b2.value);
		}
		
		/** 比大小(b1<b2返回-1),b1==b2返回0,b1>b2返回1 */
		public static compareValue(b1:BigFloatData,value:number):number
		{
			var i1:number=MathUtils.doubleCompare(b1.value,0);
			var i2:number=MathUtils.doubleCompare(value,0);

			if(i1!=i2)
				return MathUtils.intCompare(i1,i2);

			if(i1==0)	
				return 0;

			if(Math.abs(value)<Global.bigFloatWeiValue)
			{
				var rankRe:number=MathUtils.intCompare(b1.rank,0);

				if(rankRe!=0)
					return i1>0 ? rankRe : -rankRe;

				return MathUtils.doubleCompare(b1.value,value);
			}
			else
			{
				var tempData:BigFloatData=b1._tempData;

				if(tempData==null)
				{
					tempData=b1._tempData=new BigFloatData();
				}

				tempData.initByDouble(value);
				return this.compare(b1,tempData);
			}
		}
		
		/** 加法(返回新对象) */
		public addN(vv:number):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.sub(vv);
			return re;
		}
		
		/** 加法(返回新对象) */
		public addNewData(vv:BigFloatData):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.subData(vv);
			return re;
		}
		
		/** 加法 */
		public addData(data:BigFloatData):void
		{
			if(this.rank==data.rank)
			{
				this.value+=data.value;
			}
			else
			{
				var dRank:number=this.rank-data.rank;

				//超出限制
				if(Math.abs(dRank)>=Global.bigFloatRankMaxD)
					return;

				this.value+=BigFloatData.changeRank(data.value,dRank);
			}

			this.refresh();
		}
		
		/** 加法 */
		public add(vv:number):void
		{
			//超出限制
			if(Math.abs(this.rank)>=Global.bigFloatRankMaxD)
				return;

			this.value+=BigFloatData.changeRank(vv,this.rank);

			this.refresh();
		}
		
		/** 减法(返回新对象) */
		public subN(vv:number):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.sub(vv);
			return re;
		}
		
		/** 减法(返回新对象) */
		public subNewData(vv:BigFloatData):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.subData(vv);
			return re;
		}
		
		/** 减法 */
		public subData(data:BigFloatData):void
		{
			if(this.rank==data.rank)
			{
				this.value-=data.value;
			}
			else
			{
				var dRank:number=this.rank-data.rank;

				//超出限制
				if(Math.abs(dRank)>=Global.bigFloatRankMaxD)
					return;

				this.value-=BigFloatData.changeRank(data.value,dRank);
			}

			this.refresh();
		}
		
		/** 减法 */
		public sub(vv:number):void
		{
			//超出限制
			if(Math.abs(this.rank)>=Global.bigFloatRankMaxD)
				return;

			this.value-=BigFloatData.changeRank(vv,this.rank);

			this.refresh();
		}
		
		/** 乘法(返回新对象) */
		public mulNewData(data:BigFloatData):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.dataMul(data);
			return re;
		}
		
		/** 乘法(返回新对象) */
		public mulNew(data:number):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.mul(data);
			return re;
		}
		
		/** 乘法 */
		public dataMul(data:BigFloatData):void
		{
			this.value*=data.value;
			this.rank+=data.rank;

			this.refresh();
		}
		
		/** 乘法 */
		public mul(vv:number):void
		{
			this.value*=vv;
			
			this.refresh();
		}
		
		/** 除法 */
		public dataDiv(data:BigFloatData):void
		{
			this.value/=data.value;
			this.rank-=data.rank;

			this.refresh();
		}
		
		/** 除法 */
		public div(vv:number):void
		{
			if(vv==0.0)
			{
				Ctrl.throwError("除数不能为0");
				return;
			}

			//超出限制
			this.value/=vv;

			this.refresh();
		}
		
		/** 除法 返回新对象 */
		public divNewData(vv:BigFloatData):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.dataDiv(vv)
			return re;
		}
		
		/** 除法 返回新对象 */
		public divNew(vv:number):BigFloatData
		{
			var re:BigFloatData=this.clone();
			re.div(vv)
			return re;
		}
		
		/** 克隆数据 */
		public clone():BigFloatData
		{
			var re:BigFloatData = new BigFloatData();
			re.rank=this.rank;
			re.value=this.value;
			re._numberStrDirty=true;
			return re;
		}
		
	}
}
