namespace Shine
{
	/** 角色登录到其他逻辑服的数据(generated by shine) */
	export class PlayerLoginToEachGameData extends BaseData
	{
		/** 自身社交数据 */
		public selfData:RoleSocialData;
		
		/** 数据类型ID */
		public static dataID:number=BaseDataType.PlayerLoginToEachGame;
		
		/** 玩家群组(key:funcID) */
		public roleGroups:SMap<number,SMap<number,PlayerRoleGroupSaveData>>;
		
		/** 需要的角色社交数据组(玩家群单独算) */
		public needRoleSocials:SSet<number>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.PlayerLoginToEachGame;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.selfData=stream.readDataSimpleNotNull() as RoleSocialData;
			
			var needRoleSocialsLen:number=stream.readLen();
			if(this.needRoleSocials!=null)
			{
				this.needRoleSocials.clear();
				this.needRoleSocials.ensureCapacity(needRoleSocialsLen);
			}
			else
			{
				this.needRoleSocials=new SSet<number>();
			}
			
			var needRoleSocialsT:SSet<number>=this.needRoleSocials;
			for(var needRoleSocialsI:number=needRoleSocialsLen-1;needRoleSocialsI>=0;--needRoleSocialsI)
			{
				var needRoleSocialsV:number;
				needRoleSocialsV=stream.readLong();
				
				needRoleSocialsT.add(needRoleSocialsV);
			}
			
			var roleGroupsLen:number=stream.readLen();
			if(this.roleGroups!=null)
			{
				this.roleGroups.clear();
				this.roleGroups.ensureCapacity(roleGroupsLen);
			}
			else
			{
				this.roleGroups=new SMap<number,SMap<number,PlayerRoleGroupSaveData>>(roleGroupsLen);
			}
			
			var roleGroupsT:SMap<number,SMap<number,PlayerRoleGroupSaveData>>=this.roleGroups;
			for(var roleGroupsI:number=roleGroupsLen-1;roleGroupsI>=0;--roleGroupsI)
			{
				var roleGroupsK:number;
				var roleGroupsV:SMap<number,PlayerRoleGroupSaveData>;
				roleGroupsK=stream.readInt();
				
				var roleGroupsVLen:number=stream.readLen();
				roleGroupsV=new SMap<number,PlayerRoleGroupSaveData>(roleGroupsVLen);
				var roleGroupsVT:SMap<number,PlayerRoleGroupSaveData>=roleGroupsV;
				for(var roleGroupsVI:number=roleGroupsVLen-1;roleGroupsVI>=0;--roleGroupsVI)
				{
					var roleGroupsVK:number;
					var roleGroupsVV:PlayerRoleGroupSaveData;
					roleGroupsVK=stream.readLong();
					
					roleGroupsVV=stream.readDataSimpleNotNull() as PlayerRoleGroupSaveData;
					
					roleGroupsVT.put(roleGroupsVK,roleGroupsVV);
				}
				
				roleGroupsT.put(roleGroupsK,roleGroupsV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeDataSimpleNotNull(this.selfData);
			
			stream.writeLen(this.needRoleSocials.size());
			if(!this.needRoleSocials.isEmpty())
			{
				for(var needRoleSocialsV of this.needRoleSocials.getKeys())
				{
					stream.writeLong(needRoleSocialsV);
					
				}
			}
			
			stream.writeLen(this.roleGroups.size());
			if(!this.roleGroups.isEmpty())
			{
				for(var roleGroupsK of this.roleGroups.getKeys())
				{
					var roleGroupsV:SMap<number,PlayerRoleGroupSaveData>=this.roleGroups.get(roleGroupsK);
					stream.writeInt(roleGroupsK);
					
					stream.writeLen(roleGroupsV.size());
					if(!roleGroupsV.isEmpty())
					{
						for(var roleGroupsVK of roleGroupsV.getKeys())
						{
							var roleGroupsVV:PlayerRoleGroupSaveData=roleGroupsV.get(roleGroupsVK);
							stream.writeLong(roleGroupsVK);
							
							stream.writeDataSimpleNotNull(roleGroupsVV);
							
						}
					}
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof PlayerLoginToEachGameData))
				return;
			
			var mData:PlayerLoginToEachGameData=data as PlayerLoginToEachGameData;
			
			this.selfData=mData.selfData;
			this.needRoleSocials=mData.needRoleSocials;
			this.roleGroups=mData.roleGroups;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof PlayerLoginToEachGameData))
				return;
			
			var mData:PlayerLoginToEachGameData=data as PlayerLoginToEachGameData;
			
			this.selfData=mData.selfData.clone() as RoleSocialData;
			
			if(this.needRoleSocials!=null)
			{
				this.needRoleSocials.clear();
				this.needRoleSocials.ensureCapacity(mData.needRoleSocials.size());
			}
			else
			{
				this.needRoleSocials=new SSet<number>();
			}
			
			var needRoleSocialsT:SSet<number>=this.needRoleSocials;
			if(!mData.needRoleSocials.isEmpty())
			{
				for(var needRoleSocialsV of mData.needRoleSocials.getKeys())
				{
					var needRoleSocialsU:number;
					needRoleSocialsU=needRoleSocialsV;
					
					needRoleSocialsT.add(needRoleSocialsU);
				}
			}
			
			if(this.roleGroups!=null)
			{
				this.roleGroups.clear();
				this.roleGroups.ensureCapacity(mData.roleGroups.size());
			}
			else
			{
				this.roleGroups=new SMap<number,SMap<number,PlayerRoleGroupSaveData>>(mData.roleGroups.size());
			}
			
			var roleGroupsT:SMap<number,SMap<number,PlayerRoleGroupSaveData>>=this.roleGroups;
			if(!mData.roleGroups.isEmpty())
			{
				for(var roleGroupsK of mData.roleGroups.getKeys())
				{
					var roleGroupsV:SMap<number,PlayerRoleGroupSaveData>=mData.roleGroups.get(roleGroupsK);
					var roleGroupsW:number;
					var roleGroupsU:SMap<number,PlayerRoleGroupSaveData>;
					roleGroupsW=roleGroupsK;
					
					roleGroupsU=new SMap<number,PlayerRoleGroupSaveData>(roleGroupsV.size());
					var roleGroupsUT:SMap<number,PlayerRoleGroupSaveData>=roleGroupsU;
					if(!roleGroupsV.isEmpty())
					{
						for(var roleGroupsUK of roleGroupsV.getKeys())
						{
							var roleGroupsUV:PlayerRoleGroupSaveData=roleGroupsV.get(roleGroupsUK);
							var roleGroupsUW:number;
							var roleGroupsUU:PlayerRoleGroupSaveData;
							roleGroupsUW=roleGroupsUK;
							
							roleGroupsUU=roleGroupsUV.clone() as PlayerRoleGroupSaveData;
							
							roleGroupsUT.put(roleGroupsUW,roleGroupsUU);
						}
					}
					
					roleGroupsT.put(roleGroupsW,roleGroupsU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.selfData=new RoleSocialData();
			this.selfData.initDefault();
			this.needRoleSocials=new SSet<number>();
			this.roleGroups=new SMap<number,SMap<number,PlayerRoleGroupSaveData>>();
		}
		
	}
}
