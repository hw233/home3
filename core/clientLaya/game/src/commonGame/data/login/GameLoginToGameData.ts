namespace Shine
{
	/** 逻辑服登陆到逻辑服消息(generated by shine) */
	export class GameLoginToGameData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.GameLoginToGame;
		
		/** 玩家群数据组(key1:funcID,key2:groupID) */
		public roleGroups:SMap<number,SMap<number,RoleGroupSimpleData>>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.GameLoginToGame;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			var roleGroupsLen:number=stream.readLen();
			if(this.roleGroups!=null)
			{
				this.roleGroups.clear();
				this.roleGroups.ensureCapacity(roleGroupsLen);
			}
			else
			{
				this.roleGroups=new SMap<number,SMap<number,RoleGroupSimpleData>>(roleGroupsLen);
			}
			
			var roleGroupsT:SMap<number,SMap<number,RoleGroupSimpleData>>=this.roleGroups;
			for(var roleGroupsI:number=roleGroupsLen-1;roleGroupsI>=0;--roleGroupsI)
			{
				var roleGroupsK:number;
				var roleGroupsV:SMap<number,RoleGroupSimpleData>;
				roleGroupsK=stream.readInt();
				
				var roleGroupsVLen:number=stream.readLen();
				roleGroupsV=new SMap<number,RoleGroupSimpleData>(roleGroupsVLen);
				var roleGroupsVT:SMap<number,RoleGroupSimpleData>=roleGroupsV;
				for(var roleGroupsVI:number=roleGroupsVLen-1;roleGroupsVI>=0;--roleGroupsVI)
				{
					var roleGroupsVK:number;
					var roleGroupsVV:RoleGroupSimpleData;
					roleGroupsVK=stream.readLong();
					
					roleGroupsVV=stream.readDataSimpleNotNull() as RoleGroupSimpleData;
					
					roleGroupsVT.put(roleGroupsVK,roleGroupsVV);
				}
				
				roleGroupsT.put(roleGroupsK,roleGroupsV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLen(this.roleGroups.size());
			if(!this.roleGroups.isEmpty())
			{
				for(var roleGroupsK of this.roleGroups.getKeys())
				{
					var roleGroupsV:SMap<number,RoleGroupSimpleData>=this.roleGroups.get(roleGroupsK);
					stream.writeInt(roleGroupsK);
					
					stream.writeLen(roleGroupsV.size());
					if(!roleGroupsV.isEmpty())
					{
						for(var roleGroupsVK of roleGroupsV.getKeys())
						{
							var roleGroupsVV:RoleGroupSimpleData=roleGroupsV.get(roleGroupsVK);
							stream.writeLong(roleGroupsVK);
							
							stream.writeDataSimpleNotNull(roleGroupsVV);
							
						}
					}
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof GameLoginToGameData))
				return;
			
			var mData:GameLoginToGameData=data as GameLoginToGameData;
			
			this.roleGroups=mData.roleGroups;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof GameLoginToGameData))
				return;
			
			var mData:GameLoginToGameData=data as GameLoginToGameData;
			
			if(this.roleGroups!=null)
			{
				this.roleGroups.clear();
				this.roleGroups.ensureCapacity(mData.roleGroups.size());
			}
			else
			{
				this.roleGroups=new SMap<number,SMap<number,RoleGroupSimpleData>>(mData.roleGroups.size());
			}
			
			var roleGroupsT:SMap<number,SMap<number,RoleGroupSimpleData>>=this.roleGroups;
			if(!mData.roleGroups.isEmpty())
			{
				for(var roleGroupsK of mData.roleGroups.getKeys())
				{
					var roleGroupsV:SMap<number,RoleGroupSimpleData>=mData.roleGroups.get(roleGroupsK);
					var roleGroupsW:number;
					var roleGroupsU:SMap<number,RoleGroupSimpleData>;
					roleGroupsW=roleGroupsK;
					
					roleGroupsU=new SMap<number,RoleGroupSimpleData>(roleGroupsV.size());
					var roleGroupsUT:SMap<number,RoleGroupSimpleData>=roleGroupsU;
					if(!roleGroupsV.isEmpty())
					{
						for(var roleGroupsUK of roleGroupsV.getKeys())
						{
							var roleGroupsUV:RoleGroupSimpleData=roleGroupsV.get(roleGroupsUK);
							var roleGroupsUW:number;
							var roleGroupsUU:RoleGroupSimpleData;
							roleGroupsUW=roleGroupsUK;
							
							roleGroupsUU=roleGroupsUV.clone() as RoleGroupSimpleData;
							
							roleGroupsUT.put(roleGroupsUW,roleGroupsUU);
						}
					}
					
					roleGroupsT.put(roleGroupsW,roleGroupsU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.roleGroups=new SMap<number,SMap<number,RoleGroupSimpleData>>();
		}
		
	}
}
