namespace Shine
{
	/** 登陆服初始化服务器数据(generated by shine) */
	export class LoginInitServerData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.LoginInitServer;
		
		/** 本登录服信息 */
		public info:ServerInfoData;
		
		/** 全部登陆服简版信息 */
		public loginServerDic:SMap<number,ServerSimpleInfoData>;
		
		/** 全部游戏服简版信息 */
		public gameServerDic:SMap<number,GameServerSimpleInfoData>;
		
		/** 游戏服组(客户端信息) */
		public games:SMap<number,GameServerClientSimpleData>;
		
		/** 客户端版本 */
		public clientVersion:SMap<number,ClientVersionData>;
		
		/** url重定向组 */
		public redirectURLDic:SMap<number,SMap<number,string>>;
		
		/** 当前是否开放 */
		public isOpen:boolean;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.LoginInitServer;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.info=stream.readDataSimpleNotNull() as ServerInfoData;
			
			var loginServerDicLen:number=stream.readLen();
			if(this.loginServerDic!=null)
			{
				this.loginServerDic.clear();
				this.loginServerDic.ensureCapacity(loginServerDicLen);
			}
			else
			{
				this.loginServerDic=new SMap<number,ServerSimpleInfoData>(loginServerDicLen);
			}
			
			var loginServerDicT:SMap<number,ServerSimpleInfoData>=this.loginServerDic;
			for(var loginServerDicI:number=loginServerDicLen-1;loginServerDicI>=0;--loginServerDicI)
			{
				var loginServerDicV:ServerSimpleInfoData;
				loginServerDicV=stream.readDataSimpleNotNull() as ServerSimpleInfoData;
				
				loginServerDicT.put(loginServerDicV.id,loginServerDicV);
			}
			
			var gameServerDicLen:number=stream.readLen();
			if(this.gameServerDic!=null)
			{
				this.gameServerDic.clear();
				this.gameServerDic.ensureCapacity(gameServerDicLen);
			}
			else
			{
				this.gameServerDic=new SMap<number,GameServerSimpleInfoData>(gameServerDicLen);
			}
			
			var gameServerDicT:SMap<number,GameServerSimpleInfoData>=this.gameServerDic;
			for(var gameServerDicI:number=gameServerDicLen-1;gameServerDicI>=0;--gameServerDicI)
			{
				var gameServerDicV:GameServerSimpleInfoData;
				gameServerDicV=stream.readDataSimpleNotNull() as GameServerSimpleInfoData;
				
				gameServerDicT.put(gameServerDicV.id,gameServerDicV);
			}
			
			var gamesLen:number=stream.readLen();
			if(this.games!=null)
			{
				this.games.clear();
				this.games.ensureCapacity(gamesLen);
			}
			else
			{
				this.games=new SMap<number,GameServerClientSimpleData>(gamesLen);
			}
			
			var gamesT:SMap<number,GameServerClientSimpleData>=this.games;
			for(var gamesI:number=gamesLen-1;gamesI>=0;--gamesI)
			{
				var gamesV:GameServerClientSimpleData;
				gamesV=stream.readDataSimpleNotNull() as GameServerClientSimpleData;
				
				gamesT.put(gamesV.id,gamesV);
			}
			
			var clientVersionLen:number=stream.readLen();
			if(this.clientVersion!=null)
			{
				this.clientVersion.clear();
				this.clientVersion.ensureCapacity(clientVersionLen);
			}
			else
			{
				this.clientVersion=new SMap<number,ClientVersionData>(clientVersionLen);
			}
			
			var clientVersionT:SMap<number,ClientVersionData>=this.clientVersion;
			for(var clientVersionI:number=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
			{
				var clientVersionV:ClientVersionData;
				clientVersionV=new ClientVersionData();
				clientVersionV.readBytesSimple(stream);
				
				clientVersionT.put(clientVersionV.type,clientVersionV);
			}
			
			var redirectURLDicLen:number=stream.readLen();
			if(this.redirectURLDic!=null)
			{
				this.redirectURLDic.clear();
				this.redirectURLDic.ensureCapacity(redirectURLDicLen);
			}
			else
			{
				this.redirectURLDic=new SMap<number,SMap<number,string>>(redirectURLDicLen);
			}
			
			var redirectURLDicT:SMap<number,SMap<number,string>>=this.redirectURLDic;
			for(var redirectURLDicI:number=redirectURLDicLen-1;redirectURLDicI>=0;--redirectURLDicI)
			{
				var redirectURLDicK:number;
				var redirectURLDicV:SMap<number,string>;
				redirectURLDicK=stream.readInt();
				
				var redirectURLDicVLen:number=stream.readLen();
				redirectURLDicV=new SMap<number,string>(redirectURLDicVLen);
				var redirectURLDicVT:SMap<number,string>=redirectURLDicV;
				for(var redirectURLDicVI:number=redirectURLDicVLen-1;redirectURLDicVI>=0;--redirectURLDicVI)
				{
					var redirectURLDicVK:number;
					var redirectURLDicVV:string;
					redirectURLDicVK=stream.readInt();
					
					redirectURLDicVV=stream.readUTF();
					
					redirectURLDicVT.put(redirectURLDicVK,redirectURLDicVV);
				}
				
				redirectURLDicT.put(redirectURLDicK,redirectURLDicV);
			}
			
			this.isOpen=stream.readBoolean();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeDataSimpleNotNull(this.info);
			
			stream.writeLen(this.loginServerDic.size());
			if(!this.loginServerDic.isEmpty())
			{
				for(var loginServerDicV of this.loginServerDic.getValues())
				{
					stream.writeDataSimpleNotNull(loginServerDicV);
					
				}
			}
			
			stream.writeLen(this.gameServerDic.size());
			if(!this.gameServerDic.isEmpty())
			{
				for(var gameServerDicV of this.gameServerDic.getValues())
				{
					stream.writeDataSimpleNotNull(gameServerDicV);
					
				}
			}
			
			stream.writeLen(this.games.size());
			if(!this.games.isEmpty())
			{
				for(var gamesV of this.games.getValues())
				{
					stream.writeDataSimpleNotNull(gamesV);
					
				}
			}
			
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				for(var clientVersionV of this.clientVersion.getValues())
				{
					clientVersionV.writeBytesSimple(stream);
					
				}
			}
			
			stream.writeLen(this.redirectURLDic.size());
			if(!this.redirectURLDic.isEmpty())
			{
				for(var redirectURLDicK of this.redirectURLDic.getKeys())
				{
					var redirectURLDicV:SMap<number,string>=this.redirectURLDic.get(redirectURLDicK);
					stream.writeInt(redirectURLDicK);
					
					stream.writeLen(redirectURLDicV.size());
					if(!redirectURLDicV.isEmpty())
					{
						for(var redirectURLDicVK of redirectURLDicV.getKeys())
						{
							var redirectURLDicVV:string=redirectURLDicV.get(redirectURLDicVK);
							stream.writeInt(redirectURLDicVK);
							
							stream.writeUTF(redirectURLDicVV);
							
						}
					}
					
				}
			}
			
			stream.writeBoolean(this.isOpen);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof LoginInitServerData))
				return;
			
			var mData:LoginInitServerData=data as LoginInitServerData;
			
			this.info=mData.info;
			this.loginServerDic=mData.loginServerDic;
			this.gameServerDic=mData.gameServerDic;
			this.games=mData.games;
			this.clientVersion=mData.clientVersion;
			this.redirectURLDic=mData.redirectURLDic;
			this.isOpen=mData.isOpen;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof LoginInitServerData))
				return;
			
			var mData:LoginInitServerData=data as LoginInitServerData;
			
			this.info=mData.info.clone() as ServerInfoData;
			
			if(this.loginServerDic!=null)
			{
				this.loginServerDic.clear();
				this.loginServerDic.ensureCapacity(mData.loginServerDic.size());
			}
			else
			{
				this.loginServerDic=new SMap<number,ServerSimpleInfoData>(mData.loginServerDic.size());
			}
			
			var loginServerDicT:SMap<number,ServerSimpleInfoData>=this.loginServerDic;
			if(!mData.loginServerDic.isEmpty())
			{
				for(var loginServerDicV of mData.loginServerDic.getValues())
				{
					var loginServerDicU:ServerSimpleInfoData;
					loginServerDicU=loginServerDicV.clone() as ServerSimpleInfoData;
					
					loginServerDicT.put(loginServerDicU.id,loginServerDicU);
				}
			}
			
			if(this.gameServerDic!=null)
			{
				this.gameServerDic.clear();
				this.gameServerDic.ensureCapacity(mData.gameServerDic.size());
			}
			else
			{
				this.gameServerDic=new SMap<number,GameServerSimpleInfoData>(mData.gameServerDic.size());
			}
			
			var gameServerDicT:SMap<number,GameServerSimpleInfoData>=this.gameServerDic;
			if(!mData.gameServerDic.isEmpty())
			{
				for(var gameServerDicV of mData.gameServerDic.getValues())
				{
					var gameServerDicU:GameServerSimpleInfoData;
					gameServerDicU=gameServerDicV.clone() as GameServerSimpleInfoData;
					
					gameServerDicT.put(gameServerDicU.id,gameServerDicU);
				}
			}
			
			if(this.games!=null)
			{
				this.games.clear();
				this.games.ensureCapacity(mData.games.size());
			}
			else
			{
				this.games=new SMap<number,GameServerClientSimpleData>(mData.games.size());
			}
			
			var gamesT:SMap<number,GameServerClientSimpleData>=this.games;
			if(!mData.games.isEmpty())
			{
				for(var gamesV of mData.games.getValues())
				{
					var gamesU:GameServerClientSimpleData;
					gamesU=gamesV.clone() as GameServerClientSimpleData;
					
					gamesT.put(gamesU.id,gamesU);
				}
			}
			
			if(this.clientVersion!=null)
			{
				this.clientVersion.clear();
				this.clientVersion.ensureCapacity(mData.clientVersion.size());
			}
			else
			{
				this.clientVersion=new SMap<number,ClientVersionData>(mData.clientVersion.size());
			}
			
			var clientVersionT:SMap<number,ClientVersionData>=this.clientVersion;
			if(!mData.clientVersion.isEmpty())
			{
				for(var clientVersionV of mData.clientVersion.getValues())
				{
					var clientVersionU:ClientVersionData;
					clientVersionU=new ClientVersionData();
					clientVersionU.copy(clientVersionV);
					
					clientVersionT.put(clientVersionU.type,clientVersionU);
				}
			}
			
			if(this.redirectURLDic!=null)
			{
				this.redirectURLDic.clear();
				this.redirectURLDic.ensureCapacity(mData.redirectURLDic.size());
			}
			else
			{
				this.redirectURLDic=new SMap<number,SMap<number,string>>(mData.redirectURLDic.size());
			}
			
			var redirectURLDicT:SMap<number,SMap<number,string>>=this.redirectURLDic;
			if(!mData.redirectURLDic.isEmpty())
			{
				for(var redirectURLDicK of mData.redirectURLDic.getKeys())
				{
					var redirectURLDicV:SMap<number,string>=mData.redirectURLDic.get(redirectURLDicK);
					var redirectURLDicW:number;
					var redirectURLDicU:SMap<number,string>;
					redirectURLDicW=redirectURLDicK;
					
					redirectURLDicU=new SMap<number,string>(redirectURLDicV.size());
					var redirectURLDicUT:SMap<number,string>=redirectURLDicU;
					if(!redirectURLDicV.isEmpty())
					{
						for(var redirectURLDicUK of redirectURLDicV.getKeys())
						{
							var redirectURLDicUV:string=redirectURLDicV.get(redirectURLDicUK);
							var redirectURLDicUW:number;
							var redirectURLDicUU:string;
							redirectURLDicUW=redirectURLDicUK;
							
							redirectURLDicUU=redirectURLDicUV;
							
							redirectURLDicUT.put(redirectURLDicUW,redirectURLDicUU);
						}
					}
					
					redirectURLDicT.put(redirectURLDicW,redirectURLDicU);
				}
			}
			
			this.isOpen=mData.isOpen;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.info=new ServerInfoData();
			this.info.initDefault();
			this.loginServerDic=new SMap<number,ServerSimpleInfoData>();
			this.gameServerDic=new SMap<number,GameServerSimpleInfoData>();
			this.games=new SMap<number,GameServerClientSimpleData>();
			this.clientVersion=new SMap<number,ClientVersionData>();
			this.redirectURLDic=new SMap<number,SMap<number,string>>();
		}
		
	}
}
