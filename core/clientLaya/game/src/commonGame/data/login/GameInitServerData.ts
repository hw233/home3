namespace Shine
{
	/** 逻辑服初始化服务器数据(generated by shine) */
	export class GameInitServerData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.GameInitServer;
		
		/** 服务器信息(自身) */
		public info:GameServerInfoData;
		
		/** 全部游戏服简版信息 */
		public gameServerDic:SMap<number,GameServerSimpleInfoData>;
		
		/** 登陆服id组 */
		public loginList:number[];
		
		/** 客户端gm指令组 */
		public clientGMSet:SSet<string>;
		
		/** 客户端版本 */
		public clientVersion:SMap<number,ClientVersionData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.GameInitServer;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.info=stream.readDataSimpleNotNull() as GameServerInfoData;
			
			var gameServerDicLen:number=stream.readLen();
			if(this.gameServerDic!=null)
			{
				this.gameServerDic.clear();
				this.gameServerDic.ensureCapacity(gameServerDicLen);
			}
			else
			{
				this.gameServerDic=new SMap<number,GameServerSimpleInfoData>(gameServerDicLen);
			}
			
			var gameServerDicT:SMap<number,GameServerSimpleInfoData>=this.gameServerDic;
			for(var gameServerDicI:number=gameServerDicLen-1;gameServerDicI>=0;--gameServerDicI)
			{
				var gameServerDicV:GameServerSimpleInfoData;
				gameServerDicV=stream.readDataSimpleNotNull() as GameServerSimpleInfoData;
				
				gameServerDicT.put(gameServerDicV.id,gameServerDicV);
			}
			
			var loginListLen:number=stream.readLen();
			this.loginList=new Array<number>(loginListLen);
			var loginListT:number[]=this.loginList;
			for(var loginListI:number=0;loginListI<loginListLen;++loginListI)
			{
				var loginListV:number;
				loginListV=stream.readInt();
				
				loginListT[loginListI]=loginListV;
			}
			
			if(stream.readBoolean())
			{
				var clientGMSetLen:number=stream.readLen();
				if(this.clientGMSet!=null)
				{
					this.clientGMSet.clear();
					this.clientGMSet.ensureCapacity(clientGMSetLen);
				}
				else
				{
					this.clientGMSet=new SSet<string>();
				}
				
				var clientGMSetT:SSet<string>=this.clientGMSet;
				for(var clientGMSetI:number=clientGMSetLen-1;clientGMSetI>=0;--clientGMSetI)
				{
					var clientGMSetV:string;
					clientGMSetV=stream.readUTF();
					
					clientGMSetT.add(clientGMSetV);
				}
			}
			else
			{
				this.clientGMSet=null;
			}
			
			var clientVersionLen:number=stream.readLen();
			if(this.clientVersion!=null)
			{
				this.clientVersion.clear();
				this.clientVersion.ensureCapacity(clientVersionLen);
			}
			else
			{
				this.clientVersion=new SMap<number,ClientVersionData>(clientVersionLen);
			}
			
			var clientVersionT:SMap<number,ClientVersionData>=this.clientVersion;
			for(var clientVersionI:number=clientVersionLen-1;clientVersionI>=0;--clientVersionI)
			{
				var clientVersionV:ClientVersionData;
				clientVersionV=new ClientVersionData();
				clientVersionV.readBytesSimple(stream);
				
				clientVersionT.put(clientVersionV.type,clientVersionV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeDataSimpleNotNull(this.info);
			
			stream.writeLen(this.gameServerDic.size());
			if(!this.gameServerDic.isEmpty())
			{
				for(var gameServerDicV of this.gameServerDic.getValues())
				{
					stream.writeDataSimpleNotNull(gameServerDicV);
					
				}
			}
			
			var loginListT:number[]=this.loginList;
			stream.writeLen(loginListT.length);
			for(var loginListVI=0,loginListVLen=loginListT.length;loginListVI<loginListVLen;++loginListVI)
			{
				var loginListV:number=loginListT[loginListVI];
				stream.writeInt(loginListV);
				
			}
			
			if(this.clientGMSet!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.clientGMSet.size());
				if(!this.clientGMSet.isEmpty())
				{
					for(var clientGMSetV of this.clientGMSet.getKeys())
					{
						stream.writeUTF(clientGMSetV);
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeLen(this.clientVersion.size());
			if(!this.clientVersion.isEmpty())
			{
				for(var clientVersionV of this.clientVersion.getValues())
				{
					clientVersionV.writeBytesSimple(stream);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof GameInitServerData))
				return;
			
			var mData:GameInitServerData=data as GameInitServerData;
			
			this.info=mData.info;
			this.gameServerDic=mData.gameServerDic;
			this.loginList=mData.loginList;
			this.clientGMSet=mData.clientGMSet;
			this.clientVersion=mData.clientVersion;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof GameInitServerData))
				return;
			
			var mData:GameInitServerData=data as GameInitServerData;
			
			this.info=mData.info.clone() as GameServerInfoData;
			
			if(this.gameServerDic!=null)
			{
				this.gameServerDic.clear();
				this.gameServerDic.ensureCapacity(mData.gameServerDic.size());
			}
			else
			{
				this.gameServerDic=new SMap<number,GameServerSimpleInfoData>(mData.gameServerDic.size());
			}
			
			var gameServerDicT:SMap<number,GameServerSimpleInfoData>=this.gameServerDic;
			if(!mData.gameServerDic.isEmpty())
			{
				for(var gameServerDicV of mData.gameServerDic.getValues())
				{
					var gameServerDicU:GameServerSimpleInfoData;
					gameServerDicU=gameServerDicV.clone() as GameServerSimpleInfoData;
					
					gameServerDicT.put(gameServerDicU.id,gameServerDicU);
				}
			}
			
			var loginListR:number[]=mData.loginList;
			var loginListLen:number=loginListR.length;
			this.loginList=new Array<number>(loginListLen);
			var loginListT:number[]=this.loginList;
			for(var loginListI:number=0;loginListI<loginListLen;++loginListI)
			{
				var loginListV:number=loginListR[loginListI];
				var loginListU:number;
				loginListU=loginListV;
				
				loginListT[loginListI]=loginListU;
			}
			
			if(mData.clientGMSet!=null)
			{
				if(this.clientGMSet!=null)
				{
					this.clientGMSet.clear();
					this.clientGMSet.ensureCapacity(mData.clientGMSet.size());
				}
				else
				{
					this.clientGMSet=new SSet<string>();
				}
				
				var clientGMSetT:SSet<string>=this.clientGMSet;
				if(!mData.clientGMSet.isEmpty())
				{
					for(var clientGMSetV of mData.clientGMSet.getKeys())
					{
						var clientGMSetU:string;
						clientGMSetU=clientGMSetV;
						
						clientGMSetT.add(clientGMSetU);
					}
				}
			}
			else
			{
				this.clientGMSet=null;
			}
			
			if(this.clientVersion!=null)
			{
				this.clientVersion.clear();
				this.clientVersion.ensureCapacity(mData.clientVersion.size());
			}
			else
			{
				this.clientVersion=new SMap<number,ClientVersionData>(mData.clientVersion.size());
			}
			
			var clientVersionT:SMap<number,ClientVersionData>=this.clientVersion;
			if(!mData.clientVersion.isEmpty())
			{
				for(var clientVersionV of mData.clientVersion.getValues())
				{
					var clientVersionU:ClientVersionData;
					clientVersionU=new ClientVersionData();
					clientVersionU.copy(clientVersionV);
					
					clientVersionT.put(clientVersionU.type,clientVersionU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.info=new GameServerInfoData();
			this.info.initDefault();
			this.gameServerDic=new SMap<number,GameServerSimpleInfoData>();
			this.loginList=new Array<number>(0);
			this.clientVersion=new SMap<number,ClientVersionData>();
		}
		
	}
}
