namespace Shine
{
	/** 客户端登陆结果数据(generated by shine) */
	export class ClientLoginResultData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.ClientLoginResult;
		
		/** 登录服指定信息 */
		public loginInfo:ClientLoginServerInfoData;
		
		/** 版本数据(空为服务器并无此版本) */
		public version:ClientVersionData;
		
		/** 区服列表 */
		public areas:SMap<number,AreaClientData>;
		
		/** 上次登陆区服 */
		public lastAreaID:number;
		
		/** 逻辑服地址(直接登陆模式用) */
		public gameInfo:ClientLoginServerInfoData;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.ClientLoginResult;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.loginInfo=stream.readDataSimpleNotNull() as ClientLoginServerInfoData;
			
			if(stream.readBoolean())
			{
				this.version=new ClientVersionData();
				this.version.readBytesSimple(stream);
			}
			else
			{
				this.version=null;
			}
			
			if(stream.readBoolean())
			{
				var areasLen:number=stream.readLen();
				if(this.areas!=null)
				{
					this.areas.clear();
					this.areas.ensureCapacity(areasLen);
				}
				else
				{
					this.areas=new SMap<number,AreaClientData>(areasLen);
				}
				
				var areasT:SMap<number,AreaClientData>=this.areas;
				for(var areasI:number=areasLen-1;areasI>=0;--areasI)
				{
					var areasV:AreaClientData;
					if(stream.readBoolean())
					{
						areasV=stream.readDataSimpleNotNull() as AreaClientData;
					}
					else
					{
						areasV=null;
					}
					
					areasT.put(areasV.areaID,areasV);
				}
			}
			else
			{
				this.areas=null;
			}
			
			this.lastAreaID=stream.readInt();
			
			if(stream.readBoolean())
			{
				this.gameInfo=stream.readDataSimpleNotNull() as ClientLoginServerInfoData;
			}
			else
			{
				this.gameInfo=null;
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeDataSimpleNotNull(this.loginInfo);
			
			if(this.version!=null)
			{
				stream.writeBoolean(true);
				this.version.writeBytesSimple(stream);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.areas!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.areas.size());
				if(!this.areas.isEmpty())
				{
					for(var areasV of this.areas.getValues())
					{
						if(areasV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(areasV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.lastAreaID);
			
			if(this.gameInfo!=null)
			{
				stream.writeBoolean(true);
				stream.writeDataSimpleNotNull(this.gameInfo);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof ClientLoginResultData))
				return;
			
			var mData:ClientLoginResultData=data as ClientLoginResultData;
			
			this.loginInfo=mData.loginInfo;
			this.version=mData.version;
			this.areas=mData.areas;
			this.lastAreaID=mData.lastAreaID;
			this.gameInfo=mData.gameInfo;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof ClientLoginResultData))
				return;
			
			var mData:ClientLoginResultData=data as ClientLoginResultData;
			
			this.loginInfo=mData.loginInfo.clone() as ClientLoginServerInfoData;
			
			if(mData.version!=null)
			{
				this.version=new ClientVersionData();
				this.version.copy(mData.version);
			}
			else
			{
				this.version=null;
			}
			
			if(mData.areas!=null)
			{
				if(this.areas!=null)
				{
					this.areas.clear();
					this.areas.ensureCapacity(mData.areas.size());
				}
				else
				{
					this.areas=new SMap<number,AreaClientData>(mData.areas.size());
				}
				
				var areasT:SMap<number,AreaClientData>=this.areas;
				if(!mData.areas.isEmpty())
				{
					for(var areasV of mData.areas.getValues())
					{
						var areasU:AreaClientData;
						if(areasV!=null)
						{
							areasU=areasV.clone() as AreaClientData;
						}
						else
						{
							areasU=null;
						}
						
						areasT.put(areasU.areaID,areasU);
					}
				}
			}
			else
			{
				this.areas=null;
			}
			
			this.lastAreaID=mData.lastAreaID;
			
			if(mData.gameInfo!=null)
			{
				this.gameInfo=mData.gameInfo.clone() as ClientLoginServerInfoData;
			}
			else
			{
				this.gameInfo=null;
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.loginInfo=new ClientLoginServerInfoData();
			this.loginInfo.initDefault();
		}
		
	}
}
