namespace Shine
{
	/** 游戏服登录中心服返回数据(generated by shine) */
	export class GameLoginData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.GameLogin;
		
		/** 服务器偏移时间 */
		public serverOffTime:number;
		
		/** 排行榜数据组 */
		public ranks:SMap<number,RankToolData>;
		
		/** 服务器出生码 */
		public serverBornCode:number;
		
		/** 活动数据组 */
		public activities:SMap<number,ActivityServerData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.GameLogin;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "GameLoginData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.serverOffTime=stream.readLong();
			
			var ranksLen:number=stream.readLen();
			if(this.ranks!=null)
			{
				this.ranks.clear();
				this.ranks.ensureCapacity(ranksLen);
			}
			else
			{
				this.ranks=new SMap<number,RankToolData>(ranksLen);
			}
			
			var ranksT:SMap<number,RankToolData>=this.ranks;
			for(var ranksI:number=ranksLen-1;ranksI>=0;--ranksI)
			{
				var ranksV:RankToolData;
				ranksV=stream.readDataSimpleNotNull() as RankToolData;
				
				ranksT.put(ranksV.funcID,ranksV);
			}
			
			var activitiesLen:number=stream.readLen();
			if(this.activities!=null)
			{
				this.activities.clear();
				this.activities.ensureCapacity(activitiesLen);
			}
			else
			{
				this.activities=new SMap<number,ActivityServerData>(activitiesLen);
			}
			
			var activitiesT:SMap<number,ActivityServerData>=this.activities;
			for(var activitiesI:number=activitiesLen-1;activitiesI>=0;--activitiesI)
			{
				var activitiesV:ActivityServerData;
				activitiesV=stream.readDataSimpleNotNull() as ActivityServerData;
				
				activitiesT.put(activitiesV.id,activitiesV);
			}
			
			this.serverBornCode=stream.readInt();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLong(this.serverOffTime);
			
			stream.writeLen(this.ranks.size());
			if(!this.ranks.isEmpty())
			{
				for(var ranksV of this.ranks.getValues())
				{
					stream.writeDataSimpleNotNull(ranksV);
					
				}
			}
			
			stream.writeLen(this.activities.size());
			if(!this.activities.isEmpty())
			{
				for(var activitiesV of this.activities.getValues())
				{
					stream.writeDataSimpleNotNull(activitiesV);
					
				}
			}
			
			stream.writeInt(this.serverBornCode);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof GameLoginData))
				return;
			
			var mData:GameLoginData=data as GameLoginData;
			
			this.serverOffTime=mData.serverOffTime;
			this.ranks=mData.ranks;
			this.activities=mData.activities;
			this.serverBornCode=mData.serverBornCode;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof GameLoginData))
				return;
			
			var mData:GameLoginData=data as GameLoginData;
			
			this.serverOffTime=mData.serverOffTime;
			
			if(this.ranks!=null)
			{
				this.ranks.clear();
				this.ranks.ensureCapacity(mData.ranks.size());
			}
			else
			{
				this.ranks=new SMap<number,RankToolData>(mData.ranks.size());
			}
			
			var ranksT:SMap<number,RankToolData>=this.ranks;
			if(!mData.ranks.isEmpty())
			{
				for(var ranksV of mData.ranks.getValues())
				{
					var ranksU:RankToolData;
					ranksU=ranksV.clone() as RankToolData;
					
					ranksT.put(ranksU.funcID,ranksU);
				}
			}
			
			if(this.activities!=null)
			{
				this.activities.clear();
				this.activities.ensureCapacity(mData.activities.size());
			}
			else
			{
				this.activities=new SMap<number,ActivityServerData>(mData.activities.size());
			}
			
			var activitiesT:SMap<number,ActivityServerData>=this.activities;
			if(!mData.activities.isEmpty())
			{
				for(var activitiesV of mData.activities.getValues())
				{
					var activitiesU:ActivityServerData;
					activitiesU=activitiesV.clone() as ActivityServerData;
					
					activitiesT.put(activitiesU.id,activitiesU);
				}
			}
			
			this.serverBornCode=mData.serverBornCode;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.ranks=new SMap<number,RankToolData>();
			this.activities=new SMap<number,ActivityServerData>();
		}
		
	}
}
