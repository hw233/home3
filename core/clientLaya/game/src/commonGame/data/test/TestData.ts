namespace Shine
{
	/** 测试数据(generated by shine) */
	export class TestData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.Test;
		
		/** 00 */
		public a1:boolean;
		
		/** 11 */
		public a2:number;
		
		public a6:number;
		
		public a7:number;
		
		public a8:number;
		
		public a9:number;
		
		public a10:string;
		
		public b1:Test2Data;
		
		/** b2 */
		public b2:Test2Data;
		
		public b3:Test2Data;
		
		/** b4 */
		public b4:Test2Data;
		
		public c1:number[];
		
		public c2:number[];
		
		public c3:number[];
		
		public c4:string[];
		
		public c5:number[][];
		
		public c6:number[][][];
		
		public d1:SList<number>;
		
		public d2:SList<number>;
		
		public d3:SList<string>;
		
		public d4:SList<Test2Data>;
		
		public d5:SList<Test2Data>;
		
		public d6:SList<Test2Data>;
		
		public d7:SSet<number>;
		
		public d8:SSet<number>;
		
		public d9:SSet<string>;
		
		public d10:SSet<Test2Data>;
		
		public d11:SSet<Test2Data>;
		
		public e12:SMap<number,number>;
		
		public e1:SMap<number,number>;
		
		public e2:SMap<number,Test2Data>;
		
		public e3:SMap<number,Test2Data>;
		
		public e4:SMap<string,Test2Data>;
		
		public e5:SMap<number,Test2Data>;
		
		public e6:SMap<number,Test2Data>;
		
		public e7:SMap<number,Test2Data>;
		
		public e8:SMap<number,Test2Data>;
		
		public f1:SList<number>[];
		
		public f2:SList<number[]>[];
		
		public f3:SList<Test2Data>[];
		
		public f4:SList<Test2Data[]>[];
		
		public f5:SList<Test2Data>[];
		
		public f6:SList<Test2Data[]>[];
		
		public h3:SMap<number,SList<Test2Data>>;
		
		public h2:SList<Test2Data>;
		
		public h1:SList<number>;
		
		public g1:SMap<number,SMap<number,Test2Data>>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.Test;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "TestData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.a1=stream.readBoolean();
			
			this.a2=stream.readByte();
			
			this.a6=stream.readInt();
			
			this.a7=stream.readFloat();
			
			this.a8=stream.readDouble();
			
			this.a9=stream.readLong();
			
			this.a10=stream.readUTF();
			
			this.b1=stream.readDataSimpleNotNull() as Test2Data;
			
			this.b2=stream.readDataSimpleNotNull() as Test2Data;
			
			if(stream.readBoolean())
			{
				this.b3=stream.readDataSimpleNotNull() as Test2Data;
			}
			else
			{
				this.b3=null;
			}
			
			if(stream.readBoolean())
			{
				this.b4=stream.readDataSimpleNotNull() as Test2Data;
			}
			else
			{
				this.b4=null;
			}
			
			var c1Len:number=stream.readLen();
			this.c1=new Array<number>(c1Len);
			var c1T:number[]=this.c1;
			for(var c1I:number=0;c1I<c1Len;++c1I)
			{
				var c1V:number;
				c1V=stream.readByte();
				
				c1T[c1I]=c1V;
			}
			
			var c2Len:number=stream.readLen();
			this.c2=new Array<number>(c2Len);
			var c2T:number[]=this.c2;
			for(var c2I:number=0;c2I<c2Len;++c2I)
			{
				var c2V:number;
				c2V=stream.readInt();
				
				c2T[c2I]=c2V;
			}
			
			var c3Len:number=stream.readLen();
			this.c3=new Array<number>(c3Len);
			var c3T:number[]=this.c3;
			for(var c3I:number=0;c3I<c3Len;++c3I)
			{
				var c3V:number;
				c3V=stream.readLong();
				
				c3T[c3I]=c3V;
			}
			
			var c4Len:number=stream.readLen();
			this.c4=new Array<string>(c4Len);
			var c4T:string[]=this.c4;
			for(var c4I:number=0;c4I<c4Len;++c4I)
			{
				var c4V:string;
				c4V=stream.readUTF();
				
				c4T[c4I]=c4V;
			}
			
			var c5Len:number=stream.readLen();
			this.c5=new Array<number[]>(c5Len);
			var c5T:number[][]=this.c5;
			for(var c5I:number=0;c5I<c5Len;++c5I)
			{
				var c5V:number[];
				var c5VLen:number=stream.readLen();
				c5V=new Array<number>(c5VLen);
				var c5VT:number[]=c5V;
				for(var c5VI:number=0;c5VI<c5VLen;++c5VI)
				{
					var c5VV:number;
					c5VV=stream.readInt();
					
					c5VT[c5VI]=c5VV;
				}
				
				c5T[c5I]=c5V;
			}
			
			var c6Len:number=stream.readLen();
			this.c6=new Array<number[][]>(c6Len);
			var c6T:number[][][]=this.c6;
			for(var c6I:number=0;c6I<c6Len;++c6I)
			{
				var c6V:number[][];
				var c6VLen:number=stream.readLen();
				c6V=new Array<number[]>(c6VLen);
				var c6VT:number[][]=c6V;
				for(var c6VI:number=0;c6VI<c6VLen;++c6VI)
				{
					var c6VV:number[];
					var c6VVLen:number=stream.readLen();
					c6VV=new Array<number>(c6VVLen);
					var c6VVT:number[]=c6VV;
					for(var c6VVI:number=0;c6VVI<c6VVLen;++c6VVI)
					{
						var c6VVV:number;
						c6VVV=stream.readInt();
						
						c6VVT[c6VVI]=c6VVV;
					}
					
					c6VT[c6VI]=c6VV;
				}
				
				c6T[c6I]=c6V;
			}
			
			var d1Len:number=stream.readLen();
			if(this.d1!=null)
			{
				this.d1.clear();
				this.d1.ensureCapacity(d1Len);
			}
			else
			{
				this.d1=new SList<number>();
			}
			
			var d1T:SList<number>=this.d1;
			for(var d1I:number=d1Len-1;d1I>=0;--d1I)
			{
				var d1V:number;
				d1V=stream.readInt();
				
				d1T.add(d1V);
			}
			
			var d2Len:number=stream.readLen();
			if(this.d2!=null)
			{
				this.d2.clear();
				this.d2.ensureCapacity(d2Len);
			}
			else
			{
				this.d2=new SList<number>();
			}
			
			var d2T:SList<number>=this.d2;
			for(var d2I:number=d2Len-1;d2I>=0;--d2I)
			{
				var d2V:number;
				d2V=stream.readLong();
				
				d2T.add(d2V);
			}
			
			var d3Len:number=stream.readLen();
			if(this.d3!=null)
			{
				this.d3.clear();
				this.d3.ensureCapacity(d3Len);
			}
			else
			{
				this.d3=new SList<string>();
			}
			
			var d3T:SList<string>=this.d3;
			for(var d3I:number=d3Len-1;d3I>=0;--d3I)
			{
				var d3V:string;
				d3V=stream.readUTF();
				
				d3T.add(d3V);
			}
			
			var d4Len:number=stream.readLen();
			if(this.d4!=null)
			{
				this.d4.clear();
				this.d4.ensureCapacity(d4Len);
			}
			else
			{
				this.d4=new SList<Test2Data>();
			}
			
			var d4T:SList<Test2Data>=this.d4;
			for(var d4I:number=d4Len-1;d4I>=0;--d4I)
			{
				var d4V:Test2Data;
				d4V=stream.readDataSimpleNotNull() as Test2Data;
				
				d4T.add(d4V);
			}
			
			var d5Len:number=stream.readLen();
			if(this.d5!=null)
			{
				this.d5.clear();
				this.d5.ensureCapacity(d5Len);
			}
			else
			{
				this.d5=new SList<Test2Data>();
			}
			
			var d5T:SList<Test2Data>=this.d5;
			for(var d5I:number=d5Len-1;d5I>=0;--d5I)
			{
				var d5V:Test2Data;
				d5V=stream.readDataSimpleNotNull() as Test2Data;
				
				d5T.add(d5V);
			}
			
			if(stream.readBoolean())
			{
				var d6Len:number=stream.readLen();
				if(this.d6!=null)
				{
					this.d6.clear();
					this.d6.ensureCapacity(d6Len);
				}
				else
				{
					this.d6=new SList<Test2Data>();
				}
				
				var d6T:SList<Test2Data>=this.d6;
				for(var d6I:number=d6Len-1;d6I>=0;--d6I)
				{
					var d6V:Test2Data;
					if(stream.readBoolean())
					{
						d6V=stream.readDataSimpleNotNull() as Test2Data;
					}
					else
					{
						d6V=null;
					}
					
					d6T.add(d6V);
				}
			}
			else
			{
				this.d6=null;
			}
			
			var d7Len:number=stream.readLen();
			if(this.d7!=null)
			{
				this.d7.clear();
				this.d7.ensureCapacity(d7Len);
			}
			else
			{
				this.d7=new SSet<number>();
			}
			
			var d7T:SSet<number>=this.d7;
			for(var d7I:number=d7Len-1;d7I>=0;--d7I)
			{
				var d7V:number;
				d7V=stream.readInt();
				
				d7T.add(d7V);
			}
			
			var d8Len:number=stream.readLen();
			if(this.d8!=null)
			{
				this.d8.clear();
				this.d8.ensureCapacity(d8Len);
			}
			else
			{
				this.d8=new SSet<number>();
			}
			
			var d8T:SSet<number>=this.d8;
			for(var d8I:number=d8Len-1;d8I>=0;--d8I)
			{
				var d8V:number;
				d8V=stream.readLong();
				
				d8T.add(d8V);
			}
			
			var d9Len:number=stream.readLen();
			if(this.d9!=null)
			{
				this.d9.clear();
				this.d9.ensureCapacity(d9Len);
			}
			else
			{
				this.d9=new SSet<string>();
			}
			
			var d9T:SSet<string>=this.d9;
			for(var d9I:number=d9Len-1;d9I>=0;--d9I)
			{
				var d9V:string;
				d9V=stream.readUTF();
				
				d9T.add(d9V);
			}
			
			var d10Len:number=stream.readLen();
			if(this.d10!=null)
			{
				this.d10.clear();
				this.d10.ensureCapacity(d10Len);
			}
			else
			{
				this.d10=new SSet<Test2Data>();
			}
			
			var d10T:SSet<Test2Data>=this.d10;
			for(var d10I:number=d10Len-1;d10I>=0;--d10I)
			{
				var d10V:Test2Data;
				d10V=stream.readDataSimpleNotNull() as Test2Data;
				
				d10T.add(d10V);
			}
			
			var d11Len:number=stream.readLen();
			if(this.d11!=null)
			{
				this.d11.clear();
				this.d11.ensureCapacity(d11Len);
			}
			else
			{
				this.d11=new SSet<Test2Data>();
			}
			
			var d11T:SSet<Test2Data>=this.d11;
			for(var d11I:number=d11Len-1;d11I>=0;--d11I)
			{
				var d11V:Test2Data;
				d11V=stream.readDataSimpleNotNull() as Test2Data;
				
				d11T.add(d11V);
			}
			
			var e1Len:number=stream.readLen();
			if(this.e1!=null)
			{
				this.e1.clear();
				this.e1.ensureCapacity(e1Len);
			}
			else
			{
				this.e1=new SMap<number,number>(e1Len);
			}
			
			var e1T:SMap<number,number>=this.e1;
			for(var e1I:number=e1Len-1;e1I>=0;--e1I)
			{
				var e1K:number;
				var e1V:number;
				e1K=stream.readInt();
				
				e1V=stream.readInt();
				
				e1T.put(e1K,e1V);
			}
			
			var e12Len:number=stream.readLen();
			if(this.e12!=null)
			{
				this.e12.clear();
				this.e12.ensureCapacity(e12Len);
			}
			else
			{
				this.e12=new SMap<number,number>(e12Len);
			}
			
			var e12T:SMap<number,number>=this.e12;
			for(var e12I:number=e12Len-1;e12I>=0;--e12I)
			{
				var e12K:number;
				var e12V:number;
				e12K=stream.readLong();
				
				e12V=stream.readLong();
				
				e12T.put(e12K,e12V);
			}
			
			var e2Len:number=stream.readLen();
			if(this.e2!=null)
			{
				this.e2.clear();
				this.e2.ensureCapacity(e2Len);
			}
			else
			{
				this.e2=new SMap<number,Test2Data>(e2Len);
			}
			
			var e2T:SMap<number,Test2Data>=this.e2;
			for(var e2I:number=e2Len-1;e2I>=0;--e2I)
			{
				var e2K:number;
				var e2V:Test2Data;
				e2K=stream.readInt();
				
				e2V=stream.readDataSimpleNotNull() as Test2Data;
				
				e2T.put(e2K,e2V);
			}
			
			var e3Len:number=stream.readLen();
			if(this.e3!=null)
			{
				this.e3.clear();
				this.e3.ensureCapacity(e3Len);
			}
			else
			{
				this.e3=new SMap<number,Test2Data>(e3Len);
			}
			
			var e3T:SMap<number,Test2Data>=this.e3;
			for(var e3I:number=e3Len-1;e3I>=0;--e3I)
			{
				var e3K:number;
				var e3V:Test2Data;
				e3K=stream.readLong();
				
				e3V=stream.readDataSimpleNotNull() as Test2Data;
				
				e3T.put(e3K,e3V);
			}
			
			var e4Len:number=stream.readLen();
			if(this.e4!=null)
			{
				this.e4.clear();
				this.e4.ensureCapacity(e4Len);
			}
			else
			{
				this.e4=new SMap<string,Test2Data>(e4Len);
			}
			
			var e4T:SMap<string,Test2Data>=this.e4;
			for(var e4I:number=e4Len-1;e4I>=0;--e4I)
			{
				var e4K:string;
				var e4V:Test2Data;
				e4K=stream.readUTF();
				
				e4V=stream.readDataSimpleNotNull() as Test2Data;
				
				e4T.put(e4K,e4V);
			}
			
			var e5Len:number=stream.readLen();
			if(this.e5!=null)
			{
				this.e5.clear();
				this.e5.ensureCapacity(e5Len);
			}
			else
			{
				this.e5=new SMap<number,Test2Data>(e5Len);
			}
			
			var e5T:SMap<number,Test2Data>=this.e5;
			for(var e5I:number=e5Len-1;e5I>=0;--e5I)
			{
				var e5K:number;
				var e5V:Test2Data;
				e5K=stream.readInt();
				
				e5V=stream.readDataSimpleNotNull() as Test2Data;
				
				e5T.put(e5K,e5V);
			}
			
			var e6Len:number=stream.readLen();
			if(this.e6!=null)
			{
				this.e6.clear();
				this.e6.ensureCapacity(e6Len);
			}
			else
			{
				this.e6=new SMap<number,Test2Data>(e6Len);
			}
			
			var e6T:SMap<number,Test2Data>=this.e6;
			for(var e6I:number=e6Len-1;e6I>=0;--e6I)
			{
				var e6V:Test2Data;
				e6V=stream.readDataSimpleNotNull() as Test2Data;
				
				e6T.put(e6V.a,e6V);
			}
			
			var e7Len:number=stream.readLen();
			if(this.e7!=null)
			{
				this.e7.clear();
				this.e7.ensureCapacity(e7Len);
			}
			else
			{
				this.e7=new SMap<number,Test2Data>(e7Len);
			}
			
			var e7T:SMap<number,Test2Data>=this.e7;
			for(var e7I:number=e7Len-1;e7I>=0;--e7I)
			{
				var e7V:Test2Data;
				e7V=stream.readDataSimpleNotNull() as Test2Data;
				
				e7T.put(e7V.a,e7V);
			}
			
			var e8Len:number=stream.readLen();
			if(this.e8!=null)
			{
				this.e8.clear();
				this.e8.ensureCapacity(e8Len);
			}
			else
			{
				this.e8=new SMap<number,Test2Data>(e8Len);
			}
			
			var e8T:SMap<number,Test2Data>=this.e8;
			for(var e8I:number=e8Len-1;e8I>=0;--e8I)
			{
				var e8V:Test2Data;
				e8V=stream.readDataSimpleNotNull() as Test2Data;
				
				e8T.put(e8V.a,e8V);
			}
			
			var f1Len:number=stream.readLen();
			this.f1=new Array<SList<number>>(f1Len);
			var f1T:SList<number>[]=this.f1;
			for(var f1I:number=0;f1I<f1Len;++f1I)
			{
				var f1V:SList<number>;
				var f1VLen:number=stream.readLen();
				f1V=new SList<number>();
				var f1VT:SList<number>=f1V;
				for(var f1VI:number=f1VLen-1;f1VI>=0;--f1VI)
				{
					var f1VV:number;
					f1VV=stream.readInt();
					
					f1VT.add(f1VV);
				}
				
				f1T[f1I]=f1V;
			}
			
			var f2Len:number=stream.readLen();
			this.f2=new Array<SList<number[]>>(f2Len);
			var f2T:SList<number[]>[]=this.f2;
			for(var f2I:number=0;f2I<f2Len;++f2I)
			{
				var f2V:SList<number[]>;
				var f2VLen:number=stream.readLen();
				f2V=new SList<number[]>();
				var f2VT:SList<number[]>=f2V;
				for(var f2VI:number=f2VLen-1;f2VI>=0;--f2VI)
				{
					var f2VV:number[];
					var f2VVLen:number=stream.readLen();
					f2VV=new Array<number>(f2VVLen);
					var f2VVT:number[]=f2VV;
					for(var f2VVI:number=0;f2VVI<f2VVLen;++f2VVI)
					{
						var f2VVV:number;
						f2VVV=stream.readInt();
						
						f2VVT[f2VVI]=f2VVV;
					}
					
					f2VT.add(f2VV);
				}
				
				f2T[f2I]=f2V;
			}
			
			var f3Len:number=stream.readLen();
			this.f3=new Array<SList<Test2Data>>(f3Len);
			var f3T:SList<Test2Data>[]=this.f3;
			for(var f3I:number=0;f3I<f3Len;++f3I)
			{
				var f3V:SList<Test2Data>;
				var f3VLen:number=stream.readLen();
				f3V=new SList<Test2Data>();
				var f3VT:SList<Test2Data>=f3V;
				for(var f3VI:number=f3VLen-1;f3VI>=0;--f3VI)
				{
					var f3VV:Test2Data;
					f3VV=stream.readDataSimpleNotNull() as Test2Data;
					
					f3VT.add(f3VV);
				}
				
				f3T[f3I]=f3V;
			}
			
			var f4Len:number=stream.readLen();
			this.f4=new Array<SList<Test2Data[]>>(f4Len);
			var f4T:SList<Test2Data[]>[]=this.f4;
			for(var f4I:number=0;f4I<f4Len;++f4I)
			{
				var f4V:SList<Test2Data[]>;
				var f4VLen:number=stream.readLen();
				f4V=new SList<Test2Data[]>();
				var f4VT:SList<Test2Data[]>=f4V;
				for(var f4VI:number=f4VLen-1;f4VI>=0;--f4VI)
				{
					var f4VV:Test2Data[];
					var f4VVLen:number=stream.readLen();
					f4VV=new Array<Test2Data>(f4VVLen);
					var f4VVT:Test2Data[]=f4VV;
					for(var f4VVI:number=0;f4VVI<f4VVLen;++f4VVI)
					{
						var f4VVV:Test2Data;
						f4VVV=stream.readDataSimpleNotNull() as Test2Data;
						
						f4VVT[f4VVI]=f4VVV;
					}
					
					f4VT.add(f4VV);
				}
				
				f4T[f4I]=f4V;
			}
			
			if(stream.readBoolean())
			{
				var f5Len:number=stream.readLen();
				this.f5=new Array<SList<Test2Data>>(f5Len);
				var f5T:SList<Test2Data>[]=this.f5;
				for(var f5I:number=0;f5I<f5Len;++f5I)
				{
					var f5V:SList<Test2Data>;
					if(stream.readBoolean())
					{
						var f5VLen:number=stream.readLen();
						f5V=new SList<Test2Data>();
						var f5VT:SList<Test2Data>=f5V;
						for(var f5VI:number=f5VLen-1;f5VI>=0;--f5VI)
						{
							var f5VV:Test2Data;
							if(stream.readBoolean())
							{
								f5VV=stream.readDataSimpleNotNull() as Test2Data;
							}
							else
							{
								f5VV=null;
							}
							
							f5VT.add(f5VV);
						}
					}
					else
					{
						f5V=null;
					}
					
					f5T[f5I]=f5V;
				}
			}
			else
			{
				this.f5=null;
			}
			
			if(stream.readBoolean())
			{
				var f6Len:number=stream.readLen();
				this.f6=new Array<SList<Test2Data[]>>(f6Len);
				var f6T:SList<Test2Data[]>[]=this.f6;
				for(var f6I:number=0;f6I<f6Len;++f6I)
				{
					var f6V:SList<Test2Data[]>;
					if(stream.readBoolean())
					{
						var f6VLen:number=stream.readLen();
						f6V=new SList<Test2Data[]>();
						var f6VT:SList<Test2Data[]>=f6V;
						for(var f6VI:number=f6VLen-1;f6VI>=0;--f6VI)
						{
							var f6VV:Test2Data[];
							if(stream.readBoolean())
							{
								var f6VVLen:number=stream.readLen();
								f6VV=new Array<Test2Data>(f6VVLen);
								var f6VVT:Test2Data[]=f6VV;
								for(var f6VVI:number=0;f6VVI<f6VVLen;++f6VVI)
								{
									var f6VVV:Test2Data;
									if(stream.readBoolean())
									{
										f6VVV=stream.readDataSimpleNotNull() as Test2Data;
									}
									else
									{
										f6VVV=null;
									}
									
									f6VVT[f6VVI]=f6VVV;
								}
							}
							else
							{
								f6VV=null;
							}
							
							f6VT.add(f6VV);
						}
					}
					else
					{
						f6V=null;
					}
					
					f6T[f6I]=f6V;
				}
			}
			else
			{
				this.f6=null;
			}
			
			var g1Len:number=stream.readLen();
			if(this.g1!=null)
			{
				this.g1.clear();
				this.g1.ensureCapacity(g1Len);
			}
			else
			{
				this.g1=new SMap<number,SMap<number,Test2Data>>(g1Len);
			}
			
			var g1T:SMap<number,SMap<number,Test2Data>>=this.g1;
			for(var g1I:number=g1Len-1;g1I>=0;--g1I)
			{
				var g1K:number;
				var g1V:SMap<number,Test2Data>;
				g1K=stream.readInt();
				
				var g1VLen:number=stream.readLen();
				g1V=new SMap<number,Test2Data>(g1VLen);
				var g1VT:SMap<number,Test2Data>=g1V;
				for(var g1VI:number=g1VLen-1;g1VI>=0;--g1VI)
				{
					var g1VK:number;
					var g1VV:Test2Data;
					g1VK=stream.readInt();
					
					g1VV=stream.readDataSimpleNotNull() as Test2Data;
					
					g1VT.put(g1VK,g1VV);
				}
				
				g1T.put(g1K,g1V);
			}
			
			var h1Len:number=stream.readLen();
			if(this.h1!=null)
			{
				this.h1.clear();
				this.h1.ensureCapacity(h1Len);
			}
			else
			{
				this.h1=new SList<number>();
			}
			
			var h1T:SList<number>=this.h1;
			for(var h1I:number=h1Len-1;h1I>=0;--h1I)
			{
				var h1V:number;
				h1V=stream.readInt();
				
				h1T.add(h1V);
			}
			
			var h2Len:number=stream.readLen();
			if(this.h2!=null)
			{
				this.h2.clear();
				this.h2.ensureCapacity(h2Len);
			}
			else
			{
				this.h2=new SList<Test2Data>();
			}
			
			var h2T:SList<Test2Data>=this.h2;
			for(var h2I:number=h2Len-1;h2I>=0;--h2I)
			{
				var h2V:Test2Data;
				h2V=stream.readDataSimpleNotNull() as Test2Data;
				
				h2T.add(h2V);
			}
			
			var h3Len:number=stream.readLen();
			if(this.h3!=null)
			{
				this.h3.clear();
				this.h3.ensureCapacity(h3Len);
			}
			else
			{
				this.h3=new SMap<number,SList<Test2Data>>(h3Len);
			}
			
			var h3T:SMap<number,SList<Test2Data>>=this.h3;
			for(var h3I:number=h3Len-1;h3I>=0;--h3I)
			{
				var h3K:number;
				var h3V:SList<Test2Data>;
				h3K=stream.readInt();
				
				var h3VLen:number=stream.readLen();
				h3V=new SList<Test2Data>();
				var h3VT:SList<Test2Data>=h3V;
				for(var h3VI:number=h3VLen-1;h3VI>=0;--h3VI)
				{
					var h3VV:Test2Data;
					h3VV=stream.readDataSimpleNotNull() as Test2Data;
					
					h3VT.add(h3VV);
				}
				
				h3T.put(h3K,h3V);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeBoolean(this.a1);
			
			stream.writeByte(this.a2);
			
			stream.writeInt(this.a6);
			
			stream.writeFloat(this.a7);
			
			stream.writeDouble(this.a8);
			
			stream.writeLong(this.a9);
			
			stream.writeUTF(this.a10);
			
			stream.writeDataSimpleNotNull(this.b1);
			
			stream.writeDataSimpleNotNull(this.b2);
			
			if(this.b3!=null)
			{
				stream.writeBoolean(true);
				stream.writeDataSimpleNotNull(this.b3);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.b4!=null)
			{
				stream.writeBoolean(true);
				stream.writeDataSimpleNotNull(this.b4);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			var c1T:number[]=this.c1;
			stream.writeLen(c1T.length);
			for(var c1VI=0,c1VLen=c1T.length;c1VI<c1VLen;++c1VI)
			{
				var c1V:number=c1T[c1VI];
				stream.writeByte(c1V);
				
			}
			
			var c2T:number[]=this.c2;
			stream.writeLen(c2T.length);
			for(var c2VI=0,c2VLen=c2T.length;c2VI<c2VLen;++c2VI)
			{
				var c2V:number=c2T[c2VI];
				stream.writeInt(c2V);
				
			}
			
			var c3T:number[]=this.c3;
			stream.writeLen(c3T.length);
			for(var c3VI=0,c3VLen=c3T.length;c3VI<c3VLen;++c3VI)
			{
				var c3V:number=c3T[c3VI];
				stream.writeLong(c3V);
				
			}
			
			var c4T:string[]=this.c4;
			stream.writeLen(c4T.length);
			for(var c4VI=0,c4VLen=c4T.length;c4VI<c4VLen;++c4VI)
			{
				var c4V:string=c4T[c4VI];
				stream.writeUTF(c4V);
				
			}
			
			var c5T:number[][]=this.c5;
			stream.writeLen(c5T.length);
			for(var c5VI=0,c5VLen=c5T.length;c5VI<c5VLen;++c5VI)
			{
				var c5V:number[]=c5T[c5VI];
				var c5VT:number[]=c5V;
				stream.writeLen(c5VT.length);
				for(var c5VVI=0,c5VVLen=c5VT.length;c5VVI<c5VVLen;++c5VVI)
				{
					var c5VV:number=c5VT[c5VVI];
					stream.writeInt(c5VV);
					
				}
				
			}
			
			var c6T:number[][][]=this.c6;
			stream.writeLen(c6T.length);
			for(var c6VI=0,c6VLen=c6T.length;c6VI<c6VLen;++c6VI)
			{
				var c6V:number[][]=c6T[c6VI];
				var c6VT:number[][]=c6V;
				stream.writeLen(c6VT.length);
				for(var c6VVI=0,c6VVLen=c6VT.length;c6VVI<c6VVLen;++c6VVI)
				{
					var c6VV:number[]=c6VT[c6VVI];
					var c6VVT:number[]=c6VV;
					stream.writeLen(c6VVT.length);
					for(var c6VVVI=0,c6VVVLen=c6VVT.length;c6VVVI<c6VVVLen;++c6VVVI)
					{
						var c6VVV:number=c6VVT[c6VVVI];
						stream.writeInt(c6VVV);
						
					}
					
				}
				
			}
			
			stream.writeLen(this.d1.size());
			if(!this.d1.isEmpty())
			{
				for(var d1VI=0,d1VLen=this.d1.length;d1VI<d1VLen;++d1VI)
				{
					var d1V:number=this.d1[d1VI];
					stream.writeInt(d1V);
					
				}
			}
			
			stream.writeLen(this.d2.size());
			if(!this.d2.isEmpty())
			{
				for(var d2VI=0,d2VLen=this.d2.length;d2VI<d2VLen;++d2VI)
				{
					var d2V:number=this.d2[d2VI];
					stream.writeLong(d2V);
					
				}
			}
			
			stream.writeLen(this.d3.size());
			if(!this.d3.isEmpty())
			{
				for(var d3VI=0,d3VLen=this.d3.length;d3VI<d3VLen;++d3VI)
				{
					var d3V:string=this.d3[d3VI];
					stream.writeUTF(d3V);
					
				}
			}
			
			stream.writeLen(this.d4.size());
			if(!this.d4.isEmpty())
			{
				for(var d4VI=0,d4VLen=this.d4.length;d4VI<d4VLen;++d4VI)
				{
					var d4V:Test2Data=this.d4[d4VI];
					stream.writeDataSimpleNotNull(d4V);
					
				}
			}
			
			stream.writeLen(this.d5.size());
			if(!this.d5.isEmpty())
			{
				for(var d5VI=0,d5VLen=this.d5.length;d5VI<d5VLen;++d5VI)
				{
					var d5V:Test2Data=this.d5[d5VI];
					stream.writeDataSimpleNotNull(d5V);
					
				}
			}
			
			if(this.d6!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.d6.size());
				if(!this.d6.isEmpty())
				{
					for(var d6VI=0,d6VLen=this.d6.length;d6VI<d6VLen;++d6VI)
					{
						var d6V:Test2Data=this.d6[d6VI];
						if(d6V!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(d6V);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeLen(this.d7.size());
			if(!this.d7.isEmpty())
			{
				for(var d7V of this.d7.getKeys())
				{
					stream.writeInt(d7V);
					
				}
			}
			
			stream.writeLen(this.d8.size());
			if(!this.d8.isEmpty())
			{
				for(var d8V of this.d8.getKeys())
				{
					stream.writeLong(d8V);
					
				}
			}
			
			stream.writeLen(this.d9.size());
			if(!this.d9.isEmpty())
			{
				for(var d9V of this.d9.getKeys())
				{
					stream.writeUTF(d9V);
					
				}
			}
			
			stream.writeLen(this.d10.size());
			if(!this.d10.isEmpty())
			{
				for(var d10V of this.d10.getKeys())
				{
					stream.writeDataSimpleNotNull(d10V);
					
				}
			}
			
			stream.writeLen(this.d11.size());
			if(!this.d11.isEmpty())
			{
				for(var d11V of this.d11.getKeys())
				{
					stream.writeDataSimpleNotNull(d11V);
					
				}
			}
			
			stream.writeLen(this.e1.size());
			if(!this.e1.isEmpty())
			{
				for(var e1K of this.e1.getKeys())
				{
					var e1V:number=this.e1.get(e1K);
					stream.writeInt(e1K);
					
					stream.writeInt(e1V);
					
				}
			}
			
			stream.writeLen(this.e12.size());
			if(!this.e12.isEmpty())
			{
				for(var e12K of this.e12.getKeys())
				{
					var e12V:number=this.e12.get(e12K);
					stream.writeLong(e12K);
					
					stream.writeLong(e12V);
					
				}
			}
			
			stream.writeLen(this.e2.size());
			if(!this.e2.isEmpty())
			{
				for(var e2K of this.e2.getKeys())
				{
					var e2V:Test2Data=this.e2.get(e2K);
					stream.writeInt(e2K);
					
					stream.writeDataSimpleNotNull(e2V);
					
				}
			}
			
			stream.writeLen(this.e3.size());
			if(!this.e3.isEmpty())
			{
				for(var e3K of this.e3.getKeys())
				{
					var e3V:Test2Data=this.e3.get(e3K);
					stream.writeLong(e3K);
					
					stream.writeDataSimpleNotNull(e3V);
					
				}
			}
			
			stream.writeLen(this.e4.size());
			if(!this.e4.isEmpty())
			{
				for(var e4K of this.e4.getKeys())
				{
					var e4V:Test2Data=this.e4.get(e4K);
					stream.writeUTF(e4K);
					
					stream.writeDataSimpleNotNull(e4V);
					
				}
			}
			
			stream.writeLen(this.e5.size());
			if(!this.e5.isEmpty())
			{
				for(var e5K of this.e5.getKeys())
				{
					var e5V:Test2Data=this.e5.get(e5K);
					stream.writeInt(e5K);
					
					stream.writeDataSimpleNotNull(e5V);
					
				}
			}
			
			stream.writeLen(this.e6.size());
			if(!this.e6.isEmpty())
			{
				for(var e6V of this.e6.getValues())
				{
					stream.writeDataSimpleNotNull(e6V);
					
				}
			}
			
			stream.writeLen(this.e7.size());
			if(!this.e7.isEmpty())
			{
				for(var e7V of this.e7.getValues())
				{
					stream.writeDataSimpleNotNull(e7V);
					
				}
			}
			
			stream.writeLen(this.e8.size());
			if(!this.e8.isEmpty())
			{
				for(var e8V of this.e8.getValues())
				{
					stream.writeDataSimpleNotNull(e8V);
					
				}
			}
			
			var f1T:SList<number>[]=this.f1;
			stream.writeLen(f1T.length);
			for(var f1VI=0,f1VLen=f1T.length;f1VI<f1VLen;++f1VI)
			{
				var f1V:SList<number>=f1T[f1VI];
				stream.writeLen(f1V.size());
				if(!f1V.isEmpty())
				{
					for(var f1VVI=0,f1VVLen=f1V.length;f1VVI<f1VVLen;++f1VVI)
					{
						var f1VV:number=f1V[f1VVI];
						stream.writeInt(f1VV);
						
					}
				}
				
			}
			
			var f2T:SList<number[]>[]=this.f2;
			stream.writeLen(f2T.length);
			for(var f2VI=0,f2VLen=f2T.length;f2VI<f2VLen;++f2VI)
			{
				var f2V:SList<number[]>=f2T[f2VI];
				stream.writeLen(f2V.size());
				if(!f2V.isEmpty())
				{
					for(var f2VVI=0,f2VVLen=f2V.length;f2VVI<f2VVLen;++f2VVI)
					{
						var f2VV:number[]=f2V[f2VVI];
						var f2VVT:number[]=f2VV;
						stream.writeLen(f2VVT.length);
						for(var f2VVVI=0,f2VVVLen=f2VVT.length;f2VVVI<f2VVVLen;++f2VVVI)
						{
							var f2VVV:number=f2VVT[f2VVVI];
							stream.writeInt(f2VVV);
							
						}
						
					}
				}
				
			}
			
			var f3T:SList<Test2Data>[]=this.f3;
			stream.writeLen(f3T.length);
			for(var f3VI=0,f3VLen=f3T.length;f3VI<f3VLen;++f3VI)
			{
				var f3V:SList<Test2Data>=f3T[f3VI];
				stream.writeLen(f3V.size());
				if(!f3V.isEmpty())
				{
					for(var f3VVI=0,f3VVLen=f3V.length;f3VVI<f3VVLen;++f3VVI)
					{
						var f3VV:Test2Data=f3V[f3VVI];
						stream.writeDataSimpleNotNull(f3VV);
						
					}
				}
				
			}
			
			var f4T:SList<Test2Data[]>[]=this.f4;
			stream.writeLen(f4T.length);
			for(var f4VI=0,f4VLen=f4T.length;f4VI<f4VLen;++f4VI)
			{
				var f4V:SList<Test2Data[]>=f4T[f4VI];
				stream.writeLen(f4V.size());
				if(!f4V.isEmpty())
				{
					for(var f4VVI=0,f4VVLen=f4V.length;f4VVI<f4VVLen;++f4VVI)
					{
						var f4VV:Test2Data[]=f4V[f4VVI];
						var f4VVT:Test2Data[]=f4VV;
						stream.writeLen(f4VVT.length);
						for(var f4VVVI=0,f4VVVLen=f4VVT.length;f4VVVI<f4VVVLen;++f4VVVI)
						{
							var f4VVV:Test2Data=f4VVT[f4VVVI];
							stream.writeDataSimpleNotNull(f4VVV);
							
						}
						
					}
				}
				
			}
			
			if(this.f5!=null)
			{
				stream.writeBoolean(true);
				var f5T:SList<Test2Data>[]=this.f5;
				stream.writeLen(f5T.length);
				for(var f5VI=0,f5VLen=f5T.length;f5VI<f5VLen;++f5VI)
				{
					var f5V:SList<Test2Data>=f5T[f5VI];
					if(f5V!=null)
					{
						stream.writeBoolean(true);
						stream.writeLen(f5V.size());
						if(!f5V.isEmpty())
						{
							for(var f5VVI=0,f5VVLen=f5V.length;f5VVI<f5VVLen;++f5VVI)
							{
								var f5VV:Test2Data=f5V[f5VVI];
								if(f5VV!=null)
								{
									stream.writeBoolean(true);
									stream.writeDataSimpleNotNull(f5VV);
								}
								else
								{
									stream.writeBoolean(false);
								}
								
							}
						}
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.f6!=null)
			{
				stream.writeBoolean(true);
				var f6T:SList<Test2Data[]>[]=this.f6;
				stream.writeLen(f6T.length);
				for(var f6VI=0,f6VLen=f6T.length;f6VI<f6VLen;++f6VI)
				{
					var f6V:SList<Test2Data[]>=f6T[f6VI];
					if(f6V!=null)
					{
						stream.writeBoolean(true);
						stream.writeLen(f6V.size());
						if(!f6V.isEmpty())
						{
							for(var f6VVI=0,f6VVLen=f6V.length;f6VVI<f6VVLen;++f6VVI)
							{
								var f6VV:Test2Data[]=f6V[f6VVI];
								if(f6VV!=null)
								{
									stream.writeBoolean(true);
									var f6VVT:Test2Data[]=f6VV;
									stream.writeLen(f6VVT.length);
									for(var f6VVVI=0,f6VVVLen=f6VVT.length;f6VVVI<f6VVVLen;++f6VVVI)
									{
										var f6VVV:Test2Data=f6VVT[f6VVVI];
										if(f6VVV!=null)
										{
											stream.writeBoolean(true);
											stream.writeDataSimpleNotNull(f6VVV);
										}
										else
										{
											stream.writeBoolean(false);
										}
										
									}
								}
								else
								{
									stream.writeBoolean(false);
								}
								
							}
						}
					}
					else
					{
						stream.writeBoolean(false);
					}
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeLen(this.g1.size());
			if(!this.g1.isEmpty())
			{
				for(var g1K of this.g1.getKeys())
				{
					var g1V:SMap<number,Test2Data>=this.g1.get(g1K);
					stream.writeInt(g1K);
					
					stream.writeLen(g1V.size());
					if(!g1V.isEmpty())
					{
						for(var g1VK of g1V.getKeys())
						{
							var g1VV:Test2Data=g1V.get(g1VK);
							stream.writeInt(g1VK);
							
							stream.writeDataSimpleNotNull(g1VV);
							
						}
					}
					
				}
			}
			
			stream.writeLen(this.h1.size());
			if(!this.h1.isEmpty())
			{
				for(var h1VI=0,h1VLen=this.h1.length;h1VI<h1VLen;++h1VI)
				{
					var h1V:number=this.h1[h1VI];
					stream.writeInt(h1V);
					
				}
			}
			
			stream.writeLen(this.h2.size());
			if(!this.h2.isEmpty())
			{
				for(var h2VI=0,h2VLen=this.h2.length;h2VI<h2VLen;++h2VI)
				{
					var h2V:Test2Data=this.h2[h2VI];
					stream.writeDataSimpleNotNull(h2V);
					
				}
			}
			
			stream.writeLen(this.h3.size());
			if(!this.h3.isEmpty())
			{
				for(var h3K of this.h3.getKeys())
				{
					var h3V:SList<Test2Data>=this.h3.get(h3K);
					stream.writeInt(h3K);
					
					stream.writeLen(h3V.size());
					if(!h3V.isEmpty())
					{
						for(var h3VVI=0,h3VVLen=h3V.length;h3VVI<h3VVLen;++h3VVI)
						{
							var h3VV:Test2Data=h3V[h3VVI];
							stream.writeDataSimpleNotNull(h3VV);
							
						}
					}
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof TestData))
				return;
			
			var mData:TestData=data as TestData;
			
			this.a1=mData.a1;
			this.a2=mData.a2;
			this.a6=mData.a6;
			this.a7=mData.a7;
			this.a8=mData.a8;
			this.a9=mData.a9;
			this.a10=mData.a10;
			this.b1=mData.b1;
			this.b2=mData.b2;
			this.b3=mData.b3;
			this.b4=mData.b4;
			this.c1=mData.c1;
			this.c2=mData.c2;
			this.c3=mData.c3;
			this.c4=mData.c4;
			this.c5=mData.c5;
			this.c6=mData.c6;
			this.d1=mData.d1;
			this.d2=mData.d2;
			this.d3=mData.d3;
			this.d4=mData.d4;
			this.d5=mData.d5;
			this.d6=mData.d6;
			this.d7=mData.d7;
			this.d8=mData.d8;
			this.d9=mData.d9;
			this.d10=mData.d10;
			this.d11=mData.d11;
			this.e1=mData.e1;
			this.e12=mData.e12;
			this.e2=mData.e2;
			this.e3=mData.e3;
			this.e4=mData.e4;
			this.e5=mData.e5;
			this.e6=mData.e6;
			this.e7=mData.e7;
			this.e8=mData.e8;
			this.f1=mData.f1;
			this.f2=mData.f2;
			this.f3=mData.f3;
			this.f4=mData.f4;
			this.f5=mData.f5;
			this.f6=mData.f6;
			this.g1=mData.g1;
			this.h1=mData.h1;
			this.h2=mData.h2;
			this.h3=mData.h3;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof TestData))
				return;
			
			var mData:TestData=data as TestData;
			
			this.a1=mData.a1;
			
			this.a2=mData.a2;
			
			this.a6=mData.a6;
			
			this.a7=mData.a7;
			
			this.a8=mData.a8;
			
			this.a9=mData.a9;
			
			this.a10=mData.a10;
			
			this.b1=mData.b1.clone() as Test2Data;
			
			this.b2=mData.b2.clone() as Test2Data;
			
			if(mData.b3!=null)
			{
				this.b3=mData.b3.clone() as Test2Data;
			}
			else
			{
				this.b3=null;
			}
			
			if(mData.b4!=null)
			{
				this.b4=mData.b4.clone() as Test2Data;
			}
			else
			{
				this.b4=null;
			}
			
			var c1R:number[]=mData.c1;
			var c1Len:number=c1R.length;
			this.c1=new Array<number>(c1Len);
			var c1T:number[]=this.c1;
			for(var c1I:number=0;c1I<c1Len;++c1I)
			{
				var c1V:number=c1R[c1I];
				var c1U:number;
				c1U=c1V;
				
				c1T[c1I]=c1U;
			}
			
			var c2R:number[]=mData.c2;
			var c2Len:number=c2R.length;
			this.c2=new Array<number>(c2Len);
			var c2T:number[]=this.c2;
			for(var c2I:number=0;c2I<c2Len;++c2I)
			{
				var c2V:number=c2R[c2I];
				var c2U:number;
				c2U=c2V;
				
				c2T[c2I]=c2U;
			}
			
			var c3R:number[]=mData.c3;
			var c3Len:number=c3R.length;
			this.c3=new Array<number>(c3Len);
			var c3T:number[]=this.c3;
			for(var c3I:number=0;c3I<c3Len;++c3I)
			{
				var c3V:number=c3R[c3I];
				var c3U:number;
				c3U=c3V;
				
				c3T[c3I]=c3U;
			}
			
			var c4R:string[]=mData.c4;
			var c4Len:number=c4R.length;
			this.c4=new Array<string>(c4Len);
			var c4T:string[]=this.c4;
			for(var c4I:number=0;c4I<c4Len;++c4I)
			{
				var c4V:string=c4R[c4I];
				var c4U:string;
				c4U=c4V;
				
				c4T[c4I]=c4U;
			}
			
			var c5R:number[][]=mData.c5;
			var c5Len:number=c5R.length;
			this.c5=new Array<number[]>(c5Len);
			var c5T:number[][]=this.c5;
			for(var c5I:number=0;c5I<c5Len;++c5I)
			{
				var c5V:number[]=c5R[c5I];
				var c5U:number[];
				var c5UR:number[]=c5V;
				var c5ULen:number=c5UR.length;
				c5U=new Array<number>(c5ULen);
				var c5UT:number[]=c5U;
				for(var c5UI:number=0;c5UI<c5ULen;++c5UI)
				{
					var c5UV:number=c5UR[c5UI];
					var c5UU:number;
					c5UU=c5UV;
					
					c5UT[c5UI]=c5UU;
				}
				
				c5T[c5I]=c5U;
			}
			
			var c6R:number[][][]=mData.c6;
			var c6Len:number=c6R.length;
			this.c6=new Array<number[][]>(c6Len);
			var c6T:number[][][]=this.c6;
			for(var c6I:number=0;c6I<c6Len;++c6I)
			{
				var c6V:number[][]=c6R[c6I];
				var c6U:number[][];
				var c6UR:number[][]=c6V;
				var c6ULen:number=c6UR.length;
				c6U=new Array<number[]>(c6ULen);
				var c6UT:number[][]=c6U;
				for(var c6UI:number=0;c6UI<c6ULen;++c6UI)
				{
					var c6UV:number[]=c6UR[c6UI];
					var c6UU:number[];
					var c6UUR:number[]=c6UV;
					var c6UULen:number=c6UUR.length;
					c6UU=new Array<number>(c6UULen);
					var c6UUT:number[]=c6UU;
					for(var c6UUI:number=0;c6UUI<c6UULen;++c6UUI)
					{
						var c6UUV:number=c6UUR[c6UUI];
						var c6UUU:number;
						c6UUU=c6UUV;
						
						c6UUT[c6UUI]=c6UUU;
					}
					
					c6UT[c6UI]=c6UU;
				}
				
				c6T[c6I]=c6U;
			}
			
			if(this.d1!=null)
			{
				this.d1.clear();
				this.d1.ensureCapacity(mData.d1.size());
			}
			else
			{
				this.d1=new SList<number>();
			}
			
			var d1T:SList<number>=this.d1;
			if(!mData.d1.isEmpty())
			{
				for(var d1VI=0,d1VLen=mData.d1.length;d1VI<d1VLen;++d1VI)
				{
					var d1V:number=mData.d1[d1VI];
					var d1U:number;
					d1U=d1V;
					
					d1T.add(d1U);
				}
			}
			
			if(this.d2!=null)
			{
				this.d2.clear();
				this.d2.ensureCapacity(mData.d2.size());
			}
			else
			{
				this.d2=new SList<number>();
			}
			
			var d2T:SList<number>=this.d2;
			if(!mData.d2.isEmpty())
			{
				for(var d2VI=0,d2VLen=mData.d2.length;d2VI<d2VLen;++d2VI)
				{
					var d2V:number=mData.d2[d2VI];
					var d2U:number;
					d2U=d2V;
					
					d2T.add(d2U);
				}
			}
			
			if(this.d3!=null)
			{
				this.d3.clear();
				this.d3.ensureCapacity(mData.d3.size());
			}
			else
			{
				this.d3=new SList<string>();
			}
			
			var d3T:SList<string>=this.d3;
			if(!mData.d3.isEmpty())
			{
				for(var d3VI=0,d3VLen=mData.d3.length;d3VI<d3VLen;++d3VI)
				{
					var d3V:string=mData.d3[d3VI];
					var d3U:string;
					d3U=d3V;
					
					d3T.add(d3U);
				}
			}
			
			if(this.d4!=null)
			{
				this.d4.clear();
				this.d4.ensureCapacity(mData.d4.size());
			}
			else
			{
				this.d4=new SList<Test2Data>();
			}
			
			var d4T:SList<Test2Data>=this.d4;
			if(!mData.d4.isEmpty())
			{
				for(var d4VI=0,d4VLen=mData.d4.length;d4VI<d4VLen;++d4VI)
				{
					var d4V:Test2Data=mData.d4[d4VI];
					var d4U:Test2Data;
					d4U=d4V.clone() as Test2Data;
					
					d4T.add(d4U);
				}
			}
			
			if(this.d5!=null)
			{
				this.d5.clear();
				this.d5.ensureCapacity(mData.d5.size());
			}
			else
			{
				this.d5=new SList<Test2Data>();
			}
			
			var d5T:SList<Test2Data>=this.d5;
			if(!mData.d5.isEmpty())
			{
				for(var d5VI=0,d5VLen=mData.d5.length;d5VI<d5VLen;++d5VI)
				{
					var d5V:Test2Data=mData.d5[d5VI];
					var d5U:Test2Data;
					d5U=d5V.clone() as Test2Data;
					
					d5T.add(d5U);
				}
			}
			
			if(mData.d6!=null)
			{
				if(this.d6!=null)
				{
					this.d6.clear();
					this.d6.ensureCapacity(mData.d6.size());
				}
				else
				{
					this.d6=new SList<Test2Data>();
				}
				
				var d6T:SList<Test2Data>=this.d6;
				if(!mData.d6.isEmpty())
				{
					for(var d6VI=0,d6VLen=mData.d6.length;d6VI<d6VLen;++d6VI)
					{
						var d6V:Test2Data=mData.d6[d6VI];
						var d6U:Test2Data;
						if(d6V!=null)
						{
							d6U=d6V.clone() as Test2Data;
						}
						else
						{
							d6U=null;
						}
						
						d6T.add(d6U);
					}
				}
			}
			else
			{
				this.d6=null;
			}
			
			if(this.d7!=null)
			{
				this.d7.clear();
				this.d7.ensureCapacity(mData.d7.size());
			}
			else
			{
				this.d7=new SSet<number>();
			}
			
			var d7T:SSet<number>=this.d7;
			if(!mData.d7.isEmpty())
			{
				for(var d7V of mData.d7.getKeys())
				{
					var d7U:number;
					d7U=d7V;
					
					d7T.add(d7U);
				}
			}
			
			if(this.d8!=null)
			{
				this.d8.clear();
				this.d8.ensureCapacity(mData.d8.size());
			}
			else
			{
				this.d8=new SSet<number>();
			}
			
			var d8T:SSet<number>=this.d8;
			if(!mData.d8.isEmpty())
			{
				for(var d8V of mData.d8.getKeys())
				{
					var d8U:number;
					d8U=d8V;
					
					d8T.add(d8U);
				}
			}
			
			if(this.d9!=null)
			{
				this.d9.clear();
				this.d9.ensureCapacity(mData.d9.size());
			}
			else
			{
				this.d9=new SSet<string>();
			}
			
			var d9T:SSet<string>=this.d9;
			if(!mData.d9.isEmpty())
			{
				for(var d9V of mData.d9.getKeys())
				{
					var d9U:string;
					d9U=d9V;
					
					d9T.add(d9U);
				}
			}
			
			if(this.d10!=null)
			{
				this.d10.clear();
				this.d10.ensureCapacity(mData.d10.size());
			}
			else
			{
				this.d10=new SSet<Test2Data>();
			}
			
			var d10T:SSet<Test2Data>=this.d10;
			if(!mData.d10.isEmpty())
			{
				for(var d10V of mData.d10.getKeys())
				{
					var d10U:Test2Data;
					d10U=d10V.clone() as Test2Data;
					
					d10T.add(d10U);
				}
			}
			
			if(this.d11!=null)
			{
				this.d11.clear();
				this.d11.ensureCapacity(mData.d11.size());
			}
			else
			{
				this.d11=new SSet<Test2Data>();
			}
			
			var d11T:SSet<Test2Data>=this.d11;
			if(!mData.d11.isEmpty())
			{
				for(var d11V of mData.d11.getKeys())
				{
					var d11U:Test2Data;
					d11U=d11V.clone() as Test2Data;
					
					d11T.add(d11U);
				}
			}
			
			if(this.e1!=null)
			{
				this.e1.clear();
				this.e1.ensureCapacity(mData.e1.size());
			}
			else
			{
				this.e1=new SMap<number,number>(mData.e1.size());
			}
			
			var e1T:SMap<number,number>=this.e1;
			if(!mData.e1.isEmpty())
			{
				for(var e1K of mData.e1.getKeys())
				{
					var e1V:number=mData.e1.get(e1K);
					var e1W:number;
					var e1U:number;
					e1W=e1K;
					
					e1U=e1V;
					
					e1T.put(e1W,e1U);
				}
			}
			
			if(this.e12!=null)
			{
				this.e12.clear();
				this.e12.ensureCapacity(mData.e12.size());
			}
			else
			{
				this.e12=new SMap<number,number>(mData.e12.size());
			}
			
			var e12T:SMap<number,number>=this.e12;
			if(!mData.e12.isEmpty())
			{
				for(var e12K of mData.e12.getKeys())
				{
					var e12V:number=mData.e12.get(e12K);
					var e12W:number;
					var e12U:number;
					e12W=e12K;
					
					e12U=e12V;
					
					e12T.put(e12W,e12U);
				}
			}
			
			if(this.e2!=null)
			{
				this.e2.clear();
				this.e2.ensureCapacity(mData.e2.size());
			}
			else
			{
				this.e2=new SMap<number,Test2Data>(mData.e2.size());
			}
			
			var e2T:SMap<number,Test2Data>=this.e2;
			if(!mData.e2.isEmpty())
			{
				for(var e2K of mData.e2.getKeys())
				{
					var e2V:Test2Data=mData.e2.get(e2K);
					var e2W:number;
					var e2U:Test2Data;
					e2W=e2K;
					
					e2U=e2V.clone() as Test2Data;
					
					e2T.put(e2W,e2U);
				}
			}
			
			if(this.e3!=null)
			{
				this.e3.clear();
				this.e3.ensureCapacity(mData.e3.size());
			}
			else
			{
				this.e3=new SMap<number,Test2Data>(mData.e3.size());
			}
			
			var e3T:SMap<number,Test2Data>=this.e3;
			if(!mData.e3.isEmpty())
			{
				for(var e3K of mData.e3.getKeys())
				{
					var e3V:Test2Data=mData.e3.get(e3K);
					var e3W:number;
					var e3U:Test2Data;
					e3W=e3K;
					
					e3U=e3V.clone() as Test2Data;
					
					e3T.put(e3W,e3U);
				}
			}
			
			if(this.e4!=null)
			{
				this.e4.clear();
				this.e4.ensureCapacity(mData.e4.size());
			}
			else
			{
				this.e4=new SMap<string,Test2Data>(mData.e4.size());
			}
			
			var e4T:SMap<string,Test2Data>=this.e4;
			if(!mData.e4.isEmpty())
			{
				for(var e4K of mData.e4.getKeys())
				{
					var e4V:Test2Data=mData.e4.get(e4K);
					var e4W:string;
					var e4U:Test2Data;
					e4W=e4K;
					
					e4U=e4V.clone() as Test2Data;
					
					e4T.put(e4W,e4U);
				}
			}
			
			if(this.e5!=null)
			{
				this.e5.clear();
				this.e5.ensureCapacity(mData.e5.size());
			}
			else
			{
				this.e5=new SMap<number,Test2Data>(mData.e5.size());
			}
			
			var e5T:SMap<number,Test2Data>=this.e5;
			if(!mData.e5.isEmpty())
			{
				for(var e5K of mData.e5.getKeys())
				{
					var e5V:Test2Data=mData.e5.get(e5K);
					var e5W:number;
					var e5U:Test2Data;
					e5W=e5K;
					
					e5U=e5V.clone() as Test2Data;
					
					e5T.put(e5W,e5U);
				}
			}
			
			if(this.e6!=null)
			{
				this.e6.clear();
				this.e6.ensureCapacity(mData.e6.size());
			}
			else
			{
				this.e6=new SMap<number,Test2Data>(mData.e6.size());
			}
			
			var e6T:SMap<number,Test2Data>=this.e6;
			if(!mData.e6.isEmpty())
			{
				for(var e6V of mData.e6.getValues())
				{
					var e6U:Test2Data;
					e6U=e6V.clone() as Test2Data;
					
					e6T.put(e6U.a,e6U);
				}
			}
			
			if(this.e7!=null)
			{
				this.e7.clear();
				this.e7.ensureCapacity(mData.e7.size());
			}
			else
			{
				this.e7=new SMap<number,Test2Data>(mData.e7.size());
			}
			
			var e7T:SMap<number,Test2Data>=this.e7;
			if(!mData.e7.isEmpty())
			{
				for(var e7V of mData.e7.getValues())
				{
					var e7U:Test2Data;
					e7U=e7V.clone() as Test2Data;
					
					e7T.put(e7U.a,e7U);
				}
			}
			
			if(this.e8!=null)
			{
				this.e8.clear();
				this.e8.ensureCapacity(mData.e8.size());
			}
			else
			{
				this.e8=new SMap<number,Test2Data>(mData.e8.size());
			}
			
			var e8T:SMap<number,Test2Data>=this.e8;
			if(!mData.e8.isEmpty())
			{
				for(var e8V of mData.e8.getValues())
				{
					var e8U:Test2Data;
					e8U=e8V.clone() as Test2Data;
					
					e8T.put(e8U.a,e8U);
				}
			}
			
			var f1R:SList<number>[]=mData.f1;
			var f1Len:number=f1R.length;
			this.f1=new Array<SList<number>>(f1Len);
			var f1T:SList<number>[]=this.f1;
			for(var f1I:number=0;f1I<f1Len;++f1I)
			{
				var f1V:SList<number>=f1R[f1I];
				var f1U:SList<number>;
				f1U=new SList<number>();
				var f1UT:SList<number>=f1U;
				if(!f1V.isEmpty())
				{
					for(var f1UVI=0,f1UVLen=f1V.length;f1UVI<f1UVLen;++f1UVI)
					{
						var f1UV:number=f1V[f1UVI];
						var f1UU:number;
						f1UU=f1UV;
						
						f1UT.add(f1UU);
					}
				}
				
				f1T[f1I]=f1U;
			}
			
			var f2R:SList<number[]>[]=mData.f2;
			var f2Len:number=f2R.length;
			this.f2=new Array<SList<number[]>>(f2Len);
			var f2T:SList<number[]>[]=this.f2;
			for(var f2I:number=0;f2I<f2Len;++f2I)
			{
				var f2V:SList<number[]>=f2R[f2I];
				var f2U:SList<number[]>;
				f2U=new SList<number[]>();
				var f2UT:SList<number[]>=f2U;
				if(!f2V.isEmpty())
				{
					for(var f2UVI=0,f2UVLen=f2V.length;f2UVI<f2UVLen;++f2UVI)
					{
						var f2UV:number[]=f2V[f2UVI];
						var f2UU:number[];
						var f2UUR:number[]=f2UV;
						var f2UULen:number=f2UUR.length;
						f2UU=new Array<number>(f2UULen);
						var f2UUT:number[]=f2UU;
						for(var f2UUI:number=0;f2UUI<f2UULen;++f2UUI)
						{
							var f2UUV:number=f2UUR[f2UUI];
							var f2UUU:number;
							f2UUU=f2UUV;
							
							f2UUT[f2UUI]=f2UUU;
						}
						
						f2UT.add(f2UU);
					}
				}
				
				f2T[f2I]=f2U;
			}
			
			var f3R:SList<Test2Data>[]=mData.f3;
			var f3Len:number=f3R.length;
			this.f3=new Array<SList<Test2Data>>(f3Len);
			var f3T:SList<Test2Data>[]=this.f3;
			for(var f3I:number=0;f3I<f3Len;++f3I)
			{
				var f3V:SList<Test2Data>=f3R[f3I];
				var f3U:SList<Test2Data>;
				f3U=new SList<Test2Data>();
				var f3UT:SList<Test2Data>=f3U;
				if(!f3V.isEmpty())
				{
					for(var f3UVI=0,f3UVLen=f3V.length;f3UVI<f3UVLen;++f3UVI)
					{
						var f3UV:Test2Data=f3V[f3UVI];
						var f3UU:Test2Data;
						f3UU=f3UV.clone() as Test2Data;
						
						f3UT.add(f3UU);
					}
				}
				
				f3T[f3I]=f3U;
			}
			
			var f4R:SList<Test2Data[]>[]=mData.f4;
			var f4Len:number=f4R.length;
			this.f4=new Array<SList<Test2Data[]>>(f4Len);
			var f4T:SList<Test2Data[]>[]=this.f4;
			for(var f4I:number=0;f4I<f4Len;++f4I)
			{
				var f4V:SList<Test2Data[]>=f4R[f4I];
				var f4U:SList<Test2Data[]>;
				f4U=new SList<Test2Data[]>();
				var f4UT:SList<Test2Data[]>=f4U;
				if(!f4V.isEmpty())
				{
					for(var f4UVI=0,f4UVLen=f4V.length;f4UVI<f4UVLen;++f4UVI)
					{
						var f4UV:Test2Data[]=f4V[f4UVI];
						var f4UU:Test2Data[];
						var f4UUR:Test2Data[]=f4UV;
						var f4UULen:number=f4UUR.length;
						f4UU=new Array<Test2Data>(f4UULen);
						var f4UUT:Test2Data[]=f4UU;
						for(var f4UUI:number=0;f4UUI<f4UULen;++f4UUI)
						{
							var f4UUV:Test2Data=f4UUR[f4UUI];
							var f4UUU:Test2Data;
							f4UUU=f4UUV.clone() as Test2Data;
							
							f4UUT[f4UUI]=f4UUU;
						}
						
						f4UT.add(f4UU);
					}
				}
				
				f4T[f4I]=f4U;
			}
			
			if(mData.f5!=null)
			{
				var f5R:SList<Test2Data>[]=mData.f5;
				var f5Len:number=f5R.length;
				this.f5=new Array<SList<Test2Data>>(f5Len);
				var f5T:SList<Test2Data>[]=this.f5;
				for(var f5I:number=0;f5I<f5Len;++f5I)
				{
					var f5V:SList<Test2Data>=f5R[f5I];
					var f5U:SList<Test2Data>;
					if(f5V!=null)
					{
						f5U=new SList<Test2Data>();
						var f5UT:SList<Test2Data>=f5U;
						if(!f5V.isEmpty())
						{
							for(var f5UVI=0,f5UVLen=f5V.length;f5UVI<f5UVLen;++f5UVI)
							{
								var f5UV:Test2Data=f5V[f5UVI];
								var f5UU:Test2Data;
								if(f5UV!=null)
								{
									f5UU=f5UV.clone() as Test2Data;
								}
								else
								{
									f5UU=null;
								}
								
								f5UT.add(f5UU);
							}
						}
					}
					else
					{
						f5U=null;
					}
					
					f5T[f5I]=f5U;
				}
			}
			else
			{
				this.f5=null;
			}
			
			if(mData.f6!=null)
			{
				var f6R:SList<Test2Data[]>[]=mData.f6;
				var f6Len:number=f6R.length;
				this.f6=new Array<SList<Test2Data[]>>(f6Len);
				var f6T:SList<Test2Data[]>[]=this.f6;
				for(var f6I:number=0;f6I<f6Len;++f6I)
				{
					var f6V:SList<Test2Data[]>=f6R[f6I];
					var f6U:SList<Test2Data[]>;
					if(f6V!=null)
					{
						f6U=new SList<Test2Data[]>();
						var f6UT:SList<Test2Data[]>=f6U;
						if(!f6V.isEmpty())
						{
							for(var f6UVI=0,f6UVLen=f6V.length;f6UVI<f6UVLen;++f6UVI)
							{
								var f6UV:Test2Data[]=f6V[f6UVI];
								var f6UU:Test2Data[];
								if(f6UV!=null)
								{
									var f6UUR:Test2Data[]=f6UV;
									var f6UULen:number=f6UUR.length;
									f6UU=new Array<Test2Data>(f6UULen);
									var f6UUT:Test2Data[]=f6UU;
									for(var f6UUI:number=0;f6UUI<f6UULen;++f6UUI)
									{
										var f6UUV:Test2Data=f6UUR[f6UUI];
										var f6UUU:Test2Data;
										if(f6UUV!=null)
										{
											f6UUU=f6UUV.clone() as Test2Data;
										}
										else
										{
											f6UUU=null;
										}
										
										f6UUT[f6UUI]=f6UUU;
									}
								}
								else
								{
									f6UU=null;
								}
								
								f6UT.add(f6UU);
							}
						}
					}
					else
					{
						f6U=null;
					}
					
					f6T[f6I]=f6U;
				}
			}
			else
			{
				this.f6=null;
			}
			
			if(this.g1!=null)
			{
				this.g1.clear();
				this.g1.ensureCapacity(mData.g1.size());
			}
			else
			{
				this.g1=new SMap<number,SMap<number,Test2Data>>(mData.g1.size());
			}
			
			var g1T:SMap<number,SMap<number,Test2Data>>=this.g1;
			if(!mData.g1.isEmpty())
			{
				for(var g1K of mData.g1.getKeys())
				{
					var g1V:SMap<number,Test2Data>=mData.g1.get(g1K);
					var g1W:number;
					var g1U:SMap<number,Test2Data>;
					g1W=g1K;
					
					g1U=new SMap<number,Test2Data>(g1V.size());
					var g1UT:SMap<number,Test2Data>=g1U;
					if(!g1V.isEmpty())
					{
						for(var g1UK of g1V.getKeys())
						{
							var g1UV:Test2Data=g1V.get(g1UK);
							var g1UW:number;
							var g1UU:Test2Data;
							g1UW=g1UK;
							
							g1UU=g1UV.clone() as Test2Data;
							
							g1UT.put(g1UW,g1UU);
						}
					}
					
					g1T.put(g1W,g1U);
				}
			}
			
			if(this.h1!=null)
			{
				this.h1.clear();
				this.h1.ensureCapacity(mData.h1.size());
			}
			else
			{
				this.h1=new SList<number>();
			}
			
			var h1T:SList<number>=this.h1;
			if(!mData.h1.isEmpty())
			{
				for(var h1VI=0,h1VLen=mData.h1.length;h1VI<h1VLen;++h1VI)
				{
					var h1V:number=mData.h1[h1VI];
					var h1U:number;
					h1U=h1V;
					
					h1T.add(h1U);
				}
			}
			
			if(this.h2!=null)
			{
				this.h2.clear();
				this.h2.ensureCapacity(mData.h2.size());
			}
			else
			{
				this.h2=new SList<Test2Data>();
			}
			
			var h2T:SList<Test2Data>=this.h2;
			if(!mData.h2.isEmpty())
			{
				for(var h2VI=0,h2VLen=mData.h2.length;h2VI<h2VLen;++h2VI)
				{
					var h2V:Test2Data=mData.h2[h2VI];
					var h2U:Test2Data;
					h2U=h2V.clone() as Test2Data;
					
					h2T.add(h2U);
				}
			}
			
			if(this.h3!=null)
			{
				this.h3.clear();
				this.h3.ensureCapacity(mData.h3.size());
			}
			else
			{
				this.h3=new SMap<number,SList<Test2Data>>(mData.h3.size());
			}
			
			var h3T:SMap<number,SList<Test2Data>>=this.h3;
			if(!mData.h3.isEmpty())
			{
				for(var h3K of mData.h3.getKeys())
				{
					var h3V:SList<Test2Data>=mData.h3.get(h3K);
					var h3W:number;
					var h3U:SList<Test2Data>;
					h3W=h3K;
					
					h3U=new SList<Test2Data>();
					var h3UT:SList<Test2Data>=h3U;
					if(!h3V.isEmpty())
					{
						for(var h3UVI=0,h3UVLen=h3V.length;h3UVI<h3UVLen;++h3UVI)
						{
							var h3UV:Test2Data=h3V[h3UVI];
							var h3UU:Test2Data;
							h3UU=h3UV.clone() as Test2Data;
							
							h3UT.add(h3UU);
						}
					}
					
					h3T.put(h3W,h3U);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.b1=new Test2Data();
			this.b1.initDefault();
			this.b2=new Test2Data();
			this.b2.initDefault();
			this.c1=new Array<number>(0);
			this.c2=new Array<number>(0);
			this.c3=new Array<number>(0);
			this.c4=new Array<string>(0);
			this.c5=new Array<number[]>(0);
			this.c6=new Array<number[][]>(0);
			this.d1=new SList<number>();
			this.d2=new SList<number>();
			this.d3=new SList<string>();
			this.d4=new SList<Test2Data>();
			this.d5=new SList<Test2Data>();
			this.d7=new SSet<number>();
			this.d8=new SSet<number>();
			this.d9=new SSet<string>();
			this.d10=new SSet<Test2Data>();
			this.d11=new SSet<Test2Data>();
			this.e1=new SMap<number,number>();
			this.e12=new SMap<number,number>();
			this.e2=new SMap<number,Test2Data>();
			this.e3=new SMap<number,Test2Data>();
			this.e4=new SMap<string,Test2Data>();
			this.e5=new SMap<number,Test2Data>();
			this.e6=new SMap<number,Test2Data>();
			this.e7=new SMap<number,Test2Data>();
			this.e8=new SMap<number,Test2Data>();
			this.f1=new Array<SList<number>>(0);
			this.f2=new Array<SList<number[]>>(0);
			this.f3=new Array<SList<Test2Data>>(0);
			this.f4=new Array<SList<Test2Data[]>>(0);
			this.g1=new SMap<number,SMap<number,Test2Data>>();
			this.h1=new SList<number>();
			this.h2=new SList<Test2Data>();
			this.h3=new SMap<number,SList<Test2Data>>();
		}
		
	}
}
