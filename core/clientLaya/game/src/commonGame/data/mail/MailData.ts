namespace Shine
{
	/** 邮件数据(generated by shine) */
	export class MailData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.Mail;
		
		/** 实例ID */
		public instanceID:number;
		
		/** 邮件ID */
		public id:number;
		
		/** 时间戳 */
		public time:number;
		
		/** 参数组(如全自定义邮件，则args[0]为title,args[1]为content) */
		public args:string[];
		
		/** 物品列表 */
		public itemList:SList<ItemData>;
		
		/** 是否阅读过 */
		public readed:boolean;
		
		/** 是否领取过 */
		public rewarded:boolean;
		
		/** 是否有红点 */
		public hasRedPoint:boolean;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.Mail;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "MailData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.instanceID=stream.readInt();
			
			this.id=stream.readInt();
			
			this.time=stream.readLong();
			
			if(stream.readBoolean())
			{
				var argsLen:number=stream.readLen();
				this.args=new Array<string>(argsLen);
				var argsT:string[]=this.args;
				for(var argsI:number=0;argsI<argsLen;++argsI)
				{
					var argsV:string;
					argsV=stream.readUTF();
					
					argsT[argsI]=argsV;
				}
			}
			else
			{
				this.args=null;
			}
			
			if(stream.readBoolean())
			{
				var itemListLen:number=stream.readLen();
				if(this.itemList!=null)
				{
					this.itemList.clear();
					this.itemList.ensureCapacity(itemListLen);
				}
				else
				{
					this.itemList=new SList<ItemData>();
				}
				
				var itemListT:SList<ItemData>=this.itemList;
				for(var itemListI:number=itemListLen-1;itemListI>=0;--itemListI)
				{
					var itemListV:ItemData;
					if(stream.readBoolean())
					{
						itemListV=stream.readDataSimpleNotNull() as ItemData;
					}
					else
					{
						itemListV=null;
					}
					
					itemListT.add(itemListV);
				}
			}
			else
			{
				this.itemList=null;
			}
			
			this.readed=stream.readBoolean();
			
			this.rewarded=stream.readBoolean();
			
			this.hasRedPoint=stream.readBoolean();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.instanceID);
			
			stream.writeInt(this.id);
			
			stream.writeLong(this.time);
			
			if(this.args!=null)
			{
				stream.writeBoolean(true);
				var argsT:string[]=this.args;
				stream.writeLen(argsT.length);
				for(var argsVI=0,argsVLen=argsT.length;argsVI<argsVLen;++argsVI)
				{
					var argsV:string=argsT[argsVI];
					stream.writeUTF(argsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.itemList!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.itemList.size());
				if(!this.itemList.isEmpty())
				{
					for(var itemListVI=0,itemListVLen=this.itemList.length;itemListVI<itemListVLen;++itemListVI)
					{
						var itemListV:ItemData=this.itemList[itemListVI];
						if(itemListV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(itemListV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeBoolean(this.readed);
			
			stream.writeBoolean(this.rewarded);
			
			stream.writeBoolean(this.hasRedPoint);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof MailData))
				return;
			
			var mData:MailData=data as MailData;
			
			this.instanceID=mData.instanceID;
			this.id=mData.id;
			this.time=mData.time;
			this.args=mData.args;
			this.itemList=mData.itemList;
			this.readed=mData.readed;
			this.rewarded=mData.rewarded;
			this.hasRedPoint=mData.hasRedPoint;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof MailData))
				return;
			
			var mData:MailData=data as MailData;
			
			this.instanceID=mData.instanceID;
			
			this.id=mData.id;
			
			this.time=mData.time;
			
			if(mData.args!=null)
			{
				var argsR:string[]=mData.args;
				var argsLen:number=argsR.length;
				this.args=new Array<string>(argsLen);
				var argsT:string[]=this.args;
				for(var argsI:number=0;argsI<argsLen;++argsI)
				{
					var argsV:string=argsR[argsI];
					var argsU:string;
					argsU=argsV;
					
					argsT[argsI]=argsU;
				}
			}
			else
			{
				this.args=null;
			}
			
			if(mData.itemList!=null)
			{
				if(this.itemList!=null)
				{
					this.itemList.clear();
					this.itemList.ensureCapacity(mData.itemList.size());
				}
				else
				{
					this.itemList=new SList<ItemData>();
				}
				
				var itemListT:SList<ItemData>=this.itemList;
				if(!mData.itemList.isEmpty())
				{
					for(var itemListVI=0,itemListVLen=mData.itemList.length;itemListVI<itemListVLen;++itemListVI)
					{
						var itemListV:ItemData=mData.itemList[itemListVI];
						var itemListU:ItemData;
						if(itemListV!=null)
						{
							itemListU=itemListV.clone() as ItemData;
						}
						else
						{
							itemListU=null;
						}
						
						itemListT.add(itemListU);
					}
				}
			}
			else
			{
				this.itemList=null;
			}
			
			this.readed=mData.readed;
			
			this.rewarded=mData.rewarded;
			
			this.hasRedPoint=mData.hasRedPoint;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
	}
}
