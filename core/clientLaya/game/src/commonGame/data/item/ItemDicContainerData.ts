namespace Shine
{
	/** 物品列表容器工具数据(generated by shine) */
	export class ItemDicContainerData extends FuncToolData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.ItemDicContainer;
		
		/** 物品数据组(key:index) */
		public items:SMap<number,ItemData>;
		
		/** 服务器序号自增 */
		public serverItemIndex:number;
		
		/** 客户端序号自增 */
		public clientItemIndex:number;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.ItemDicContainer;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "ItemDicContainerData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			var itemsLen:number=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SMap<number,ItemData>(itemsLen);
			}
			
			var itemsT:SMap<number,ItemData>=this.items;
			for(var itemsI:number=itemsLen-1;itemsI>=0;--itemsI)
			{
				var itemsK:number;
				var itemsV:ItemData;
				itemsK=stream.readInt();
				
				itemsV=stream.readDataSimpleNotNull() as ItemData;
				
				itemsT.put(itemsK,itemsV);
			}
			
			this.serverItemIndex=stream.readInt();
			
			this.clientItemIndex=stream.readInt();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				for(var itemsK of this.items.getKeys())
				{
					var itemsV:ItemData=this.items.get(itemsK);
					stream.writeInt(itemsK);
					
					stream.writeDataSimpleNotNull(itemsV);
					
				}
			}
			
			stream.writeInt(this.serverItemIndex);
			
			stream.writeInt(this.clientItemIndex);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			super.toShadowCopy(data);
			
			if(!(data instanceof ItemDicContainerData))
				return;
			
			var mData:ItemDicContainerData=data as ItemDicContainerData;
			
			this.items=mData.items;
			this.serverItemIndex=mData.serverItemIndex;
			this.clientItemIndex=mData.clientItemIndex;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			super.toCopy(data);
			
			if(!(data instanceof ItemDicContainerData))
				return;
			
			var mData:ItemDicContainerData=data as ItemDicContainerData;
			
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(mData.items.size());
			}
			else
			{
				this.items=new SMap<number,ItemData>(mData.items.size());
			}
			
			var itemsT:SMap<number,ItemData>=this.items;
			if(!mData.items.isEmpty())
			{
				for(var itemsK of mData.items.getKeys())
				{
					var itemsV:ItemData=mData.items.get(itemsK);
					var itemsW:number;
					var itemsU:ItemData;
					itemsW=itemsK;
					
					itemsU=itemsV.clone() as ItemData;
					
					itemsT.put(itemsW,itemsU);
				}
			}
			
			this.serverItemIndex=mData.serverItemIndex;
			
			this.clientItemIndex=mData.clientItemIndex;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			super.initDefault();
			
			this.items=new SMap<number,ItemData>();
		}
		
	}
}
