namespace Shine
{
	/** 装备容器数据(generated by shine) */
	export class EquipContainerData extends FuncToolData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.EquipContainer;
		
		/** 装备数据组(key:slot) */
		public equips:SMap<number,ItemData>;
		
		/** 开启的格子组 */
		public openSlots:SSet<number>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.EquipContainer;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "EquipContainerData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			var equipsLen:number=stream.readLen();
			if(this.equips!=null)
			{
				this.equips.clear();
				this.equips.ensureCapacity(equipsLen);
			}
			else
			{
				this.equips=new SMap<number,ItemData>(equipsLen);
			}
			
			var equipsT:SMap<number,ItemData>=this.equips;
			for(var equipsI:number=equipsLen-1;equipsI>=0;--equipsI)
			{
				var equipsK:number;
				var equipsV:ItemData;
				equipsK=stream.readInt();
				
				equipsV=stream.readDataSimpleNotNull() as ItemData;
				
				equipsT.put(equipsK,equipsV);
			}
			
			var openSlotsLen:number=stream.readLen();
			if(this.openSlots!=null)
			{
				this.openSlots.clear();
				this.openSlots.ensureCapacity(openSlotsLen);
			}
			else
			{
				this.openSlots=new SSet<number>();
			}
			
			var openSlotsT:SSet<number>=this.openSlots;
			for(var openSlotsI:number=openSlotsLen-1;openSlotsI>=0;--openSlotsI)
			{
				var openSlotsV:number;
				openSlotsV=stream.readInt();
				
				openSlotsT.add(openSlotsV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeLen(this.equips.size());
			if(!this.equips.isEmpty())
			{
				for(var equipsK of this.equips.getKeys())
				{
					var equipsV:ItemData=this.equips.get(equipsK);
					stream.writeInt(equipsK);
					
					stream.writeDataSimpleNotNull(equipsV);
					
				}
			}
			
			stream.writeLen(this.openSlots.size());
			if(!this.openSlots.isEmpty())
			{
				for(var openSlotsV of this.openSlots.getKeys())
				{
					stream.writeInt(openSlotsV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			super.toShadowCopy(data);
			
			if(!(data instanceof EquipContainerData))
				return;
			
			var mData:EquipContainerData=data as EquipContainerData;
			
			this.equips=mData.equips;
			this.openSlots=mData.openSlots;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			super.toCopy(data);
			
			if(!(data instanceof EquipContainerData))
				return;
			
			var mData:EquipContainerData=data as EquipContainerData;
			
			if(this.equips!=null)
			{
				this.equips.clear();
				this.equips.ensureCapacity(mData.equips.size());
			}
			else
			{
				this.equips=new SMap<number,ItemData>(mData.equips.size());
			}
			
			var equipsT:SMap<number,ItemData>=this.equips;
			if(!mData.equips.isEmpty())
			{
				for(var equipsK of mData.equips.getKeys())
				{
					var equipsV:ItemData=mData.equips.get(equipsK);
					var equipsW:number;
					var equipsU:ItemData;
					equipsW=equipsK;
					
					equipsU=equipsV.clone() as ItemData;
					
					equipsT.put(equipsW,equipsU);
				}
			}
			
			if(this.openSlots!=null)
			{
				this.openSlots.clear();
				this.openSlots.ensureCapacity(mData.openSlots.size());
			}
			else
			{
				this.openSlots=new SSet<number>();
			}
			
			var openSlotsT:SSet<number>=this.openSlots;
			if(!mData.openSlots.isEmpty())
			{
				for(var openSlotsV of mData.openSlots.getKeys())
				{
					var openSlotsU:number;
					openSlotsU=openSlotsV;
					
					openSlotsT.add(openSlotsU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			super.initDefault();
			
			this.equips=new SMap<number,ItemData>();
			this.openSlots=new SSet<number>();
		}
		
	}
}
