namespace Shine
{
	/** 物品数据(generated by shine) */
	export class ItemData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.Item;
		
		/** 物品ID */
		public id:number;
		
		/** 物品数目 */
		public num:number;
		
		/** 是否绑定 */
		public isBind:boolean;
		
		/** 失效时间(-1为失效或过期) */
		public disableTime:number=-1;
		
		/** 身份数据 */
		public identity:ItemIdentityData;
		
		/** 是否有红点 */
		public hasRedPoint:boolean;
		
		/** 物品配置 */
		public config:ItemConfig;
		
		/** 回收标记 */
		public canRelease:boolean;
		
		/** 所在索引 */
		public index:number=-1;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.Item;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "ItemData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.id=stream.readInt();
			
			this.num=stream.readInt();
			
			this.isBind=stream.readBoolean();
			
			this.disableTime=stream.readLong();
			
			if(stream.readBoolean())
			{
				this.identity=stream.readDataSimpleNotNull() as ItemIdentityData;
			}
			else
			{
				this.identity=null;
			}
			
			this.hasRedPoint=stream.readBoolean();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.id);
			
			stream.writeInt(this.num);
			
			stream.writeBoolean(this.isBind);
			
			stream.writeLong(this.disableTime);
			
			if(this.identity!=null)
			{
				stream.writeBoolean(true);
				stream.writeDataSimpleNotNull(this.identity);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeBoolean(this.hasRedPoint);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof ItemData))
				return;
			
			var mData:ItemData=data as ItemData;
			
			this.id=mData.id;
			this.num=mData.num;
			this.isBind=mData.isBind;
			this.disableTime=mData.disableTime;
			this.identity=mData.identity;
			this.hasRedPoint=mData.hasRedPoint;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof ItemData))
				return;
			
			var mData:ItemData=data as ItemData;
			
			this.id=mData.id;
			
			this.num=mData.num;
			
			this.isBind=mData.isBind;
			
			this.disableTime=mData.disableTime;
			
			if(mData.identity!=null)
			{
				this.identity=mData.identity.clone() as ItemIdentityData;
			}
			else
			{
				this.identity=null;
			}
			
			this.hasRedPoint=mData.hasRedPoint;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
		public initIdentityByType(type:number):void
		{
			this.identity=GameC.logic.createItemIdentityByType(type);
			this.identity.type=type;//设置type
		}
		
		/** 清空/析构 */
		public clear():void
		{
			this.isBind=false;
			this.identity.clear();
			this.config=null;
			this.canRelease=false;
			this.index=-1;
			this.hasRedPoint=false;
		}
		
		/** 构造配置(如果没有的话) */
		public makeConfig():void
		{
			if(this.config==null)
			{
				this.config=ItemConfig.get(this.id);
			}
		}
		
		/** 重载配置 */
		public reloadConfig():void
		{
			this.config=ItemConfig.get(this.id);
		}
		
		/** 是否达到单个数目上限 */
		public isSingleNumMax():boolean
		{
			return this.config.singlePlusMax>0 && this.num>=this.config.singlePlusMax;
		}
		
	}
}
