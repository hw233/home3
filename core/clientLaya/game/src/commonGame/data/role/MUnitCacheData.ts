namespace Shine
{
	/** 主单位缓存数据(generated by shine) */
	export class MUnitCacheData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.MUnitCache;
		
		/** 当前属性组 */
		public currentAttributes:SMap<number,number>;
		
		/** 保存buff组 */
		public buffs:SMap<number,BuffData>;
		
		/** 保存CD组 */
		public cds:SMap<number,CDData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.MUnitCache;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "MUnitCacheData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			var currentAttributesLen:number=stream.readLen();
			if(this.currentAttributes!=null)
			{
				this.currentAttributes.clear();
				this.currentAttributes.ensureCapacity(currentAttributesLen);
			}
			else
			{
				this.currentAttributes=new SMap<number,number>(currentAttributesLen);
			}
			
			var currentAttributesT:SMap<number,number>=this.currentAttributes;
			for(var currentAttributesI:number=currentAttributesLen-1;currentAttributesI>=0;--currentAttributesI)
			{
				var currentAttributesK:number;
				var currentAttributesV:number;
				currentAttributesK=stream.readInt();
				
				currentAttributesV=stream.readInt();
				
				currentAttributesT.put(currentAttributesK,currentAttributesV);
			}
			
			var buffsLen:number=stream.readLen();
			if(this.buffs!=null)
			{
				this.buffs.clear();
				this.buffs.ensureCapacity(buffsLen);
			}
			else
			{
				this.buffs=new SMap<number,BuffData>(buffsLen);
			}
			
			var buffsT:SMap<number,BuffData>=this.buffs;
			for(var buffsI:number=buffsLen-1;buffsI>=0;--buffsI)
			{
				var buffsV:BuffData;
				buffsV=stream.readDataSimpleNotNull() as BuffData;
				
				buffsT.put(buffsV.instanceID,buffsV);
			}
			
			var cdsLen:number=stream.readLen();
			if(this.cds!=null)
			{
				this.cds.clear();
				this.cds.ensureCapacity(cdsLen);
			}
			else
			{
				this.cds=new SMap<number,CDData>(cdsLen);
			}
			
			var cdsT:SMap<number,CDData>=this.cds;
			for(var cdsI:number=cdsLen-1;cdsI>=0;--cdsI)
			{
				var cdsV:CDData;
				cdsV=new CDData();
				cdsV.readBytesSimple(stream);
				
				cdsT.put(cdsV.id,cdsV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLen(this.currentAttributes.size());
			if(!this.currentAttributes.isEmpty())
			{
				for(var currentAttributesK of this.currentAttributes.getKeys())
				{
					var currentAttributesV:number=this.currentAttributes.get(currentAttributesK);
					stream.writeInt(currentAttributesK);
					
					stream.writeInt(currentAttributesV);
					
				}
			}
			
			stream.writeLen(this.buffs.size());
			if(!this.buffs.isEmpty())
			{
				for(var buffsV of this.buffs.getValues())
				{
					stream.writeDataSimpleNotNull(buffsV);
					
				}
			}
			
			stream.writeLen(this.cds.size());
			if(!this.cds.isEmpty())
			{
				for(var cdsV of this.cds.getValues())
				{
					cdsV.writeBytesSimple(stream);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof MUnitCacheData))
				return;
			
			var mData:MUnitCacheData=data as MUnitCacheData;
			
			this.currentAttributes=mData.currentAttributes;
			this.buffs=mData.buffs;
			this.cds=mData.cds;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof MUnitCacheData))
				return;
			
			var mData:MUnitCacheData=data as MUnitCacheData;
			
			if(this.currentAttributes!=null)
			{
				this.currentAttributes.clear();
				this.currentAttributes.ensureCapacity(mData.currentAttributes.size());
			}
			else
			{
				this.currentAttributes=new SMap<number,number>(mData.currentAttributes.size());
			}
			
			var currentAttributesT:SMap<number,number>=this.currentAttributes;
			if(!mData.currentAttributes.isEmpty())
			{
				for(var currentAttributesK of mData.currentAttributes.getKeys())
				{
					var currentAttributesV:number=mData.currentAttributes.get(currentAttributesK);
					var currentAttributesW:number;
					var currentAttributesU:number;
					currentAttributesW=currentAttributesK;
					
					currentAttributesU=currentAttributesV;
					
					currentAttributesT.put(currentAttributesW,currentAttributesU);
				}
			}
			
			if(this.buffs!=null)
			{
				this.buffs.clear();
				this.buffs.ensureCapacity(mData.buffs.size());
			}
			else
			{
				this.buffs=new SMap<number,BuffData>(mData.buffs.size());
			}
			
			var buffsT:SMap<number,BuffData>=this.buffs;
			if(!mData.buffs.isEmpty())
			{
				for(var buffsV of mData.buffs.getValues())
				{
					var buffsU:BuffData;
					buffsU=buffsV.clone() as BuffData;
					
					buffsT.put(buffsU.instanceID,buffsU);
				}
			}
			
			if(this.cds!=null)
			{
				this.cds.clear();
				this.cds.ensureCapacity(mData.cds.size());
			}
			else
			{
				this.cds=new SMap<number,CDData>(mData.cds.size());
			}
			
			var cdsT:SMap<number,CDData>=this.cds;
			if(!mData.cds.isEmpty())
			{
				for(var cdsV of mData.cds.getValues())
				{
					var cdsU:CDData;
					cdsU=new CDData();
					cdsU.copy(cdsV);
					
					cdsT.put(cdsU.id,cdsU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.currentAttributes=new SMap<number,number>();
			this.buffs=new SMap<number,BuffData>();
			this.cds=new SMap<number,CDData>();
		}
		
	}
}
