namespace Shine
{
	/** 任务数据(已接)(generated by shine) */
	export class QuestData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.Quest;
		
		/** id */
		public id:number;
		
		/** 任务目标组 */
		public tasks:TaskData[];
		
		/** 是否失败 */
		public isFailed:boolean;
		
		/** 有效时间(0为无限) */
		public enableTime:number;
		
		public config:QuestConfig;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.Quest;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "QuestData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.id=stream.readInt();
			
			var tasksLen:number=stream.readLen();
			this.tasks=new Array<TaskData>(tasksLen);
			var tasksT:TaskData[]=this.tasks;
			for(var tasksI:number=0;tasksI<tasksLen;++tasksI)
			{
				var tasksV:TaskData;
				tasksV=stream.readDataSimpleNotNull() as TaskData;
				
				tasksT[tasksI]=tasksV;
			}
			
			this.isFailed=stream.readBoolean();
			
			this.enableTime=stream.readLong();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.id);
			
			var tasksT:TaskData[]=this.tasks;
			stream.writeLen(tasksT.length);
			for(var tasksVI=0,tasksVLen=tasksT.length;tasksVI<tasksVLen;++tasksVI)
			{
				var tasksV:TaskData=tasksT[tasksVI];
				stream.writeDataSimpleNotNull(tasksV);
				
			}
			
			stream.writeBoolean(this.isFailed);
			
			stream.writeLong(this.enableTime);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof QuestData))
				return;
			
			var mData:QuestData=data as QuestData;
			
			this.id=mData.id;
			this.tasks=mData.tasks;
			this.isFailed=mData.isFailed;
			this.enableTime=mData.enableTime;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof QuestData))
				return;
			
			var mData:QuestData=data as QuestData;
			
			this.id=mData.id;
			
			var tasksR:TaskData[]=mData.tasks;
			var tasksLen:number=tasksR.length;
			this.tasks=new Array<TaskData>(tasksLen);
			var tasksT:TaskData[]=this.tasks;
			for(var tasksI:number=0;tasksI<tasksLen;++tasksI)
			{
				var tasksV:TaskData=tasksR[tasksI];
				var tasksU:TaskData;
				tasksU=tasksV.clone() as TaskData;
				
				tasksT[tasksI]=tasksU;
			}
			
			this.isFailed=mData.isFailed;
			
			this.enableTime=mData.enableTime;
			
		}
		
		public makeConfig():void
		{
			if(this.config==null)
			{
				this.config=QuestConfig.get(this.id);
			}
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.tasks=new Array<TaskData>(0);
		}
		
		public isComplete():boolean
		{
			if(this.config.executeType==QuestExecuteType.Either)
			{
				for(var v of this.tasks)
				{
					if(v.isComplete())
						return true;
				}

				return false;
			}
			else
			{
				for(var v of this.tasks)
				{
					if(!v.isComplete())
						return false;
				}

				return true;
			}
		}
		
	}
}
