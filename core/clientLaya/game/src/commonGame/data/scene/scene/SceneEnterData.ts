namespace Shine
{
	/** 场景进入数据(generated by shine) */
	export class SceneEnterData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.SceneEnter;
		
		/** 主角(可为空) */
		public hero:UnitData;
		
		/** 场景角色组(副本类有效) */
		public roles:SMap<number,SceneRoleData>;
		
		/** 简版单位数据 */
		public simpleUnits:SList<UnitSimpleData>;
		
		/** 自身绑定掉落包组 */
		public selfBindFieldItemBags:SMap<number,FieldItemBagBindData>;
		
		/** 单位数据 */
		public units:SList<UnitData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.SceneEnter;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "SceneEnterData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			if(stream.readBoolean())
			{
				this.hero=stream.readDataSimpleNotNull() as UnitData;
			}
			else
			{
				this.hero=null;
			}
			
			var unitsLen:number=stream.readLen();
			if(this.units!=null)
			{
				this.units.clear();
				this.units.ensureCapacity(unitsLen);
			}
			else
			{
				this.units=new SList<UnitData>();
			}
			
			var unitsT:SList<UnitData>=this.units;
			for(var unitsI:number=unitsLen-1;unitsI>=0;--unitsI)
			{
				var unitsV:UnitData;
				unitsV=stream.readDataSimpleNotNull() as UnitData;
				
				unitsT.add(unitsV);
			}
			
			var rolesLen:number=stream.readLen();
			if(this.roles!=null)
			{
				this.roles.clear();
				this.roles.ensureCapacity(rolesLen);
			}
			else
			{
				this.roles=new SMap<number,SceneRoleData>(rolesLen);
			}
			
			var rolesT:SMap<number,SceneRoleData>=this.roles;
			for(var rolesI:number=rolesLen-1;rolesI>=0;--rolesI)
			{
				var rolesV:SceneRoleData;
				rolesV=stream.readDataSimpleNotNull() as SceneRoleData;
				
				rolesT.put(rolesV.playerID,rolesV);
			}
			
			if(stream.readBoolean())
			{
				var selfBindFieldItemBagsLen:number=stream.readLen();
				if(this.selfBindFieldItemBags!=null)
				{
					this.selfBindFieldItemBags.clear();
					this.selfBindFieldItemBags.ensureCapacity(selfBindFieldItemBagsLen);
				}
				else
				{
					this.selfBindFieldItemBags=new SMap<number,FieldItemBagBindData>(selfBindFieldItemBagsLen);
				}
				
				var selfBindFieldItemBagsT:SMap<number,FieldItemBagBindData>=this.selfBindFieldItemBags;
				for(var selfBindFieldItemBagsI:number=selfBindFieldItemBagsLen-1;selfBindFieldItemBagsI>=0;--selfBindFieldItemBagsI)
				{
					var selfBindFieldItemBagsV:FieldItemBagBindData;
					if(stream.readBoolean())
					{
						selfBindFieldItemBagsV=stream.readDataSimpleNotNull() as FieldItemBagBindData;
					}
					else
					{
						selfBindFieldItemBagsV=null;
					}
					
					selfBindFieldItemBagsT.put(selfBindFieldItemBagsV.instanceID,selfBindFieldItemBagsV);
				}
			}
			else
			{
				this.selfBindFieldItemBags=null;
			}
			
			if(stream.readBoolean())
			{
				var simpleUnitsLen:number=stream.readLen();
				if(this.simpleUnits!=null)
				{
					this.simpleUnits.clear();
					this.simpleUnits.ensureCapacity(simpleUnitsLen);
				}
				else
				{
					this.simpleUnits=new SList<UnitSimpleData>();
				}
				
				var simpleUnitsT:SList<UnitSimpleData>=this.simpleUnits;
				for(var simpleUnitsI:number=simpleUnitsLen-1;simpleUnitsI>=0;--simpleUnitsI)
				{
					var simpleUnitsV:UnitSimpleData;
					if(stream.readBoolean())
					{
						simpleUnitsV=stream.readDataSimpleNotNull() as UnitSimpleData;
					}
					else
					{
						simpleUnitsV=null;
					}
					
					simpleUnitsT.add(simpleUnitsV);
				}
			}
			else
			{
				this.simpleUnits=null;
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			if(this.hero!=null)
			{
				stream.writeBoolean(true);
				stream.writeDataSimpleNotNull(this.hero);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeLen(this.units.size());
			if(!this.units.isEmpty())
			{
				for(var unitsVI=0,unitsVLen=this.units.length;unitsVI<unitsVLen;++unitsVI)
				{
					var unitsV:UnitData=this.units[unitsVI];
					stream.writeDataSimpleNotNull(unitsV);
					
				}
			}
			
			stream.writeLen(this.roles.size());
			if(!this.roles.isEmpty())
			{
				for(var rolesV of this.roles.getValues())
				{
					stream.writeDataSimpleNotNull(rolesV);
					
				}
			}
			
			if(this.selfBindFieldItemBags!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.selfBindFieldItemBags.size());
				if(!this.selfBindFieldItemBags.isEmpty())
				{
					for(var selfBindFieldItemBagsV of this.selfBindFieldItemBags.getValues())
					{
						if(selfBindFieldItemBagsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(selfBindFieldItemBagsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.simpleUnits!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.simpleUnits.size());
				if(!this.simpleUnits.isEmpty())
				{
					for(var simpleUnitsVI=0,simpleUnitsVLen=this.simpleUnits.length;simpleUnitsVI<simpleUnitsVLen;++simpleUnitsVI)
					{
						var simpleUnitsV:UnitSimpleData=this.simpleUnits[simpleUnitsVI];
						if(simpleUnitsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(simpleUnitsV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof SceneEnterData))
				return;
			
			var mData:SceneEnterData=data as SceneEnterData;
			
			this.hero=mData.hero;
			this.units=mData.units;
			this.roles=mData.roles;
			this.selfBindFieldItemBags=mData.selfBindFieldItemBags;
			this.simpleUnits=mData.simpleUnits;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof SceneEnterData))
				return;
			
			var mData:SceneEnterData=data as SceneEnterData;
			
			if(mData.hero!=null)
			{
				this.hero=mData.hero.clone() as UnitData;
			}
			else
			{
				this.hero=null;
			}
			
			if(this.units!=null)
			{
				this.units.clear();
				this.units.ensureCapacity(mData.units.size());
			}
			else
			{
				this.units=new SList<UnitData>();
			}
			
			var unitsT:SList<UnitData>=this.units;
			if(!mData.units.isEmpty())
			{
				for(var unitsVI=0,unitsVLen=mData.units.length;unitsVI<unitsVLen;++unitsVI)
				{
					var unitsV:UnitData=mData.units[unitsVI];
					var unitsU:UnitData;
					unitsU=unitsV.clone() as UnitData;
					
					unitsT.add(unitsU);
				}
			}
			
			if(this.roles!=null)
			{
				this.roles.clear();
				this.roles.ensureCapacity(mData.roles.size());
			}
			else
			{
				this.roles=new SMap<number,SceneRoleData>(mData.roles.size());
			}
			
			var rolesT:SMap<number,SceneRoleData>=this.roles;
			if(!mData.roles.isEmpty())
			{
				for(var rolesV of mData.roles.getValues())
				{
					var rolesU:SceneRoleData;
					rolesU=rolesV.clone() as SceneRoleData;
					
					rolesT.put(rolesU.playerID,rolesU);
				}
			}
			
			if(mData.selfBindFieldItemBags!=null)
			{
				if(this.selfBindFieldItemBags!=null)
				{
					this.selfBindFieldItemBags.clear();
					this.selfBindFieldItemBags.ensureCapacity(mData.selfBindFieldItemBags.size());
				}
				else
				{
					this.selfBindFieldItemBags=new SMap<number,FieldItemBagBindData>(mData.selfBindFieldItemBags.size());
				}
				
				var selfBindFieldItemBagsT:SMap<number,FieldItemBagBindData>=this.selfBindFieldItemBags;
				if(!mData.selfBindFieldItemBags.isEmpty())
				{
					for(var selfBindFieldItemBagsV of mData.selfBindFieldItemBags.getValues())
					{
						var selfBindFieldItemBagsU:FieldItemBagBindData;
						if(selfBindFieldItemBagsV!=null)
						{
							selfBindFieldItemBagsU=selfBindFieldItemBagsV.clone() as FieldItemBagBindData;
						}
						else
						{
							selfBindFieldItemBagsU=null;
						}
						
						selfBindFieldItemBagsT.put(selfBindFieldItemBagsU.instanceID,selfBindFieldItemBagsU);
					}
				}
			}
			else
			{
				this.selfBindFieldItemBags=null;
			}
			
			if(mData.simpleUnits!=null)
			{
				if(this.simpleUnits!=null)
				{
					this.simpleUnits.clear();
					this.simpleUnits.ensureCapacity(mData.simpleUnits.size());
				}
				else
				{
					this.simpleUnits=new SList<UnitSimpleData>();
				}
				
				var simpleUnitsT:SList<UnitSimpleData>=this.simpleUnits;
				if(!mData.simpleUnits.isEmpty())
				{
					for(var simpleUnitsVI=0,simpleUnitsVLen=mData.simpleUnits.length;simpleUnitsVI<simpleUnitsVLen;++simpleUnitsVI)
					{
						var simpleUnitsV:UnitSimpleData=mData.simpleUnits[simpleUnitsVI];
						var simpleUnitsU:UnitSimpleData;
						if(simpleUnitsV!=null)
						{
							simpleUnitsU=simpleUnitsV.clone() as UnitSimpleData;
						}
						else
						{
							simpleUnitsU=null;
						}
						
						simpleUnitsT.add(simpleUnitsU);
					}
				}
			}
			else
			{
				this.simpleUnits=null;
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.units=new SList<UnitData>();
			this.roles=new SMap<number,SceneRoleData>();
		}
		
	}
}
