namespace Shine
{
	/** 场景进入参数数据(generated by shine) */
	export class SceneEnterArgData extends BaseData
	{
		/** 场景位置数据 */
		public location:SceneLocationData;
		
		/** 数据类型ID */
		public static dataID:number=BaseDataType.SceneEnterArg;
		
		/** 进入点位置 */
		public posID:number=-1;
		
		/** 是否使用当前缓存数据 */
		public useCache:boolean;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.SceneEnterArg;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "SceneEnterArgData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.location=stream.readDataSimpleNotNull() as SceneLocationData;
			
			this.posID=stream.readInt();
			
			this.useCache=stream.readBoolean();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeDataSimpleNotNull(this.location);
			
			stream.writeInt(this.posID);
			
			stream.writeBoolean(this.useCache);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof SceneEnterArgData))
				return;
			
			var mData:SceneEnterArgData=data as SceneEnterArgData;
			
			this.location=mData.location;
			this.posID=mData.posID;
			this.useCache=mData.useCache;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof SceneEnterArgData))
				return;
			
			var mData:SceneEnterArgData=data as SceneEnterArgData;
			
			this.location=mData.location.clone() as SceneLocationData;
			
			this.posID=mData.posID;
			
			this.useCache=mData.useCache;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.location=new SceneLocationData();
			this.location.initDefault();
		}
		
	}
}
