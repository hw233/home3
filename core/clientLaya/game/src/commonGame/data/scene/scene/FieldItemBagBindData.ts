namespace Shine
{
	/** 掉落物品包绑定数据(generated by shine) */
	export class FieldItemBagBindData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.FieldItemBagBind;
		
		/** 归属单位实例id */
		public instanceID:number;
		
		/** 物品组 */
		public items:SList<ItemData>;
		
		/** 移除时间 */
		public removeTime:number;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.FieldItemBagBind;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.instanceID=stream.readInt();
			
			var itemsLen:number=stream.readLen();
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(itemsLen);
			}
			else
			{
				this.items=new SList<ItemData>();
			}
			
			var itemsT:SList<ItemData>=this.items;
			for(var itemsI:number=itemsLen-1;itemsI>=0;--itemsI)
			{
				var itemsV:ItemData;
				itemsV=stream.readDataSimpleNotNull() as ItemData;
				
				itemsT.add(itemsV);
			}
			
			this.removeTime=stream.readLong();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.instanceID);
			
			stream.writeLen(this.items.size());
			if(!this.items.isEmpty())
			{
				for(var itemsVI=0,itemsVLen=this.items.length;itemsVI<itemsVLen;++itemsVI)
				{
					var itemsV:ItemData=this.items[itemsVI];
					stream.writeDataSimpleNotNull(itemsV);
					
				}
			}
			
			stream.writeLong(this.removeTime);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof FieldItemBagBindData))
				return;
			
			var mData:FieldItemBagBindData=data as FieldItemBagBindData;
			
			this.instanceID=mData.instanceID;
			this.items=mData.items;
			this.removeTime=mData.removeTime;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof FieldItemBagBindData))
				return;
			
			var mData:FieldItemBagBindData=data as FieldItemBagBindData;
			
			this.instanceID=mData.instanceID;
			
			if(this.items!=null)
			{
				this.items.clear();
				this.items.ensureCapacity(mData.items.size());
			}
			else
			{
				this.items=new SList<ItemData>();
			}
			
			var itemsT:SList<ItemData>=this.items;
			if(!mData.items.isEmpty())
			{
				for(var itemsVI=0,itemsVLen=mData.items.length;itemsVI<itemsVLen;++itemsVI)
				{
					var itemsV:ItemData=mData.items[itemsVI];
					var itemsU:ItemData;
					itemsU=itemsV.clone() as ItemData;
					
					itemsT.add(itemsU);
				}
			}
			
			this.removeTime=mData.removeTime;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.items=new SList<ItemData>();
		}
		
	}
}
