namespace Shine
{
	/** 帧同步指令数据(generated by shine) */
	export class FrameSyncCommandData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.FrameSyncCommand;
		
		/** 序号 */
		public index:number;
		
		/** 指令 */
		public type:number;
		
		/** 整形参数组 */
		public ints:number[];
		
		/** float参数组 */
		public floats:number[];
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.FrameSyncCommand;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "FrameSyncCommandData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.index=stream.readInt();
			
			this.type=stream.readInt();
			
			var intsLen:number=stream.readLen();
			this.ints=new Array<number>(intsLen);
			var intsT:number[]=this.ints;
			for(var intsI:number=0;intsI<intsLen;++intsI)
			{
				var intsV:number;
				intsV=stream.readInt();
				
				intsT[intsI]=intsV;
			}
			
			var floatsLen:number=stream.readLen();
			this.floats=new Array<number>(floatsLen);
			var floatsT:number[]=this.floats;
			for(var floatsI:number=0;floatsI<floatsLen;++floatsI)
			{
				var floatsV:number;
				floatsV=stream.readFloat();
				
				floatsT[floatsI]=floatsV;
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.index);
			
			stream.writeInt(this.type);
			
			var intsT:number[]=this.ints;
			stream.writeLen(intsT.length);
			for(var intsVI=0,intsVLen=intsT.length;intsVI<intsVLen;++intsVI)
			{
				var intsV:number=intsT[intsVI];
				stream.writeInt(intsV);
				
			}
			
			var floatsT:number[]=this.floats;
			stream.writeLen(floatsT.length);
			for(var floatsVI=0,floatsVLen=floatsT.length;floatsVI<floatsVLen;++floatsVI)
			{
				var floatsV:number=floatsT[floatsVI];
				stream.writeFloat(floatsV);
				
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof FrameSyncCommandData))
				return;
			
			var mData:FrameSyncCommandData=data as FrameSyncCommandData;
			
			this.index=mData.index;
			this.type=mData.type;
			this.ints=mData.ints;
			this.floats=mData.floats;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof FrameSyncCommandData))
				return;
			
			var mData:FrameSyncCommandData=data as FrameSyncCommandData;
			
			this.index=mData.index;
			
			this.type=mData.type;
			
			var intsR:number[]=mData.ints;
			var intsLen:number=intsR.length;
			this.ints=new Array<number>(intsLen);
			var intsT:number[]=this.ints;
			for(var intsI:number=0;intsI<intsLen;++intsI)
			{
				var intsV:number=intsR[intsI];
				var intsU:number;
				intsU=intsV;
				
				intsT[intsI]=intsU;
			}
			
			var floatsR:number[]=mData.floats;
			var floatsLen:number=floatsR.length;
			this.floats=new Array<number>(floatsLen);
			var floatsT:number[]=this.floats;
			for(var floatsI:number=0;floatsI<floatsLen;++floatsI)
			{
				var floatsV:number=floatsR[floatsI];
				var floatsU:number;
				floatsU=floatsV;
				
				floatsT[floatsI]=floatsU;
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.ints=new Array<number>(0);
			this.floats=new Array<number>(0);
		}
		
	}
}
