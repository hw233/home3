namespace Shine
{
	/** 技能目标数据(generated by shine) */
	export class SkillTargetData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.SkillTarget;
		
		/** 目标类型 */
		public type:number;
		
		/** 目标流水ID */
		public targetInstanceID:number=-1;
		
		/** 目标位置 */
		public pos:PosData;
		
		/** 携带参数 */
		public arg:number;
		
		/** 目标朝向 */
		public dir:DirData;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.SkillTarget;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "SkillTargetData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.type=stream.readInt();
			
			this.targetInstanceID=stream.readInt();
			
			if(stream.readBoolean())
			{
				this.pos=new PosData();
				this.pos.readBytesSimple(stream);
			}
			else
			{
				this.pos=null;
			}
			
			if(stream.readBoolean())
			{
				this.dir=new DirData();
				this.dir.readBytesSimple(stream);
			}
			else
			{
				this.dir=null;
			}
			
			this.arg=stream.readInt();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.type);
			
			stream.writeInt(this.targetInstanceID);
			
			if(this.pos!=null)
			{
				stream.writeBoolean(true);
				this.pos.writeBytesSimple(stream);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.dir!=null)
			{
				stream.writeBoolean(true);
				this.dir.writeBytesSimple(stream);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.arg);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof SkillTargetData))
				return;
			
			var mData:SkillTargetData=data as SkillTargetData;
			
			this.type=mData.type;
			this.targetInstanceID=mData.targetInstanceID;
			this.pos=mData.pos;
			this.dir=mData.dir;
			this.arg=mData.arg;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof SkillTargetData))
				return;
			
			var mData:SkillTargetData=data as SkillTargetData;
			
			this.type=mData.type;
			
			this.targetInstanceID=mData.targetInstanceID;
			
			if(mData.pos!=null)
			{
				this.pos=new PosData();
				this.pos.copy(mData.pos);
			}
			else
			{
				this.pos=null;
			}
			
			if(mData.dir!=null)
			{
				this.dir=new DirData();
				this.dir.copy(mData.dir);
			}
			else
			{
				this.dir=null;
			}
			
			this.arg=mData.arg;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
	}
}
