namespace Shine
{
	/** 单个伤害数据(generated by shine) */
	export class DamageOneData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.DamageOne;
		
		/** 单位实例ID */
		public instanceID:number;
		
		/** 是否命中 */
		public isHit:boolean;
		
		/** 是否暴击 */
		public isCrit:boolean;
		
		/** 伤害组(伤害类型:伤害值) */
		public damages:SList<DIntData>;
		
		/** 是否造成击杀 */
		public isKilled:boolean;
		
		/** 伤害参数(表现用,如背击) */
		public arg:number;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.DamageOne;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "DamageOneData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.instanceID=stream.readInt();
			
			this.isHit=stream.readBoolean();
			
			this.isCrit=stream.readBoolean();
			
			var damagesLen:number=stream.readLen();
			if(this.damages!=null)
			{
				this.damages.clear();
				this.damages.ensureCapacity(damagesLen);
			}
			else
			{
				this.damages=new SList<DIntData>();
			}
			
			var damagesT:SList<DIntData>=this.damages;
			for(var damagesI:number=damagesLen-1;damagesI>=0;--damagesI)
			{
				var damagesV:DIntData;
				damagesV=new DIntData();
				damagesV.readBytesSimple(stream);
				
				damagesT.add(damagesV);
			}
			
			this.isKilled=stream.readBoolean();
			
			this.arg=stream.readInt();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.instanceID);
			
			stream.writeBoolean(this.isHit);
			
			stream.writeBoolean(this.isCrit);
			
			stream.writeLen(this.damages.size());
			if(!this.damages.isEmpty())
			{
				for(var damagesVI=0,damagesVLen=this.damages.length;damagesVI<damagesVLen;++damagesVI)
				{
					var damagesV:DIntData=this.damages[damagesVI];
					damagesV.writeBytesSimple(stream);
					
				}
			}
			
			stream.writeBoolean(this.isKilled);
			
			stream.writeInt(this.arg);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof DamageOneData))
				return;
			
			var mData:DamageOneData=data as DamageOneData;
			
			this.instanceID=mData.instanceID;
			this.isHit=mData.isHit;
			this.isCrit=mData.isCrit;
			this.damages=mData.damages;
			this.isKilled=mData.isKilled;
			this.arg=mData.arg;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof DamageOneData))
				return;
			
			var mData:DamageOneData=data as DamageOneData;
			
			this.instanceID=mData.instanceID;
			
			this.isHit=mData.isHit;
			
			this.isCrit=mData.isCrit;
			
			if(this.damages!=null)
			{
				this.damages.clear();
				this.damages.ensureCapacity(mData.damages.size());
			}
			else
			{
				this.damages=new SList<DIntData>();
			}
			
			var damagesT:SList<DIntData>=this.damages;
			if(!mData.damages.isEmpty())
			{
				for(var damagesVI=0,damagesVLen=mData.damages.length;damagesVI<damagesVLen;++damagesVI)
				{
					var damagesV:DIntData=mData.damages[damagesVI];
					var damagesU:DIntData;
					damagesU=new DIntData();
					damagesU.copy(damagesV);
					
					damagesT.add(damagesU);
				}
			}
			
			this.isKilled=mData.isKilled;
			
			this.arg=mData.arg;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.damages=new SList<DIntData>();
		}
		
	}
}
