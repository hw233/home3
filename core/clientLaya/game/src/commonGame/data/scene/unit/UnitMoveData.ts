namespace Shine
{
	/** 单位移动数据(generated by shine) */
	export class UnitMoveData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.UnitMove;
		
		/** 基元移动状态(见UnitBaseMoveState) */
		public baseMoveState:number;
		
		/** 当前移动类型(见MoveType) */
		public moveType:number;
		
		/** 基元移动点位置 */
		public baseMovePos:PosData;
		
		/** 剩余移动点组 */
		public moveList:SList<PosData>;
		
		/** 当前特殊移动ID(如没有为-1) */
		public specialMoveID:number;
		
		/** 特殊移动参数组 */
		public specialMoveArgs:number[];
		
		/** 特殊移动剩余时间 */
		public specialMoveLastTime:number;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.UnitMove;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.baseMoveState=stream.readInt();
			
			this.moveType=stream.readInt();
			
			if(stream.readBoolean())
			{
				this.baseMovePos=new PosData();
				this.baseMovePos.readBytesSimple(stream);
			}
			else
			{
				this.baseMovePos=null;
			}
			
			if(stream.readBoolean())
			{
				var moveListLen:number=stream.readLen();
				if(this.moveList!=null)
				{
					this.moveList.clear();
					this.moveList.ensureCapacity(moveListLen);
				}
				else
				{
					this.moveList=new SList<PosData>();
				}
				
				var moveListT:SList<PosData>=this.moveList;
				for(var moveListI:number=moveListLen-1;moveListI>=0;--moveListI)
				{
					var moveListV:PosData;
					if(stream.readBoolean())
					{
						moveListV=new PosData();
						moveListV.readBytesSimple(stream);
					}
					else
					{
						moveListV=null;
					}
					
					moveListT.add(moveListV);
				}
			}
			else
			{
				this.moveList=null;
			}
			
			this.specialMoveID=stream.readInt();
			
			if(stream.readBoolean())
			{
				var specialMoveArgsLen:number=stream.readLen();
				this.specialMoveArgs=new Array<number>(specialMoveArgsLen);
				var specialMoveArgsT:number[]=this.specialMoveArgs;
				for(var specialMoveArgsI:number=0;specialMoveArgsI<specialMoveArgsLen;++specialMoveArgsI)
				{
					var specialMoveArgsV:number;
					specialMoveArgsV=stream.readInt();
					
					specialMoveArgsT[specialMoveArgsI]=specialMoveArgsV;
				}
			}
			else
			{
				this.specialMoveArgs=null;
			}
			
			this.specialMoveLastTime=stream.readInt();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.baseMoveState);
			
			stream.writeInt(this.moveType);
			
			if(this.baseMovePos!=null)
			{
				stream.writeBoolean(true);
				this.baseMovePos.writeBytesSimple(stream);
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			if(this.moveList!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.moveList.size());
				if(!this.moveList.isEmpty())
				{
					for(var moveListVI=0,moveListVLen=this.moveList.length;moveListVI<moveListVLen;++moveListVI)
					{
						var moveListV:PosData=this.moveList[moveListVI];
						if(moveListV!=null)
						{
							stream.writeBoolean(true);
							moveListV.writeBytesSimple(stream);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.specialMoveID);
			
			if(this.specialMoveArgs!=null)
			{
				stream.writeBoolean(true);
				var specialMoveArgsT:number[]=this.specialMoveArgs;
				stream.writeLen(specialMoveArgsT.length);
				for(var specialMoveArgsVI=0,specialMoveArgsVLen=specialMoveArgsT.length;specialMoveArgsVI<specialMoveArgsVLen;++specialMoveArgsVI)
				{
					var specialMoveArgsV:number=specialMoveArgsT[specialMoveArgsVI];
					stream.writeInt(specialMoveArgsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.specialMoveLastTime);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof UnitMoveData))
				return;
			
			var mData:UnitMoveData=data as UnitMoveData;
			
			this.baseMoveState=mData.baseMoveState;
			this.moveType=mData.moveType;
			this.baseMovePos=mData.baseMovePos;
			this.moveList=mData.moveList;
			this.specialMoveID=mData.specialMoveID;
			this.specialMoveArgs=mData.specialMoveArgs;
			this.specialMoveLastTime=mData.specialMoveLastTime;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof UnitMoveData))
				return;
			
			var mData:UnitMoveData=data as UnitMoveData;
			
			this.baseMoveState=mData.baseMoveState;
			
			this.moveType=mData.moveType;
			
			if(mData.baseMovePos!=null)
			{
				this.baseMovePos=new PosData();
				this.baseMovePos.copy(mData.baseMovePos);
			}
			else
			{
				this.baseMovePos=null;
			}
			
			if(mData.moveList!=null)
			{
				if(this.moveList!=null)
				{
					this.moveList.clear();
					this.moveList.ensureCapacity(mData.moveList.size());
				}
				else
				{
					this.moveList=new SList<PosData>();
				}
				
				var moveListT:SList<PosData>=this.moveList;
				if(!mData.moveList.isEmpty())
				{
					for(var moveListVI=0,moveListVLen=mData.moveList.length;moveListVI<moveListVLen;++moveListVI)
					{
						var moveListV:PosData=mData.moveList[moveListVI];
						var moveListU:PosData;
						if(moveListV!=null)
						{
							moveListU=new PosData();
							moveListU.copy(moveListV);
						}
						else
						{
							moveListU=null;
						}
						
						moveListT.add(moveListU);
					}
				}
			}
			else
			{
				this.moveList=null;
			}
			
			this.specialMoveID=mData.specialMoveID;
			
			if(mData.specialMoveArgs!=null)
			{
				var specialMoveArgsR:number[]=mData.specialMoveArgs;
				var specialMoveArgsLen:number=specialMoveArgsR.length;
				this.specialMoveArgs=new Array<number>(specialMoveArgsLen);
				var specialMoveArgsT:number[]=this.specialMoveArgs;
				for(var specialMoveArgsI:number=0;specialMoveArgsI<specialMoveArgsLen;++specialMoveArgsI)
				{
					var specialMoveArgsV:number=specialMoveArgsR[specialMoveArgsI];
					var specialMoveArgsU:number;
					specialMoveArgsU=specialMoveArgsV;
					
					specialMoveArgsT[specialMoveArgsI]=specialMoveArgsU;
				}
			}
			else
			{
				this.specialMoveArgs=null;
			}
			
			this.specialMoveLastTime=mData.specialMoveLastTime;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
	}
}
