namespace Shine
{
	/** 单位造型数据(generated by shine) */
	export class UnitAvatarData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.UnitAvatar;
		
		/** 模型ID */
		public modelID:number=-1;
		
		/** 显示部件组 */
		public parts:SMap<number,number>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.UnitAvatar;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "UnitAvatarData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.modelID=stream.readInt();
			
			var partsLen:number=stream.readLen();
			if(this.parts!=null)
			{
				this.parts.clear();
				this.parts.ensureCapacity(partsLen);
			}
			else
			{
				this.parts=new SMap<number,number>(partsLen);
			}
			
			var partsT:SMap<number,number>=this.parts;
			for(var partsI:number=partsLen-1;partsI>=0;--partsI)
			{
				var partsK:number;
				var partsV:number;
				partsK=stream.readInt();
				
				partsV=stream.readInt();
				
				partsT.put(partsK,partsV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.modelID);
			
			stream.writeLen(this.parts.size());
			if(!this.parts.isEmpty())
			{
				for(var partsK of this.parts.getKeys())
				{
					var partsV:number=this.parts.get(partsK);
					stream.writeInt(partsK);
					
					stream.writeInt(partsV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof UnitAvatarData))
				return;
			
			var mData:UnitAvatarData=data as UnitAvatarData;
			
			this.modelID=mData.modelID;
			this.parts=mData.parts;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof UnitAvatarData))
				return;
			
			var mData:UnitAvatarData=data as UnitAvatarData;
			
			this.modelID=mData.modelID;
			
			if(this.parts!=null)
			{
				this.parts.clear();
				this.parts.ensureCapacity(mData.parts.size());
			}
			else
			{
				this.parts=new SMap<number,number>(mData.parts.size());
			}
			
			var partsT:SMap<number,number>=this.parts;
			if(!mData.parts.isEmpty())
			{
				for(var partsK of mData.parts.getKeys())
				{
					var partsV:number=mData.parts.get(partsK);
					var partsW:number;
					var partsU:number;
					partsW=partsK;
					
					partsU=partsV;
					
					partsT.put(partsW,partsU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.parts=new SMap<number,number>();
		}
		
	}
}
