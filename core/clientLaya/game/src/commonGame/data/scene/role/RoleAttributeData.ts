namespace Shine
{
	/** 玩家属性数据(generated by shine) */
	export class RoleAttributeData extends BaseData
	{
		/** 属性组 */
		public attributes:SMap<number,number>;
		
		/** 数据类型ID */
		public static dataID:number=BaseDataType.RoleAttribute;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.RoleAttribute;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "RoleAttributeData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			var attributesLen:number=stream.readLen();
			if(this.attributes!=null)
			{
				this.attributes.clear();
				this.attributes.ensureCapacity(attributesLen);
			}
			else
			{
				this.attributes=new SMap<number,number>(attributesLen);
			}
			
			var attributesT:SMap<number,number>=this.attributes;
			for(var attributesI:number=attributesLen-1;attributesI>=0;--attributesI)
			{
				var attributesK:number;
				var attributesV:number;
				attributesK=stream.readInt();
				
				attributesV=stream.readInt();
				
				attributesT.put(attributesK,attributesV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLen(this.attributes.size());
			if(!this.attributes.isEmpty())
			{
				for(var attributesK of this.attributes.getKeys())
				{
					var attributesV:number=this.attributes.get(attributesK);
					stream.writeInt(attributesK);
					
					stream.writeInt(attributesV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof RoleAttributeData))
				return;
			
			var mData:RoleAttributeData=data as RoleAttributeData;
			
			this.attributes=mData.attributes;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof RoleAttributeData))
				return;
			
			var mData:RoleAttributeData=data as RoleAttributeData;
			
			if(this.attributes!=null)
			{
				this.attributes.clear();
				this.attributes.ensureCapacity(mData.attributes.size());
			}
			else
			{
				this.attributes=new SMap<number,number>(mData.attributes.size());
			}
			
			var attributesT:SMap<number,number>=this.attributes;
			if(!mData.attributes.isEmpty())
			{
				for(var attributesK of mData.attributes.getKeys())
				{
					var attributesV:number=mData.attributes.get(attributesK);
					var attributesW:number;
					var attributesU:number;
					attributesW=attributesK;
					
					attributesU=attributesV;
					
					attributesT.put(attributesW,attributesU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.attributes=new SMap<number,number>();
		}
		
	}
}
