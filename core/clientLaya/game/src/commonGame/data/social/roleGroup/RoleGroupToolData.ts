namespace Shine
{
	/** 玩家群数据(generated by shine) */
	export class RoleGroupToolData extends FuncToolData
	{
		/** 简版信息组 */
		public simpleDatas:SMap<number,RoleGroupSimpleData>;
		
		/** 数据类型ID */
		public static dataID:number=BaseDataType.RoleGroupTool;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.RoleGroupTool;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			var simpleDatasLen:number=stream.readLen();
			if(this.simpleDatas!=null)
			{
				this.simpleDatas.clear();
				this.simpleDatas.ensureCapacity(simpleDatasLen);
			}
			else
			{
				this.simpleDatas=new SMap<number,RoleGroupSimpleData>(simpleDatasLen);
			}
			
			var simpleDatasT:SMap<number,RoleGroupSimpleData>=this.simpleDatas;
			for(var simpleDatasI:number=simpleDatasLen-1;simpleDatasI>=0;--simpleDatasI)
			{
				var simpleDatasK:number;
				var simpleDatasV:RoleGroupSimpleData;
				simpleDatasK=stream.readLong();
				
				simpleDatasV=stream.readDataSimpleNotNull() as RoleGroupSimpleData;
				
				simpleDatasT.put(simpleDatasK,simpleDatasV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeLen(this.simpleDatas.size());
			if(!this.simpleDatas.isEmpty())
			{
				for(var simpleDatasK of this.simpleDatas.getKeys())
				{
					var simpleDatasV:RoleGroupSimpleData=this.simpleDatas.get(simpleDatasK);
					stream.writeLong(simpleDatasK);
					
					stream.writeDataSimpleNotNull(simpleDatasV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			super.toShadowCopy(data);
			
			if(!(data instanceof RoleGroupToolData))
				return;
			
			var mData:RoleGroupToolData=data as RoleGroupToolData;
			
			this.simpleDatas=mData.simpleDatas;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			super.toCopy(data);
			
			if(!(data instanceof RoleGroupToolData))
				return;
			
			var mData:RoleGroupToolData=data as RoleGroupToolData;
			
			if(this.simpleDatas!=null)
			{
				this.simpleDatas.clear();
				this.simpleDatas.ensureCapacity(mData.simpleDatas.size());
			}
			else
			{
				this.simpleDatas=new SMap<number,RoleGroupSimpleData>(mData.simpleDatas.size());
			}
			
			var simpleDatasT:SMap<number,RoleGroupSimpleData>=this.simpleDatas;
			if(!mData.simpleDatas.isEmpty())
			{
				for(var simpleDatasK of mData.simpleDatas.getKeys())
				{
					var simpleDatasV:RoleGroupSimpleData=mData.simpleDatas.get(simpleDatasK);
					var simpleDatasW:number;
					var simpleDatasU:RoleGroupSimpleData;
					simpleDatasW=simpleDatasK;
					
					simpleDatasU=simpleDatasV.clone() as RoleGroupSimpleData;
					
					simpleDatasT.put(simpleDatasW,simpleDatasU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			super.initDefault();
			
			this.simpleDatas=new SMap<number,RoleGroupSimpleData>();
		}
		
	}
}
