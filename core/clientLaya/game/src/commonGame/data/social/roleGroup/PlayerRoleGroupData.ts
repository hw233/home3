namespace Shine
{
	/** 角色玩家群数据(推送客户端的)(generated by shine) */
	export class PlayerRoleGroupData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.PlayerRoleGroup;
		
		/** 所在群id */
		public groupID:number;
		
		/** 等级 */
		public level:number;
		
		/** 群名 */
		public name:string;
		
		/** 公告 */
		public notice:string;
		
		/** 成员数 */
		public memberNum:number;
		
		/** 成员组 */
		public members:SMap<number,PlayerRoleGroupMemberData>;
		
		/** 日志信息队列 */
		public logQueue:SList<InfoLogData>;
		
		/** 经验值 */
		public exp:number;
		
		/** 申请时是否可直接入群(无需同意) */
		public canApplyInAbs:boolean;
		
		/** 申请加入组(如有权限则有值) */
		public applyDic:SMap<number,PlayerApplyRoleGroupData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.PlayerRoleGroup;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.groupID=stream.readLong();
			
			this.level=stream.readInt();
			
			this.name=stream.readUTF();
			
			this.notice=stream.readUTF();
			
			this.memberNum=stream.readInt();
			
			var membersLen:number=stream.readLen();
			if(this.members!=null)
			{
				this.members.clear();
				this.members.ensureCapacity(membersLen);
			}
			else
			{
				this.members=new SMap<number,PlayerRoleGroupMemberData>(membersLen);
			}
			
			var membersT:SMap<number,PlayerRoleGroupMemberData>=this.members;
			for(var membersI:number=membersLen-1;membersI>=0;--membersI)
			{
				var membersV:PlayerRoleGroupMemberData;
				membersV=stream.readDataSimpleNotNull() as PlayerRoleGroupMemberData;
				
				membersT.put(membersV.playerID,membersV);
			}
			
			if(stream.readBoolean())
			{
				var applyDicLen:number=stream.readLen();
				if(this.applyDic!=null)
				{
					this.applyDic.clear();
					this.applyDic.ensureCapacity(applyDicLen);
				}
				else
				{
					this.applyDic=new SMap<number,PlayerApplyRoleGroupData>(applyDicLen);
				}
				
				var applyDicT:SMap<number,PlayerApplyRoleGroupData>=this.applyDic;
				for(var applyDicI:number=applyDicLen-1;applyDicI>=0;--applyDicI)
				{
					var applyDicK:number;
					var applyDicV:PlayerApplyRoleGroupData;
					applyDicK=stream.readLong();
					
					if(stream.readBoolean())
					{
						applyDicV=stream.readDataSimpleNotNull() as PlayerApplyRoleGroupData;
					}
					else
					{
						applyDicV=null;
					}
					
					applyDicT.put(applyDicK,applyDicV);
				}
			}
			else
			{
				this.applyDic=null;
			}
			
			this.canApplyInAbs=stream.readBoolean();
			
			this.exp=stream.readLong();
			
			var logQueueLen:number=stream.readLen();
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(logQueueLen);
			}
			else
			{
				this.logQueue=new SList<InfoLogData>();
			}
			
			var logQueueT:SList<InfoLogData>=this.logQueue;
			for(var logQueueI:number=logQueueLen-1;logQueueI>=0;--logQueueI)
			{
				var logQueueV:InfoLogData;
				logQueueV=stream.readDataSimpleNotNull() as InfoLogData;
				
				logQueueT.add(logQueueV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLong(this.groupID);
			
			stream.writeInt(this.level);
			
			stream.writeUTF(this.name);
			
			stream.writeUTF(this.notice);
			
			stream.writeInt(this.memberNum);
			
			stream.writeLen(this.members.size());
			if(!this.members.isEmpty())
			{
				for(var membersV of this.members.getValues())
				{
					stream.writeDataSimpleNotNull(membersV);
					
				}
			}
			
			if(this.applyDic!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.applyDic.size());
				if(!this.applyDic.isEmpty())
				{
					for(var applyDicK of this.applyDic.getKeys())
					{
						var applyDicV:PlayerApplyRoleGroupData=this.applyDic.get(applyDicK);
						stream.writeLong(applyDicK);
						
						if(applyDicV!=null)
						{
							stream.writeBoolean(true);
							stream.writeDataSimpleNotNull(applyDicV);
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeBoolean(this.canApplyInAbs);
			
			stream.writeLong(this.exp);
			
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				for(var logQueueVI=0,logQueueVLen=this.logQueue.length;logQueueVI<logQueueVLen;++logQueueVI)
				{
					var logQueueV:InfoLogData=this.logQueue[logQueueVI];
					stream.writeDataSimpleNotNull(logQueueV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof PlayerRoleGroupData))
				return;
			
			var mData:PlayerRoleGroupData=data as PlayerRoleGroupData;
			
			this.groupID=mData.groupID;
			this.level=mData.level;
			this.name=mData.name;
			this.notice=mData.notice;
			this.memberNum=mData.memberNum;
			this.members=mData.members;
			this.applyDic=mData.applyDic;
			this.canApplyInAbs=mData.canApplyInAbs;
			this.exp=mData.exp;
			this.logQueue=mData.logQueue;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof PlayerRoleGroupData))
				return;
			
			var mData:PlayerRoleGroupData=data as PlayerRoleGroupData;
			
			this.groupID=mData.groupID;
			
			this.level=mData.level;
			
			this.name=mData.name;
			
			this.notice=mData.notice;
			
			this.memberNum=mData.memberNum;
			
			if(this.members!=null)
			{
				this.members.clear();
				this.members.ensureCapacity(mData.members.size());
			}
			else
			{
				this.members=new SMap<number,PlayerRoleGroupMemberData>(mData.members.size());
			}
			
			var membersT:SMap<number,PlayerRoleGroupMemberData>=this.members;
			if(!mData.members.isEmpty())
			{
				for(var membersV of mData.members.getValues())
				{
					var membersU:PlayerRoleGroupMemberData;
					membersU=membersV.clone() as PlayerRoleGroupMemberData;
					
					membersT.put(membersU.playerID,membersU);
				}
			}
			
			if(mData.applyDic!=null)
			{
				if(this.applyDic!=null)
				{
					this.applyDic.clear();
					this.applyDic.ensureCapacity(mData.applyDic.size());
				}
				else
				{
					this.applyDic=new SMap<number,PlayerApplyRoleGroupData>(mData.applyDic.size());
				}
				
				var applyDicT:SMap<number,PlayerApplyRoleGroupData>=this.applyDic;
				if(!mData.applyDic.isEmpty())
				{
					for(var applyDicK of mData.applyDic.getKeys())
					{
						var applyDicV:PlayerApplyRoleGroupData=mData.applyDic.get(applyDicK);
						var applyDicW:number;
						var applyDicU:PlayerApplyRoleGroupData;
						applyDicW=applyDicK;
						
						if(applyDicV!=null)
						{
							applyDicU=applyDicV.clone() as PlayerApplyRoleGroupData;
						}
						else
						{
							applyDicU=null;
						}
						
						applyDicT.put(applyDicW,applyDicU);
					}
				}
			}
			else
			{
				this.applyDic=null;
			}
			
			this.canApplyInAbs=mData.canApplyInAbs;
			
			this.exp=mData.exp;
			
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(mData.logQueue.size());
			}
			else
			{
				this.logQueue=new SList<InfoLogData>();
			}
			
			var logQueueT:SList<InfoLogData>=this.logQueue;
			if(!mData.logQueue.isEmpty())
			{
				for(var logQueueVI=0,logQueueVLen=mData.logQueue.length;logQueueVI<logQueueVLen;++logQueueVI)
				{
					var logQueueV:InfoLogData=mData.logQueue[logQueueVI];
					var logQueueU:InfoLogData;
					logQueueU=logQueueV.clone() as InfoLogData;
					
					logQueueT.add(logQueueU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.members=new SMap<number,PlayerRoleGroupMemberData>();
			this.logQueue=new SList<InfoLogData>();
		}
		
	}
}
