namespace Shine
{
	/** 玩家群客户端工具数据(generated by shine) */
	export class PlayerRoleGroupClientToolData extends FuncToolData
	{
		/** 数据类型ID */
		public static dataID:number=BaseDataType.PlayerRoleGroupClientTool;
		
		/** 群数据组 */
		public groups:SMap<number,PlayerRoleGroupData>;
		
		/** 被邀请时是否可直接入群(无需同意) */
		public canInviteInAbs:boolean;
		
		/** 申请记录字典 */
		public applyDic:SMap<number,PlayerApplyRoleGroupSelfData>;
		
		constructor()
		{
			super();
			this._dataID=BaseDataType.PlayerRoleGroupClientTool;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			var groupsLen:number=stream.readLen();
			if(this.groups!=null)
			{
				this.groups.clear();
				this.groups.ensureCapacity(groupsLen);
			}
			else
			{
				this.groups=new SMap<number,PlayerRoleGroupData>(groupsLen);
			}
			
			var groupsT:SMap<number,PlayerRoleGroupData>=this.groups;
			for(var groupsI:number=groupsLen-1;groupsI>=0;--groupsI)
			{
				var groupsV:PlayerRoleGroupData;
				groupsV=stream.readDataSimpleNotNull() as PlayerRoleGroupData;
				
				groupsT.put(groupsV.groupID,groupsV);
			}
			
			var applyDicLen:number=stream.readLen();
			if(this.applyDic!=null)
			{
				this.applyDic.clear();
				this.applyDic.ensureCapacity(applyDicLen);
			}
			else
			{
				this.applyDic=new SMap<number,PlayerApplyRoleGroupSelfData>(applyDicLen);
			}
			
			var applyDicT:SMap<number,PlayerApplyRoleGroupSelfData>=this.applyDic;
			for(var applyDicI:number=applyDicLen-1;applyDicI>=0;--applyDicI)
			{
				var applyDicV:PlayerApplyRoleGroupSelfData;
				applyDicV=stream.readDataSimpleNotNull() as PlayerApplyRoleGroupSelfData;
				
				applyDicT.put(applyDicV.data.groupID,applyDicV);
			}
			
			this.canInviteInAbs=stream.readBoolean();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeLen(this.groups.size());
			if(!this.groups.isEmpty())
			{
				for(var groupsV of this.groups.getValues())
				{
					stream.writeDataSimpleNotNull(groupsV);
					
				}
			}
			
			stream.writeLen(this.applyDic.size());
			if(!this.applyDic.isEmpty())
			{
				for(var applyDicV of this.applyDic.getValues())
				{
					stream.writeDataSimpleNotNull(applyDicV);
					
				}
			}
			
			stream.writeBoolean(this.canInviteInAbs);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			super.toShadowCopy(data);
			
			if(!(data instanceof PlayerRoleGroupClientToolData))
				return;
			
			var mData:PlayerRoleGroupClientToolData=data as PlayerRoleGroupClientToolData;
			
			this.groups=mData.groups;
			this.applyDic=mData.applyDic;
			this.canInviteInAbs=mData.canInviteInAbs;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			super.toCopy(data);
			
			if(!(data instanceof PlayerRoleGroupClientToolData))
				return;
			
			var mData:PlayerRoleGroupClientToolData=data as PlayerRoleGroupClientToolData;
			
			if(this.groups!=null)
			{
				this.groups.clear();
				this.groups.ensureCapacity(mData.groups.size());
			}
			else
			{
				this.groups=new SMap<number,PlayerRoleGroupData>(mData.groups.size());
			}
			
			var groupsT:SMap<number,PlayerRoleGroupData>=this.groups;
			if(!mData.groups.isEmpty())
			{
				for(var groupsV of mData.groups.getValues())
				{
					var groupsU:PlayerRoleGroupData;
					groupsU=groupsV.clone() as PlayerRoleGroupData;
					
					groupsT.put(groupsU.groupID,groupsU);
				}
			}
			
			if(this.applyDic!=null)
			{
				this.applyDic.clear();
				this.applyDic.ensureCapacity(mData.applyDic.size());
			}
			else
			{
				this.applyDic=new SMap<number,PlayerApplyRoleGroupSelfData>(mData.applyDic.size());
			}
			
			var applyDicT:SMap<number,PlayerApplyRoleGroupSelfData>=this.applyDic;
			if(!mData.applyDic.isEmpty())
			{
				for(var applyDicV of mData.applyDic.getValues())
				{
					var applyDicU:PlayerApplyRoleGroupSelfData;
					applyDicU=applyDicV.clone() as PlayerApplyRoleGroupSelfData;
					
					applyDicT.put(applyDicU.data.groupID,applyDicU);
				}
			}
			
			this.canInviteInAbs=mData.canInviteInAbs;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			super.initDefault();
			
			this.groups=new SMap<number,PlayerRoleGroupData>();
			this.applyDic=new SMap<number,PlayerApplyRoleGroupSelfData>();
		}
		
	}
}
