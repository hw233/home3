namespace Shine
{
	/** 控制单位使用Attack(客户端驱动attack时用)(generated by shine) */
	export class CUnitAttackRequest extends CUnitRRequest
	{
		/** 数据类型ID */
		public static dataID:number=GameRequestType.CUnitAttack;
		
		/** 攻击ID */
		public attackID:number;
		
		/** 攻击等级 */
		public attackLevel:number;
		
		/** 目标数据 */
		public targetData:SkillTargetData;
		
		/** 目标组 */
		public targets:SList<number>;
		
		/** 是否子弹第一次攻击 */
		public isBulletFirstHit:boolean;
		
		constructor()
		{
			super();
			this._dataID=GameRequestType.CUnitAttack;
			this.setDontCopy();
		}
		
		protected copyData():void
		{
			super.copyData();
			var targetDataTemp:SkillTargetData=this.targetData;
			this.targetData=targetDataTemp.clone() as SkillTargetData;
			
			var targetsTemp:SList<number>=this.targets;
			this.targets=new SList<number>();
			var targetsT:SList<number>=this.targets;
			if(!targetsTemp.isEmpty())
			{
				for(var targetsVI=0,targetsVLen=targetsTemp.length;targetsVI<targetsVLen;++targetsVI)
				{
					var targetsV:number=targetsTemp[targetsVI];
					var targetsU:number;
					targetsU=targetsV;
					
					targetsT.add(targetsU);
				}
			}
			
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "CUnitAttackRequest";
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeInt(this.attackID);
			
			stream.writeInt(this.attackLevel);
			
			stream.writeDataSimpleNotNull(this.targetData);
			
			stream.writeLen(this.targets.size());
			if(!this.targets.isEmpty())
			{
				for(var targetsVI=0,targetsVLen=this.targets.length;targetsVI<targetsVLen;++targetsVI)
				{
					var targetsV:number=this.targets[targetsVI];
					stream.writeInt(targetsV);
					
				}
			}
			
			stream.writeBoolean(this.isBulletFirstHit);
			
		}
		
		/** 创建实例 */
		public static createCUnitAttack(instanceID:number,attackID:number,attackLevel:number,targetData:SkillTargetData,targets:SList<number>,isBulletFirstHit:boolean):CUnitAttackRequest
		{
			var re:CUnitAttackRequest=new CUnitAttackRequest();
			re.instanceID=instanceID;
			re.attackID=attackID;
			re.attackLevel=attackLevel;
			re.targetData=targetData;
			re.targets=targets;
			re.isBulletFirstHit=isBulletFirstHit;
			return re;
		}
		
	}
}
