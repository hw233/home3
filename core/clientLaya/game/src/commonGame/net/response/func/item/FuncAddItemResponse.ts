namespace Shine
{
	/** 添加物品消息(generated by shine) */
	export class FuncAddItemResponse extends FuncSResponse
	{
		/** 数据类型ID */
		public static dataID:number=GameResponseType.FuncAddItem;
		
		/** 途径 */
		public way:number;
		
		/** 自动使用物品组 */
		public autoUseItems:SMap<number,number>;
		
		/** 更新组 */
		public items:SMap<number,ItemData>;
		
		constructor()
		{
			super();
			this._dataID=GameResponseType.FuncAddItem;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "FuncAddItemResponse";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.way=stream.readInt();
			
			if(stream.readBoolean())
			{
				var autoUseItemsLen:number=stream.readLen();
				if(this.autoUseItems!=null)
				{
					this.autoUseItems.clear();
					this.autoUseItems.ensureCapacity(autoUseItemsLen);
				}
				else
				{
					this.autoUseItems=new SMap<number,number>(autoUseItemsLen);
				}
				
				var autoUseItemsT:SMap<number,number>=this.autoUseItems;
				for(var autoUseItemsI:number=autoUseItemsLen-1;autoUseItemsI>=0;--autoUseItemsI)
				{
					var autoUseItemsK:number;
					var autoUseItemsV:number;
					autoUseItemsK=stream.readInt();
					
					autoUseItemsV=stream.readInt();
					
					autoUseItemsT.put(autoUseItemsK,autoUseItemsV);
				}
			}
			else
			{
				this.autoUseItems=null;
			}
			
			if(stream.readBoolean())
			{
				var itemsLen:number=stream.readLen();
				if(this.items!=null)
				{
					this.items.clear();
					this.items.ensureCapacity(itemsLen);
				}
				else
				{
					this.items=new SMap<number,ItemData>(itemsLen);
				}
				
				var itemsT:SMap<number,ItemData>=this.items;
				for(var itemsI:number=itemsLen-1;itemsI>=0;--itemsI)
				{
					var itemsK:number;
					var itemsV:ItemData;
					itemsK=stream.readInt();
					
					if(stream.readBoolean())
					{
						itemsV=stream.readDataSimpleNotNull() as ItemData;
					}
					else
					{
						itemsV=null;
					}
					
					itemsT.put(itemsK,itemsV);
				}
			}
			else
			{
				this.items=null;
			}
			
		}
		
		/** 执行 */
		protected execute():void
		{
			this.me.func.getBaseItemContainerTool(this.funcID).onAddItemsByServer(this.autoUseItems,this.items,this.way);
		}
		
	}
}
