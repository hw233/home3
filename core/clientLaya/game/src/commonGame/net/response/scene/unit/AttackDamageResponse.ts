namespace Shine
{
	/** 攻击伤害数据(generated by shine) */
	export class AttackDamageResponse extends SceneSResponse
	{
		/** 数据类型ID */
		public static dataID:number=GameResponseType.AttackDamage;
		
		/** 来源单位 */
		public fromInstanceID:number;
		
		/** 目标数据 */
		public target:SkillTargetData;
		
		/** 攻击ID */
		public id:number;
		
		/** 攻击等级 */
		public level:number;
		
		/** 伤害数据组 */
		public damageDatas:SList<DamageOneData>;
		
		constructor()
		{
			super();
			this._dataID=GameResponseType.AttackDamage;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "AttackDamageResponse";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.fromInstanceID=stream.readInt();
			
			this.target=stream.readDataSimpleNotNull() as SkillTargetData;
			
			this.id=stream.readInt();
			
			this.level=stream.readInt();
			
			if(stream.readBoolean())
			{
				var damageDatasLen:number=stream.readLen();
				if(this.damageDatas!=null)
				{
					this.damageDatas.clear();
					this.damageDatas.ensureCapacity(damageDatasLen);
				}
				else
				{
					this.damageDatas=new SList<DamageOneData>();
				}
				
				var damageDatasT:SList<DamageOneData>=this.damageDatas;
				for(var damageDatasI:number=damageDatasLen-1;damageDatasI>=0;--damageDatasI)
				{
					var damageDatasV:DamageOneData;
					if(stream.readBoolean())
					{
						damageDatasV=stream.readDataSimpleNotNull() as DamageOneData;
					}
					else
					{
						damageDatasV=null;
					}
					
					damageDatasT.add(damageDatasV);
				}
			}
			else
			{
				this.damageDatas=null;
			}
			
		}
		
		/** 执行 */
		protected execute():void
		{
			
		}
		
	}
}
