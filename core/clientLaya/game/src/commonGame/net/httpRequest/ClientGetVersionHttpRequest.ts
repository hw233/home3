namespace Shine
{
	/** 客户端获取版本消息(generated by shine) */
	export class ClientGetVersionHttpRequest extends LoginHttpRequest
	{
		/** 数据类型ID */
		public static dataID:number=LoginHttpRequestType.ClientGetVersion;
		
		/** 平台类型 */
		protected _platformType:number;
		
		/** 返回值 */
		protected _re:ClientGetVersionResult;
		
		/** 客户端平台类型(见ClientPlatformType) */
		public platformType:number;
		
		/** 当前资源版本号(用来做url重定向) */
		public resourceVersion:number;
		
		constructor()
		{
			super();
			this._dataID=LoginHttpRequestType.ClientGetVersion;
		}
		
		protected copyData():void
		{
			super.copyData();
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeInt(this.platformType);
			
			stream.writeInt(this.resourceVersion);
			
		}
		
		/** 执行 */
		protected toRead():void
		{
			this._re=new ClientGetVersionResult();
			this.readResult(this._re,this._resultStream);
		}
		
		/** 获取结果 */
		public getResult():ClientGetVersionResult
		{
			return this._re;
		}
		
		/** 执行 */
		protected onComplete():void
		{
			
		}
		
		/** 同步执行 */
		public sendMSync():ClientGetVersionResult
		{
			this.doSendSync();
			return this._re;
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			super.toWriteBytesFull(stream);
			
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeInt(this.platformType);
			
			stream.writeInt(this.resourceVersion);
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 创建实例 */
		public static createClientGetVersion(platformType:number,resourceVersion:number):ClientGetVersionHttpRequest
		{
			var re:ClientGetVersionHttpRequest=new ClientGetVersionHttpRequest();
			re.platformType=platformType;
			re.resourceVersion=resourceVersion;
			return re;
		}
		
	}
}
