namespace Shine
{
	/** 客户端登录(自有登录)(generated by shine) */
	export class ClientLoginHttpRequest extends LoginHttpRequest
	{
		/** 数据类型ID */
		public static dataID:number=LoginHttpRequestType.ClientLogin;
		
		/** c层msg版本号 */
		protected _cMsgVersion:number;
		
		/** g层msg版本号 */
		protected _gMsgVersion:number;
		
		/** 登录数据 */
		protected _data:ClientLoginData;
		
		/** 返回值 */
		protected _re:ClientLoginResult;
		
		/** c层msg版本号 */
		public cMsgVersion:number;
		
		/** g层msg版本号 */
		public gMsgVersion:number;
		
		/** 登录数据 */
		public data:ClientLoginData;
		
		constructor()
		{
			super();
			this._dataID=LoginHttpRequestType.ClientLogin;
		}
		
		protected copyData():void
		{
			super.copyData();
			var dataTemp:ClientLoginData=this.data;
			this.data=dataTemp.clone() as ClientLoginData;
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeInt(this.cMsgVersion);
			
			stream.writeInt(this.gMsgVersion);
			
			stream.writeDataSimpleNotNull(this.data);
			
		}
		
		/** 执行 */
		protected toRead():void
		{
			this._re=new ClientLoginResult();
			this.readResult(this._re,this._resultStream);
		}
		
		/** 获取结果 */
		public getResult():ClientLoginResult
		{
			return this._re;
		}
		
		/** 执行 */
		protected onComplete():void
		{
			if(this._result==-1 || this._re==null)
			{
				Ctrl.print("ClientLoginHttpRequest失败,errorCode",this._result);
				GameC.main.onLoginHttpFailed();
				return;
			}
			GameC.main.onLoginHttpSuccess(this._re.data);
		}
		
		/** 同步执行 */
		public sendMSync():ClientLoginResult
		{
			this.doSendSync();
			return this._re;
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			super.toWriteBytesFull(stream);
			
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeInt(this.cMsgVersion);
			
			stream.writeInt(this.gMsgVersion);
			
			stream.writeDataFullNotNull(this.data);
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 创建实例 */
		public static createClientLogin(cMsgVersion:number,gMsgVersion:number,data:ClientLoginData):ClientLoginHttpRequest
		{
			var re:ClientLoginHttpRequest=new ClientLoginHttpRequest();
			re.cMsgVersion=cMsgVersion;
			re.gMsgVersion=gMsgVersion;
			re.data=data;
			return re;
		}
		
	}
}
