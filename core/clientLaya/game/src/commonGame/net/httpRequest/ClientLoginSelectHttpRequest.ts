namespace Shine
{
	/** 登录选择消息(generated by shine) */
	export class ClientLoginSelectHttpRequest extends LoginHttpRequest
	{
		/** 数据类型ID */
		public static dataID:number=LoginHttpRequestType.ClientLoginSelect;
		
		/** 登录令牌 */
		public loginToken:number;
		
		/** 选择区服ID */
		public areaID:number=-1;
		
		/** 返回值 */
		protected _re:ClientLoginSelectResult;
		
		constructor()
		{
			super();
			this._dataID=LoginHttpRequestType.ClientLoginSelect;
		}
		
		protected copyData():void
		{
			super.copyData();
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			super.toWriteBytesFull(stream);
			
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeInt(this.loginToken);
			
			stream.writeInt(this.areaID);
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeInt(this.loginToken);
			
			stream.writeInt(this.areaID);
			
		}
		
		/** 执行 */
		protected toRead():void
		{
			this._re=new ClientLoginSelectResult();
			this.readResult(this._re,this._resultStream);
		}
		
		/** 获取结果 */
		public getResult():ClientLoginSelectResult
		{
			return this._re;
		}
		
		/** 执行 */
		protected onComplete():void
		{
			if(this._result==-1 || this._re==null)
			{
				Ctrl.print("ClientLoginHttpRequest失败,errorCode",this._result);
				GameC.main.onLoginSelectFailed();
				return;
			}

			GameC.main.onLoginSelectSuccess(this._re.info);
		}
		
		/** 同步执行 */
		public sendMSync():ClientLoginSelectResult
		{
			this.doSendSync();
			return this._re;
		}
		
		/** 创建实例 */
		public static createClientLoginSelect(loginToken:number,areaID:number):ClientLoginSelectHttpRequest
		{
			var re:ClientLoginSelectHttpRequest=new ClientLoginSelectHttpRequest();
			re.loginToken=loginToken;
			re.areaID=areaID;
			return re;
		}
		
	}
}
