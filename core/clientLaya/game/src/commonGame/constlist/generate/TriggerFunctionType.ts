namespace Shine
{
	/** (generated by shine) */
	export class TriggerFunctionType
	{
		/** 起始 */
		public static off:number=1;
		
		/** 计数 */
		public static count:number=93;
		
		/** 如果 */
		public static If:number=1;
		
		/** 循环 */
		public static While:number=2;
		
		/** 获取字符串key自定义对象 */
		public static GetSVar:number=3;
		
		/** 非 */
		public static Not:number=4;
		
		/** 并且 */
		public static And:number=5;
		
		/** 并且2 */
		public static And2:number=6;
		
		/** 或者 */
		public static Or:number=7;
		
		/** 或者2 */
		public static Or2:number=8;
		
		/** 判断相等 */
		public static Equals:number=9;
		
		/** 判断int相等 */
		public static EqualsInt:number=10;
		
		/** 判断float相等 */
		public static EqualsFloat:number=11;
		
		/** 判断long相等 */
		public static EqualsLong:number=12;
		
		/** 大于int */
		public static GreaterThanInt:number=13;
		
		/** 大于等于int */
		public static GreaterThanOrEqualInt:number=14;
		
		/** 小于int */
		public static LessThanInt:number=15;
		
		/** 小于等于int */
		public static LessThanOrEqualInt:number=16;
		
		/** 大于float */
		public static GreaterThanFloat:number=17;
		
		/** 大于等于float */
		public static GreaterThanOrEqualFloat:number=18;
		
		/** 小于float */
		public static LessThanFloat:number=19;
		
		/** 小于等于float */
		public static LessThanOrEqualFloat:number=20;
		
		/** 大于long */
		public static GreaterThanLong:number=21;
		
		/** 大于等于long */
		public static GreaterThanOrEqualLong:number=22;
		
		/** 小于long */
		public static LessThanLong:number=23;
		
		/** 小于等于long */
		public static LessThanOrEqualLong:number=24;
		
		/** 获取字符串key boolean */
		public static GetSBoolean:number=25;
		
		/** 获取全局变量boolean */
		public static RandomBoolean:number=26;
		
		/** int加法 */
		public static AddInt:number=27;
		
		/** int减法 */
		public static SubInt:number=28;
		
		/** int乘法 */
		public static MulInt:number=29;
		
		/** int除法 */
		public static DivInt:number=30;
		
		/** int取反 */
		public static InvertInt:number=31;
		
		/** int求余 */
		public static RestInt:number=32;
		
		/** int绝对值 */
		public static AbsInt:number=33;
		
		/** int自增 */
		public static Add1Int:number=34;
		
		/** int自减 */
		public static Sub1Int:number=35;
		
		/** float转int */
		public static ConvertFloat2Int:number=36;
		
		/** long转int */
		public static ConvertLong2Int:number=37;
		
		/** 获取字符串key int */
		public static GetSInt:number=38;
		
		/** 获取全局变量int */
		public static GetCurrentLoopIndex:number=39;
		
		/** 随一整形(0<=value<range) */
		public static RandomInt:number=40;
		
		/** 随一整形(start<=value<end) */
		public static RandomRange:number=41;
		
		/** float加法 */
		public static AddFloat:number=42;
		
		/** float减法 */
		public static SubFloat:number=43;
		
		/** float乘法 */
		public static MulFloat:number=44;
		
		/** float除法 */
		public static DivFloat:number=45;
		
		/** float取反 */
		public static InvertFloat:number=46;
		
		/** float绝对值 */
		public static AbsFloat:number=47;
		
		/** 获取字符串key变量float */
		public static GetSFloat:number=48;
		
		/** 获取全局变量float */
		public static ConvertInt2Float:number=49;
		
		/** float转float */
		public static ConvertLong2Float:number=50;
		
		/** long加法 */
		public static AddLong:number=51;
		
		/** long减法 */
		public static SubLong:number=52;
		
		/** long乘法 */
		public static MulLong:number=53;
		
		/** long除法 */
		public static DivLong:number=54;
		
		/** long取反 */
		public static InvertLong:number=55;
		
		/** long绝对值 */
		public static AbsLong:number=56;
		
		/** int转long */
		public static ConvertInt2Long:number=57;
		
		/** float转long */
		public static ConvertFloat2Long:number=58;
		
		/** 获取字符串key变量long */
		public static GetSLong:number=59;
		
		/** 获取全局变量long */
		public static GetTimeMillis:number=60;
		
		/** string相加 */
		public static AddStr:number=61;
		
		/** int转string */
		public static ConvertInt2Str:number=62;
		
		/** float转string */
		public static ConvertFloat2Str:number=63;
		
		/** long转string */
		public static ConvertLong2Str:number=64;
		
		/** bool转string */
		public static ConvertBool2Str:number=65;
		
		/** 获取字符串key变量string */
		public static GetSString:number=66;
		
		/** 获取全局变量string */
		public static OnInit:number=67;
		
		/** 间隔执行 */
		public static OnInterval:number=68;
		
		/** 开启trigger */
		public static OpenTrigger:number=69;
		
		/** 关闭trigger */
		public static CloseTrigger:number=70;
		
		/** 执行trigger(需要检查环境) */
		public static RunTrigger:number=71;
		
		/** 执行trigger(不检查环境) */
		public static RunTriggerAbs:number=72;
		
		/** 等待(ms) */
		public static Wait:number=73;
		
		/** 等待某条件成立(checkDelay:检查间隔(ms)) */
		public static WaitUtil:number=74;
		
		/** 输出字符串 */
		public static Print:number=75;
		
		/** 循环loop次(i从0到loop-1) */
		public static ForLoop:number=76;
		
		/** 结束当前trigger执行动作 */
		public static BreakTrigger:number=77;
		
		/** 结束当前循环(对while有效) */
		public static BreakLoop:number=78;
		
		/** 跳过剩余脚本，继续执行循环(对while有效) */
		public static ContinueLoop:number=79;
		
		/** 设置自定义字符串key变量 */
		public static SetSVar:number=80;
		
		/** 设置全局变量boolean */
		public static GetEventIntArgs:number=81;
		
		/** 获取event bool参数 */
		public static GetEventBoolArgs:number=82;
		
		/** 获取event string参数 */
		public static GetEventStringArgs:number=83;
		
		/** 获取主引导步 */
		public static GetGuideMainStep:number=84;
		
		/** 游戏开始 */
		public static OnGameStart:number=85;
		
		/** 设置主引导步 */
		public static SetGuideMainStep:number=86;
		
		/** 显示UI(key:UI表主键) */
		public static ShowUI:number=87;
		
		/** 隐藏UI(key:UI表主键) */
		public static HideUI:number=88;
		
		/** c单位是否存活 */
		public static UnitIsAlive:number=89;
		
		/** 当前触发单位 */
		public static TriggerUnit:number=90;
		
		/** e场景开始时 */
		public static OnSceneStart:number=91;
		
		/** a强制击杀单位 */
		public static KillUnit:number=92;
		
	}
}
