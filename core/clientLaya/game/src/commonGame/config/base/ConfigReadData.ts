namespace Shine
{
	/** (generated by shine) */
	export class ConfigReadData
	{
		/** 列表 */
		private _list:SList<number>=new SList<number>();
		
		/** 全局配置表 */
		public global:GlobalReadData;
		
		/** CD表字典 */
		public cdDic:SMap<number,CDConfig>;
		
		/** 活动表字典 */
		public activityDic:SMap<number,ActivityConfig>;
		
		/** 国家地区表(登录用)字典 */
		public countryCodeDic:SMap<number,CountryCodeConfig>;
		
		/** 调用方式表字典 */
		public callWayDic:SMap<number,CallWayConfig>;
		
		/** buff表字典 */
		public buffDic:SMap<number,BuffConfig>;
		
		/** 单位效果表字典 */
		public effectDic:SMap<number,EffectConfig>;
		
		/** 场景特效表字典 */
		public sceneEffectDic:SMap<number,SceneEffectConfig>;
		
		/** 技能几率表字典 */
		public skillProbDic:SMap<number,SkillProbConfig>;
		
		/** 特殊移动表字典 */
		public specialMoveDic:SMap<number,SpecialMoveConfig>;
		
		/** 随机单个物品配置字典 */
		public randomItemDic:SMap<number,RandomItemConfig>;
		
		/** 文本表(程序用)(需国际化)字典 */
		public textDic:SMap<string,TextConfig>;
		
		/** 流程步骤类型字典 */
		public flowStepDic:SMap<number,FlowStepConfig>;
		
		/** 角色表字典 */
		public characterDic:SMap<number,CharacterConfig>;
		
		/** 怪物表字典 */
		public monsterDic:SMap<number,MonsterConfig>;
		
		/** 状态类型表字典 */
		public statusDic:StatusConfig[];
		
		/** 进度条表字典 */
		public progressBarDic:SMap<number,ProgressBarConfig>;
		
		/** 成就表字典 */
		public achievementDic:SMap<number,AchievementConfig>;
		
		/** 随机物品组配置字典 */
		public randomItemListDic:SMap<number,RandomItemListConfig>;
		
		/** 字体表(程序用)(需国际化)字典 */
		public fontDic:FontConfig[];
		
		/** 技能等级表字典 */
		public skillLevelDic:SMap<number,SkillLevelConfig>;
		
		/** 敏感词表字典 */
		public sensitiveWordDic:SMap<number,SensitiveWordConfig>;
		
		/** 技能攻击等级表字典 */
		public attackLevelDic:SMap<number,AttackLevelConfig>;
		
		/** 技能攻击表字典 */
		public attackDic:SMap<number,AttackConfig>;
		
		/** 邮件表字典 */
		public mailDic:SMap<number,MailConfig>;
		
		/** 副本基础表字典 */
		public battleDic:SMap<number,BattleConfig>;
		
		/** 场景类型字典 */
		public sceneTypeDic:SceneTypeConfig[];
		
		/** 任务目标类型字典 */
		public taskTypeDic:TaskTypeConfig[];
		
		/** 单位移动方式字典 */
		public unitMoveTypeDic:UnitMoveTypeConfig[];
		
		/** 角色显示数据部件类型字典 */
		public roleShowDataPartTypeDic:RoleShowDataPartTypeConfig[];
		
		/** 邮件类型字典 */
		public mailTypeDic:MailTypeConfig[];
		
		/** 模型绑点位置类型字典 */
		public modelBindPosTypeDic:ModelBindPosTypeConfig[];
		
		/** 单位特殊移动类型字典 */
		public unitSpecialMoveTypeDic:UnitSpecialMoveTypeConfig[];
		
		/** 语言类型字典 */
		public languageTypeDic:LanguageTypeConfig[];
		
		/** 玩家等级表字典 */
		public roleLevelDic:SMap<number,RoleLevelConfig>;
		
		/** 随机名字表字典 */
		public randomNameDic:SMap<number,RandomNameConfig>;
		
		/** 技能变量表字典 */
		public skillVarDic:SMap<number,SkillVarConfig>;
		
		/** 技能表字典 */
		public skillDic:SMap<number,SkillConfig>;
		
		/** 属性类型表字典 */
		public attributeDic:AttributeConfig[];
		
		/** buff等级表字典 */
		public buffLevelDic:SMap<number,BuffLevelConfig>;
		
		/** 平台表字典 */
		public platformDic:SMap<string,PlatformConfig>;
		
		/** 任务目标表字典 */
		public taskDic:SMap<number,TaskConfig>;
		
		/** 界面表字典 */
		public uiDic:SMap<number,UIConfig>;
		
		/** cd组表字典 */
		public cdGroupDic:SMap<number,CDGroupConfig>;
		
		/** 单位模型表字典 */
		public modelDic:SMap<number,ModelConfig>;
		
		/** 加载资源表字典 */
		public markResourceDic:SMap<string,MarkResourceConfig>;
		
		/** 技能步骤表字典 */
		public skillStepDic:SMap<number,SkillStepConfig>;
		
		/** 技能组表字典 */
		public skillGroupDic:SMap<number,SkillGroupConfig>;
		
		/** 攻击组表字典 */
		public attackGroupDic:SMap<number,AttackGroupConfig>;
		
		/** 单位模型动作表字典 */
		public modelMotionDic:SMap<number,ModelMotionConfig>;
		
		/** buff组表字典 */
		public buffGroupDic:SMap<number,BuffGroupConfig>;
		
		/** 任务表字典 */
		public questDic:SMap<number,QuestConfig>;
		
		/** bullet表字典 */
		public bulletDic:SMap<number,BulletConfig>;
		
		/** NPC表字典 */
		public npcDic:SMap<number,NPCConfig>;
		
		/** 货币表字典 */
		public currencyDic:CurrencyConfig[];
		
		/** 技能步骤等级表字典 */
		public skillStepLevelDic:SMap<number,SkillStepLevelConfig>;
		
		/** 傀儡表字典 */
		public puppetDic:SMap<number,PuppetConfig>;
		
		/** 傀儡等级表字典 */
		public puppetLevelDic:SMap<number,PuppetLevelConfig>;
		
		/** 单位显示部件表字典 */
		public avatarPartDic:SMap<number,AvatarPartConfig>;
		
		/** 国际化表字典 */
		public languageDic:SMap<string,LanguageConfig>;
		
		/** 单位外观表字典 */
		public facadeDic:SMap<number,FacadeConfig>;
		
		/** 宠物表字典 */
		public petDic:SMap<number,PetConfig>;
		
		/** 模型动作类型字典 */
		public motionDic:MotionConfig[];
		
		/** 道具表字典 */
		public itemDic:SMap<number,ItemConfig>;
		
		/** 子弹等级表字典 */
		public bulletLevelDic:SMap<number,BulletLevelConfig>;
		
		/** 战斗单位表字典 */
		public fightUnitDic:SMap<number,FightUnitConfig>;
		
		/** 信息码类型表字典 */
		public infoCodeDic:SMap<number,InfoCodeConfig>;
		
		/** 红点类型字典 */
		public redPointDic:RedPointConfig[];
		
		/** 功能开关表字典 */
		public functionSwitchDic:FunctionSwitchConfig[];
		
		/** 战斗单位等级表字典 */
		public fightUnitLevelDic:SMap<number,FightUnitLevelConfig>;
		
		/** 国际化资源表字典 */
		public internationalResourceDic:SMap<string,InternationalResourceConfig>;
		
		/** 场景布置元素表(编辑器对应)字典 */
		public scenePlaceElementDic:SMap<number,ScenePlaceElementConfig>;
		
		/** 创建单个物品配置(不包含数量)字典 */
		public createItemDic:SMap<number,CreateItemConfig>;
		
		/** 场景表字典 */
		public sceneDic:SMap<number,SceneConfig>;
		
		/** 功能表字典 */
		public functionDic:SMap<number,FunctionConfig>;
		
		/** 奖励表字典 */
		public rewardDic:SMap<number,RewardConfig>;
		
		/** trigger表 */
		public triggerDic:SMap<number,TriggerConfigData>;
		
		/** gm类型字典 */
		public gMTypeDic:GMTypeConfig[];
		
		/** 区服信息字典 */
		public areaInfoDic:SMap<number,AreaInfoConfig>;
		
		/** 消耗表字典 */
		public costDic:SMap<number,CostConfig>;
		
		/** 兑换表字典 */
		public exchangeDic:SMap<number,ExchangeConfig>;
		
		/** 大浮点数阶位字典 */
		public bigFloatRankDic:SMap<number,BigFloatRankConfig>;
		
		/** 职业表字典 */
		public vocationDic:VocationConfig[];
		
		/** 场景地图表字典 */
		public sceneMapDic:SMap<number,SceneMapConfig>;
		
		/** 操作体表字典 */
		public operationDic:SMap<number,OperationConfig>;
		
		/** 装备槽位类型字典 */
		public equipSlotTypeDic:EquipSlotTypeConfig[];
		
		/** 推送表字典 */
		public pushNotifyDic:PushNotifyConfig[];
		
		/** 场景角色属性类型表字典 */
		public sceneRoleAttributeDic:SceneRoleAttributeConfig[];
		
		/** 技能影响类型字典 */
		public skillInfluenceTypeDic:SkillInfluenceTypeConfig[];
		
		/** 建筑表字典 */
		public buildingDic:SMap<number,BuildingConfig>;
		
		/** 建筑等级表字典 */
		public buildingLevelDic:SMap<number,BuildingLevelConfig>;
		
		/** 技能读条表字典 */
		public skillBarDic:SMap<number,SkillBarConfig>;
		
		/** 玩家群表字典 */
		public roleGroupDic:SMap<number,RoleGroupConfig>;
		
		/** 玩家群等级表字典 */
		public roleGroupLevelDic:SMap<number,RoleGroupLevelConfig>;
		
		/** 玩家群职位表字典 */
		public roleGroupTitleDic:RoleGroupTitleConfig[];
		
		/** 信息日志表字典 */
		public infoLogDic:SMap<number,InfoLogConfig>;
		
		/** 兑换组表字典 */
		public exchangeGroupDic:SMap<number,ExchangeGroupConfig>;
		
		/** 怪物等级表字典 */
		public monsterLevelDic:SMap<number,MonsterLevelConfig>;
		
		/** 界面逻辑体表字典 */
		public uiLogicDic:UILogicConfig[];
		
		/** 单位模型位置类型字典 */
		public unitModelSlotTypeDic:UnitModelSlotTypeConfig[];
		
		/** 聊天频道表字典 */
		public chatChannelDic:ChatChannelConfig[];
		
		/** 角色属性类型表字典 */
		public roleAttributeDic:RoleAttributeConfig[];
		
		/** 区域表字典 */
		public regionDic:SMap<number,RegionConfig>;
		
		public readBytes(stream:BytesReadStream):void
		{
			this._list.clear();

			var len:number=stream.readLen();
			var type:number;

			for(var i=0;i<len;i++)
			{
				this._list.add((type=stream.readShort()));
				this.readBytesOne(type,stream);
			}
		}
		
		/** 刷新数据 */
		public refreshData():void
		{
			for(var v of this._list)
			{
				this.refreshDataOne(v);
			}
		}
		
		/** 设置值到Config上 */
		public setToConfig():void
		{
			for(var v of this._list)
			{
				this.setToConfigOne(v);
			}
		}
		
		/** 添加到Config上 */
		public addToConfig():void
		{
			for(var v of this._list)
			{
				this.addToConfigOne(v);
			}
		}
		
		/** 读完所有配置 */
		public afterReadConfigAll():void
		{
			for(var v of this._list)
			{
				this.afterReadConfigAllOne(v);
			}
		}
		
		/** 设置值到Config上 */
		public setToConfigOne(type:number):void
		{
			switch(type)
			{
				case ConfigType.Global:
				{
					Global.readFromData(this.global);
					Global.afterReadConfig();
				}
					break;
				case ConfigType.Trigger:
				{
					this.setToConfigTrigger();
				}
					break;
				case ConfigType.ScenePlaceEditor:
				{
					this.setToConfigScenePlaceEditor();
				}
					break;
				case ConfigType.Language:
				{
					LanguageConfig.setDic(this.languageDic);
				}
					break;
				case ConfigType.BigFloatRank:
				{
					BigFloatRankConfig.setDic(this.bigFloatRankDic);
				}
					break;
				case ConfigType.SkillInfluenceType:
				{
					SkillInfluenceTypeConfig.setDic(this.skillInfluenceTypeDic);
				}
					break;
				case ConfigType.Achievement:
				{
					AchievementConfig.setDic(this.achievementDic);
				}
					break;
				case ConfigType.Activity:
				{
					ActivityConfig.setDic(this.activityDic);
				}
					break;
				case ConfigType.Attack:
				{
					AttackConfig.setDic(this.attackDic);
				}
					break;
				case ConfigType.AttackGroup:
				{
					AttackGroupConfig.setDic(this.attackGroupDic);
				}
					break;
				case ConfigType.AttackLevel:
				{
					AttackLevelConfig.setDic(this.attackLevelDic);
				}
					break;
				case ConfigType.Attribute:
				{
					AttributeConfig.setDic(this.attributeDic);
				}
					break;
				case ConfigType.AvatarPart:
				{
					AvatarPartConfig.setDic(this.avatarPartDic);
				}
					break;
				case ConfigType.Battle:
				{
					BattleConfig.setDic(this.battleDic);
				}
					break;
				case ConfigType.Buff:
				{
					BuffConfig.setDic(this.buffDic);
				}
					break;
				case ConfigType.BuffGroup:
				{
					BuffGroupConfig.setDic(this.buffGroupDic);
				}
					break;
				case ConfigType.BuffLevel:
				{
					BuffLevelConfig.setDic(this.buffLevelDic);
				}
					break;
				case ConfigType.Building:
				{
					BuildingConfig.setDic(this.buildingDic);
				}
					break;
				case ConfigType.BuildingLevel:
				{
					BuildingLevelConfig.setDic(this.buildingLevelDic);
				}
					break;
				case ConfigType.Bullet:
				{
					BulletConfig.setDic(this.bulletDic);
				}
					break;
				case ConfigType.BulletLevel:
				{
					BulletLevelConfig.setDic(this.bulletLevelDic);
				}
					break;
				case ConfigType.CallWay:
				{
					CallWayConfig.setDic(this.callWayDic);
				}
					break;
				case ConfigType.CD:
				{
					CDConfig.setDic(this.cdDic);
				}
					break;
				case ConfigType.CDGroup:
				{
					CDGroupConfig.setDic(this.cdGroupDic);
				}
					break;
				case ConfigType.Character:
				{
					CharacterConfig.setDic(this.characterDic);
				}
					break;
				case ConfigType.ChatChannel:
				{
					ChatChannelConfig.setDic(this.chatChannelDic);
				}
					break;
				case ConfigType.Cost:
				{
					CostConfig.setDic(this.costDic);
				}
					break;
				case ConfigType.CountryCode:
				{
					CountryCodeConfig.setDic(this.countryCodeDic);
				}
					break;
				case ConfigType.CreateItem:
				{
					CreateItemConfig.setDic(this.createItemDic);
				}
					break;
				case ConfigType.Currency:
				{
					CurrencyConfig.setDic(this.currencyDic);
				}
					break;
				case ConfigType.Effect:
				{
					EffectConfig.setDic(this.effectDic);
				}
					break;
				case ConfigType.EquipSlotType:
				{
					EquipSlotTypeConfig.setDic(this.equipSlotTypeDic);
				}
					break;
				case ConfigType.Exchange:
				{
					ExchangeConfig.setDic(this.exchangeDic);
				}
					break;
				case ConfigType.ExchangeGroup:
				{
					ExchangeGroupConfig.setDic(this.exchangeGroupDic);
				}
					break;
				case ConfigType.Facade:
				{
					FacadeConfig.setDic(this.facadeDic);
				}
					break;
				case ConfigType.FightUnit:
				{
					FightUnitConfig.setDic(this.fightUnitDic);
				}
					break;
				case ConfigType.FightUnitLevel:
				{
					FightUnitLevelConfig.setDic(this.fightUnitLevelDic);
				}
					break;
				case ConfigType.FlowStep:
				{
					FlowStepConfig.setDic(this.flowStepDic);
				}
					break;
				case ConfigType.Font:
				{
					FontConfig.setDic(this.fontDic);
				}
					break;
				case ConfigType.Function:
				{
					FunctionConfig.setDic(this.functionDic);
				}
					break;
				case ConfigType.FunctionSwitch:
				{
					FunctionSwitchConfig.setDic(this.functionSwitchDic);
				}
					break;
				case ConfigType.GMType:
				{
					GMTypeConfig.setDic(this.gMTypeDic);
				}
					break;
				case ConfigType.InfoCode:
				{
					InfoCodeConfig.setDic(this.infoCodeDic);
				}
					break;
				case ConfigType.InfoLog:
				{
					InfoLogConfig.setDic(this.infoLogDic);
				}
					break;
				case ConfigType.InternationalResource:
				{
					InternationalResourceConfig.setDic(this.internationalResourceDic);
				}
					break;
				case ConfigType.Item:
				{
					ItemConfig.setDic(this.itemDic);
				}
					break;
				case ConfigType.LanguageType:
				{
					LanguageTypeConfig.setDic(this.languageTypeDic);
				}
					break;
				case ConfigType.Mail:
				{
					MailConfig.setDic(this.mailDic);
				}
					break;
				case ConfigType.MailType:
				{
					MailTypeConfig.setDic(this.mailTypeDic);
				}
					break;
				case ConfigType.MarkResource:
				{
					MarkResourceConfig.setDic(this.markResourceDic);
				}
					break;
				case ConfigType.Model:
				{
					ModelConfig.setDic(this.modelDic);
				}
					break;
				case ConfigType.ModelBindPosType:
				{
					ModelBindPosTypeConfig.setDic(this.modelBindPosTypeDic);
				}
					break;
				case ConfigType.ModelMotion:
				{
					ModelMotionConfig.setDic(this.modelMotionDic);
				}
					break;
				case ConfigType.Monster:
				{
					MonsterConfig.setDic(this.monsterDic);
				}
					break;
				case ConfigType.MonsterLevel:
				{
					MonsterLevelConfig.setDic(this.monsterLevelDic);
				}
					break;
				case ConfigType.Motion:
				{
					MotionConfig.setDic(this.motionDic);
				}
					break;
				case ConfigType.NPC:
				{
					NPCConfig.setDic(this.npcDic);
				}
					break;
				case ConfigType.Operation:
				{
					OperationConfig.setDic(this.operationDic);
				}
					break;
				case ConfigType.Pet:
				{
					PetConfig.setDic(this.petDic);
				}
					break;
				case ConfigType.Platform:
				{
					PlatformConfig.setDic(this.platformDic);
				}
					break;
				case ConfigType.ProgressBar:
				{
					ProgressBarConfig.setDic(this.progressBarDic);
				}
					break;
				case ConfigType.Puppet:
				{
					PuppetConfig.setDic(this.puppetDic);
				}
					break;
				case ConfigType.PuppetLevel:
				{
					PuppetLevelConfig.setDic(this.puppetLevelDic);
				}
					break;
				case ConfigType.PushNotify:
				{
					PushNotifyConfig.setDic(this.pushNotifyDic);
				}
					break;
				case ConfigType.Quest:
				{
					QuestConfig.setDic(this.questDic);
				}
					break;
				case ConfigType.RandomItem:
				{
					RandomItemConfig.setDic(this.randomItemDic);
				}
					break;
				case ConfigType.RandomItemList:
				{
					RandomItemListConfig.setDic(this.randomItemListDic);
				}
					break;
				case ConfigType.RandomName:
				{
					RandomNameConfig.setDic(this.randomNameDic);
				}
					break;
				case ConfigType.RedPoint:
				{
					RedPointConfig.setDic(this.redPointDic);
				}
					break;
				case ConfigType.Region:
				{
					RegionConfig.setDic(this.regionDic);
				}
					break;
				case ConfigType.Reward:
				{
					RewardConfig.setDic(this.rewardDic);
				}
					break;
				case ConfigType.RoleAttribute:
				{
					RoleAttributeConfig.setDic(this.roleAttributeDic);
				}
					break;
				case ConfigType.RoleGroup:
				{
					RoleGroupConfig.setDic(this.roleGroupDic);
				}
					break;
				case ConfigType.RoleGroupLevel:
				{
					RoleGroupLevelConfig.setDic(this.roleGroupLevelDic);
				}
					break;
				case ConfigType.RoleGroupTitle:
				{
					RoleGroupTitleConfig.setDic(this.roleGroupTitleDic);
				}
					break;
				case ConfigType.RoleLevel:
				{
					RoleLevelConfig.setDic(this.roleLevelDic);
				}
					break;
				case ConfigType.RoleShowDataPartType:
				{
					RoleShowDataPartTypeConfig.setDic(this.roleShowDataPartTypeDic);
				}
					break;
				case ConfigType.Scene:
				{
					SceneConfig.setDic(this.sceneDic);
				}
					break;
				case ConfigType.SceneEffect:
				{
					SceneEffectConfig.setDic(this.sceneEffectDic);
				}
					break;
				case ConfigType.SceneMap:
				{
					SceneMapConfig.setDic(this.sceneMapDic);
				}
					break;
				case ConfigType.ScenePlaceElement:
				{
					ScenePlaceElementConfig.setDic(this.scenePlaceElementDic);
				}
					break;
				case ConfigType.SceneRoleAttribute:
				{
					SceneRoleAttributeConfig.setDic(this.sceneRoleAttributeDic);
				}
					break;
				case ConfigType.SceneType:
				{
					SceneTypeConfig.setDic(this.sceneTypeDic);
				}
					break;
				case ConfigType.SensitiveWord:
				{
					SensitiveWordConfig.setDic(this.sensitiveWordDic);
				}
					break;
				case ConfigType.Skill:
				{
					SkillConfig.setDic(this.skillDic);
				}
					break;
				case ConfigType.SkillBar:
				{
					SkillBarConfig.setDic(this.skillBarDic);
				}
					break;
				case ConfigType.SkillGroup:
				{
					SkillGroupConfig.setDic(this.skillGroupDic);
				}
					break;
				case ConfigType.SkillLevel:
				{
					SkillLevelConfig.setDic(this.skillLevelDic);
				}
					break;
				case ConfigType.SkillProb:
				{
					SkillProbConfig.setDic(this.skillProbDic);
				}
					break;
				case ConfigType.SkillStep:
				{
					SkillStepConfig.setDic(this.skillStepDic);
				}
					break;
				case ConfigType.SkillStepLevel:
				{
					SkillStepLevelConfig.setDic(this.skillStepLevelDic);
				}
					break;
				case ConfigType.SkillVar:
				{
					SkillVarConfig.setDic(this.skillVarDic);
				}
					break;
				case ConfigType.SpecialMove:
				{
					SpecialMoveConfig.setDic(this.specialMoveDic);
				}
					break;
				case ConfigType.Status:
				{
					StatusConfig.setDic(this.statusDic);
				}
					break;
				case ConfigType.Task:
				{
					TaskConfig.setDic(this.taskDic);
				}
					break;
				case ConfigType.TaskType:
				{
					TaskTypeConfig.setDic(this.taskTypeDic);
				}
					break;
				case ConfigType.Text:
				{
					TextConfig.setDic(this.textDic);
				}
					break;
				case ConfigType.UI:
				{
					UIConfig.setDic(this.uiDic);
				}
					break;
				case ConfigType.UILogic:
				{
					UILogicConfig.setDic(this.uiLogicDic);
				}
					break;
				case ConfigType.UnitModelSlotType:
				{
					UnitModelSlotTypeConfig.setDic(this.unitModelSlotTypeDic);
				}
					break;
				case ConfigType.UnitMoveType:
				{
					UnitMoveTypeConfig.setDic(this.unitMoveTypeDic);
				}
					break;
				case ConfigType.UnitSpecialMoveType:
				{
					UnitSpecialMoveTypeConfig.setDic(this.unitSpecialMoveTypeDic);
				}
					break;
				case ConfigType.Vocation:
				{
					VocationConfig.setDic(this.vocationDic);
				}
					break;
			}
		}
		
		/** 读完所有配置 */
		public afterReadConfigAllOne(type:number):void
		{
			switch(type)
			{
				case ConfigType.Global:
				{
					Global.afterReadConfigAll();
				}
					break;
				case ConfigType.Trigger:
				{
					this.afterReadConfigAllTrigger();
				}
					break;
				case ConfigType.ScenePlaceEditor:
				{
					this.afterReadConfigAllScenePlaceEditor();
				}
					break;
				case ConfigType.Language:
				{
					LanguageConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.BigFloatRank:
				{
					BigFloatRankConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillInfluenceType:
				{
					SkillInfluenceTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Achievement:
				{
					AchievementConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Activity:
				{
					ActivityConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Attack:
				{
					AttackConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.AttackGroup:
				{
					AttackGroupConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.AttackLevel:
				{
					AttackLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Attribute:
				{
					AttributeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.AvatarPart:
				{
					AvatarPartConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Battle:
				{
					BattleConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Buff:
				{
					BuffConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.BuffGroup:
				{
					BuffGroupConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.BuffLevel:
				{
					BuffLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Building:
				{
					BuildingConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.BuildingLevel:
				{
					BuildingLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Bullet:
				{
					BulletConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.BulletLevel:
				{
					BulletLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.CallWay:
				{
					CallWayConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.CD:
				{
					CDConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.CDGroup:
				{
					CDGroupConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Character:
				{
					CharacterConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.ChatChannel:
				{
					ChatChannelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Cost:
				{
					CostConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.CountryCode:
				{
					CountryCodeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.CreateItem:
				{
					CreateItemConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Currency:
				{
					CurrencyConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Effect:
				{
					EffectConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.EquipSlotType:
				{
					EquipSlotTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Exchange:
				{
					ExchangeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.ExchangeGroup:
				{
					ExchangeGroupConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Facade:
				{
					FacadeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.FightUnit:
				{
					FightUnitConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.FightUnitLevel:
				{
					FightUnitLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.FlowStep:
				{
					FlowStepConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Font:
				{
					FontConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Function:
				{
					FunctionConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.FunctionSwitch:
				{
					FunctionSwitchConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.GMType:
				{
					GMTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.InfoCode:
				{
					InfoCodeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.InfoLog:
				{
					InfoLogConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.InternationalResource:
				{
					InternationalResourceConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Item:
				{
					ItemConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.LanguageType:
				{
					LanguageTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Mail:
				{
					MailConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.MailType:
				{
					MailTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.MarkResource:
				{
					MarkResourceConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Model:
				{
					ModelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.ModelBindPosType:
				{
					ModelBindPosTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.ModelMotion:
				{
					ModelMotionConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Monster:
				{
					MonsterConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.MonsterLevel:
				{
					MonsterLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Motion:
				{
					MotionConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.NPC:
				{
					NPCConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Operation:
				{
					OperationConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Pet:
				{
					PetConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Platform:
				{
					PlatformConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.ProgressBar:
				{
					ProgressBarConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Puppet:
				{
					PuppetConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.PuppetLevel:
				{
					PuppetLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.PushNotify:
				{
					PushNotifyConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Quest:
				{
					QuestConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RandomItem:
				{
					RandomItemConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RandomItemList:
				{
					RandomItemListConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RandomName:
				{
					RandomNameConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RedPoint:
				{
					RedPointConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Region:
				{
					RegionConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Reward:
				{
					RewardConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RoleAttribute:
				{
					RoleAttributeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RoleGroup:
				{
					RoleGroupConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RoleGroupLevel:
				{
					RoleGroupLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RoleGroupTitle:
				{
					RoleGroupTitleConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RoleLevel:
				{
					RoleLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.RoleShowDataPartType:
				{
					RoleShowDataPartTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Scene:
				{
					SceneConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SceneEffect:
				{
					SceneEffectConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SceneMap:
				{
					SceneMapConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.ScenePlaceElement:
				{
					ScenePlaceElementConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SceneRoleAttribute:
				{
					SceneRoleAttributeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SceneType:
				{
					SceneTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SensitiveWord:
				{
					SensitiveWordConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Skill:
				{
					SkillConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillBar:
				{
					SkillBarConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillGroup:
				{
					SkillGroupConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillLevel:
				{
					SkillLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillProb:
				{
					SkillProbConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillStep:
				{
					SkillStepConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillStepLevel:
				{
					SkillStepLevelConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SkillVar:
				{
					SkillVarConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.SpecialMove:
				{
					SpecialMoveConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Status:
				{
					StatusConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Task:
				{
					TaskConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.TaskType:
				{
					TaskTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Text:
				{
					TextConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.UI:
				{
					UIConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.UILogic:
				{
					UILogicConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.UnitModelSlotType:
				{
					UnitModelSlotTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.UnitMoveType:
				{
					UnitMoveTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.UnitSpecialMoveType:
				{
					UnitSpecialMoveTypeConfig.afterReadConfigAll();
				}
					break;
				case ConfigType.Vocation:
				{
					VocationConfig.afterReadConfigAll();
				}
					break;
			}
		}
		
		/** 构造常量size */
		public makeConstSize():void
		{
			
		}
		
		/** 从流读取单个 */
		protected readBytesOne(type:number,stream:BytesReadStream):void
		{
			switch(type)
			{
				case ConfigType.Global:
				{
					this.readGlobal(stream);
				}
					break;
				case ConfigType.Trigger:
				{
					this.readTrigger(stream);
				}
					break;
				case ConfigType.ScenePlaceEditor:
				{
					this.readScenePlaceEditor(stream);
				}
					break;
				case ConfigType.Language:
				{
					this.readLanguage(stream);
				}
					break;
				case ConfigType.BigFloatRank:
				{
					this.readBigFloatRank(stream);
				}
					break;
				case ConfigType.SkillInfluenceType:
				{
					this.readSkillInfluenceType(stream);
				}
					break;
				case ConfigType.Achievement:
				{
					this.readAchievement(stream);
				}
					break;
				case ConfigType.Activity:
				{
					this.readActivity(stream);
				}
					break;
				case ConfigType.Attack:
				{
					this.readAttack(stream);
				}
					break;
				case ConfigType.AttackGroup:
				{
					this.readAttackGroup(stream);
				}
					break;
				case ConfigType.AttackLevel:
				{
					this.readAttackLevel(stream);
				}
					break;
				case ConfigType.Attribute:
				{
					this.readAttribute(stream);
				}
					break;
				case ConfigType.AvatarPart:
				{
					this.readAvatarPart(stream);
				}
					break;
				case ConfigType.Battle:
				{
					this.readBattle(stream);
				}
					break;
				case ConfigType.Buff:
				{
					this.readBuff(stream);
				}
					break;
				case ConfigType.BuffGroup:
				{
					this.readBuffGroup(stream);
				}
					break;
				case ConfigType.BuffLevel:
				{
					this.readBuffLevel(stream);
				}
					break;
				case ConfigType.Building:
				{
					this.readBuilding(stream);
				}
					break;
				case ConfigType.BuildingLevel:
				{
					this.readBuildingLevel(stream);
				}
					break;
				case ConfigType.Bullet:
				{
					this.readBullet(stream);
				}
					break;
				case ConfigType.BulletLevel:
				{
					this.readBulletLevel(stream);
				}
					break;
				case ConfigType.CallWay:
				{
					this.readCallWay(stream);
				}
					break;
				case ConfigType.CD:
				{
					this.readCD(stream);
				}
					break;
				case ConfigType.CDGroup:
				{
					this.readCDGroup(stream);
				}
					break;
				case ConfigType.Character:
				{
					this.readCharacter(stream);
				}
					break;
				case ConfigType.ChatChannel:
				{
					this.readChatChannel(stream);
				}
					break;
				case ConfigType.Cost:
				{
					this.readCost(stream);
				}
					break;
				case ConfigType.CountryCode:
				{
					this.readCountryCode(stream);
				}
					break;
				case ConfigType.CreateItem:
				{
					this.readCreateItem(stream);
				}
					break;
				case ConfigType.Currency:
				{
					this.readCurrency(stream);
				}
					break;
				case ConfigType.Effect:
				{
					this.readEffect(stream);
				}
					break;
				case ConfigType.EquipSlotType:
				{
					this.readEquipSlotType(stream);
				}
					break;
				case ConfigType.Exchange:
				{
					this.readExchange(stream);
				}
					break;
				case ConfigType.ExchangeGroup:
				{
					this.readExchangeGroup(stream);
				}
					break;
				case ConfigType.Facade:
				{
					this.readFacade(stream);
				}
					break;
				case ConfigType.FightUnit:
				{
					this.readFightUnit(stream);
				}
					break;
				case ConfigType.FightUnitLevel:
				{
					this.readFightUnitLevel(stream);
				}
					break;
				case ConfigType.FlowStep:
				{
					this.readFlowStep(stream);
				}
					break;
				case ConfigType.Font:
				{
					this.readFont(stream);
				}
					break;
				case ConfigType.Function:
				{
					this.readFunction(stream);
				}
					break;
				case ConfigType.FunctionSwitch:
				{
					this.readFunctionSwitch(stream);
				}
					break;
				case ConfigType.GMType:
				{
					this.readGMType(stream);
				}
					break;
				case ConfigType.InfoCode:
				{
					this.readInfoCode(stream);
				}
					break;
				case ConfigType.InfoLog:
				{
					this.readInfoLog(stream);
				}
					break;
				case ConfigType.InternationalResource:
				{
					this.readInternationalResource(stream);
				}
					break;
				case ConfigType.Item:
				{
					this.readItem(stream);
				}
					break;
				case ConfigType.LanguageType:
				{
					this.readLanguageType(stream);
				}
					break;
				case ConfigType.Mail:
				{
					this.readMail(stream);
				}
					break;
				case ConfigType.MailType:
				{
					this.readMailType(stream);
				}
					break;
				case ConfigType.MarkResource:
				{
					this.readMarkResource(stream);
				}
					break;
				case ConfigType.Model:
				{
					this.readModel(stream);
				}
					break;
				case ConfigType.ModelBindPosType:
				{
					this.readModelBindPosType(stream);
				}
					break;
				case ConfigType.ModelMotion:
				{
					this.readModelMotion(stream);
				}
					break;
				case ConfigType.Monster:
				{
					this.readMonster(stream);
				}
					break;
				case ConfigType.MonsterLevel:
				{
					this.readMonsterLevel(stream);
				}
					break;
				case ConfigType.Motion:
				{
					this.readMotion(stream);
				}
					break;
				case ConfigType.NPC:
				{
					this.readNPC(stream);
				}
					break;
				case ConfigType.Operation:
				{
					this.readOperation(stream);
				}
					break;
				case ConfigType.Pet:
				{
					this.readPet(stream);
				}
					break;
				case ConfigType.Platform:
				{
					this.readPlatform(stream);
				}
					break;
				case ConfigType.ProgressBar:
				{
					this.readProgressBar(stream);
				}
					break;
				case ConfigType.Puppet:
				{
					this.readPuppet(stream);
				}
					break;
				case ConfigType.PuppetLevel:
				{
					this.readPuppetLevel(stream);
				}
					break;
				case ConfigType.PushNotify:
				{
					this.readPushNotify(stream);
				}
					break;
				case ConfigType.Quest:
				{
					this.readQuest(stream);
				}
					break;
				case ConfigType.RandomItem:
				{
					this.readRandomItem(stream);
				}
					break;
				case ConfigType.RandomItemList:
				{
					this.readRandomItemList(stream);
				}
					break;
				case ConfigType.RandomName:
				{
					this.readRandomName(stream);
				}
					break;
				case ConfigType.RedPoint:
				{
					this.readRedPoint(stream);
				}
					break;
				case ConfigType.Region:
				{
					this.readRegion(stream);
				}
					break;
				case ConfigType.Reward:
				{
					this.readReward(stream);
				}
					break;
				case ConfigType.RoleAttribute:
				{
					this.readRoleAttribute(stream);
				}
					break;
				case ConfigType.RoleGroup:
				{
					this.readRoleGroup(stream);
				}
					break;
				case ConfigType.RoleGroupLevel:
				{
					this.readRoleGroupLevel(stream);
				}
					break;
				case ConfigType.RoleGroupTitle:
				{
					this.readRoleGroupTitle(stream);
				}
					break;
				case ConfigType.RoleLevel:
				{
					this.readRoleLevel(stream);
				}
					break;
				case ConfigType.RoleShowDataPartType:
				{
					this.readRoleShowDataPartType(stream);
				}
					break;
				case ConfigType.Scene:
				{
					this.readScene(stream);
				}
					break;
				case ConfigType.SceneEffect:
				{
					this.readSceneEffect(stream);
				}
					break;
				case ConfigType.SceneMap:
				{
					this.readSceneMap(stream);
				}
					break;
				case ConfigType.ScenePlaceElement:
				{
					this.readScenePlaceElement(stream);
				}
					break;
				case ConfigType.SceneRoleAttribute:
				{
					this.readSceneRoleAttribute(stream);
				}
					break;
				case ConfigType.SceneType:
				{
					this.readSceneType(stream);
				}
					break;
				case ConfigType.SensitiveWord:
				{
					this.readSensitiveWord(stream);
				}
					break;
				case ConfigType.Skill:
				{
					this.readSkill(stream);
				}
					break;
				case ConfigType.SkillBar:
				{
					this.readSkillBar(stream);
				}
					break;
				case ConfigType.SkillGroup:
				{
					this.readSkillGroup(stream);
				}
					break;
				case ConfigType.SkillLevel:
				{
					this.readSkillLevel(stream);
				}
					break;
				case ConfigType.SkillProb:
				{
					this.readSkillProb(stream);
				}
					break;
				case ConfigType.SkillStep:
				{
					this.readSkillStep(stream);
				}
					break;
				case ConfigType.SkillStepLevel:
				{
					this.readSkillStepLevel(stream);
				}
					break;
				case ConfigType.SkillVar:
				{
					this.readSkillVar(stream);
				}
					break;
				case ConfigType.SpecialMove:
				{
					this.readSpecialMove(stream);
				}
					break;
				case ConfigType.Status:
				{
					this.readStatus(stream);
				}
					break;
				case ConfigType.Task:
				{
					this.readTask(stream);
				}
					break;
				case ConfigType.TaskType:
				{
					this.readTaskType(stream);
				}
					break;
				case ConfigType.Text:
				{
					this.readText(stream);
				}
					break;
				case ConfigType.UI:
				{
					this.readUI(stream);
				}
					break;
				case ConfigType.UILogic:
				{
					this.readUILogic(stream);
				}
					break;
				case ConfigType.UnitModelSlotType:
				{
					this.readUnitModelSlotType(stream);
				}
					break;
				case ConfigType.UnitMoveType:
				{
					this.readUnitMoveType(stream);
				}
					break;
				case ConfigType.UnitSpecialMoveType:
				{
					this.readUnitSpecialMoveType(stream);
				}
					break;
				case ConfigType.Vocation:
				{
					this.readVocation(stream);
				}
					break;
			}
		}
		
		/** 刷新数据 */
		public refreshDataOne(type:number):void
		{
			switch(type)
			{
				case ConfigType.Language:
				{
					this.refreshLanguage();
				}
					break;
				case ConfigType.BigFloatRank:
				{
					this.refreshBigFloatRank();
				}
					break;
				case ConfigType.SkillInfluenceType:
				{
					this.refreshSkillInfluenceType();
				}
					break;
				case ConfigType.Achievement:
				{
					this.refreshAchievement();
				}
					break;
				case ConfigType.Activity:
				{
					this.refreshActivity();
				}
					break;
				case ConfigType.Attack:
				{
					this.refreshAttack();
				}
					break;
				case ConfigType.AttackGroup:
				{
					this.refreshAttackGroup();
				}
					break;
				case ConfigType.AttackLevel:
				{
					this.refreshAttackLevel();
				}
					break;
				case ConfigType.Attribute:
				{
					this.refreshAttribute();
				}
					break;
				case ConfigType.AvatarPart:
				{
					this.refreshAvatarPart();
				}
					break;
				case ConfigType.Battle:
				{
					this.refreshBattle();
				}
					break;
				case ConfigType.Buff:
				{
					this.refreshBuff();
				}
					break;
				case ConfigType.BuffGroup:
				{
					this.refreshBuffGroup();
				}
					break;
				case ConfigType.BuffLevel:
				{
					this.refreshBuffLevel();
				}
					break;
				case ConfigType.Building:
				{
					this.refreshBuilding();
				}
					break;
				case ConfigType.BuildingLevel:
				{
					this.refreshBuildingLevel();
				}
					break;
				case ConfigType.Bullet:
				{
					this.refreshBullet();
				}
					break;
				case ConfigType.BulletLevel:
				{
					this.refreshBulletLevel();
				}
					break;
				case ConfigType.CallWay:
				{
					this.refreshCallWay();
				}
					break;
				case ConfigType.CD:
				{
					this.refreshCD();
				}
					break;
				case ConfigType.CDGroup:
				{
					this.refreshCDGroup();
				}
					break;
				case ConfigType.Character:
				{
					this.refreshCharacter();
				}
					break;
				case ConfigType.ChatChannel:
				{
					this.refreshChatChannel();
				}
					break;
				case ConfigType.Cost:
				{
					this.refreshCost();
				}
					break;
				case ConfigType.CountryCode:
				{
					this.refreshCountryCode();
				}
					break;
				case ConfigType.CreateItem:
				{
					this.refreshCreateItem();
				}
					break;
				case ConfigType.Currency:
				{
					this.refreshCurrency();
				}
					break;
				case ConfigType.Effect:
				{
					this.refreshEffect();
				}
					break;
				case ConfigType.EquipSlotType:
				{
					this.refreshEquipSlotType();
				}
					break;
				case ConfigType.Exchange:
				{
					this.refreshExchange();
				}
					break;
				case ConfigType.ExchangeGroup:
				{
					this.refreshExchangeGroup();
				}
					break;
				case ConfigType.Facade:
				{
					this.refreshFacade();
				}
					break;
				case ConfigType.FightUnit:
				{
					this.refreshFightUnit();
				}
					break;
				case ConfigType.FightUnitLevel:
				{
					this.refreshFightUnitLevel();
				}
					break;
				case ConfigType.FlowStep:
				{
					this.refreshFlowStep();
				}
					break;
				case ConfigType.Font:
				{
					this.refreshFont();
				}
					break;
				case ConfigType.Function:
				{
					this.refreshFunction();
				}
					break;
				case ConfigType.FunctionSwitch:
				{
					this.refreshFunctionSwitch();
				}
					break;
				case ConfigType.GMType:
				{
					this.refreshGMType();
				}
					break;
				case ConfigType.InfoCode:
				{
					this.refreshInfoCode();
				}
					break;
				case ConfigType.InfoLog:
				{
					this.refreshInfoLog();
				}
					break;
				case ConfigType.InternationalResource:
				{
					this.refreshInternationalResource();
				}
					break;
				case ConfigType.Item:
				{
					this.refreshItem();
				}
					break;
				case ConfigType.LanguageType:
				{
					this.refreshLanguageType();
				}
					break;
				case ConfigType.Mail:
				{
					this.refreshMail();
				}
					break;
				case ConfigType.MailType:
				{
					this.refreshMailType();
				}
					break;
				case ConfigType.MarkResource:
				{
					this.refreshMarkResource();
				}
					break;
				case ConfigType.Model:
				{
					this.refreshModel();
				}
					break;
				case ConfigType.ModelBindPosType:
				{
					this.refreshModelBindPosType();
				}
					break;
				case ConfigType.ModelMotion:
				{
					this.refreshModelMotion();
				}
					break;
				case ConfigType.Monster:
				{
					this.refreshMonster();
				}
					break;
				case ConfigType.MonsterLevel:
				{
					this.refreshMonsterLevel();
				}
					break;
				case ConfigType.Motion:
				{
					this.refreshMotion();
				}
					break;
				case ConfigType.NPC:
				{
					this.refreshNPC();
				}
					break;
				case ConfigType.Operation:
				{
					this.refreshOperation();
				}
					break;
				case ConfigType.Pet:
				{
					this.refreshPet();
				}
					break;
				case ConfigType.Platform:
				{
					this.refreshPlatform();
				}
					break;
				case ConfigType.ProgressBar:
				{
					this.refreshProgressBar();
				}
					break;
				case ConfigType.Puppet:
				{
					this.refreshPuppet();
				}
					break;
				case ConfigType.PuppetLevel:
				{
					this.refreshPuppetLevel();
				}
					break;
				case ConfigType.PushNotify:
				{
					this.refreshPushNotify();
				}
					break;
				case ConfigType.Quest:
				{
					this.refreshQuest();
				}
					break;
				case ConfigType.RandomItem:
				{
					this.refreshRandomItem();
				}
					break;
				case ConfigType.RandomItemList:
				{
					this.refreshRandomItemList();
				}
					break;
				case ConfigType.RandomName:
				{
					this.refreshRandomName();
				}
					break;
				case ConfigType.RedPoint:
				{
					this.refreshRedPoint();
				}
					break;
				case ConfigType.Region:
				{
					this.refreshRegion();
				}
					break;
				case ConfigType.Reward:
				{
					this.refreshReward();
				}
					break;
				case ConfigType.RoleAttribute:
				{
					this.refreshRoleAttribute();
				}
					break;
				case ConfigType.RoleGroup:
				{
					this.refreshRoleGroup();
				}
					break;
				case ConfigType.RoleGroupLevel:
				{
					this.refreshRoleGroupLevel();
				}
					break;
				case ConfigType.RoleGroupTitle:
				{
					this.refreshRoleGroupTitle();
				}
					break;
				case ConfigType.RoleLevel:
				{
					this.refreshRoleLevel();
				}
					break;
				case ConfigType.RoleShowDataPartType:
				{
					this.refreshRoleShowDataPartType();
				}
					break;
				case ConfigType.Scene:
				{
					this.refreshScene();
				}
					break;
				case ConfigType.SceneEffect:
				{
					this.refreshSceneEffect();
				}
					break;
				case ConfigType.SceneMap:
				{
					this.refreshSceneMap();
				}
					break;
				case ConfigType.ScenePlaceElement:
				{
					this.refreshScenePlaceElement();
				}
					break;
				case ConfigType.SceneRoleAttribute:
				{
					this.refreshSceneRoleAttribute();
				}
					break;
				case ConfigType.SceneType:
				{
					this.refreshSceneType();
				}
					break;
				case ConfigType.SensitiveWord:
				{
					this.refreshSensitiveWord();
				}
					break;
				case ConfigType.Skill:
				{
					this.refreshSkill();
				}
					break;
				case ConfigType.SkillBar:
				{
					this.refreshSkillBar();
				}
					break;
				case ConfigType.SkillGroup:
				{
					this.refreshSkillGroup();
				}
					break;
				case ConfigType.SkillLevel:
				{
					this.refreshSkillLevel();
				}
					break;
				case ConfigType.SkillProb:
				{
					this.refreshSkillProb();
				}
					break;
				case ConfigType.SkillStep:
				{
					this.refreshSkillStep();
				}
					break;
				case ConfigType.SkillStepLevel:
				{
					this.refreshSkillStepLevel();
				}
					break;
				case ConfigType.SkillVar:
				{
					this.refreshSkillVar();
				}
					break;
				case ConfigType.SpecialMove:
				{
					this.refreshSpecialMove();
				}
					break;
				case ConfigType.Status:
				{
					this.refreshStatus();
				}
					break;
				case ConfigType.Task:
				{
					this.refreshTask();
				}
					break;
				case ConfigType.TaskType:
				{
					this.refreshTaskType();
				}
					break;
				case ConfigType.Text:
				{
					this.refreshText();
				}
					break;
				case ConfigType.UI:
				{
					this.refreshUI();
				}
					break;
				case ConfigType.UILogic:
				{
					this.refreshUILogic();
				}
					break;
				case ConfigType.UnitModelSlotType:
				{
					this.refreshUnitModelSlotType();
				}
					break;
				case ConfigType.UnitMoveType:
				{
					this.refreshUnitMoveType();
				}
					break;
				case ConfigType.UnitSpecialMoveType:
				{
					this.refreshUnitSpecialMoveType();
				}
					break;
				case ConfigType.Vocation:
				{
					this.refreshVocation();
				}
					break;
			}
		}
		
		/** 读取CD表 */
		protected readCD(stream:BytesReadStream):void
		{
			var config:CDConfig;
			var len:number=stream.readLen();
			this.cdDic=new SMap<number,CDConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CDConfig();
				config.readBytesSimple(stream);
				this.cdDic.put(config.id,config);
			}
		}
		
		/** 刷新CD表 */
		private refreshCD():void
		{
			if(!this.cdDic.isEmpty())
			{
				for(var config of this.cdDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取活动表 */
		protected readActivity(stream:BytesReadStream):void
		{
			var config:ActivityConfig;
			var len:number=stream.readLen();
			this.activityDic=new SMap<number,ActivityConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ActivityConfig();
				config.readBytesSimple(stream);
				this.activityDic.put(config.id,config);
			}
		}
		
		/** 刷新活动表 */
		private refreshActivity():void
		{
			if(!this.activityDic.isEmpty())
			{
				for(var config of this.activityDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取国家地区表(登录用) */
		protected readCountryCode(stream:BytesReadStream):void
		{
			var config:CountryCodeConfig;
			var len:number=stream.readLen();
			this.countryCodeDic=new SMap<number,CountryCodeConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CountryCodeConfig();
				config.readBytesSimple(stream);
				this.countryCodeDic.put(config.id,config);
			}
		}
		
		/** 刷新国家地区表(登录用) */
		private refreshCountryCode():void
		{
			if(!this.countryCodeDic.isEmpty())
			{
				for(var config of this.countryCodeDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取调用方式表 */
		protected readCallWay(stream:BytesReadStream):void
		{
			var config:CallWayConfig;
			var len:number=stream.readLen();
			this.callWayDic=new SMap<number,CallWayConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CallWayConfig();
				config.readBytesSimple(stream);
				this.callWayDic.put(config.id,config);
			}
		}
		
		/** 刷新调用方式表 */
		private refreshCallWay():void
		{
			if(!this.callWayDic.isEmpty())
			{
				for(var config of this.callWayDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取buff表 */
		protected readBuff(stream:BytesReadStream):void
		{
			var config:BuffConfig;
			var len:number=stream.readLen();
			this.buffDic=new SMap<number,BuffConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BuffConfig();
				config.readBytesSimple(stream);
				this.buffDic.put(config.id,config);
			}
		}
		
		/** 刷新buff表 */
		private refreshBuff():void
		{
			if(!this.buffDic.isEmpty())
			{
				for(var config of this.buffDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取单位效果表 */
		protected readEffect(stream:BytesReadStream):void
		{
			var config:EffectConfig;
			var len:number=stream.readLen();
			this.effectDic=new SMap<number,EffectConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new EffectConfig();
				config.readBytesSimple(stream);
				this.effectDic.put(config.id,config);
			}
		}
		
		/** 刷新单位效果表 */
		private refreshEffect():void
		{
			if(!this.effectDic.isEmpty())
			{
				for(var config of this.effectDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取场景特效表 */
		protected readSceneEffect(stream:BytesReadStream):void
		{
			var config:SceneEffectConfig;
			var len:number=stream.readLen();
			this.sceneEffectDic=new SMap<number,SceneEffectConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SceneEffectConfig();
				config.readBytesSimple(stream);
				this.sceneEffectDic.put(config.id,config);
			}
		}
		
		/** 刷新场景特效表 */
		private refreshSceneEffect():void
		{
			if(!this.sceneEffectDic.isEmpty())
			{
				for(var config of this.sceneEffectDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能几率表 */
		protected readSkillProb(stream:BytesReadStream):void
		{
			var config:SkillProbConfig;
			var len:number=stream.readLen();
			this.skillProbDic=new SMap<number,SkillProbConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillProbConfig();
				config.readBytesSimple(stream);
				this.skillProbDic.put(config.id,config);
			}
		}
		
		/** 刷新技能几率表 */
		private refreshSkillProb():void
		{
			if(!this.skillProbDic.isEmpty())
			{
				for(var config of this.skillProbDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取特殊移动表 */
		protected readSpecialMove(stream:BytesReadStream):void
		{
			var config:SpecialMoveConfig;
			var len:number=stream.readLen();
			this.specialMoveDic=new SMap<number,SpecialMoveConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SpecialMoveConfig();
				config.readBytesSimple(stream);
				this.specialMoveDic.put(config.id,config);
			}
		}
		
		/** 刷新特殊移动表 */
		private refreshSpecialMove():void
		{
			if(!this.specialMoveDic.isEmpty())
			{
				for(var config of this.specialMoveDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取随机单个物品配置 */
		protected readRandomItem(stream:BytesReadStream):void
		{
			var config:RandomItemConfig;
			var len:number=stream.readLen();
			this.randomItemDic=new SMap<number,RandomItemConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RandomItemConfig();
				config.readBytesSimple(stream);
				this.randomItemDic.put(config.id,config);
			}
		}
		
		/** 刷新随机单个物品配置 */
		private refreshRandomItem():void
		{
			if(!this.randomItemDic.isEmpty())
			{
				for(var config of this.randomItemDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取文本表(程序用)(需国际化) */
		protected readText(stream:BytesReadStream):void
		{
			var config:TextConfig;
			var len:number=stream.readLen();
			this.textDic=new SMap<string,TextConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new TextConfig();
				config.readBytesSimple(stream);
				this.textDic.put(config.key,config);
			}
		}
		
		/** 刷新文本表(程序用)(需国际化) */
		private refreshText():void
		{
			if(!this.textDic.isEmpty())
			{
				for(var config of this.textDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取流程步骤类型 */
		protected readFlowStep(stream:BytesReadStream):void
		{
			var config:FlowStepConfig;
			var len:number=stream.readLen();
			this.flowStepDic=new SMap<number,FlowStepConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new FlowStepConfig();
				config.readBytesSimple(stream);
				this.flowStepDic.put(config.id,config);
			}
		}
		
		/** 刷新流程步骤类型 */
		private refreshFlowStep():void
		{
			if(!this.flowStepDic.isEmpty())
			{
				for(var config of this.flowStepDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取角色表 */
		protected readCharacter(stream:BytesReadStream):void
		{
			var config:CharacterConfig;
			var len:number=stream.readLen();
			this.characterDic=new SMap<number,CharacterConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CharacterConfig();
				config.readBytesSimple(stream);
				this.characterDic.put(config.id,config);
			}
		}
		
		/** 刷新角色表 */
		private refreshCharacter():void
		{
			if(!this.characterDic.isEmpty())
			{
				for(var config of this.characterDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取怪物表 */
		protected readMonster(stream:BytesReadStream):void
		{
			var config:MonsterConfig;
			var len:number=stream.readLen();
			this.monsterDic=new SMap<number,MonsterConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new MonsterConfig();
				config.readBytesSimple(stream);
				this.monsterDic.put(config.id,config);
			}
		}
		
		/** 刷新怪物表 */
		private refreshMonster():void
		{
			if(!this.monsterDic.isEmpty())
			{
				for(var config of this.monsterDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取状态类型表 */
		protected readStatus(stream:BytesReadStream):void
		{
			var config:StatusConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.statusDic=new Array<StatusConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new StatusConfig();
				config.readBytesSimple(stream);
				this.statusDic[config.id]=config;
			}
		}
		
		/** 刷新状态类型表 */
		private refreshStatus():void
		{
			for(var configI=0,configLen=this.statusDic.length;configI<configLen;++configI)
			{
				var config:StatusConfig=this.statusDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取进度条表 */
		protected readProgressBar(stream:BytesReadStream):void
		{
			var config:ProgressBarConfig;
			var len:number=stream.readLen();
			this.progressBarDic=new SMap<number,ProgressBarConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ProgressBarConfig();
				config.readBytesSimple(stream);
				this.progressBarDic.put(config.id,config);
			}
		}
		
		/** 刷新进度条表 */
		private refreshProgressBar():void
		{
			if(!this.progressBarDic.isEmpty())
			{
				for(var config of this.progressBarDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取成就表 */
		protected readAchievement(stream:BytesReadStream):void
		{
			var config:AchievementConfig;
			var len:number=stream.readLen();
			this.achievementDic=new SMap<number,AchievementConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new AchievementConfig();
				config.readBytesSimple(stream);
				this.achievementDic.put(config.id,config);
			}
		}
		
		/** 刷新成就表 */
		private refreshAchievement():void
		{
			if(!this.achievementDic.isEmpty())
			{
				for(var config of this.achievementDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取随机物品组配置 */
		protected readRandomItemList(stream:BytesReadStream):void
		{
			var config:RandomItemListConfig;
			var len:number=stream.readLen();
			this.randomItemListDic=new SMap<number,RandomItemListConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RandomItemListConfig();
				config.readBytesSimple(stream);
				this.randomItemListDic.put(config.id,config);
			}
		}
		
		/** 刷新随机物品组配置 */
		private refreshRandomItemList():void
		{
			if(!this.randomItemListDic.isEmpty())
			{
				for(var config of this.randomItemListDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取字体表(程序用)(需国际化) */
		protected readFont(stream:BytesReadStream):void
		{
			var config:FontConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.fontDic=new Array<FontConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new FontConfig();
				config.readBytesSimple(stream);
				this.fontDic[config.id]=config;
			}
		}
		
		/** 刷新字体表(程序用)(需国际化) */
		private refreshFont():void
		{
			for(var configI=0,configLen=this.fontDic.length;configI<configLen;++configI)
			{
				var config:FontConfig=this.fontDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取技能等级表 */
		protected readSkillLevel(stream:BytesReadStream):void
		{
			var config:SkillLevelConfig;
			var len:number=stream.readLen();
			this.skillLevelDic=new SMap<number,SkillLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillLevelConfig();
				config.readBytesSimple(stream);
				this.skillLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新技能等级表 */
		private refreshSkillLevel():void
		{
			if(!this.skillLevelDic.isEmpty())
			{
				for(var config of this.skillLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取敏感词表 */
		protected readSensitiveWord(stream:BytesReadStream):void
		{
			var config:SensitiveWordConfig;
			var len:number=stream.readLen();
			this.sensitiveWordDic=new SMap<number,SensitiveWordConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SensitiveWordConfig();
				config.readBytesSimple(stream);
				this.sensitiveWordDic.put(config.key,config);
			}
		}
		
		/** 刷新敏感词表 */
		private refreshSensitiveWord():void
		{
			if(!this.sensitiveWordDic.isEmpty())
			{
				for(var config of this.sensitiveWordDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能攻击等级表 */
		protected readAttackLevel(stream:BytesReadStream):void
		{
			var config:AttackLevelConfig;
			var len:number=stream.readLen();
			this.attackLevelDic=new SMap<number,AttackLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new AttackLevelConfig();
				config.readBytesSimple(stream);
				this.attackLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新技能攻击等级表 */
		private refreshAttackLevel():void
		{
			if(!this.attackLevelDic.isEmpty())
			{
				for(var config of this.attackLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能攻击表 */
		protected readAttack(stream:BytesReadStream):void
		{
			var config:AttackConfig;
			var len:number=stream.readLen();
			this.attackDic=new SMap<number,AttackConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new AttackConfig();
				config.readBytesSimple(stream);
				this.attackDic.put(config.id,config);
			}
		}
		
		/** 刷新技能攻击表 */
		private refreshAttack():void
		{
			if(!this.attackDic.isEmpty())
			{
				for(var config of this.attackDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取邮件表 */
		protected readMail(stream:BytesReadStream):void
		{
			var config:MailConfig;
			var len:number=stream.readLen();
			this.mailDic=new SMap<number,MailConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new MailConfig();
				config.readBytesSimple(stream);
				this.mailDic.put(config.id,config);
			}
		}
		
		/** 刷新邮件表 */
		private refreshMail():void
		{
			if(!this.mailDic.isEmpty())
			{
				for(var config of this.mailDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取副本基础表 */
		protected readBattle(stream:BytesReadStream):void
		{
			var config:BattleConfig;
			var len:number=stream.readLen();
			this.battleDic=new SMap<number,BattleConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BattleConfig();
				config.readBytesSimple(stream);
				this.battleDic.put(config.id,config);
			}
		}
		
		/** 刷新副本基础表 */
		private refreshBattle():void
		{
			if(!this.battleDic.isEmpty())
			{
				for(var config of this.battleDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取场景类型 */
		protected readSceneType(stream:BytesReadStream):void
		{
			var config:SceneTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.sceneTypeDic=new Array<SceneTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new SceneTypeConfig();
				config.readBytesSimple(stream);
				this.sceneTypeDic[config.id]=config;
			}
		}
		
		/** 刷新场景类型 */
		private refreshSceneType():void
		{
			for(var configI=0,configLen=this.sceneTypeDic.length;configI<configLen;++configI)
			{
				var config:SceneTypeConfig=this.sceneTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取任务目标类型 */
		protected readTaskType(stream:BytesReadStream):void
		{
			var config:TaskTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.taskTypeDic=new Array<TaskTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new TaskTypeConfig();
				config.readBytesSimple(stream);
				this.taskTypeDic[config.id]=config;
			}
		}
		
		/** 刷新任务目标类型 */
		private refreshTaskType():void
		{
			for(var configI=0,configLen=this.taskTypeDic.length;configI<configLen;++configI)
			{
				var config:TaskTypeConfig=this.taskTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取单位移动方式 */
		protected readUnitMoveType(stream:BytesReadStream):void
		{
			var config:UnitMoveTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.unitMoveTypeDic=new Array<UnitMoveTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new UnitMoveTypeConfig();
				config.readBytesSimple(stream);
				this.unitMoveTypeDic[config.id]=config;
			}
		}
		
		/** 刷新单位移动方式 */
		private refreshUnitMoveType():void
		{
			for(var configI=0,configLen=this.unitMoveTypeDic.length;configI<configLen;++configI)
			{
				var config:UnitMoveTypeConfig=this.unitMoveTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取角色显示数据部件类型 */
		protected readRoleShowDataPartType(stream:BytesReadStream):void
		{
			var config:RoleShowDataPartTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.roleShowDataPartTypeDic=new Array<RoleShowDataPartTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new RoleShowDataPartTypeConfig();
				config.readBytesSimple(stream);
				this.roleShowDataPartTypeDic[config.id]=config;
			}
		}
		
		/** 刷新角色显示数据部件类型 */
		private refreshRoleShowDataPartType():void
		{
			for(var configI=0,configLen=this.roleShowDataPartTypeDic.length;configI<configLen;++configI)
			{
				var config:RoleShowDataPartTypeConfig=this.roleShowDataPartTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取邮件类型 */
		protected readMailType(stream:BytesReadStream):void
		{
			var config:MailTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.mailTypeDic=new Array<MailTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new MailTypeConfig();
				config.readBytesSimple(stream);
				this.mailTypeDic[config.id]=config;
			}
		}
		
		/** 刷新邮件类型 */
		private refreshMailType():void
		{
			for(var configI=0,configLen=this.mailTypeDic.length;configI<configLen;++configI)
			{
				var config:MailTypeConfig=this.mailTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取模型绑点位置类型 */
		protected readModelBindPosType(stream:BytesReadStream):void
		{
			var config:ModelBindPosTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.modelBindPosTypeDic=new Array<ModelBindPosTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new ModelBindPosTypeConfig();
				config.readBytesSimple(stream);
				this.modelBindPosTypeDic[config.id]=config;
			}
		}
		
		/** 刷新模型绑点位置类型 */
		private refreshModelBindPosType():void
		{
			for(var configI=0,configLen=this.modelBindPosTypeDic.length;configI<configLen;++configI)
			{
				var config:ModelBindPosTypeConfig=this.modelBindPosTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取单位特殊移动类型 */
		protected readUnitSpecialMoveType(stream:BytesReadStream):void
		{
			var config:UnitSpecialMoveTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.unitSpecialMoveTypeDic=new Array<UnitSpecialMoveTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new UnitSpecialMoveTypeConfig();
				config.readBytesSimple(stream);
				this.unitSpecialMoveTypeDic[config.id]=config;
			}
		}
		
		/** 刷新单位特殊移动类型 */
		private refreshUnitSpecialMoveType():void
		{
			for(var configI=0,configLen=this.unitSpecialMoveTypeDic.length;configI<configLen;++configI)
			{
				var config:UnitSpecialMoveTypeConfig=this.unitSpecialMoveTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取语言类型 */
		protected readLanguageType(stream:BytesReadStream):void
		{
			var config:LanguageTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.languageTypeDic=new Array<LanguageTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new LanguageTypeConfig();
				config.readBytesSimple(stream);
				this.languageTypeDic[config.id]=config;
			}
		}
		
		/** 刷新语言类型 */
		private refreshLanguageType():void
		{
			for(var configI=0,configLen=this.languageTypeDic.length;configI<configLen;++configI)
			{
				var config:LanguageTypeConfig=this.languageTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取玩家等级表 */
		protected readRoleLevel(stream:BytesReadStream):void
		{
			var config:RoleLevelConfig;
			var len:number=stream.readLen();
			this.roleLevelDic=new SMap<number,RoleLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RoleLevelConfig();
				config.readBytesSimple(stream);
				this.roleLevelDic.put(config.level,config);
			}
		}
		
		/** 刷新玩家等级表 */
		private refreshRoleLevel():void
		{
			if(!this.roleLevelDic.isEmpty())
			{
				for(var config of this.roleLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取随机名字表 */
		protected readRandomName(stream:BytesReadStream):void
		{
			var config:RandomNameConfig;
			var len:number=stream.readLen();
			this.randomNameDic=new SMap<number,RandomNameConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RandomNameConfig();
				config.readBytesSimple(stream);
				this.randomNameDic.put(config.id,config);
			}
		}
		
		/** 刷新随机名字表 */
		private refreshRandomName():void
		{
			if(!this.randomNameDic.isEmpty())
			{
				for(var config of this.randomNameDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能变量表 */
		protected readSkillVar(stream:BytesReadStream):void
		{
			var config:SkillVarConfig;
			var len:number=stream.readLen();
			this.skillVarDic=new SMap<number,SkillVarConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillVarConfig();
				config.readBytesSimple(stream);
				this.skillVarDic.put(config.id,config);
			}
		}
		
		/** 刷新技能变量表 */
		private refreshSkillVar():void
		{
			if(!this.skillVarDic.isEmpty())
			{
				for(var config of this.skillVarDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能表 */
		protected readSkill(stream:BytesReadStream):void
		{
			var config:SkillConfig;
			var len:number=stream.readLen();
			this.skillDic=new SMap<number,SkillConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillConfig();
				config.readBytesSimple(stream);
				this.skillDic.put(config.id,config);
			}
		}
		
		/** 刷新技能表 */
		private refreshSkill():void
		{
			if(!this.skillDic.isEmpty())
			{
				for(var config of this.skillDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取属性类型表 */
		protected readAttribute(stream:BytesReadStream):void
		{
			var config:AttributeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.attributeDic=new Array<AttributeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new AttributeConfig();
				config.readBytesSimple(stream);
				this.attributeDic[config.id]=config;
			}
		}
		
		/** 刷新属性类型表 */
		private refreshAttribute():void
		{
			for(var configI=0,configLen=this.attributeDic.length;configI<configLen;++configI)
			{
				var config:AttributeConfig=this.attributeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取buff等级表 */
		protected readBuffLevel(stream:BytesReadStream):void
		{
			var config:BuffLevelConfig;
			var len:number=stream.readLen();
			this.buffLevelDic=new SMap<number,BuffLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BuffLevelConfig();
				config.readBytesSimple(stream);
				this.buffLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新buff等级表 */
		private refreshBuffLevel():void
		{
			if(!this.buffLevelDic.isEmpty())
			{
				for(var config of this.buffLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取平台表 */
		protected readPlatform(stream:BytesReadStream):void
		{
			var config:PlatformConfig;
			var len:number=stream.readLen();
			this.platformDic=new SMap<string,PlatformConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new PlatformConfig();
				config.readBytesSimple(stream);
				this.platformDic.put(config.id,config);
			}
		}
		
		/** 刷新平台表 */
		private refreshPlatform():void
		{
			if(!this.platformDic.isEmpty())
			{
				for(var config of this.platformDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取任务目标表 */
		protected readTask(stream:BytesReadStream):void
		{
			var config:TaskConfig;
			var len:number=stream.readLen();
			this.taskDic=new SMap<number,TaskConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new TaskConfig();
				config.readBytesSimple(stream);
				this.taskDic.put(config.id,config);
			}
		}
		
		/** 刷新任务目标表 */
		private refreshTask():void
		{
			if(!this.taskDic.isEmpty())
			{
				for(var config of this.taskDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取界面表 */
		protected readUI(stream:BytesReadStream):void
		{
			var config:UIConfig;
			var len:number=stream.readLen();
			this.uiDic=new SMap<number,UIConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new UIConfig();
				config.readBytesSimple(stream);
				this.uiDic.put(config.id,config);
			}
		}
		
		/** 刷新界面表 */
		private refreshUI():void
		{
			if(!this.uiDic.isEmpty())
			{
				for(var config of this.uiDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取cd组表 */
		protected readCDGroup(stream:BytesReadStream):void
		{
			var config:CDGroupConfig;
			var len:number=stream.readLen();
			this.cdGroupDic=new SMap<number,CDGroupConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CDGroupConfig();
				config.readBytesSimple(stream);
				this.cdGroupDic.put(config.id,config);
			}
		}
		
		/** 刷新cd组表 */
		private refreshCDGroup():void
		{
			if(!this.cdGroupDic.isEmpty())
			{
				for(var config of this.cdGroupDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取单位模型表 */
		protected readModel(stream:BytesReadStream):void
		{
			var config:ModelConfig;
			var len:number=stream.readLen();
			this.modelDic=new SMap<number,ModelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ModelConfig();
				config.readBytesSimple(stream);
				this.modelDic.put(config.id,config);
			}
		}
		
		/** 刷新单位模型表 */
		private refreshModel():void
		{
			if(!this.modelDic.isEmpty())
			{
				for(var config of this.modelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取加载资源表 */
		protected readMarkResource(stream:BytesReadStream):void
		{
			var config:MarkResourceConfig;
			var len:number=stream.readLen();
			this.markResourceDic=new SMap<string,MarkResourceConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new MarkResourceConfig();
				config.readBytesSimple(stream);
				this.markResourceDic.put(config.url,config);
			}
		}
		
		/** 刷新加载资源表 */
		private refreshMarkResource():void
		{
			if(!this.markResourceDic.isEmpty())
			{
				for(var config of this.markResourceDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能步骤表 */
		protected readSkillStep(stream:BytesReadStream):void
		{
			var config:SkillStepConfig;
			var len:number=stream.readLen();
			this.skillStepDic=new SMap<number,SkillStepConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillStepConfig();
				config.readBytesSimple(stream);
				this.skillStepDic.put(config.id * 256 + config.step,config);
			}
		}
		
		/** 刷新技能步骤表 */
		private refreshSkillStep():void
		{
			if(!this.skillStepDic.isEmpty())
			{
				for(var config of this.skillStepDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能组表 */
		protected readSkillGroup(stream:BytesReadStream):void
		{
			var config:SkillGroupConfig;
			var len:number=stream.readLen();
			this.skillGroupDic=new SMap<number,SkillGroupConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillGroupConfig();
				config.readBytesSimple(stream);
				this.skillGroupDic.put(config.id,config);
			}
		}
		
		/** 刷新技能组表 */
		private refreshSkillGroup():void
		{
			if(!this.skillGroupDic.isEmpty())
			{
				for(var config of this.skillGroupDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取攻击组表 */
		protected readAttackGroup(stream:BytesReadStream):void
		{
			var config:AttackGroupConfig;
			var len:number=stream.readLen();
			this.attackGroupDic=new SMap<number,AttackGroupConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new AttackGroupConfig();
				config.readBytesSimple(stream);
				this.attackGroupDic.put(config.id,config);
			}
		}
		
		/** 刷新攻击组表 */
		private refreshAttackGroup():void
		{
			if(!this.attackGroupDic.isEmpty())
			{
				for(var config of this.attackGroupDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取单位模型动作表 */
		protected readModelMotion(stream:BytesReadStream):void
		{
			var config:ModelMotionConfig;
			var len:number=stream.readLen();
			this.modelMotionDic=new SMap<number,ModelMotionConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ModelMotionConfig();
				config.readBytesSimple(stream);
				this.modelMotionDic.put(config.id * 4294967296 + config.motionID,config);
			}
		}
		
		/** 刷新单位模型动作表 */
		private refreshModelMotion():void
		{
			if(!this.modelMotionDic.isEmpty())
			{
				for(var config of this.modelMotionDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取buff组表 */
		protected readBuffGroup(stream:BytesReadStream):void
		{
			var config:BuffGroupConfig;
			var len:number=stream.readLen();
			this.buffGroupDic=new SMap<number,BuffGroupConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BuffGroupConfig();
				config.readBytesSimple(stream);
				this.buffGroupDic.put(config.id,config);
			}
		}
		
		/** 刷新buff组表 */
		private refreshBuffGroup():void
		{
			if(!this.buffGroupDic.isEmpty())
			{
				for(var config of this.buffGroupDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取任务表 */
		protected readQuest(stream:BytesReadStream):void
		{
			var config:QuestConfig;
			var len:number=stream.readLen();
			this.questDic=new SMap<number,QuestConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new QuestConfig();
				config.readBytesSimple(stream);
				this.questDic.put(config.id,config);
			}
		}
		
		/** 刷新任务表 */
		private refreshQuest():void
		{
			if(!this.questDic.isEmpty())
			{
				for(var config of this.questDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取bullet表 */
		protected readBullet(stream:BytesReadStream):void
		{
			var config:BulletConfig;
			var len:number=stream.readLen();
			this.bulletDic=new SMap<number,BulletConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BulletConfig();
				config.readBytesSimple(stream);
				this.bulletDic.put(config.id,config);
			}
		}
		
		/** 刷新bullet表 */
		private refreshBullet():void
		{
			if(!this.bulletDic.isEmpty())
			{
				for(var config of this.bulletDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取NPC表 */
		protected readNPC(stream:BytesReadStream):void
		{
			var config:NPCConfig;
			var len:number=stream.readLen();
			this.npcDic=new SMap<number,NPCConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new NPCConfig();
				config.readBytesSimple(stream);
				this.npcDic.put(config.id,config);
			}
		}
		
		/** 刷新NPC表 */
		private refreshNPC():void
		{
			if(!this.npcDic.isEmpty())
			{
				for(var config of this.npcDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取货币表 */
		protected readCurrency(stream:BytesReadStream):void
		{
			var config:CurrencyConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.currencyDic=new Array<CurrencyConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new CurrencyConfig();
				config.readBytesSimple(stream);
				this.currencyDic[config.id]=config;
			}
		}
		
		/** 刷新货币表 */
		private refreshCurrency():void
		{
			for(var configI=0,configLen=this.currencyDic.length;configI<configLen;++configI)
			{
				var config:CurrencyConfig=this.currencyDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取技能步骤等级表 */
		protected readSkillStepLevel(stream:BytesReadStream):void
		{
			var config:SkillStepLevelConfig;
			var len:number=stream.readLen();
			this.skillStepLevelDic=new SMap<number,SkillStepLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillStepLevelConfig();
				config.readBytesSimple(stream);
				this.skillStepLevelDic.put(config.id * 16777216 + config.step * 65536 + config.level,config);
			}
		}
		
		/** 刷新技能步骤等级表 */
		private refreshSkillStepLevel():void
		{
			if(!this.skillStepLevelDic.isEmpty())
			{
				for(var config of this.skillStepLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取傀儡表 */
		protected readPuppet(stream:BytesReadStream):void
		{
			var config:PuppetConfig;
			var len:number=stream.readLen();
			this.puppetDic=new SMap<number,PuppetConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new PuppetConfig();
				config.readBytesSimple(stream);
				this.puppetDic.put(config.id,config);
			}
		}
		
		/** 刷新傀儡表 */
		private refreshPuppet():void
		{
			if(!this.puppetDic.isEmpty())
			{
				for(var config of this.puppetDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取傀儡等级表 */
		protected readPuppetLevel(stream:BytesReadStream):void
		{
			var config:PuppetLevelConfig;
			var len:number=stream.readLen();
			this.puppetLevelDic=new SMap<number,PuppetLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new PuppetLevelConfig();
				config.readBytesSimple(stream);
				this.puppetLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新傀儡等级表 */
		private refreshPuppetLevel():void
		{
			if(!this.puppetLevelDic.isEmpty())
			{
				for(var config of this.puppetLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取单位显示部件表 */
		protected readAvatarPart(stream:BytesReadStream):void
		{
			var config:AvatarPartConfig;
			var len:number=stream.readLen();
			this.avatarPartDic=new SMap<number,AvatarPartConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new AvatarPartConfig();
				config.readBytesSimple(stream);
				this.avatarPartDic.put(config.type * 4294967296 + config.id,config);
			}
		}
		
		/** 刷新单位显示部件表 */
		private refreshAvatarPart():void
		{
			if(!this.avatarPartDic.isEmpty())
			{
				for(var config of this.avatarPartDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取国际化表 */
		protected readLanguage(stream:BytesReadStream):void
		{
			var config:LanguageConfig;
			var len:number=stream.readLen();
			this.languageDic=new SMap<string,LanguageConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new LanguageConfig();
				config.readBytesSimple(stream);
				this.languageDic.put(config.key,config);
			}
		}
		
		/** 刷新国际化表 */
		private refreshLanguage():void
		{
			if(!this.languageDic.isEmpty())
			{
				for(var config of this.languageDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取单位外观表 */
		protected readFacade(stream:BytesReadStream):void
		{
			var config:FacadeConfig;
			var len:number=stream.readLen();
			this.facadeDic=new SMap<number,FacadeConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new FacadeConfig();
				config.readBytesSimple(stream);
				this.facadeDic.put(config.id,config);
			}
		}
		
		/** 刷新单位外观表 */
		private refreshFacade():void
		{
			if(!this.facadeDic.isEmpty())
			{
				for(var config of this.facadeDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取宠物表 */
		protected readPet(stream:BytesReadStream):void
		{
			var config:PetConfig;
			var len:number=stream.readLen();
			this.petDic=new SMap<number,PetConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new PetConfig();
				config.readBytesSimple(stream);
				this.petDic.put(config.id,config);
			}
		}
		
		/** 刷新宠物表 */
		private refreshPet():void
		{
			if(!this.petDic.isEmpty())
			{
				for(var config of this.petDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取模型动作类型 */
		protected readMotion(stream:BytesReadStream):void
		{
			var config:MotionConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.motionDic=new Array<MotionConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new MotionConfig();
				config.readBytesSimple(stream);
				this.motionDic[config.id]=config;
			}
		}
		
		/** 刷新模型动作类型 */
		private refreshMotion():void
		{
			for(var configI=0,configLen=this.motionDic.length;configI<configLen;++configI)
			{
				var config:MotionConfig=this.motionDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取道具表 */
		protected readItem(stream:BytesReadStream):void
		{
			var config:ItemConfig;
			var len:number=stream.readLen();
			this.itemDic=new SMap<number,ItemConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ItemConfig();
				config.readBytesSimple(stream);
				this.itemDic.put(config.id,config);
			}
		}
		
		/** 刷新道具表 */
		private refreshItem():void
		{
			if(!this.itemDic.isEmpty())
			{
				for(var config of this.itemDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取子弹等级表 */
		protected readBulletLevel(stream:BytesReadStream):void
		{
			var config:BulletLevelConfig;
			var len:number=stream.readLen();
			this.bulletLevelDic=new SMap<number,BulletLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BulletLevelConfig();
				config.readBytesSimple(stream);
				this.bulletLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新子弹等级表 */
		private refreshBulletLevel():void
		{
			if(!this.bulletLevelDic.isEmpty())
			{
				for(var config of this.bulletLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取战斗单位表 */
		protected readFightUnit(stream:BytesReadStream):void
		{
			var config:FightUnitConfig;
			var len:number=stream.readLen();
			this.fightUnitDic=new SMap<number,FightUnitConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new FightUnitConfig();
				config.readBytesSimple(stream);
				this.fightUnitDic.put(config.id,config);
			}
		}
		
		/** 刷新战斗单位表 */
		private refreshFightUnit():void
		{
			if(!this.fightUnitDic.isEmpty())
			{
				for(var config of this.fightUnitDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取信息码类型表 */
		protected readInfoCode(stream:BytesReadStream):void
		{
			var config:InfoCodeConfig;
			var len:number=stream.readLen();
			this.infoCodeDic=new SMap<number,InfoCodeConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new InfoCodeConfig();
				config.readBytesSimple(stream);
				this.infoCodeDic.put(config.id,config);
			}
		}
		
		/** 刷新信息码类型表 */
		private refreshInfoCode():void
		{
			if(!this.infoCodeDic.isEmpty())
			{
				for(var config of this.infoCodeDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取红点类型 */
		protected readRedPoint(stream:BytesReadStream):void
		{
			var config:RedPointConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.redPointDic=new Array<RedPointConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new RedPointConfig();
				config.readBytesSimple(stream);
				this.redPointDic[config.id]=config;
			}
		}
		
		/** 刷新红点类型 */
		private refreshRedPoint():void
		{
			for(var configI=0,configLen=this.redPointDic.length;configI<configLen;++configI)
			{
				var config:RedPointConfig=this.redPointDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取功能开关表 */
		protected readFunctionSwitch(stream:BytesReadStream):void
		{
			var config:FunctionSwitchConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.functionSwitchDic=new Array<FunctionSwitchConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new FunctionSwitchConfig();
				config.readBytesSimple(stream);
				this.functionSwitchDic[config.id]=config;
			}
		}
		
		/** 刷新功能开关表 */
		private refreshFunctionSwitch():void
		{
			for(var configI=0,configLen=this.functionSwitchDic.length;configI<configLen;++configI)
			{
				var config:FunctionSwitchConfig=this.functionSwitchDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取战斗单位等级表 */
		protected readFightUnitLevel(stream:BytesReadStream):void
		{
			var config:FightUnitLevelConfig;
			var len:number=stream.readLen();
			this.fightUnitLevelDic=new SMap<number,FightUnitLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new FightUnitLevelConfig();
				config.readBytesSimple(stream);
				this.fightUnitLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新战斗单位等级表 */
		private refreshFightUnitLevel():void
		{
			if(!this.fightUnitLevelDic.isEmpty())
			{
				for(var config of this.fightUnitLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取国际化资源表 */
		protected readInternationalResource(stream:BytesReadStream):void
		{
			var config:InternationalResourceConfig;
			var len:number=stream.readLen();
			this.internationalResourceDic=new SMap<string,InternationalResourceConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new InternationalResourceConfig();
				config.readBytesSimple(stream);
				this.internationalResourceDic.put(config.key,config);
			}
		}
		
		/** 刷新国际化资源表 */
		private refreshInternationalResource():void
		{
			if(!this.internationalResourceDic.isEmpty())
			{
				for(var config of this.internationalResourceDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取场景布置元素表(编辑器对应) */
		protected readScenePlaceElement(stream:BytesReadStream):void
		{
			var config:ScenePlaceElementConfig;
			var len:number=stream.readLen();
			this.scenePlaceElementDic=new SMap<number,ScenePlaceElementConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ScenePlaceElementConfig();
				config.readBytesSimple(stream);
				this.scenePlaceElementDic.put(config.sceneID * 4294967296 + config.instanceID,config);
			}
		}
		
		/** 刷新场景布置元素表(编辑器对应) */
		private refreshScenePlaceElement():void
		{
			if(!this.scenePlaceElementDic.isEmpty())
			{
				for(var config of this.scenePlaceElementDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取创建单个物品配置(不包含数量) */
		protected readCreateItem(stream:BytesReadStream):void
		{
			var config:CreateItemConfig;
			var len:number=stream.readLen();
			this.createItemDic=new SMap<number,CreateItemConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CreateItemConfig();
				config.readBytesSimple(stream);
				this.createItemDic.put(config.id,config);
			}
		}
		
		/** 刷新创建单个物品配置(不包含数量) */
		private refreshCreateItem():void
		{
			if(!this.createItemDic.isEmpty())
			{
				for(var config of this.createItemDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取场景表 */
		protected readScene(stream:BytesReadStream):void
		{
			var config:SceneConfig;
			var len:number=stream.readLen();
			this.sceneDic=new SMap<number,SceneConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SceneConfig();
				config.readBytesSimple(stream);
				this.sceneDic.put(config.id,config);
			}
		}
		
		/** 刷新场景表 */
		private refreshScene():void
		{
			if(!this.sceneDic.isEmpty())
			{
				for(var config of this.sceneDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取功能表 */
		protected readFunction(stream:BytesReadStream):void
		{
			var config:FunctionConfig;
			var len:number=stream.readLen();
			this.functionDic=new SMap<number,FunctionConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new FunctionConfig();
				config.readBytesSimple(stream);
				this.functionDic.put(config.id,config);
			}
		}
		
		/** 刷新功能表 */
		private refreshFunction():void
		{
			if(!this.functionDic.isEmpty())
			{
				for(var config of this.functionDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取奖励表 */
		protected readReward(stream:BytesReadStream):void
		{
			var config:RewardConfig;
			var len:number=stream.readLen();
			this.rewardDic=new SMap<number,RewardConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RewardConfig();
				config.readBytesSimple(stream);
				this.rewardDic.put(config.id,config);
			}
		}
		
		/** 刷新奖励表 */
		private refreshReward():void
		{
			if(!this.rewardDic.isEmpty())
			{
				for(var config of this.rewardDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取全局配置表 */
		protected readGlobal(stream:BytesReadStream):void
		{
			this.global=new GlobalReadData();
			this.global.readBytesSimple(stream);
		}
		
		/** 读取trigger */
		private readTrigger(stream:BytesReadStream):void
		{
			var config:TriggerConfigData;
			var len:number=stream.readLen();
			this.triggerDic=new SMap<number,TriggerConfigData>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new TriggerConfigData();
				config.readBytesSimple(stream);
				this.triggerDic.put(config.id,config);
			}
		}
		
		/** 从数据设置到控制类上 */
		private setToConfigTrigger():void
		{
			// TriggerConfig.setDic(triggerDic);
		}
		
		/** 读完全部trigger */
		private afterReadConfigAllTrigger():void
		{
			// TriggerConfig.afterReadConfigAll();
		}
		
		private readScenePlaceEditor(stream:BytesReadStream):void
		{

		}
		
		private setToConfigScenePlaceEditor():void
		{

		}
		
		private afterReadConfigAllScenePlaceEditor():void
		{
			
		}
		
		/** 读取gm类型 */
		protected readGMType(stream:BytesReadStream):void
		{
			var config:GMTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.gMTypeDic=new Array<GMTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new GMTypeConfig();
				config.readBytesSimple(stream);
				this.gMTypeDic[config.id]=config;
			}
		}
		
		/** 刷新gm类型 */
		private refreshGMType():void
		{
			for(var configI=0,configLen=this.gMTypeDic.length;configI<configLen;++configI)
			{
				var config:GMTypeConfig=this.gMTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取区服信息 */
		protected readAreaInfo(stream:BytesReadStream):void
		{
			var config:AreaInfoConfig;
			var len:number=stream.readLen();
			this.areaInfoDic=new SMap<number,AreaInfoConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new AreaInfoConfig();
				config.readBytesSimple(stream);
				this.areaInfoDic.put(config.id,config);
			}
		}
		
		/** 刷新区服信息 */
		private refreshAreaInfo():void
		{
			if(!this.areaInfoDic.isEmpty())
			{
				for(var config of this.areaInfoDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取消耗表 */
		protected readCost(stream:BytesReadStream):void
		{
			var config:CostConfig;
			var len:number=stream.readLen();
			this.costDic=new SMap<number,CostConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new CostConfig();
				config.readBytesSimple(stream);
				this.costDic.put(config.id,config);
			}
		}
		
		/** 刷新消耗表 */
		private refreshCost():void
		{
			if(!this.costDic.isEmpty())
			{
				for(var config of this.costDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取兑换表 */
		protected readExchange(stream:BytesReadStream):void
		{
			var config:ExchangeConfig;
			var len:number=stream.readLen();
			this.exchangeDic=new SMap<number,ExchangeConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ExchangeConfig();
				config.readBytesSimple(stream);
				this.exchangeDic.put(config.id,config);
			}
		}
		
		/** 刷新兑换表 */
		private refreshExchange():void
		{
			if(!this.exchangeDic.isEmpty())
			{
				for(var config of this.exchangeDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取大浮点数阶位 */
		protected readBigFloatRank(stream:BytesReadStream):void
		{
			var config:BigFloatRankConfig;
			var len:number=stream.readLen();
			this.bigFloatRankDic=new SMap<number,BigFloatRankConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BigFloatRankConfig();
				config.readBytesSimple(stream);
				this.bigFloatRankDic.put(config.id,config);
			}
		}
		
		/** 刷新大浮点数阶位 */
		private refreshBigFloatRank():void
		{
			if(!this.bigFloatRankDic.isEmpty())
			{
				for(var config of this.bigFloatRankDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取职业表 */
		protected readVocation(stream:BytesReadStream):void
		{
			var config:VocationConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.vocationDic=new Array<VocationConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new VocationConfig();
				config.readBytesSimple(stream);
				this.vocationDic[config.id]=config;
			}
		}
		
		/** 刷新职业表 */
		private refreshVocation():void
		{
			for(var configI=0,configLen=this.vocationDic.length;configI<configLen;++configI)
			{
				var config:VocationConfig=this.vocationDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取场景地图表 */
		protected readSceneMap(stream:BytesReadStream):void
		{
			var config:SceneMapConfig;
			var len:number=stream.readLen();
			this.sceneMapDic=new SMap<number,SceneMapConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SceneMapConfig();
				config.readBytesSimple(stream);
				this.sceneMapDic.put(config.id,config);
			}
		}
		
		/** 刷新场景地图表 */
		private refreshSceneMap():void
		{
			if(!this.sceneMapDic.isEmpty())
			{
				for(var config of this.sceneMapDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取操作体表 */
		protected readOperation(stream:BytesReadStream):void
		{
			var config:OperationConfig;
			var len:number=stream.readLen();
			this.operationDic=new SMap<number,OperationConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new OperationConfig();
				config.readBytesSimple(stream);
				this.operationDic.put(config.id,config);
			}
		}
		
		/** 刷新操作体表 */
		private refreshOperation():void
		{
			if(!this.operationDic.isEmpty())
			{
				for(var config of this.operationDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取装备槽位类型 */
		protected readEquipSlotType(stream:BytesReadStream):void
		{
			var config:EquipSlotTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.equipSlotTypeDic=new Array<EquipSlotTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new EquipSlotTypeConfig();
				config.readBytesSimple(stream);
				this.equipSlotTypeDic[config.id]=config;
			}
		}
		
		/** 刷新装备槽位类型 */
		private refreshEquipSlotType():void
		{
			for(var configI=0,configLen=this.equipSlotTypeDic.length;configI<configLen;++configI)
			{
				var config:EquipSlotTypeConfig=this.equipSlotTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取推送表 */
		protected readPushNotify(stream:BytesReadStream):void
		{
			var config:PushNotifyConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.pushNotifyDic=new Array<PushNotifyConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new PushNotifyConfig();
				config.readBytesSimple(stream);
				this.pushNotifyDic[config.id]=config;
			}
		}
		
		/** 刷新推送表 */
		private refreshPushNotify():void
		{
			for(var configI=0,configLen=this.pushNotifyDic.length;configI<configLen;++configI)
			{
				var config:PushNotifyConfig=this.pushNotifyDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取场景角色属性类型表 */
		protected readSceneRoleAttribute(stream:BytesReadStream):void
		{
			var config:SceneRoleAttributeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.sceneRoleAttributeDic=new Array<SceneRoleAttributeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new SceneRoleAttributeConfig();
				config.readBytesSimple(stream);
				this.sceneRoleAttributeDic[config.id]=config;
			}
		}
		
		/** 刷新场景角色属性类型表 */
		private refreshSceneRoleAttribute():void
		{
			for(var configI=0,configLen=this.sceneRoleAttributeDic.length;configI<configLen;++configI)
			{
				var config:SceneRoleAttributeConfig=this.sceneRoleAttributeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取技能影响类型 */
		protected readSkillInfluenceType(stream:BytesReadStream):void
		{
			var config:SkillInfluenceTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.skillInfluenceTypeDic=new Array<SkillInfluenceTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillInfluenceTypeConfig();
				config.readBytesSimple(stream);
				this.skillInfluenceTypeDic[config.id]=config;
			}
		}
		
		/** 刷新技能影响类型 */
		private refreshSkillInfluenceType():void
		{
			for(var configI=0,configLen=this.skillInfluenceTypeDic.length;configI<configLen;++configI)
			{
				var config:SkillInfluenceTypeConfig=this.skillInfluenceTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取建筑表 */
		protected readBuilding(stream:BytesReadStream):void
		{
			var config:BuildingConfig;
			var len:number=stream.readLen();
			this.buildingDic=new SMap<number,BuildingConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BuildingConfig();
				config.readBytesSimple(stream);
				this.buildingDic.put(config.id,config);
			}
		}
		
		/** 刷新建筑表 */
		private refreshBuilding():void
		{
			if(!this.buildingDic.isEmpty())
			{
				for(var config of this.buildingDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取建筑等级表 */
		protected readBuildingLevel(stream:BytesReadStream):void
		{
			var config:BuildingLevelConfig;
			var len:number=stream.readLen();
			this.buildingLevelDic=new SMap<number,BuildingLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new BuildingLevelConfig();
				config.readBytesSimple(stream);
				this.buildingLevelDic.put(config.id * 65536 + config.level,config);
			}
		}
		
		/** 刷新建筑等级表 */
		private refreshBuildingLevel():void
		{
			if(!this.buildingLevelDic.isEmpty())
			{
				for(var config of this.buildingLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取技能读条表 */
		protected readSkillBar(stream:BytesReadStream):void
		{
			var config:SkillBarConfig;
			var len:number=stream.readLen();
			this.skillBarDic=new SMap<number,SkillBarConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new SkillBarConfig();
				config.readBytesSimple(stream);
				this.skillBarDic.put(config.id,config);
			}
		}
		
		/** 刷新技能读条表 */
		private refreshSkillBar():void
		{
			if(!this.skillBarDic.isEmpty())
			{
				for(var config of this.skillBarDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取玩家群表 */
		protected readRoleGroup(stream:BytesReadStream):void
		{
			var config:RoleGroupConfig;
			var len:number=stream.readLen();
			this.roleGroupDic=new SMap<number,RoleGroupConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RoleGroupConfig();
				config.readBytesSimple(stream);
				this.roleGroupDic.put(config.id,config);
			}
		}
		
		/** 刷新玩家群表 */
		private refreshRoleGroup():void
		{
			if(!this.roleGroupDic.isEmpty())
			{
				for(var config of this.roleGroupDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取玩家群等级表 */
		protected readRoleGroupLevel(stream:BytesReadStream):void
		{
			var config:RoleGroupLevelConfig;
			var len:number=stream.readLen();
			this.roleGroupLevelDic=new SMap<number,RoleGroupLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RoleGroupLevelConfig();
				config.readBytesSimple(stream);
				this.roleGroupLevelDic.put(config.id * 4294967296 + config.level,config);
			}
		}
		
		/** 刷新玩家群等级表 */
		private refreshRoleGroupLevel():void
		{
			if(!this.roleGroupLevelDic.isEmpty())
			{
				for(var config of this.roleGroupLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取玩家群职位表 */
		protected readRoleGroupTitle(stream:BytesReadStream):void
		{
			var config:RoleGroupTitleConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.roleGroupTitleDic=new Array<RoleGroupTitleConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new RoleGroupTitleConfig();
				config.readBytesSimple(stream);
				this.roleGroupTitleDic[config.id]=config;
			}
		}
		
		/** 刷新玩家群职位表 */
		private refreshRoleGroupTitle():void
		{
			for(var configI=0,configLen=this.roleGroupTitleDic.length;configI<configLen;++configI)
			{
				var config:RoleGroupTitleConfig=this.roleGroupTitleDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取信息日志表 */
		protected readInfoLog(stream:BytesReadStream):void
		{
			var config:InfoLogConfig;
			var len:number=stream.readLen();
			this.infoLogDic=new SMap<number,InfoLogConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new InfoLogConfig();
				config.readBytesSimple(stream);
				this.infoLogDic.put(config.id,config);
			}
		}
		
		/** 刷新信息日志表 */
		private refreshInfoLog():void
		{
			if(!this.infoLogDic.isEmpty())
			{
				for(var config of this.infoLogDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 添加到Config上 */
		public addToConfigOne(type:number):void
		{
			switch(type)
			{
				case ConfigType.Language:
				{
					LanguageConfig.addDic(this.languageDic);
				}
					break;
				case ConfigType.BigFloatRank:
				{
					BigFloatRankConfig.addDic(this.bigFloatRankDic);
				}
					break;
				case ConfigType.SkillInfluenceType:
				{
					SkillInfluenceTypeConfig.addDic(this.skillInfluenceTypeDic);
				}
					break;
				case ConfigType.Achievement:
				{
					AchievementConfig.addDic(this.achievementDic);
				}
					break;
				case ConfigType.Activity:
				{
					ActivityConfig.addDic(this.activityDic);
				}
					break;
				case ConfigType.Attack:
				{
					AttackConfig.addDic(this.attackDic);
				}
					break;
				case ConfigType.AttackGroup:
				{
					AttackGroupConfig.addDic(this.attackGroupDic);
				}
					break;
				case ConfigType.AttackLevel:
				{
					AttackLevelConfig.addDic(this.attackLevelDic);
				}
					break;
				case ConfigType.Attribute:
				{
					AttributeConfig.addDic(this.attributeDic);
				}
					break;
				case ConfigType.AvatarPart:
				{
					AvatarPartConfig.addDic(this.avatarPartDic);
				}
					break;
				case ConfigType.Battle:
				{
					BattleConfig.addDic(this.battleDic);
				}
					break;
				case ConfigType.Buff:
				{
					BuffConfig.addDic(this.buffDic);
				}
					break;
				case ConfigType.BuffGroup:
				{
					BuffGroupConfig.addDic(this.buffGroupDic);
				}
					break;
				case ConfigType.BuffLevel:
				{
					BuffLevelConfig.addDic(this.buffLevelDic);
				}
					break;
				case ConfigType.Building:
				{
					BuildingConfig.addDic(this.buildingDic);
				}
					break;
				case ConfigType.BuildingLevel:
				{
					BuildingLevelConfig.addDic(this.buildingLevelDic);
				}
					break;
				case ConfigType.Bullet:
				{
					BulletConfig.addDic(this.bulletDic);
				}
					break;
				case ConfigType.BulletLevel:
				{
					BulletLevelConfig.addDic(this.bulletLevelDic);
				}
					break;
				case ConfigType.CallWay:
				{
					CallWayConfig.addDic(this.callWayDic);
				}
					break;
				case ConfigType.CD:
				{
					CDConfig.addDic(this.cdDic);
				}
					break;
				case ConfigType.CDGroup:
				{
					CDGroupConfig.addDic(this.cdGroupDic);
				}
					break;
				case ConfigType.Character:
				{
					CharacterConfig.addDic(this.characterDic);
				}
					break;
				case ConfigType.ChatChannel:
				{
					ChatChannelConfig.addDic(this.chatChannelDic);
				}
					break;
				case ConfigType.Cost:
				{
					CostConfig.addDic(this.costDic);
				}
					break;
				case ConfigType.CountryCode:
				{
					CountryCodeConfig.addDic(this.countryCodeDic);
				}
					break;
				case ConfigType.CreateItem:
				{
					CreateItemConfig.addDic(this.createItemDic);
				}
					break;
				case ConfigType.Currency:
				{
					CurrencyConfig.addDic(this.currencyDic);
				}
					break;
				case ConfigType.Effect:
				{
					EffectConfig.addDic(this.effectDic);
				}
					break;
				case ConfigType.EquipSlotType:
				{
					EquipSlotTypeConfig.addDic(this.equipSlotTypeDic);
				}
					break;
				case ConfigType.Exchange:
				{
					ExchangeConfig.addDic(this.exchangeDic);
				}
					break;
				case ConfigType.ExchangeGroup:
				{
					ExchangeGroupConfig.addDic(this.exchangeGroupDic);
				}
					break;
				case ConfigType.Facade:
				{
					FacadeConfig.addDic(this.facadeDic);
				}
					break;
				case ConfigType.FightUnit:
				{
					FightUnitConfig.addDic(this.fightUnitDic);
				}
					break;
				case ConfigType.FightUnitLevel:
				{
					FightUnitLevelConfig.addDic(this.fightUnitLevelDic);
				}
					break;
				case ConfigType.FlowStep:
				{
					FlowStepConfig.addDic(this.flowStepDic);
				}
					break;
				case ConfigType.Font:
				{
					FontConfig.addDic(this.fontDic);
				}
					break;
				case ConfigType.Function:
				{
					FunctionConfig.addDic(this.functionDic);
				}
					break;
				case ConfigType.FunctionSwitch:
				{
					FunctionSwitchConfig.addDic(this.functionSwitchDic);
				}
					break;
				case ConfigType.GMType:
				{
					GMTypeConfig.addDic(this.gMTypeDic);
				}
					break;
				case ConfigType.InfoCode:
				{
					InfoCodeConfig.addDic(this.infoCodeDic);
				}
					break;
				case ConfigType.InfoLog:
				{
					InfoLogConfig.addDic(this.infoLogDic);
				}
					break;
				case ConfigType.InternationalResource:
				{
					InternationalResourceConfig.addDic(this.internationalResourceDic);
				}
					break;
				case ConfigType.Item:
				{
					ItemConfig.addDic(this.itemDic);
				}
					break;
				case ConfigType.LanguageType:
				{
					LanguageTypeConfig.addDic(this.languageTypeDic);
				}
					break;
				case ConfigType.Mail:
				{
					MailConfig.addDic(this.mailDic);
				}
					break;
				case ConfigType.MailType:
				{
					MailTypeConfig.addDic(this.mailTypeDic);
				}
					break;
				case ConfigType.MarkResource:
				{
					MarkResourceConfig.addDic(this.markResourceDic);
				}
					break;
				case ConfigType.Model:
				{
					ModelConfig.addDic(this.modelDic);
				}
					break;
				case ConfigType.ModelBindPosType:
				{
					ModelBindPosTypeConfig.addDic(this.modelBindPosTypeDic);
				}
					break;
				case ConfigType.ModelMotion:
				{
					ModelMotionConfig.addDic(this.modelMotionDic);
				}
					break;
				case ConfigType.Monster:
				{
					MonsterConfig.addDic(this.monsterDic);
				}
					break;
				case ConfigType.MonsterLevel:
				{
					MonsterLevelConfig.addDic(this.monsterLevelDic);
				}
					break;
				case ConfigType.Motion:
				{
					MotionConfig.addDic(this.motionDic);
				}
					break;
				case ConfigType.NPC:
				{
					NPCConfig.addDic(this.npcDic);
				}
					break;
				case ConfigType.Operation:
				{
					OperationConfig.addDic(this.operationDic);
				}
					break;
				case ConfigType.Pet:
				{
					PetConfig.addDic(this.petDic);
				}
					break;
				case ConfigType.Platform:
				{
					PlatformConfig.addDic(this.platformDic);
				}
					break;
				case ConfigType.ProgressBar:
				{
					ProgressBarConfig.addDic(this.progressBarDic);
				}
					break;
				case ConfigType.Puppet:
				{
					PuppetConfig.addDic(this.puppetDic);
				}
					break;
				case ConfigType.PuppetLevel:
				{
					PuppetLevelConfig.addDic(this.puppetLevelDic);
				}
					break;
				case ConfigType.PushNotify:
				{
					PushNotifyConfig.addDic(this.pushNotifyDic);
				}
					break;
				case ConfigType.Quest:
				{
					QuestConfig.addDic(this.questDic);
				}
					break;
				case ConfigType.RandomItem:
				{
					RandomItemConfig.addDic(this.randomItemDic);
				}
					break;
				case ConfigType.RandomItemList:
				{
					RandomItemListConfig.addDic(this.randomItemListDic);
				}
					break;
				case ConfigType.RandomName:
				{
					RandomNameConfig.addDic(this.randomNameDic);
				}
					break;
				case ConfigType.RedPoint:
				{
					RedPointConfig.addDic(this.redPointDic);
				}
					break;
				case ConfigType.Region:
				{
					RegionConfig.addDic(this.regionDic);
				}
					break;
				case ConfigType.Reward:
				{
					RewardConfig.addDic(this.rewardDic);
				}
					break;
				case ConfigType.RoleAttribute:
				{
					RoleAttributeConfig.addDic(this.roleAttributeDic);
				}
					break;
				case ConfigType.RoleGroup:
				{
					RoleGroupConfig.addDic(this.roleGroupDic);
				}
					break;
				case ConfigType.RoleGroupLevel:
				{
					RoleGroupLevelConfig.addDic(this.roleGroupLevelDic);
				}
					break;
				case ConfigType.RoleGroupTitle:
				{
					RoleGroupTitleConfig.addDic(this.roleGroupTitleDic);
				}
					break;
				case ConfigType.RoleLevel:
				{
					RoleLevelConfig.addDic(this.roleLevelDic);
				}
					break;
				case ConfigType.RoleShowDataPartType:
				{
					RoleShowDataPartTypeConfig.addDic(this.roleShowDataPartTypeDic);
				}
					break;
				case ConfigType.Scene:
				{
					SceneConfig.addDic(this.sceneDic);
				}
					break;
				case ConfigType.SceneEffect:
				{
					SceneEffectConfig.addDic(this.sceneEffectDic);
				}
					break;
				case ConfigType.SceneMap:
				{
					SceneMapConfig.addDic(this.sceneMapDic);
				}
					break;
				case ConfigType.ScenePlaceElement:
				{
					ScenePlaceElementConfig.addDic(this.scenePlaceElementDic);
				}
					break;
				case ConfigType.SceneRoleAttribute:
				{
					SceneRoleAttributeConfig.addDic(this.sceneRoleAttributeDic);
				}
					break;
				case ConfigType.SceneType:
				{
					SceneTypeConfig.addDic(this.sceneTypeDic);
				}
					break;
				case ConfigType.SensitiveWord:
				{
					SensitiveWordConfig.addDic(this.sensitiveWordDic);
				}
					break;
				case ConfigType.Skill:
				{
					SkillConfig.addDic(this.skillDic);
				}
					break;
				case ConfigType.SkillBar:
				{
					SkillBarConfig.addDic(this.skillBarDic);
				}
					break;
				case ConfigType.SkillGroup:
				{
					SkillGroupConfig.addDic(this.skillGroupDic);
				}
					break;
				case ConfigType.SkillLevel:
				{
					SkillLevelConfig.addDic(this.skillLevelDic);
				}
					break;
				case ConfigType.SkillProb:
				{
					SkillProbConfig.addDic(this.skillProbDic);
				}
					break;
				case ConfigType.SkillStep:
				{
					SkillStepConfig.addDic(this.skillStepDic);
				}
					break;
				case ConfigType.SkillStepLevel:
				{
					SkillStepLevelConfig.addDic(this.skillStepLevelDic);
				}
					break;
				case ConfigType.SkillVar:
				{
					SkillVarConfig.addDic(this.skillVarDic);
				}
					break;
				case ConfigType.SpecialMove:
				{
					SpecialMoveConfig.addDic(this.specialMoveDic);
				}
					break;
				case ConfigType.Status:
				{
					StatusConfig.addDic(this.statusDic);
				}
					break;
				case ConfigType.Task:
				{
					TaskConfig.addDic(this.taskDic);
				}
					break;
				case ConfigType.TaskType:
				{
					TaskTypeConfig.addDic(this.taskTypeDic);
				}
					break;
				case ConfigType.Text:
				{
					TextConfig.addDic(this.textDic);
				}
					break;
				case ConfigType.UI:
				{
					UIConfig.addDic(this.uiDic);
				}
					break;
				case ConfigType.UILogic:
				{
					UILogicConfig.addDic(this.uiLogicDic);
				}
					break;
				case ConfigType.UnitModelSlotType:
				{
					UnitModelSlotTypeConfig.addDic(this.unitModelSlotTypeDic);
				}
					break;
				case ConfigType.UnitMoveType:
				{
					UnitMoveTypeConfig.addDic(this.unitMoveTypeDic);
				}
					break;
				case ConfigType.UnitSpecialMoveType:
				{
					UnitSpecialMoveTypeConfig.addDic(this.unitSpecialMoveTypeDic);
				}
					break;
				case ConfigType.Vocation:
				{
					VocationConfig.addDic(this.vocationDic);
				}
					break;
			}
		}
		
		/** 读取兑换组表 */
		protected readExchangeGroup(stream:BytesReadStream):void
		{
			var config:ExchangeGroupConfig;
			var len:number=stream.readLen();
			this.exchangeGroupDic=new SMap<number,ExchangeGroupConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new ExchangeGroupConfig();
				config.readBytesSimple(stream);
				this.exchangeGroupDic.put(config.id,config);
			}
		}
		
		/** 刷新兑换组表 */
		private refreshExchangeGroup():void
		{
			if(!this.exchangeGroupDic.isEmpty())
			{
				for(var config of this.exchangeGroupDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取怪物等级表 */
		protected readMonsterLevel(stream:BytesReadStream):void
		{
			var config:MonsterLevelConfig;
			var len:number=stream.readLen();
			this.monsterLevelDic=new SMap<number,MonsterLevelConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new MonsterLevelConfig();
				config.readBytesSimple(stream);
				this.monsterLevelDic.put(config.id * 4294967296 + config.level,config);
			}
		}
		
		/** 刷新怪物等级表 */
		private refreshMonsterLevel():void
		{
			if(!this.monsterLevelDic.isEmpty())
			{
				for(var config of this.monsterLevelDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
		/** 读取界面逻辑体表 */
		protected readUILogic(stream:BytesReadStream):void
		{
			var config:UILogicConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.uiLogicDic=new Array<UILogicConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new UILogicConfig();
				config.readBytesSimple(stream);
				this.uiLogicDic[config.id]=config;
			}
		}
		
		/** 刷新界面逻辑体表 */
		private refreshUILogic():void
		{
			for(var configI=0,configLen=this.uiLogicDic.length;configI<configLen;++configI)
			{
				var config:UILogicConfig=this.uiLogicDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取单位模型位置类型 */
		protected readUnitModelSlotType(stream:BytesReadStream):void
		{
			var config:UnitModelSlotTypeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.unitModelSlotTypeDic=new Array<UnitModelSlotTypeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new UnitModelSlotTypeConfig();
				config.readBytesSimple(stream);
				this.unitModelSlotTypeDic[config.id]=config;
			}
		}
		
		/** 刷新单位模型位置类型 */
		private refreshUnitModelSlotType():void
		{
			for(var configI=0,configLen=this.unitModelSlotTypeDic.length;configI<configLen;++configI)
			{
				var config:UnitModelSlotTypeConfig=this.unitModelSlotTypeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取聊天频道表 */
		protected readChatChannel(stream:BytesReadStream):void
		{
			var config:ChatChannelConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.chatChannelDic=new Array<ChatChannelConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new ChatChannelConfig();
				config.readBytesSimple(stream);
				this.chatChannelDic[config.id]=config;
			}
		}
		
		/** 刷新聊天频道表 */
		private refreshChatChannel():void
		{
			for(var configI=0,configLen=this.chatChannelDic.length;configI<configLen;++configI)
			{
				var config:ChatChannelConfig=this.chatChannelDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取角色属性类型表 */
		protected readRoleAttribute(stream:BytesReadStream):void
		{
			var config:RoleAttributeConfig;
			var len:number=stream.readLen();
			var size:number=stream.readLen();
			this.roleAttributeDic=new Array<RoleAttributeConfig>(size);
			for(var i:number=0;i<len;++i)
			{
				config=new RoleAttributeConfig();
				config.readBytesSimple(stream);
				this.roleAttributeDic[config.id]=config;
			}
		}
		
		/** 刷新角色属性类型表 */
		private refreshRoleAttribute():void
		{
			for(var configI=0,configLen=this.roleAttributeDic.length;configI<configLen;++configI)
			{
				var config:RoleAttributeConfig=this.roleAttributeDic[configI];
				if(config!=null)
					config.refresh();
			}
		}
		
		/** 读取区域表 */
		protected readRegion(stream:BytesReadStream):void
		{
			var config:RegionConfig;
			var len:number=stream.readLen();
			this.regionDic=new SMap<number,RegionConfig>(len);
			for(var i:number=0;i<len;++i)
			{
				config=new RegionConfig();
				config.readBytesSimple(stream);
				this.regionDic.put(config.id,config);
			}
		}
		
		/** 刷新区域表 */
		private refreshRegion():void
		{
			if(!this.regionDic.isEmpty())
			{
				for(var config of this.regionDic.getValues())
				{
					config.refresh();
				}
			}
		}
		
	}
}
