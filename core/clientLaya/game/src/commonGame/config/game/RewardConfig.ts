namespace Shine
{
	/** 奖励表(generated by shine) */
	export class RewardConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,RewardConfig>;
		
		/** id */
		public id:number;
		
		/** 奖励货币组等级公式 */
		public currencyLevelFormula:number[][];
		
		/** 奖励货币组(固定) */
		public currency:DIntData[];
		
		/** 奖励物品组(固定) */
		public items:DIntData[];
		
		/** 奖励角色经验等级公式 */
		public roleExpLevelFormula:number[];
		
		/** 奖励角色经验 */
		public roleExp:number;
		
		/** 随机物品组 */
		public randomListID:number;
		
		/** 是否需要等级适配 */
		public needLevelAdapter:boolean;
		
		/** 需要格子数(如果不填，则有程序计算长度) */
		public needGrid:number;
		
		/** 获取 */
		public static get(id:number):RewardConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,RewardConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,RewardConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,RewardConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			var currencyLen:number=stream.readLen();
			this.currency=new Array<DIntData>(currencyLen);
			var currencyT:DIntData[]=this.currency;
			for(var currencyI:number=0;currencyI<currencyLen;++currencyI)
			{
				var currencyV:DIntData;
				currencyV=new DIntData();
				currencyV.readBytesSimple(stream);
				
				currencyT[currencyI]=currencyV;
			}
			
			var currencyLevelFormulaLen:number=stream.readLen();
			this.currencyLevelFormula=new Array<number[]>(currencyLevelFormulaLen);
			var currencyLevelFormulaT:number[][]=this.currencyLevelFormula;
			for(var currencyLevelFormulaI:number=0;currencyLevelFormulaI<currencyLevelFormulaLen;++currencyLevelFormulaI)
			{
				var currencyLevelFormulaV:number[];
				var currencyLevelFormulaVLen:number=stream.readLen();
				currencyLevelFormulaV=new Array<number>(currencyLevelFormulaVLen);
				var currencyLevelFormulaVT:number[]=currencyLevelFormulaV;
				for(var currencyLevelFormulaVI:number=0;currencyLevelFormulaVI<currencyLevelFormulaVLen;++currencyLevelFormulaVI)
				{
					var currencyLevelFormulaVV:number;
					currencyLevelFormulaVV=stream.readInt();
					
					currencyLevelFormulaVT[currencyLevelFormulaVI]=currencyLevelFormulaVV;
				}
				
				currencyLevelFormulaT[currencyLevelFormulaI]=currencyLevelFormulaV;
			}
			
			var itemsLen:number=stream.readLen();
			this.items=new Array<DIntData>(itemsLen);
			var itemsT:DIntData[]=this.items;
			for(var itemsI:number=0;itemsI<itemsLen;++itemsI)
			{
				var itemsV:DIntData;
				itemsV=new DIntData();
				itemsV.readBytesSimple(stream);
				
				itemsT[itemsI]=itemsV;
			}
			
			this.randomListID=stream.readInt();
			
			this.roleExp=stream.readLong();
			
			var roleExpLevelFormulaLen:number=stream.readLen();
			this.roleExpLevelFormula=new Array<number>(roleExpLevelFormulaLen);
			var roleExpLevelFormulaT:number[]=this.roleExpLevelFormula;
			for(var roleExpLevelFormulaI:number=0;roleExpLevelFormulaI<roleExpLevelFormulaLen;++roleExpLevelFormulaI)
			{
				var roleExpLevelFormulaV:number;
				roleExpLevelFormulaV=stream.readInt();
				
				roleExpLevelFormulaT[roleExpLevelFormulaI]=roleExpLevelFormulaV;
			}
			
			this.needGrid=stream.readInt();
			
			this.needLevelAdapter=stream.readBoolean();
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
