namespace Shine
{
	/** 技能攻击等级表(generated by shine) */
	export class AttackLevelConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,AttackLevelConfig>;
		
		/** 攻击id */
		public id:number;
		
		/** 等级 */
		public level:number;
		
		/** 攻击范围 */
		public scope:number;
		
		/** 攻击范围参数 */
		public scopeArgs:number[];
		
		/** 产生子弹 */
		public bullet:DIntData;
		
		/** 伤害组 */
		public damages:number[][];
		
		/** 命中添加buff几率ID */
		public addBuffProbID:number;
		
		/** 命中添加buff组 */
		public addBuffs:DIntData[];
		
		/** 攻击时刻动作组 */
		public momentActions:number[][];
		
		/** 造成僵直 */
		public spasticityValue:number;
		
		/** 浮空力 */
		public attackBlowForce:number;
		
		/** 击退力 */
		public attackPushForce:number;
		
		/** 倒地击退力 */
		public attackLiePushForce:number;
		
		/** 获取 */
		public static get(id:number,level:number):AttackLevelConfig
		{
			return this._dic.get(id * 65536 + level);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,AttackLevelConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,AttackLevelConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,AttackLevelConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.level=stream.readShort();
			
			this.scope=stream.readInt();
			
			var scopeArgsLen:number=stream.readLen();
			this.scopeArgs=new Array<number>(scopeArgsLen);
			var scopeArgsT:number[]=this.scopeArgs;
			for(var scopeArgsI:number=0;scopeArgsI<scopeArgsLen;++scopeArgsI)
			{
				var scopeArgsV:number;
				scopeArgsV=stream.readFloat();
				
				scopeArgsT[scopeArgsI]=scopeArgsV;
			}
			
			this.bullet=new DIntData();
			this.bullet.readBytesSimple(stream);
			
			var damagesLen:number=stream.readLen();
			this.damages=new Array<number[]>(damagesLen);
			var damagesT:number[][]=this.damages;
			for(var damagesI:number=0;damagesI<damagesLen;++damagesI)
			{
				var damagesV:number[];
				var damagesVLen:number=stream.readLen();
				damagesV=new Array<number>(damagesVLen);
				var damagesVT:number[]=damagesV;
				for(var damagesVI:number=0;damagesVI<damagesVLen;++damagesVI)
				{
					var damagesVV:number;
					damagesVV=stream.readInt();
					
					damagesVT[damagesVI]=damagesVV;
				}
				
				damagesT[damagesI]=damagesV;
			}
			
			this.addBuffProbID=stream.readInt();
			
			var addBuffsLen:number=stream.readLen();
			this.addBuffs=new Array<DIntData>(addBuffsLen);
			var addBuffsT:DIntData[]=this.addBuffs;
			for(var addBuffsI:number=0;addBuffsI<addBuffsLen;++addBuffsI)
			{
				var addBuffsV:DIntData;
				addBuffsV=new DIntData();
				addBuffsV.readBytesSimple(stream);
				
				addBuffsT[addBuffsI]=addBuffsV;
			}
			
			var momentActionsLen:number=stream.readLen();
			this.momentActions=new Array<number[]>(momentActionsLen);
			var momentActionsT:number[][]=this.momentActions;
			for(var momentActionsI:number=0;momentActionsI<momentActionsLen;++momentActionsI)
			{
				var momentActionsV:number[];
				var momentActionsVLen:number=stream.readLen();
				momentActionsV=new Array<number>(momentActionsVLen);
				var momentActionsVT:number[]=momentActionsV;
				for(var momentActionsVI:number=0;momentActionsVI<momentActionsVLen;++momentActionsVI)
				{
					var momentActionsVV:number;
					momentActionsVV=stream.readInt();
					
					momentActionsVT[momentActionsVI]=momentActionsVV;
				}
				
				momentActionsT[momentActionsI]=momentActionsV;
			}
			
			this.spasticityValue=stream.readInt();
			
			this.attackBlowForce=stream.readInt();
			
			this.attackPushForce=stream.readInt();
			
			this.attackLiePushForce=stream.readInt();
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
