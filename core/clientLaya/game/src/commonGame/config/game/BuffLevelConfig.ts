namespace Shine
{
	/** buff等级表(generated by shine) */
	export class BuffLevelConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,BuffLevelConfig>;
		
		/** 攻击id */
		public id:number;
		
		/** 等级 */
		public level:number;
		
		/** 动作组 */
		public actions:number[][];
		
		/** 持续时间(ms) */
		public lastTime:number;
		
		/** 持续次数 */
		public lastNum:number;
		
		/** 到(时间/次数)动作组 */
		public overActions:number[][];
		
		/** 到叠加次数动作组(只有叠层的有意义) */
		public plusMaxActions:number[][];
		
		/** 获取 */
		public static get(id:number,level:number):BuffLevelConfig
		{
			return this._dic.get(id * 65536 + level);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,BuffLevelConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,BuffLevelConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,BuffLevelConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.level=stream.readShort();
			
			var actionsLen:number=stream.readLen();
			this.actions=new Array<number[]>(actionsLen);
			var actionsT:number[][]=this.actions;
			for(var actionsI:number=0;actionsI<actionsLen;++actionsI)
			{
				var actionsV:number[];
				var actionsVLen:number=stream.readLen();
				actionsV=new Array<number>(actionsVLen);
				var actionsVT:number[]=actionsV;
				for(var actionsVI:number=0;actionsVI<actionsVLen;++actionsVI)
				{
					var actionsVV:number;
					actionsVV=stream.readInt();
					
					actionsVT[actionsVI]=actionsVV;
				}
				
				actionsT[actionsI]=actionsV;
			}
			
			this.lastTime=stream.readInt();
			
			this.lastNum=stream.readShort();
			
			var overActionsLen:number=stream.readLen();
			this.overActions=new Array<number[]>(overActionsLen);
			var overActionsT:number[][]=this.overActions;
			for(var overActionsI:number=0;overActionsI<overActionsLen;++overActionsI)
			{
				var overActionsV:number[];
				var overActionsVLen:number=stream.readLen();
				overActionsV=new Array<number>(overActionsVLen);
				var overActionsVT:number[]=overActionsV;
				for(var overActionsVI:number=0;overActionsVI<overActionsVLen;++overActionsVI)
				{
					var overActionsVV:number;
					overActionsVV=stream.readInt();
					
					overActionsVT[overActionsVI]=overActionsVV;
				}
				
				overActionsT[overActionsI]=overActionsV;
			}
			
			var plusMaxActionsLen:number=stream.readLen();
			this.plusMaxActions=new Array<number[]>(plusMaxActionsLen);
			var plusMaxActionsT:number[][]=this.plusMaxActions;
			for(var plusMaxActionsI:number=0;plusMaxActionsI<plusMaxActionsLen;++plusMaxActionsI)
			{
				var plusMaxActionsV:number[];
				var plusMaxActionsVLen:number=stream.readLen();
				plusMaxActionsV=new Array<number>(plusMaxActionsVLen);
				var plusMaxActionsVT:number[]=plusMaxActionsV;
				for(var plusMaxActionsVI:number=0;plusMaxActionsVI<plusMaxActionsVLen;++plusMaxActionsVI)
				{
					var plusMaxActionsVV:number;
					plusMaxActionsVV=stream.readInt();
					
					plusMaxActionsVT[plusMaxActionsVI]=plusMaxActionsVV;
				}
				
				plusMaxActionsT[plusMaxActionsI]=plusMaxActionsV;
			}
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
