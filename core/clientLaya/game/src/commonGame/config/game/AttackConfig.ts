namespace Shine
{
	/** 技能攻击表(generated by shine) */
	export class AttackConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,AttackConfig>;
		
		/** 攻击id */
		public id:number;
		
		/** 影响类型 */
		public influenceType:number[];
		
		/** 是否跳过伤害阶段 */
		public passDamage:boolean;
		
		/** 是否可暴击 */
		public canCrit:boolean;
		
		/** 是否可闪避 */
		public canDodge:boolean;
		
		/** 是否可反伤 */
		public canReDamage:boolean;
		
		/** 所在攻击组 */
		public groups:number[];
		
		/** 击杀显示方式 */
		public killShowType:number;
		
		/** 攻击特效 */
		public attackEffect:number;
		
		/** 攻击地面特效 */
		public attackGroundEffect:number;
		
		/** 击中特效 */
		public hitEffect:number;
		
		/** 攻击重量(定帧系数) */
		public attackWeight:number;
		
		/** 是否击中浮空 */
		public canAttackBlow:boolean;
		
		/** 是否击中倒地 */
		public canAttackDown:boolean;
		
		/** 是否可攻击倒地目标 */
		public canAttackLie:boolean;
		
		/** 获取 */
		public static get(id:number):AttackConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,AttackConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,AttackConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,AttackConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			var influenceTypeLen:number=stream.readLen();
			this.influenceType=new Array<number>(influenceTypeLen);
			var influenceTypeT:number[]=this.influenceType;
			for(var influenceTypeI:number=0;influenceTypeI<influenceTypeLen;++influenceTypeI)
			{
				var influenceTypeV:number;
				influenceTypeV=stream.readInt();
				
				influenceTypeT[influenceTypeI]=influenceTypeV;
			}
			
			this.passDamage=stream.readBoolean();
			
			this.canCrit=stream.readBoolean();
			
			this.canDodge=stream.readBoolean();
			
			this.canReDamage=stream.readBoolean();
			
			var groupsLen:number=stream.readLen();
			this.groups=new Array<number>(groupsLen);
			var groupsT:number[]=this.groups;
			for(var groupsI:number=0;groupsI<groupsLen;++groupsI)
			{
				var groupsV:number;
				groupsV=stream.readInt();
				
				groupsT[groupsI]=groupsV;
			}
			
			this.killShowType=stream.readInt();
			
			this.attackEffect=stream.readInt();
			
			this.attackGroundEffect=stream.readInt();
			
			this.hitEffect=stream.readInt();
			
			this.attackWeight=stream.readInt();
			
			this.canAttackBlow=stream.readBoolean();
			
			this.canAttackDown=stream.readBoolean();
			
			this.canAttackLie=stream.readBoolean();
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
