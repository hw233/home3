namespace Shine
{
	/** 聊天频道表(generated by shine) */
	export class ChatChannelConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:ChatChannelConfig[];
		
		/** id */
		public id:number;
		
		/** 发言cd(ms) */
		public cd:number;
		
		/** 使用条件 */
		public useConditions:number[][];
		
		/** 发言开销 */
		public costID:number;
		
		/** 保留时间(小时) */
		public keepHour:number;
		
		/** 保留数目 */
		public keepNum:number;
		
		/** 是否可离线接收 */
		public offlineReceive:boolean;
		
		/** 是否为多实例 */
		public isMulti:boolean;
		
		/** 获取 */
		public static get(id:number):ChatChannelConfig
		{
			return id>=0 && id<this._dic.length ? this._dic[id] : null;
		}
		
		/** 设置字典 */
		public static setDic(dic:ChatChannelConfig[]):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:ChatChannelConfig[]):void
		{
			ObjectUtils.arrayPutAll(this._dic,dic);
		}
		
		/** 获取全部 */
		public static getDic():ChatChannelConfig[]
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.cd=stream.readInt();
			
			var useConditionsLen:number=stream.readLen();
			this.useConditions=new Array<number[]>(useConditionsLen);
			var useConditionsT:number[][]=this.useConditions;
			for(var useConditionsI:number=0;useConditionsI<useConditionsLen;++useConditionsI)
			{
				var useConditionsV:number[];
				var useConditionsVLen:number=stream.readLen();
				useConditionsV=new Array<number>(useConditionsVLen);
				var useConditionsVT:number[]=useConditionsV;
				for(var useConditionsVI:number=0;useConditionsVI<useConditionsVLen;++useConditionsVI)
				{
					var useConditionsVV:number;
					useConditionsVV=stream.readInt();
					
					useConditionsVT[useConditionsVI]=useConditionsVV;
				}
				
				useConditionsT[useConditionsI]=useConditionsV;
			}
			
			this.costID=stream.readInt();
			
			this.keepHour=stream.readInt();
			
			this.keepNum=stream.readInt();
			
			this.offlineReceive=stream.readBoolean();
			
			this.isMulti=stream.readBoolean();
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
