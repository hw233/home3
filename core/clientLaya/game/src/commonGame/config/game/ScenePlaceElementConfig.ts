namespace Shine
{
	/** 场景布置元素表(编辑器对应)(generated by shine) */
	export class ScenePlaceElementConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,ScenePlaceElementConfig>;
		
		/** 场景ID */
		public sceneID:number;
		
		/** 实例ID */
		public instanceID:number;
		
		/** 类型 */
		public type:number;
		
		/** 位置 */
		public pos:number[];
		
		/** id */
		public id:number;
		
		/** 等级 */
		public level:number;
		
		/** 势力 */
		public force:number;
		
		/** float参数组 */
		public fArgs:number[];
		
		/** int参数组 */
		public iArgs:number[];
		
		/** 是否初始化添加 */
		public isInitAdd:boolean;
		
		/** 获取 */
		public static get(sceneID:number,instanceID:number):ScenePlaceElementConfig
		{
			return this._dic.get(sceneID * 4294967296 + instanceID);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,ScenePlaceElementConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,ScenePlaceElementConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,ScenePlaceElementConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.sceneID=stream.readInt();
			
			this.instanceID=stream.readInt();
			
			this.type=stream.readInt();
			
			var posLen:number=stream.readLen();
			this.pos=new Array<number>(posLen);
			var posT:number[]=this.pos;
			for(var posI:number=0;posI<posLen;++posI)
			{
				var posV:number;
				posV=stream.readFloat();
				
				posT[posI]=posV;
			}
			
			this.id=stream.readInt();
			
			this.level=stream.readInt();
			
			this.force=stream.readInt();
			
			this.isInitAdd=stream.readBoolean();
			
			var iArgsLen:number=stream.readLen();
			this.iArgs=new Array<number>(iArgsLen);
			var iArgsT:number[]=this.iArgs;
			for(var iArgsI:number=0;iArgsI<iArgsLen;++iArgsI)
			{
				var iArgsV:number;
				iArgsV=stream.readInt();
				
				iArgsT[iArgsI]=iArgsV;
			}
			
			var fArgsLen:number=stream.readLen();
			this.fArgs=new Array<number>(fArgsLen);
			var fArgsT:number[]=this.fArgs;
			for(var fArgsI:number=0;fArgsI<fArgsLen;++fArgsI)
			{
				var fArgsV:number;
				fArgsV=stream.readFloat();
				
				fArgsT[fArgsI]=fArgsV;
			}
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
