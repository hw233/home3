namespace Shine
{
	/** 界面表(generated by shine) */
	export class UIConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,UIConfig>;
		
		/** 界面id */
		public id:number;
		
		/** 名字 */
		public name:string;
		
		/** 存在类型 */
		public existType:number;
		
		/** 包名 */
		public packageName:string;
		
		/** 层级 */
		public layer:number;
		
		/** 显示隐藏时刻 */
		public doMoments:boolean[];
		
		/** 是否模态 */
		public isModal:boolean;
		
		/** 模态颜色 */
		public modalColor:string;
		
		/** 绑定的功能id */
		public functionIDs:number[];
		
		/** 绑定的活动id */
		public activityIDs:number[];
		
		/** 需要加载的资源包(已废弃)(资源转) */
		public loadResourcesT:number[];
		
		/** 获取 */
		public static get(id:number):UIConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,UIConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,UIConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,UIConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.name=stream.readUTF();
			
			this.existType=stream.readInt();
			
			this.packageName=stream.readUTF();
			
			this.layer=stream.readInt();
			
			var doMomentsLen:number=stream.readLen();
			this.doMoments=new Array<boolean>(doMomentsLen);
			var doMomentsT:boolean[]=this.doMoments;
			for(var doMomentsI:number=0;doMomentsI<doMomentsLen;++doMomentsI)
			{
				var doMomentsV:boolean;
				doMomentsV=stream.readBoolean();
				
				doMomentsT[doMomentsI]=doMomentsV;
			}
			
			this.isModal=stream.readBoolean();
			
			this.modalColor=stream.readUTF();
			
			var activityIDsLen:number=stream.readLen();
			this.activityIDs=new Array<number>(activityIDsLen);
			var activityIDsT:number[]=this.activityIDs;
			for(var activityIDsI:number=0;activityIDsI<activityIDsLen;++activityIDsI)
			{
				var activityIDsV:number;
				activityIDsV=stream.readInt();
				
				activityIDsT[activityIDsI]=activityIDsV;
			}
			
			var functionIDsLen:number=stream.readLen();
			this.functionIDs=new Array<number>(functionIDsLen);
			var functionIDsT:number[]=this.functionIDs;
			for(var functionIDsI:number=0;functionIDsI<functionIDsLen;++functionIDsI)
			{
				var functionIDsV:number;
				functionIDsV=stream.readInt();
				
				functionIDsT[functionIDsI]=functionIDsV;
			}
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
