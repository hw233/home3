namespace Shine
{
	/** 道具表(generated by shine) */
	export class ItemConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,ItemConfig>;
		
		/** 道具id */
		public id:number;
		
		/** 名字 */
		public name:string;
		
		/** 类型 */
		public type:number;
		
		/** 第二类型 */
		public secondType:number;
		
		/** 单组叠加上限 */
		public singlePlusMax:number;
		
		/** 背包容纳上限 */
		public totalPlusMax:number;
		
		/** 物品等级(基础) */
		public itemLevel:number;
		
		/** 使用限制等级 */
		public limitLevel:number;
		
		/** 使用限制职业组 */
		public limitVocations:number[];
		
		/** 是否获得绑定  */
		public bindByGet:boolean;
		
		/** 是否使用绑定  */
		public bindByUse:boolean;
		
		/** 是否可交易(拍卖行,面交) */
		public canTrade:boolean;
		
		/** 出售价格(npc卖店)(基础) */
		public sellPrice:number;
		
		/** 是否新获得时出现红点 */
		public needRedPoint:boolean;
		
		/** 整理序 */
		public sortIndex:number;
		
		/** 掉落物品模型ID */
		public fieldItemModelID:number;
		
		/** 图标 */
		public icon:string;
		
		/** 图标(资源转) */
		public iconT:number;
		
		/** 装备是否唯一(equip用) */
		public isUnique:boolean;
		
		/** 说明 */
		public explain:string;
		
		/** 有效时间 */
		public enableTime:string;
		
		/** 属性部分(equip用)(基础) */
		public baseAttributes:DIntData[];
		
		/** 装备功能(equip用) */
		public equipActions:number[][];
		
		/** 使用条件(equip/tool用) */
		public useConditions:number[][];
		
		/** 使用功能(tool用) */
		public useActions:number[][];
		
		/** 是否跳过进包阶段(直接使用,tool用) */
		public passEnterBag:boolean;
		
		/** 是否消耗数目(tool用) */
		public useCostItemNum:boolean;
		
		/** 读条ID */
		public progressBarID:number;
		
		/** 名字原值 */
		private _name:string;
		
		/** 说明原值 */
		private _explain:string;
		
		/** 有效时间(时间表达式) */
		public enableTimeT:TimeExpression;
		
		/** 获取 */
		public static get(id:number):ItemConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,ItemConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,ItemConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,ItemConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.name=stream.readUTF();
			
			this.type=stream.readInt();
			
			this.secondType=stream.readInt();
			
			this.singlePlusMax=stream.readInt();
			
			this.totalPlusMax=stream.readInt();
			
			this.itemLevel=stream.readInt();
			
			this.limitLevel=stream.readInt();
			
			var limitVocationsLen:number=stream.readLen();
			this.limitVocations=new Array<number>(limitVocationsLen);
			var limitVocationsT:number[]=this.limitVocations;
			for(var limitVocationsI:number=0;limitVocationsI<limitVocationsLen;++limitVocationsI)
			{
				var limitVocationsV:number;
				limitVocationsV=stream.readInt();
				
				limitVocationsT[limitVocationsI]=limitVocationsV;
			}
			
			this.bindByGet=stream.readBoolean();
			
			this.bindByUse=stream.readBoolean();
			
			this.canTrade=stream.readBoolean();
			
			this.sellPrice=stream.readInt();
			
			this.needRedPoint=stream.readBoolean();
			
			this.sortIndex=stream.readInt();
			
			this.icon=stream.readUTF();
			
			this.fieldItemModelID=stream.readInt();
			
			this.explain=stream.readUTF();
			
			this.enableTime=stream.readUTF();
			
			this.isUnique=stream.readBoolean();
			
			var baseAttributesLen:number=stream.readLen();
			this.baseAttributes=new Array<DIntData>(baseAttributesLen);
			var baseAttributesT:DIntData[]=this.baseAttributes;
			for(var baseAttributesI:number=0;baseAttributesI<baseAttributesLen;++baseAttributesI)
			{
				var baseAttributesV:DIntData;
				baseAttributesV=new DIntData();
				baseAttributesV.readBytesSimple(stream);
				
				baseAttributesT[baseAttributesI]=baseAttributesV;
			}
			
			var equipActionsLen:number=stream.readLen();
			this.equipActions=new Array<number[]>(equipActionsLen);
			var equipActionsT:number[][]=this.equipActions;
			for(var equipActionsI:number=0;equipActionsI<equipActionsLen;++equipActionsI)
			{
				var equipActionsV:number[];
				var equipActionsVLen:number=stream.readLen();
				equipActionsV=new Array<number>(equipActionsVLen);
				var equipActionsVT:number[]=equipActionsV;
				for(var equipActionsVI:number=0;equipActionsVI<equipActionsVLen;++equipActionsVI)
				{
					var equipActionsVV:number;
					equipActionsVV=stream.readInt();
					
					equipActionsVT[equipActionsVI]=equipActionsVV;
				}
				
				equipActionsT[equipActionsI]=equipActionsV;
			}
			
			var useConditionsLen:number=stream.readLen();
			this.useConditions=new Array<number[]>(useConditionsLen);
			var useConditionsT:number[][]=this.useConditions;
			for(var useConditionsI:number=0;useConditionsI<useConditionsLen;++useConditionsI)
			{
				var useConditionsV:number[];
				var useConditionsVLen:number=stream.readLen();
				useConditionsV=new Array<number>(useConditionsVLen);
				var useConditionsVT:number[]=useConditionsV;
				for(var useConditionsVI:number=0;useConditionsVI<useConditionsVLen;++useConditionsVI)
				{
					var useConditionsVV:number;
					useConditionsVV=stream.readInt();
					
					useConditionsVT[useConditionsVI]=useConditionsVV;
				}
				
				useConditionsT[useConditionsI]=useConditionsV;
			}
			
			var useActionsLen:number=stream.readLen();
			this.useActions=new Array<number[]>(useActionsLen);
			var useActionsT:number[][]=this.useActions;
			for(var useActionsI:number=0;useActionsI<useActionsLen;++useActionsI)
			{
				var useActionsV:number[];
				var useActionsVLen:number=stream.readLen();
				useActionsV=new Array<number>(useActionsVLen);
				var useActionsVT:number[]=useActionsV;
				for(var useActionsVI:number=0;useActionsVI<useActionsVLen;++useActionsVI)
				{
					var useActionsVV:number;
					useActionsVV=stream.readInt();
					
					useActionsVT[useActionsVI]=useActionsVV;
				}
				
				useActionsT[useActionsI]=useActionsV;
			}
			
			this.passEnterBag=stream.readBoolean();
			
			this.useCostItemNum=stream.readBoolean();
			
			this.progressBarID=stream.readInt();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			if(this._name==null)
				this._name=this.name;
			this.name=LanguageConfig.getText(this._name);
			
			if(this._explain==null)
				this._explain=this.explain;
			this.explain=LanguageConfig.getText(this._explain);
			
			this.enableTimeT=new TimeExpression(this.enableTime);
			
			this.iconT=LoadControl.getResourceIDByName(this.icon);
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
