namespace Shine
{
	/** 玩家群表(generated by shine) */
	export class RoleGroupConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,RoleGroupConfig>;
		
		/** id */
		public id:number;
		
		/** 每个玩家可入群数 */
		public eachPlayerGroupNum:number;
		
		/** 加入者给予职位 */
		public joinTitle:number;
		
		/** 默认名字 */
		public defaultName:string;
		
		/** 公告字符数限制 */
		public noticeCharLimit:number;
		
		/** 名字字符数限制 */
		public nameCharLimit:number;
		
		/** 默认公告 */
		public defaultNotice:string;
		
		/** 创建开销 */
		public createCostID:number;
		
		/** 创建条件 */
		public createConditions:number[][];
		
		/** 是否只是本服玩家群(不可与其他服角色同群) */
		public isOnlyLocalGame:boolean;
		
		/** 默认名字原值 */
		private _defaultName:string;
		
		/** 默认公告原值 */
		private _defaultNotice:string;
		
		/** 加入/邀请/申请条件 */
		public joinConditions:number[][];
		
		/** 初始化客户端时是否包含成员组 */
		public initClientContainsMembers:boolean;
		
		/** 邀请保留上限 */
		public inviteKeepMax:number;
		
		/** 申请时是否可直接入群(无需同意) */
		public defaultCanApplyInAbs:boolean;
		
		/** 邀请时是否可直接入群(无需同意) */
		public defaultCanInviteInAbs:boolean;
		
		/** 申请保留上限 */
		public applyKeepMax:number;
		
		/** 是否允许申请入群 */
		public canApply:boolean;
		
		/** 是否可以邀请直接创建 */
		public canInviteCreate:boolean;
		
		/** 邀请有效时间(s) */
		public inviteEnableTime:number;
		
		/** 是否需要简版信息列表 */
		public needSimpleList:boolean;
		
		/** 日志保留数目 */
		public infoLogKeepNum:number;
		
		/** 日志保留时间(day) */
		public infoLogKeepTime:number;
		
		/** 只剩一人时是否解散玩家群(剩两人时，一旦离开解散队伍) */
		public removeWithOnlyOne:boolean;
		
		/** 专属场景id */
		public ownSceneID:number;
		
		/** 是否实时更新角色社交数据 */
		public isUpdateRoleSocialAbs:boolean;
		
		/** 申请有效时间(s) */
		public applyEnableTime:number;
		
		/** 重复申请间隔时间(s) */
		public applyRepeatTime:number;
		
		/** 拒绝申请间隔时间(s) */
		public refuseApplyTime:number;
		
		/** 获取 */
		public static get(id:number):RoleGroupConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,RoleGroupConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,RoleGroupConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,RoleGroupConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.eachPlayerGroupNum=stream.readInt();
			
			this.joinTitle=stream.readInt();
			
			this.defaultName=stream.readUTF();
			
			this.defaultNotice=stream.readUTF();
			
			this.nameCharLimit=stream.readInt();
			
			this.noticeCharLimit=stream.readInt();
			
			this.createCostID=stream.readInt();
			
			var createConditionsLen:number=stream.readLen();
			this.createConditions=new Array<number[]>(createConditionsLen);
			var createConditionsT:number[][]=this.createConditions;
			for(var createConditionsI:number=0;createConditionsI<createConditionsLen;++createConditionsI)
			{
				var createConditionsV:number[];
				var createConditionsVLen:number=stream.readLen();
				createConditionsV=new Array<number>(createConditionsVLen);
				var createConditionsVT:number[]=createConditionsV;
				for(var createConditionsVI:number=0;createConditionsVI<createConditionsVLen;++createConditionsVI)
				{
					var createConditionsVV:number;
					createConditionsVV=stream.readInt();
					
					createConditionsVT[createConditionsVI]=createConditionsVV;
				}
				
				createConditionsT[createConditionsI]=createConditionsV;
			}
			
			var joinConditionsLen:number=stream.readLen();
			this.joinConditions=new Array<number[]>(joinConditionsLen);
			var joinConditionsT:number[][]=this.joinConditions;
			for(var joinConditionsI:number=0;joinConditionsI<joinConditionsLen;++joinConditionsI)
			{
				var joinConditionsV:number[];
				var joinConditionsVLen:number=stream.readLen();
				joinConditionsV=new Array<number>(joinConditionsVLen);
				var joinConditionsVT:number[]=joinConditionsV;
				for(var joinConditionsVI:number=0;joinConditionsVI<joinConditionsVLen;++joinConditionsVI)
				{
					var joinConditionsVV:number;
					joinConditionsVV=stream.readInt();
					
					joinConditionsVT[joinConditionsVI]=joinConditionsVV;
				}
				
				joinConditionsT[joinConditionsI]=joinConditionsV;
			}
			
			this.isOnlyLocalGame=stream.readBoolean();
			
			this.initClientContainsMembers=stream.readBoolean();
			
			this.inviteKeepMax=stream.readInt();
			
			this.applyKeepMax=stream.readInt();
			
			this.canApply=stream.readBoolean();
			
			this.canInviteCreate=stream.readBoolean();
			
			this.defaultCanInviteInAbs=stream.readBoolean();
			
			this.defaultCanApplyInAbs=stream.readBoolean();
			
			this.inviteEnableTime=stream.readInt();
			
			this.applyEnableTime=stream.readInt();
			
			this.applyRepeatTime=stream.readInt();
			
			this.refuseApplyTime=stream.readInt();
			
			this.removeWithOnlyOne=stream.readBoolean();
			
			this.needSimpleList=stream.readBoolean();
			
			this.infoLogKeepTime=stream.readInt();
			
			this.infoLogKeepNum=stream.readInt();
			
			this.ownSceneID=stream.readInt();
			
			this.isUpdateRoleSocialAbs=stream.readBoolean();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			if(this._defaultName==null)
				this._defaultName=this.defaultName;
			this.defaultName=LanguageConfig.getText(this._defaultName);
			
			if(this._defaultNotice==null)
				this._defaultNotice=this.defaultNotice;
			this.defaultNotice=LanguageConfig.getText(this._defaultNotice);
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
