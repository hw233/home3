namespace Shine
{
	/** 活动表(generated by shine) */
	export class ActivityConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,ActivityConfig>;
		
		/** 活动id */
		public id:number;
		
		/** 开启时间 */
		public startTime:string;
		
		/** 关闭时间 */
		public endTime:string;
		
		/** 重置时间 */
		public resetTime:string;
		
		/** 可视时间 */
		public canSeeTime:string;
		
		/** 取消可视时间 */
		public cantSeeTime:string;
		
		/** 参与条件 */
		public joinConditions:number[][];
		
		/** 参与次数 */
		public joinCount:number;
		
		/** 单次奖励 */
		public rewardOnce:number;
		
		/** 是否可客户端离线驱动(离线模式有意义) */
		public canClientOfflineDrive:boolean;
		
		/** 全部次数完成奖励 */
		public rewardComplete:number;
		
		/** 开启时间(时间表达式) */
		public startTimeT:TimeExpression;
		
		/** 关闭时间(时间表达式) */
		public endTimeT:TimeExpression;
		
		/** 重置时间(时间表达式) */
		public resetTimeT:TimeExpression;
		
		/** 可视时间(时间表达式) */
		public canSeeTimeT:TimeExpression;
		
		/** 取消可视时间(时间表达式) */
		public cantSeeTimeT:TimeExpression;
		
		/** 获取 */
		public static get(id:number):ActivityConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,ActivityConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,ActivityConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,ActivityConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readShort();
			
			this.startTime=stream.readUTF();
			
			this.endTime=stream.readUTF();
			
			this.resetTime=stream.readUTF();
			
			this.canSeeTime=stream.readUTF();
			
			this.cantSeeTime=stream.readUTF();
			
			var joinConditionsLen:number=stream.readLen();
			this.joinConditions=new Array<number[]>(joinConditionsLen);
			var joinConditionsT:number[][]=this.joinConditions;
			for(var joinConditionsI:number=0;joinConditionsI<joinConditionsLen;++joinConditionsI)
			{
				var joinConditionsV:number[];
				var joinConditionsVLen:number=stream.readLen();
				joinConditionsV=new Array<number>(joinConditionsVLen);
				var joinConditionsVT:number[]=joinConditionsV;
				for(var joinConditionsVI:number=0;joinConditionsVI<joinConditionsVLen;++joinConditionsVI)
				{
					var joinConditionsVV:number;
					joinConditionsVV=stream.readInt();
					
					joinConditionsVT[joinConditionsVI]=joinConditionsVV;
				}
				
				joinConditionsT[joinConditionsI]=joinConditionsV;
			}
			
			this.joinCount=stream.readInt();
			
			this.rewardOnce=stream.readInt();
			
			this.rewardComplete=stream.readInt();
			
			this.canClientOfflineDrive=stream.readBoolean();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			this.startTimeT=new TimeExpression(this.startTime);
			
			this.endTimeT=new TimeExpression(this.endTime);
			
			this.resetTimeT=new TimeExpression(this.resetTime);
			
			this.canSeeTimeT=new TimeExpression(this.canSeeTime);
			
			this.cantSeeTimeT=new TimeExpression(this.cantSeeTime);
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
