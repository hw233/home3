namespace Shine
{
	/** 任务表(generated by shine) */
	export class QuestConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,QuestConfig>;
		
		/** id */
		public id:number;
		
		/** 名字 */
		public name:string;
		
		/** 类型 */
		public type:number;
		
		/** 任务目标组执行方式 */
		public executeType:number;
		
		/** 任务目标组 */
		public tasks:number[];
		
		/** 重复类型 */
		public repeatType:number;
		
		/** 任务链 */
		public questLine:DIntData;
		
		/** 周期时间 */
		public cycleTime:string;
		
		/** 前置任务组 */
		public preQuests:number[];
		
		/** 接取条件 */
		public acceptConditions:number[][];
		
		/** 接取方式 */
		public acceptType:number;
		
		/** 接取npc */
		public acceptNPC:number;
		
		/** 提交方式 */
		public commitType:number;
		
		/** 提交npc */
		public commitNPC:number;
		
		/** 失败时间 */
		public failTime:string;
		
		/** 是否可放弃 */
		public canGiveUp:boolean;
		
		/** 周期任务失败后是否不可接取(在时间周期内) */
		public cantAcceptFailed:boolean;
		
		/** 奖励id */
		public rewardID:number;
		
		/** 任务描述 */
		public explain:string;
		
		/** 名字原值 */
		private _name:string;
		
		/** 任务描述原值 */
		private _explain:string;
		
		/** 周期时间(时间表达式) */
		public cycleTimeT:TimeExpression;
		
		/** 失败时间(时间表达式) */
		public failTimeT:TimeExpression;
		
		/** 后置任务组 */
		public afterQuests:SList<number>;
		
		/** 任务物品 */
		public questItem:DIntData[];
		
		/** 完成动作组 */
		public completeActions:number[][];
		
		/** 获取 */
		public static get(id:number):QuestConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,QuestConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,QuestConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,QuestConfig>
		{
			return this._dic;
		}
		
		/** 获取 */
		public static getConfig(id:number):QuestConfig
		{
			return this._dic.get(id);
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.name=stream.readUTF();
			
			this.type=stream.readInt();
			
			var tasksLen:number=stream.readLen();
			this.tasks=new Array<number>(tasksLen);
			var tasksT:number[]=this.tasks;
			for(var tasksI:number=0;tasksI<tasksLen;++tasksI)
			{
				var tasksV:number;
				tasksV=stream.readInt();
				
				tasksT[tasksI]=tasksV;
			}
			
			this.executeType=stream.readInt();
			
			this.repeatType=stream.readInt();
			
			this.questLine=new DIntData();
			this.questLine.readBytesSimple(stream);
			
			this.cycleTime=stream.readUTF();
			
			var preQuestsLen:number=stream.readLen();
			this.preQuests=new Array<number>(preQuestsLen);
			var preQuestsT:number[]=this.preQuests;
			for(var preQuestsI:number=0;preQuestsI<preQuestsLen;++preQuestsI)
			{
				var preQuestsV:number;
				preQuestsV=stream.readInt();
				
				preQuestsT[preQuestsI]=preQuestsV;
			}
			
			var acceptConditionsLen:number=stream.readLen();
			this.acceptConditions=new Array<number[]>(acceptConditionsLen);
			var acceptConditionsT:number[][]=this.acceptConditions;
			for(var acceptConditionsI:number=0;acceptConditionsI<acceptConditionsLen;++acceptConditionsI)
			{
				var acceptConditionsV:number[];
				var acceptConditionsVLen:number=stream.readLen();
				acceptConditionsV=new Array<number>(acceptConditionsVLen);
				var acceptConditionsVT:number[]=acceptConditionsV;
				for(var acceptConditionsVI:number=0;acceptConditionsVI<acceptConditionsVLen;++acceptConditionsVI)
				{
					var acceptConditionsVV:number;
					acceptConditionsVV=stream.readInt();
					
					acceptConditionsVT[acceptConditionsVI]=acceptConditionsVV;
				}
				
				acceptConditionsT[acceptConditionsI]=acceptConditionsV;
			}
			
			this.acceptType=stream.readInt();
			
			this.acceptNPC=stream.readInt();
			
			this.commitType=stream.readInt();
			
			this.commitNPC=stream.readInt();
			
			var questItemLen:number=stream.readLen();
			this.questItem=new Array<DIntData>(questItemLen);
			var questItemT:DIntData[]=this.questItem;
			for(var questItemI:number=0;questItemI<questItemLen;++questItemI)
			{
				var questItemV:DIntData;
				questItemV=new DIntData();
				questItemV.readBytesSimple(stream);
				
				questItemT[questItemI]=questItemV;
			}
			
			var completeActionsLen:number=stream.readLen();
			this.completeActions=new Array<number[]>(completeActionsLen);
			var completeActionsT:number[][]=this.completeActions;
			for(var completeActionsI:number=0;completeActionsI<completeActionsLen;++completeActionsI)
			{
				var completeActionsV:number[];
				var completeActionsVLen:number=stream.readLen();
				completeActionsV=new Array<number>(completeActionsVLen);
				var completeActionsVT:number[]=completeActionsV;
				for(var completeActionsVI:number=0;completeActionsVI<completeActionsVLen;++completeActionsVI)
				{
					var completeActionsVV:number;
					completeActionsVV=stream.readInt();
					
					completeActionsVT[completeActionsVI]=completeActionsVV;
				}
				
				completeActionsT[completeActionsI]=completeActionsV;
			}
			
			this.failTime=stream.readUTF();
			
			this.canGiveUp=stream.readBoolean();
			
			this.cantAcceptFailed=stream.readBoolean();
			
			this.rewardID=stream.readInt();
			
			this.explain=stream.readUTF();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			if(this._name==null)
				this._name=this.name;
			this.name=LanguageConfig.getText(this._name);
			
			if(this._explain==null)
				this._explain=this.explain;
			this.explain=LanguageConfig.getText(this._explain);
			
			this.cycleTimeT=new TimeExpression(this.cycleTime);
			
			this.failTimeT=new TimeExpression(this.failTime);
			
		}
		
		/** 读完表后处理 */
		protected afterReadConfig():void
		{
			super.afterReadConfig();

			this.afterQuests=new SList<number>();
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			if(this._dic==null)
				return;

			var values:QuestConfig[];
			var v:QuestConfig;
			var v2:QuestConfig;

			for(var i:number=(values=this._dic.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//可主动接
					if(v.acceptType!=QuestAcceptType.Passive)
					{
						 v.preQuests.forEach(v3 => 
						 {
							//只能以单次任务作为前置
							if((v2=this._dic.get(v3)).repeatType!=QuestRepeatType.Once)
							{
								Ctrl.throwError("只能以单次任务作为前置");
								return;
							}

							v2.afterQuests.add(v.id);
						});
					}
				}
			}
		}
		
	}
}
