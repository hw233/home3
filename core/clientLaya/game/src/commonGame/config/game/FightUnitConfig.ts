namespace Shine
{
	/** 战斗单位表(generated by shine) */
	export class FightUnitConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,FightUnitConfig>;
		
		/** id */
		public id:number;
		
		/** 攻击距离类型 */
		public attackRange:number;
		
		/** 模型ID */
		public modelID:number;
		
		/** 特效ID */
		public effectID:number;
		
		/** 所属职业 */
		public vocation:number;
		
		/** 复活等待时间(ms) */
		public reviveWaitTime:number;
		
		/** 死亡保留时间(ms) */
		public deathKeepTime:number;
		
		/** 复活方式 */
		public reviveType:number;
		
		/** 是否在待机状态下游荡 */
		public isWanderOnIdle:boolean;
		
		/** 默认AI模式 */
		public defaultAIMode:number;
		
		/** 默认AI指令 */
		public defaultAICommand:number;
		
		/** 主动攻击半径 */
		public initiativeAttackRadius:number;
		
		/** 最大追击半径 */
		public maxPursueRadius:number;
		
		/** 被动攻击半径 */
		public passiveAttackRadius:number;
		
		/** 可攻击目标类型 */
		public attackInfluenceType:number[];
		
		/** 获取 */
		public static get(id:number):FightUnitConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,FightUnitConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,FightUnitConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,FightUnitConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.attackRange=stream.readInt();
			
			this.modelID=stream.readInt();
			
			this.effectID=stream.readInt();
			
			this.vocation=stream.readInt();
			
			this.deathKeepTime=stream.readInt();
			
			this.reviveWaitTime=stream.readInt();
			
			this.reviveType=stream.readInt();
			
			this.isWanderOnIdle=stream.readBoolean();
			
			this.defaultAIMode=stream.readInt();
			
			this.defaultAICommand=stream.readInt();
			
			this.initiativeAttackRadius=stream.readFloat();
			
			this.passiveAttackRadius=stream.readFloat();
			
			this.maxPursueRadius=stream.readFloat();
			
			var attackInfluenceTypeLen:number=stream.readLen();
			this.attackInfluenceType=new Array<number>(attackInfluenceTypeLen);
			var attackInfluenceTypeT:number[]=this.attackInfluenceType;
			for(var attackInfluenceTypeI:number=0;attackInfluenceTypeI<attackInfluenceTypeLen;++attackInfluenceTypeI)
			{
				var attackInfluenceTypeV:number;
				attackInfluenceTypeV=stream.readInt();
				
				attackInfluenceTypeT[attackInfluenceTypeI]=attackInfluenceTypeV;
			}
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
