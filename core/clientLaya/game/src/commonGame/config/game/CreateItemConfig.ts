namespace Shine
{
	/** 创建单个物品配置(不包含数量)(generated by shine) */
	export class CreateItemConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,CreateItemConfig>;
		
		/** id */
		public id:number;
		
		/** 道具id(基础) */
		public itemID:number;
		
		/** 是否绑定(或拾取后绑定) */
		public isBind:boolean;
		
		/** 参数组(dint数组) */
		public dintArgs:DIntData[];
		
		/** 获取 */
		public static get(id:number):CreateItemConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,CreateItemConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,CreateItemConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,CreateItemConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.itemID=stream.readInt();
			
			this.isBind=stream.readBoolean();
			
			var dintArgsLen:number=stream.readLen();
			this.dintArgs=new Array<DIntData>(dintArgsLen);
			var dintArgsT:DIntData[]=this.dintArgs;
			for(var dintArgsI:number=0;dintArgsI<dintArgsLen;++dintArgsI)
			{
				var dintArgsV:DIntData;
				dintArgsV=new DIntData();
				dintArgsV.readBytesSimple(stream);
				
				dintArgsT[dintArgsI]=dintArgsV;
			}
			
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
