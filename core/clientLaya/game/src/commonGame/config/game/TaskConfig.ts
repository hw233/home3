namespace Shine
{
	/** 任务目标表(generated by shine) */
	export class TaskConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,TaskConfig>;
		
		/** id */
		public id:number;
		
		/** 类型及参数 */
		public args:number[];
		
		/** 初始化完成数(默认为0) */
		public initNum:number;
		
		/** 需要完成数 */
		public needNum:number;
		
		/** 限制条件 */
		public conditions:number[][];
		
		/** 目标描述 */
		public explain:string;
		
		/** 目标描述原值 */
		private _explain:string;
		
		/** 类型(就是arg[0]) */
		public type:number;
		
		/** 获取 */
		public static get(id:number):TaskConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,TaskConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,TaskConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,TaskConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			var argsLen:number=stream.readLen();
			this.args=new Array<number>(argsLen);
			var argsT:number[]=this.args;
			for(var argsI:number=0;argsI<argsLen;++argsI)
			{
				var argsV:number;
				argsV=stream.readInt();
				
				argsT[argsI]=argsV;
			}
			
			this.needNum=stream.readInt();
			
			this.initNum=stream.readInt();
			
			var conditionsLen:number=stream.readLen();
			this.conditions=new Array<number[]>(conditionsLen);
			var conditionsT:number[][]=this.conditions;
			for(var conditionsI:number=0;conditionsI<conditionsLen;++conditionsI)
			{
				var conditionsV:number[];
				var conditionsVLen:number=stream.readLen();
				conditionsV=new Array<number>(conditionsVLen);
				var conditionsVT:number[]=conditionsV;
				for(var conditionsVI:number=0;conditionsVI<conditionsVLen;++conditionsVI)
				{
					var conditionsVV:number;
					conditionsVV=stream.readInt();
					
					conditionsVT[conditionsVI]=conditionsVV;
				}
				
				conditionsT[conditionsI]=conditionsV;
			}
			
			this.explain=stream.readUTF();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			if(this._explain==null)
				this._explain=this.explain;
			this.explain=LanguageConfig.getText(this._explain);
			
		}
		
		protected afterReadConfig():void
		{
			super.afterReadConfig();
	
			this.type=this.args[0];
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
