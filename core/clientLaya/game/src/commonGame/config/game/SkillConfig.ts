namespace Shine
{
	/** 技能表(generated by shine) */
	export class SkillConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,SkillConfig>;
		
		/** 技能id */
		public id:number;
		
		/** 名字 */
		public name:string;
		
		/** 技能描述 */
		public explain:string;
		
		/** 等级上限 */
		public levelMax:number;
		
		/** 释放方式 */
		public useType:number;
		
		/** 攻击方式 */
		public attackType:number;
		
		/** 是否可移动施法 */
		public canMove:boolean;
		
		/** 目标类型 */
		public targetType:number;
		
		/** 目标影响类型 */
		public influenceType:number[];
		
		/** 所属组号 */
		public groups:number[];
		
		/** 所在冷却组 */
		public underGroupCDs:number[];
		
		/** 限制释放冷却组ID */
		public inGroupCD:number;
		
		/** 可强制技能组 */
		public canCancelSkillGroups:number[];
		
		/** AI使用优先级 */
		public aiPriority:number;
		
		/** 释放条件组 */
		public useConditions:number[][];
		
		/** 图标 */
		public icon:string;
		
		/** 图标(资源转) */
		public iconT:number;
		
		/** 名字原值 */
		private _name:string;
		
		/** 技能描述原值 */
		private _explain:string;
		
		/** 获取 */
		public static get(id:number):SkillConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,SkillConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,SkillConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,SkillConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			this.name=stream.readUTF();
			
			this.explain=stream.readUTF();
			
			this.levelMax=stream.readInt();
			
			this.useType=stream.readInt();
			
			this.attackType=stream.readInt();
			
			this.canMove=stream.readBoolean();
			
			this.targetType=stream.readInt();
			
			var influenceTypeLen:number=stream.readLen();
			this.influenceType=new Array<number>(influenceTypeLen);
			var influenceTypeT:number[]=this.influenceType;
			for(var influenceTypeI:number=0;influenceTypeI<influenceTypeLen;++influenceTypeI)
			{
				var influenceTypeV:number;
				influenceTypeV=stream.readInt();
				
				influenceTypeT[influenceTypeI]=influenceTypeV;
			}
			
			var groupsLen:number=stream.readLen();
			this.groups=new Array<number>(groupsLen);
			var groupsT:number[]=this.groups;
			for(var groupsI:number=0;groupsI<groupsLen;++groupsI)
			{
				var groupsV:number;
				groupsV=stream.readInt();
				
				groupsT[groupsI]=groupsV;
			}
			
			var underGroupCDsLen:number=stream.readLen();
			this.underGroupCDs=new Array<number>(underGroupCDsLen);
			var underGroupCDsT:number[]=this.underGroupCDs;
			for(var underGroupCDsI:number=0;underGroupCDsI<underGroupCDsLen;++underGroupCDsI)
			{
				var underGroupCDsV:number;
				underGroupCDsV=stream.readInt();
				
				underGroupCDsT[underGroupCDsI]=underGroupCDsV;
			}
			
			this.inGroupCD=stream.readInt();
			
			var canCancelSkillGroupsLen:number=stream.readLen();
			this.canCancelSkillGroups=new Array<number>(canCancelSkillGroupsLen);
			var canCancelSkillGroupsT:number[]=this.canCancelSkillGroups;
			for(var canCancelSkillGroupsI:number=0;canCancelSkillGroupsI<canCancelSkillGroupsLen;++canCancelSkillGroupsI)
			{
				var canCancelSkillGroupsV:number;
				canCancelSkillGroupsV=stream.readInt();
				
				canCancelSkillGroupsT[canCancelSkillGroupsI]=canCancelSkillGroupsV;
			}
			
			this.aiPriority=stream.readInt();
			
			var useConditionsLen:number=stream.readLen();
			this.useConditions=new Array<number[]>(useConditionsLen);
			var useConditionsT:number[][]=this.useConditions;
			for(var useConditionsI:number=0;useConditionsI<useConditionsLen;++useConditionsI)
			{
				var useConditionsV:number[];
				var useConditionsVLen:number=stream.readLen();
				useConditionsV=new Array<number>(useConditionsVLen);
				var useConditionsVT:number[]=useConditionsV;
				for(var useConditionsVI:number=0;useConditionsVI<useConditionsVLen;++useConditionsVI)
				{
					var useConditionsVV:number;
					useConditionsVV=stream.readInt();
					
					useConditionsVT[useConditionsVI]=useConditionsVV;
				}
				
				useConditionsT[useConditionsI]=useConditionsV;
			}
			
			this.icon=stream.readUTF();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			if(this._name==null)
				this._name=this.name;
			this.name=LanguageConfig.getText(this._name);
			
			if(this._explain==null)
				this._explain=this.explain;
			this.explain=LanguageConfig.getText(this._explain);
			
			this.iconT=LoadControl.getResourceIDByName(this.icon);
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
