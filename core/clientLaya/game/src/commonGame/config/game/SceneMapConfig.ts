namespace Shine
{
	/** 场景地图表(generated by shine) */
	export class SceneMapConfig extends BaseConfig
	{
		/** 存储集合 */
		private static _dic:SMap<number,SceneMapConfig>;
		
		/** id */
		public id:number;
		
		/** 原点 */
		public origin:number[];
		
		/** 尺寸 */
		public size:number[];
		
		/** 资源 */
		public source:string;
		
		/** 资源(资源转) */
		public sourceT:number;
		
		/** 附加资源列表 */
		public sourceExList:string[];
		
		/** 附加资源列表(资源转) */
		public sourceExListT:number[];
		
		/** 背景音乐 */
		public music:string;
		
		/** 背景音乐(资源转) */
		public musicT:number;
		
		/** 获取 */
		public static get(id:number):SceneMapConfig
		{
			return this._dic.get(id);
		}
		
		/** 设置字典 */
		public static setDic(dic:SMap<number,SceneMapConfig>):void
		{
			this._dic=dic;
		}
		
		/** 添加字典(热更用) */
		public static addDic(dic:SMap<number,SceneMapConfig>):void
		{
			this._dic.putAll(dic);
		}
		
		/** 获取全部 */
		public static getDic():SMap<number,SceneMapConfig>
		{
			return this._dic;
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			this.id=stream.readInt();
			
			var originLen:number=stream.readLen();
			this.origin=new Array<number>(originLen);
			var originT:number[]=this.origin;
			for(var originI:number=0;originI<originLen;++originI)
			{
				var originV:number;
				originV=stream.readInt();
				
				originT[originI]=originV;
			}
			
			var sizeLen:number=stream.readLen();
			this.size=new Array<number>(sizeLen);
			var sizeT:number[]=this.size;
			for(var sizeI:number=0;sizeI<sizeLen;++sizeI)
			{
				var sizeV:number;
				sizeV=stream.readInt();
				
				sizeT[sizeI]=sizeV;
			}
			
			this.source=stream.readUTF();
			
			var sourceExListLen:number=stream.readLen();
			this.sourceExList=new Array<string>(sourceExListLen);
			var sourceExListT:string[]=this.sourceExList;
			for(var sourceExListI:number=0;sourceExListI<sourceExListLen;++sourceExListI)
			{
				var sourceExListV:string;
				sourceExListV=stream.readUTF();
				
				sourceExListT[sourceExListI]=sourceExListV;
			}
			
			this.music=stream.readUTF();
			
		}
		
		/** 生成刷新配置 */
		protected generateRefresh():void
		{
			this.sourceExListT=LoadControl.getResourceIDsByNames(this.sourceExList);
			this.sourceT=LoadControl.getResourceIDByName(this.source);
			this.musicT=LoadControl.getResourceIDByName(this.music);
		}
		
		/** 读完所有表后处理 */
		public static afterReadConfigAll():void
		{
			
		}
		
	}
}
