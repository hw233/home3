namespace Shine
{
	/** 玩家数据主体(generated by shine) */
	export class Player extends SEventRegister implements ILogicEntity
	{
		protected _list:PlayerBasePart[];
		
		/** 背包 */
		public bag:BagPart;
		
		/** 邮件 */
		public mail:MailPart;
		
		/** 任务 */
		public quest:QuestPart;
		
		/** 引导 */
		public guide:GuidePart;
		
		/** 装备 */
		public equip:EquipPart;
		
		/** 好友 */
		public friend:FriendPart;
		
		/** 组队 */
		public team:TeamPart;
		
		/** 工会 */
		public union:UnionPart;
		
		/** 成就 */
		public achievement:AchievementPart;
		
		/** 系统 */
		public system:SystemPart;
		
		/** 通用功能 */
		public func:FuncPart;
		
		/** 活动 */
		public activity:ActivityPart;
		
		/** 玩家 */
		public role:RolePart;
		
		/** 场景 */
		public scene:ScenePart;
		
		/** 角色 */
		public character:CharacterPart;
		
		/** 社交 */
		public social:SocialPart;
		
		constructor()
		{
			super();
		}
		
		/** 注册部件 */
		protected registParts():void
		{
			this._list=new Array<PlayerBasePart>(16);
			var i:number=0;
			
			this.system=new SystemPart();
			this.system.setMe(this);
			this._list[i++]=this.system;
			
			this.func=new FuncPart();
			this.func.setMe(this);
			this._list[i++]=this.func;
			
			this.activity=new ActivityPart();
			this.activity.setMe(this);
			this._list[i++]=this.activity;
			
			this.role=new RolePart();
			this.role.setMe(this);
			this._list[i++]=this.role;
			
			this.scene=new ScenePart();
			this.scene.setMe(this);
			this._list[i++]=this.scene;
			
			this.character=new CharacterPart();
			this.character.setMe(this);
			this._list[i++]=this.character;
			
			this.social=new SocialPart();
			this.social.setMe(this);
			this._list[i++]=this.social;
			
			this.bag=new BagPart();
			this.bag.setMe(this);
			this._list[i++]=this.bag;
			
			this.mail=new MailPart();
			this.mail.setMe(this);
			this._list[i++]=this.mail;
			
			this.quest=new QuestPart();
			this.quest.setMe(this);
			this._list[i++]=this.quest;
			
			this.guide=new GuidePart();
			this.guide.setMe(this);
			this._list[i++]=this.guide;
			
			this.friend=new FriendPart();
			this.friend.setMe(this);
			this._list[i++]=this.friend;
			
			this.equip=new EquipPart();
			this.equip.setMe(this);
			this._list[i++]=this.equip;
			
			this.team=new TeamPart();
			this.team.setMe(this);
			this._list[i++]=this.team;
			
			this.union=new UnionPart();
			this.union.setMe(this);
			this._list[i++]=this.union;
			
			this.achievement=new AchievementPart();
			this.achievement.setMe(this);
			this._list[i++]=this.achievement;
			
		}
		
		/** 创建列表数据 */
		public createListData():PlayerListData
		{
			return new PlayerListData();
		}
		
		/** 从列表数据读取 */
		public readListData(listData:PlayerListData):void
		{
			this.system.setData(listData.system);
			this.func.setData(listData.func);
			this.activity.setData(listData.activity);
			this.role.setData(listData.role);
			this.scene.setData(listData.scene);
			this.character.setData(listData.character);
			this.social.setData(listData.social);
			this.bag.setData(listData.bag);
			this.mail.setData(listData.mail);
			this.quest.setData(listData.quest);
			this.guide.setData(listData.guide);
			this.friend.setData(listData.friend);
			this.equip.setData(listData.equip);
			this.team.setData(listData.team);
			this.union.setData(listData.union);
			this.achievement.setData(listData.achievement);
		}
		
		/** 写列表数据(深拷) */
		public writeListData(listData:PlayerListData):void
		{
			listData.system=this.system.makePartData() as SystemPartData;
			listData.func=this.func.makePartData() as FuncPartData;
			listData.activity=this.activity.makePartData() as ActivityPartData;
			listData.role=this.role.makePartData() as RolePartData;
			listData.scene=this.scene.makePartData() as ScenePartData;
			listData.character=this.character.makePartData() as CharacterPartData;
			listData.social=this.social.makePartData() as SocialPartData;
			listData.bag=this.bag.makePartData() as BagPartData;
			listData.mail=this.mail.makePartData() as MailPartData;
			listData.quest=this.quest.makePartData() as QuestPartData;
			listData.guide=this.guide.makePartData() as GuidePartData;
			listData.friend=this.friend.makePartData() as FriendPartData;
			listData.equip=this.equip.makePartData() as EquipPartData;
			listData.team=this.team.makePartData() as TeamPartData;
			listData.union=this.union.makePartData() as UnionPartData;
			listData.achievement=this.achievement.makePartData() as AchievementPartData;
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			this.registParts();
	
			var list:PlayerBasePart[] =this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].construct();
			}
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].init();
			}
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].dispose();
			}
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].afterReadData();
			}
			
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].afterReadDataSecond();
			}
		}
		
		/** 登录前 */
		public beforeLogin():void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].beforeLogin();
			}
		}
		
		/** 每秒调用 */
		public onSecond(delay:number):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onSecond(delay);
			}
		}
		
		/** 每天调用(上线时如隔天也会调用,) */
		public onDaily():void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onDaily();
			}
		}
		
		/** 配置表更新后(配置替换) */
		public onReloadConfig():void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onReloadConfig();
			}
		}
		
		/** 发送服务器消息(目前没用这种方式) */
		public send(request:BaseRequest):void
		{
			if(request instanceof CenterRequest)
			{
				this.sendCenter(request as CenterRequest);
			}
			else
			{
				this.sendToGame(request);
			}
		}
		
		/** 推送中心服消息 */
		public sendCenter(request:CenterRequest):void
		{
			//构造一下
			request.preSend();
	
			var cr:CenterTransClientToGameRequest=CenterTransClientToGameRequest.createCenterTransClientToGame();
			cr.setData(request);
			this.sendToGame(cr);
		}
		
		/** 消息发到game */
		private sendToGame(request:BaseRequest):void
		{
			GameC.server.getSocket().send(request);
		}
		
		/** 抛错 */
		public onLevelUp(oldLevel:number):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onLevelUp(oldLevel);
			}
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onFunctionOpen(id);
			}
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onFunctionClose(id);
			}
		}
		
		/** 活动开启 */
		public onActivityOpen(id:number,atTime:boolean):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onActivityOpen(id,atTime);
			}
		}
		
		/** 活动关闭 */
		public onActivityClose(id:number,atTime:boolean):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onActivityClose(id,atTime);
			}
		}
		
		/** 活动重置 */
		public onActivityReset(id:number,atTime:boolean):void
		{
			var list:PlayerBasePart[]=this._list;
			for(var vI=0,vLen=list.length;vI<vLen;++vI)
			{
				list[vI].onActivityReset(id,atTime);
			}
		}
		
		public randomInt(range:number):number
		{
			if(CommonSetting.useOfflineGame)
			{
				return this.system.clientRandomInt(range);
			}
	
			return MathUtils.randomInt(range);
		}
		
		public randomProb(prob:number,max:number):boolean
		{
			if(CommonSetting.useOfflineGame)
			{
				return this.system.clientRandomProb(prob,max);
			}
	
			return MathUtils.randomProb(prob,max);
		}
		
		/** 随一整形(start<=value<end) */
		public randomRange(start:number,end:number):number
		{
			if(end<=start)
				return -1;
	
			return start+this.randomInt(end-start);
		}
		
		/** 随一整形(start<=value<=end)(包括结尾) */
		public randomRange2(start:number,end:number):number
		{
			return this.randomRange(start,end+1);
		}
		
		public getTimeMillis():number
		{
			return DateControl.getTimeMillis();
		}
		
		/** 警告日志 */
		public warnLog(...args:any[]):void
		{
			Ctrl.warnLog(args);
		}
		
		/** debug日志 */
		public debugLog(...args:any[]):void
		{
			Ctrl.debugLog(args);
		}
		
		/** 错误日志 */
		public errorLog(...args:any[]):void
		{
			Ctrl.errorLog(args);
		}
		
		public throwError(...args:any[]):void
		{
			Ctrl.throwError(args);
		}
		
	}
}
