namespace Shine
{
	/** 通用功能数据(generated by shine) */
	export class FuncPartData extends BaseData
	{
		/** 插件数据组(key1:funcToolType,key2:funcID) */
		public funcTools:SMap<number,SMap<number,FuncToolData>>;
		
		/** 数据类型ID */
		public static dataID:number=PlayerPartDataType.Func;
		
		constructor()
		{
			super();
			this._dataID=PlayerPartDataType.Func;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "FuncPartData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			if(stream.readBoolean())
			{
				var funcToolsLen:number=stream.readLen();
				if(this.funcTools!=null)
				{
					this.funcTools.clear();
					this.funcTools.ensureCapacity(funcToolsLen);
				}
				else
				{
					this.funcTools=new SMap<number,SMap<number,FuncToolData>>(funcToolsLen);
				}
				
				var funcToolsT:SMap<number,SMap<number,FuncToolData>>=this.funcTools;
				for(var funcToolsI:number=funcToolsLen-1;funcToolsI>=0;--funcToolsI)
				{
					var funcToolsK:number;
					var funcToolsV:SMap<number,FuncToolData>;
					funcToolsK=stream.readInt();
					
					if(stream.readBoolean())
					{
						var funcToolsVLen:number=stream.readLen();
						funcToolsV=new SMap<number,FuncToolData>(funcToolsVLen);
						var funcToolsVT:SMap<number,FuncToolData>=funcToolsV;
						for(var funcToolsVI:number=funcToolsVLen-1;funcToolsVI>=0;--funcToolsVI)
						{
							var funcToolsVK:number;
							var funcToolsVV:FuncToolData;
							funcToolsVK=stream.readInt();
							
							if(stream.readBoolean())
							{
								funcToolsVV=stream.readDataSimpleNotNull() as FuncToolData;
							}
							else
							{
								funcToolsVV=null;
							}
							
							funcToolsVT.put(funcToolsVK,funcToolsVV);
						}
					}
					else
					{
						funcToolsV=null;
					}
					
					funcToolsT.put(funcToolsK,funcToolsV);
				}
			}
			else
			{
				this.funcTools=null;
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			if(this.funcTools!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.funcTools.size());
				if(!this.funcTools.isEmpty())
				{
					for(var funcToolsK of this.funcTools.getKeys())
					{
						var funcToolsV:SMap<number,FuncToolData>=this.funcTools.get(funcToolsK);
						stream.writeInt(funcToolsK);
						
						if(funcToolsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeLen(funcToolsV.size());
							if(!funcToolsV.isEmpty())
							{
								for(var funcToolsVK of funcToolsV.getKeys())
								{
									var funcToolsVV:FuncToolData=funcToolsV.get(funcToolsVK);
									stream.writeInt(funcToolsVK);
									
									if(funcToolsVV!=null)
									{
										stream.writeBoolean(true);
										stream.writeDataSimpleNotNull(funcToolsVV);
									}
									else
									{
										stream.writeBoolean(false);
									}
									
								}
							}
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof FuncPartData))
				return;
			
			var mData:FuncPartData=data as FuncPartData;
			
			this.funcTools=mData.funcTools;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof FuncPartData))
				return;
			
			var mData:FuncPartData=data as FuncPartData;
			
			if(mData.funcTools!=null)
			{
				if(this.funcTools!=null)
				{
					this.funcTools.clear();
					this.funcTools.ensureCapacity(mData.funcTools.size());
				}
				else
				{
					this.funcTools=new SMap<number,SMap<number,FuncToolData>>(mData.funcTools.size());
				}
				
				var funcToolsT:SMap<number,SMap<number,FuncToolData>>=this.funcTools;
				if(!mData.funcTools.isEmpty())
				{
					for(var funcToolsK of mData.funcTools.getKeys())
					{
						var funcToolsV:SMap<number,FuncToolData>=mData.funcTools.get(funcToolsK);
						var funcToolsW:number;
						var funcToolsU:SMap<number,FuncToolData>;
						funcToolsW=funcToolsK;
						
						if(funcToolsV!=null)
						{
							funcToolsU=new SMap<number,FuncToolData>(funcToolsV.size());
							var funcToolsUT:SMap<number,FuncToolData>=funcToolsU;
							if(!funcToolsV.isEmpty())
							{
								for(var funcToolsUK of funcToolsV.getKeys())
								{
									var funcToolsUV:FuncToolData=funcToolsV.get(funcToolsUK);
									var funcToolsUW:number;
									var funcToolsUU:FuncToolData;
									funcToolsUW=funcToolsUK;
									
									if(funcToolsUV!=null)
									{
										funcToolsUU=funcToolsUV.clone() as FuncToolData;
									}
									else
									{
										funcToolsUU=null;
									}
									
									funcToolsUT.put(funcToolsUW,funcToolsUU);
								}
							}
						}
						else
						{
							funcToolsU=null;
						}
						
						funcToolsT.put(funcToolsW,funcToolsU);
					}
				}
			}
			else
			{
				this.funcTools=null;
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
		/** 读取字节流(完整版) */
		protected toReadBytesFull(stream:BytesReadStream):void
		{
			var position:number=BytesReadStream.getReadBytes(stream);
			
			if(stream.readBoolean())
			{
				var funcToolsLen:number=stream.readLen();
				if(this.funcTools!=null)
				{
					this.funcTools.clear();
					this.funcTools.ensureCapacity(funcToolsLen);
				}
				else
				{
					this.funcTools=new SMap<number,SMap<number,FuncToolData>>(funcToolsLen);
				}
				
				var funcToolsT:SMap<number,SMap<number,FuncToolData>>=this.funcTools;
				for(var funcToolsI:number=funcToolsLen-1;funcToolsI>=0;--funcToolsI)
				{
					var funcToolsK:number;
					var funcToolsV:SMap<number,FuncToolData>;
					funcToolsK=stream.readInt();
					
					if(stream.readBoolean())
					{
						var funcToolsVLen:number=stream.readLen();
						funcToolsV=new SMap<number,FuncToolData>(funcToolsVLen);
						var funcToolsVT:SMap<number,FuncToolData>=funcToolsV;
						for(var funcToolsVI:number=funcToolsVLen-1;funcToolsVI>=0;--funcToolsVI)
						{
							var funcToolsVK:number;
							var funcToolsVV:FuncToolData;
							funcToolsVK=stream.readInt();
							
							if(stream.readBoolean())
							{
								funcToolsVV=stream.readDataFullNotNull() as FuncToolData;
							}
							else
							{
								funcToolsVV=null;
							}
							
							funcToolsVT.put(funcToolsVK,funcToolsVV);
						}
					}
					else
					{
						funcToolsV=null;
					}
					
					funcToolsT.put(funcToolsK,funcToolsV);
				}
			}
			else
			{
				this.funcTools=null;
			}
			
			BytesReadStream.disReadBytes(stream,position);
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			if(this.funcTools!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.funcTools.size());
				if(!this.funcTools.isEmpty())
				{
					for(var funcToolsK of this.funcTools.getKeys())
					{
						var funcToolsV:SMap<number,FuncToolData>=this.funcTools.get(funcToolsK);
						stream.writeInt(funcToolsK);
						
						if(funcToolsV!=null)
						{
							stream.writeBoolean(true);
							stream.writeLen(funcToolsV.size());
							if(!funcToolsV.isEmpty())
							{
								for(var funcToolsVK of funcToolsV.getKeys())
								{
									var funcToolsVV:FuncToolData=funcToolsV.get(funcToolsVK);
									stream.writeInt(funcToolsVK);
									
									if(funcToolsVV!=null)
									{
										stream.writeBoolean(true);
										stream.writeDataFullNotNull(funcToolsVV);
									}
									else
									{
										stream.writeBoolean(false);
									}
									
								}
							}
						}
						else
						{
							stream.writeBoolean(false);
						}
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 是否数据一致 */
		protected toDataEquals(data:BaseData):boolean
		{
			var mData:FuncPartData=data as FuncPartData;
			if(mData.funcTools!=null)
			{
				if(this.funcTools==null)
					return false;
				if(this.funcTools.size()!=mData.funcTools.size())
					return false;
				var funcToolsR:SMap<number,SMap<number,FuncToolData>>=mData.funcTools;
				if(!this.funcTools.isEmpty())
				{
					for(var funcToolsK of this.funcTools.getKeys())
					{
						var funcToolsV:SMap<number,FuncToolData>=this.funcTools.get(funcToolsK);
						var funcToolsU:SMap<number,FuncToolData>=funcToolsR.get(funcToolsK);
						if(funcToolsU!=null)
						{
							if(funcToolsV==null)
								return false;
							if(funcToolsV.size()!=funcToolsU.size())
								return false;
							var funcToolsVR:SMap<number,FuncToolData>=funcToolsU;
							if(!funcToolsV.isEmpty())
							{
								for(var funcToolsVK of funcToolsV.getKeys())
								{
									var funcToolsVV:FuncToolData=funcToolsV.get(funcToolsVK);
									var funcToolsVU:FuncToolData=funcToolsVR.get(funcToolsVK);
									if(funcToolsVU!=null)
									{
										if(funcToolsVV==null)
											return false;
										if(!funcToolsVV.dataEquals(funcToolsVU))
											return false;
									}
									else
									{
										if(funcToolsVV!=null)
											return false;
									}
									
								}
							}
						}
						else
						{
							if(funcToolsV!=null)
								return false;
						}
						
					}
				}
			}
			else
			{
				if(this.funcTools!=null)
					return false;
			}
			
			return true;
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			writer.writeTabs();
			writer.sb.append("funcTools");
			writer.sb.append(':');
			writer.sb.append("Map<number,SMap<number,FuncToolData>>");
			if(this.funcTools!=null)
			{
				writer.sb.append('(');
				writer.sb.append(this.funcTools.size());
				writer.sb.append(')');
				writer.writeEnter();
				writer.writeLeftBrace();
				if(!this.funcTools.isEmpty())
				{
					for(var funcToolsK of this.funcTools.getKeys())
					{
						var funcToolsV:SMap<number,FuncToolData>=this.funcTools.get(funcToolsK);
						writer.writeTabs();
						writer.sb.append(funcToolsK);
						
						writer.sb.append(':');
						writer.sb.append("Map<number,FuncToolData>");
						if(funcToolsV!=null)
						{
							writer.sb.append('(');
							writer.sb.append(funcToolsV.size());
							writer.sb.append(')');
							writer.writeEnter();
							writer.writeLeftBrace();
							if(!funcToolsV.isEmpty())
							{
								for(var funcToolsVK of funcToolsV.getKeys())
								{
									var funcToolsVV:FuncToolData=funcToolsV.get(funcToolsVK);
									writer.writeTabs();
									writer.sb.append(funcToolsVK);
									
									writer.sb.append(':');
									if(funcToolsVV!=null)
									{
										funcToolsVV.writeDataString(writer);
									}
									else
									{
										writer.sb.append("FuncToolData=null");
									}
									
									writer.writeEnter();
								}
							}
							writer.writeRightBrace();
						}
						else
						{
							writer.sb.append("=null");
						}
						
						writer.writeEnter();
					}
				}
				writer.writeRightBrace();
			}
			else
			{
				writer.sb.append("=null");
			}
			
			writer.writeEnter();
		}
		
	}
}
