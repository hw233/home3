namespace Shine
{
	/** (generated by shine) */
	export class SystemPartData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=PlayerPartDataType.System;
		
		/** 版本数据 */
		public version:SaveVersionData;
		
		/** 服务器时间戳(毫秒) */
		public serverTime:number;
		
		/** 是否封号 */
		public isBlock:boolean;
		
		/** 流程步 */
		public flowStep:number;
		
		/** 保存数据 */
		public keepSave:KeepSaveData;
		
		/** 客户端随机种子 */
		public clientRandomSeeds:number[];
		
		/** 客户端随机种子序号 */
		public clientRandomSeedIndex:number;
		
		/** 客户端离线事务收到的客户端序号 */
		public clientOfflineWorkReceiveIndex:number;
		
		/** gm指令组(开发期有意义,已废弃) */
		public gmCommandSet:SSet<string>;
		
		/** 服务器出生码(每个新服生成一次) */
		public serverBornCode:number;
		
		/** 服务器开服时间戳(毫秒) */
		public serverStartTime:number;
		
		/** 下一个0点时刻 */
		public nextDailyTime:number;
		
		/** 游戏日志信息队列 */
		public logQueue:SList<InfoLogData>;
		
		/** GM类型 */
		public gmType:number;
		
		constructor()
		{
			super();
			this._dataID=PlayerPartDataType.System;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "SystemPartData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.version=stream.readDataSimpleNotNull() as SaveVersionData;
			
			this.serverTime=stream.readLong();
			
			this.isBlock=stream.readBoolean();
			
			this.flowStep=stream.readInt();
			
			this.keepSave=new KeepSaveData();
			this.keepSave.readBytesSimple(stream);
			
			if(stream.readBoolean())
			{
				var clientRandomSeedsLen:number=stream.readLen();
				this.clientRandomSeeds=new Array<number>(clientRandomSeedsLen);
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				for(var clientRandomSeedsI:number=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
				{
					var clientRandomSeedsV:number;
					clientRandomSeedsV=stream.readInt();
					
					clientRandomSeedsT[clientRandomSeedsI]=clientRandomSeedsV;
				}
			}
			else
			{
				this.clientRandomSeeds=null;
			}
			
			this.clientRandomSeedIndex=stream.readInt();
			
			this.clientOfflineWorkReceiveIndex=stream.readInt();
			
			if(stream.readBoolean())
			{
				var gmCommandSetLen:number=stream.readLen();
				if(this.gmCommandSet!=null)
				{
					this.gmCommandSet.clear();
					this.gmCommandSet.ensureCapacity(gmCommandSetLen);
				}
				else
				{
					this.gmCommandSet=new SSet<string>();
				}
				
				var gmCommandSetT:SSet<string>=this.gmCommandSet;
				for(var gmCommandSetI:number=gmCommandSetLen-1;gmCommandSetI>=0;--gmCommandSetI)
				{
					var gmCommandSetV:string;
					gmCommandSetV=stream.readUTF();
					
					gmCommandSetT.add(gmCommandSetV);
				}
			}
			else
			{
				this.gmCommandSet=null;
			}
			
			this.gmType=stream.readInt();
			
			this.serverBornCode=stream.readInt();
			
			this.serverStartTime=stream.readLong();
			
			var logQueueLen:number=stream.readLen();
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(logQueueLen);
			}
			else
			{
				this.logQueue=new SList<InfoLogData>();
			}
			
			var logQueueT:SList<InfoLogData>=this.logQueue;
			for(var logQueueI:number=logQueueLen-1;logQueueI>=0;--logQueueI)
			{
				var logQueueV:InfoLogData;
				logQueueV=stream.readDataSimpleNotNull() as InfoLogData;
				
				logQueueT.add(logQueueV);
			}
			
			this.nextDailyTime=stream.readLong();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeDataSimpleNotNull(this.version);
			
			stream.writeLong(this.serverTime);
			
			stream.writeBoolean(this.isBlock);
			
			stream.writeInt(this.flowStep);
			
			this.keepSave.writeBytesSimple(stream);
			
			if(this.clientRandomSeeds!=null)
			{
				stream.writeBoolean(true);
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				stream.writeLen(clientRandomSeedsT.length);
				for(var clientRandomSeedsVI=0,clientRandomSeedsVLen=clientRandomSeedsT.length;clientRandomSeedsVI<clientRandomSeedsVLen;++clientRandomSeedsVI)
				{
					var clientRandomSeedsV:number=clientRandomSeedsT[clientRandomSeedsVI];
					stream.writeInt(clientRandomSeedsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.clientRandomSeedIndex);
			
			stream.writeInt(this.clientOfflineWorkReceiveIndex);
			
			if(this.gmCommandSet!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.gmCommandSet.size());
				if(!this.gmCommandSet.isEmpty())
				{
					for(var gmCommandSetV of this.gmCommandSet.getKeys())
					{
						stream.writeUTF(gmCommandSetV);
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.gmType);
			
			stream.writeInt(this.serverBornCode);
			
			stream.writeLong(this.serverStartTime);
			
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				for(var logQueueVI=0,logQueueVLen=this.logQueue.length;logQueueVI<logQueueVLen;++logQueueVI)
				{
					var logQueueV:InfoLogData=this.logQueue[logQueueVI];
					stream.writeDataSimpleNotNull(logQueueV);
					
				}
			}
			
			stream.writeLong(this.nextDailyTime);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof SystemPartData))
				return;
			
			var mData:SystemPartData=data as SystemPartData;
			
			this.version=mData.version;
			this.serverTime=mData.serverTime;
			this.isBlock=mData.isBlock;
			this.flowStep=mData.flowStep;
			this.keepSave=mData.keepSave;
			this.clientRandomSeeds=mData.clientRandomSeeds;
			this.clientRandomSeedIndex=mData.clientRandomSeedIndex;
			this.clientOfflineWorkReceiveIndex=mData.clientOfflineWorkReceiveIndex;
			this.gmCommandSet=mData.gmCommandSet;
			this.gmType=mData.gmType;
			this.serverBornCode=mData.serverBornCode;
			this.serverStartTime=mData.serverStartTime;
			this.logQueue=mData.logQueue;
			this.nextDailyTime=mData.nextDailyTime;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof SystemPartData))
				return;
			
			var mData:SystemPartData=data as SystemPartData;
			
			this.version=mData.version.clone() as SaveVersionData;
			
			this.serverTime=mData.serverTime;
			
			this.isBlock=mData.isBlock;
			
			this.flowStep=mData.flowStep;
			
			this.keepSave=new KeepSaveData();
			this.keepSave.copy(mData.keepSave);
			
			if(mData.clientRandomSeeds!=null)
			{
				var clientRandomSeedsR:number[]=mData.clientRandomSeeds;
				var clientRandomSeedsLen:number=clientRandomSeedsR.length;
				this.clientRandomSeeds=new Array<number>(clientRandomSeedsLen);
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				for(var clientRandomSeedsI:number=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
				{
					var clientRandomSeedsV:number=clientRandomSeedsR[clientRandomSeedsI];
					var clientRandomSeedsU:number;
					clientRandomSeedsU=clientRandomSeedsV;
					
					clientRandomSeedsT[clientRandomSeedsI]=clientRandomSeedsU;
				}
			}
			else
			{
				this.clientRandomSeeds=null;
			}
			
			this.clientRandomSeedIndex=mData.clientRandomSeedIndex;
			
			this.clientOfflineWorkReceiveIndex=mData.clientOfflineWorkReceiveIndex;
			
			if(mData.gmCommandSet!=null)
			{
				if(this.gmCommandSet!=null)
				{
					this.gmCommandSet.clear();
					this.gmCommandSet.ensureCapacity(mData.gmCommandSet.size());
				}
				else
				{
					this.gmCommandSet=new SSet<string>();
				}
				
				var gmCommandSetT:SSet<string>=this.gmCommandSet;
				if(!mData.gmCommandSet.isEmpty())
				{
					for(var gmCommandSetV of mData.gmCommandSet.getKeys())
					{
						var gmCommandSetU:string;
						gmCommandSetU=gmCommandSetV;
						
						gmCommandSetT.add(gmCommandSetU);
					}
				}
			}
			else
			{
				this.gmCommandSet=null;
			}
			
			this.gmType=mData.gmType;
			
			this.serverBornCode=mData.serverBornCode;
			
			this.serverStartTime=mData.serverStartTime;
			
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(mData.logQueue.size());
			}
			else
			{
				this.logQueue=new SList<InfoLogData>();
			}
			
			var logQueueT:SList<InfoLogData>=this.logQueue;
			if(!mData.logQueue.isEmpty())
			{
				for(var logQueueVI=0,logQueueVLen=mData.logQueue.length;logQueueVI<logQueueVLen;++logQueueVI)
				{
					var logQueueV:InfoLogData=mData.logQueue[logQueueVI];
					var logQueueU:InfoLogData;
					logQueueU=logQueueV.clone() as InfoLogData;
					
					logQueueT.add(logQueueU);
				}
			}
			
			this.nextDailyTime=mData.nextDailyTime;
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.version=new SaveVersionData();
			this.version.initDefault();
			this.keepSave=new KeepSaveData();
			this.keepSave.initDefault();
			this.logQueue=new SList<InfoLogData>();
		}
		
		/** 读取字节流(完整版) */
		protected toReadBytesFull(stream:BytesReadStream):void
		{
			var position:number=BytesReadStream.getReadBytes(stream);
			
			this.version=stream.readDataFullNotNull() as SaveVersionData;
			
			this.serverTime=stream.readLong();
			
			this.isBlock=stream.readBoolean();
			
			this.flowStep=stream.readInt();
			
			this.keepSave=new KeepSaveData();
			this.keepSave.readBytesFull(stream);
			
			if(stream.readBoolean())
			{
				var clientRandomSeedsLen:number=stream.readLen();
				this.clientRandomSeeds=new Array<number>(clientRandomSeedsLen);
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				for(var clientRandomSeedsI:number=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
				{
					var clientRandomSeedsV:number;
					clientRandomSeedsV=stream.readInt();
					
					clientRandomSeedsT[clientRandomSeedsI]=clientRandomSeedsV;
				}
			}
			else
			{
				this.clientRandomSeeds=null;
			}
			
			this.clientRandomSeedIndex=stream.readInt();
			
			this.clientOfflineWorkReceiveIndex=stream.readInt();
			
			if(stream.readBoolean())
			{
				var gmCommandSetLen:number=stream.readLen();
				if(this.gmCommandSet!=null)
				{
					this.gmCommandSet.clear();
					this.gmCommandSet.ensureCapacity(gmCommandSetLen);
				}
				else
				{
					this.gmCommandSet=new SSet<string>();
				}
				
				var gmCommandSetT:SSet<string>=this.gmCommandSet;
				for(var gmCommandSetI:number=gmCommandSetLen-1;gmCommandSetI>=0;--gmCommandSetI)
				{
					var gmCommandSetV:string;
					gmCommandSetV=stream.readUTF();
					
					gmCommandSetT.add(gmCommandSetV);
				}
			}
			else
			{
				this.gmCommandSet=null;
			}
			
			this.gmType=stream.readInt();
			
			this.serverBornCode=stream.readInt();
			
			this.serverStartTime=stream.readLong();
			
			var logQueueLen:number=stream.readLen();
			if(this.logQueue!=null)
			{
				this.logQueue.clear();
				this.logQueue.ensureCapacity(logQueueLen);
			}
			else
			{
				this.logQueue=new SList<InfoLogData>();
			}
			
			var logQueueT:SList<InfoLogData>=this.logQueue;
			for(var logQueueI:number=logQueueLen-1;logQueueI>=0;--logQueueI)
			{
				var logQueueV:InfoLogData;
				logQueueV=stream.readDataFullNotNull() as InfoLogData;
				
				logQueueT.add(logQueueV);
			}
			
			this.nextDailyTime=stream.readLong();
			
			BytesReadStream.disReadBytes(stream,position);
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeDataFullNotNull(this.version);
			
			stream.writeLong(this.serverTime);
			
			stream.writeBoolean(this.isBlock);
			
			stream.writeInt(this.flowStep);
			
			this.keepSave.writeBytesFull(stream);
			
			if(this.clientRandomSeeds!=null)
			{
				stream.writeBoolean(true);
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				stream.writeLen(clientRandomSeedsT.length);
				for(var clientRandomSeedsVI=0,clientRandomSeedsVLen=clientRandomSeedsT.length;clientRandomSeedsVI<clientRandomSeedsVLen;++clientRandomSeedsVI)
				{
					var clientRandomSeedsV:number=clientRandomSeedsT[clientRandomSeedsVI];
					stream.writeInt(clientRandomSeedsV);
					
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.clientRandomSeedIndex);
			
			stream.writeInt(this.clientOfflineWorkReceiveIndex);
			
			if(this.gmCommandSet!=null)
			{
				stream.writeBoolean(true);
				stream.writeLen(this.gmCommandSet.size());
				if(!this.gmCommandSet.isEmpty())
				{
					for(var gmCommandSetV of this.gmCommandSet.getKeys())
					{
						stream.writeUTF(gmCommandSetV);
						
					}
				}
			}
			else
			{
				stream.writeBoolean(false);
			}
			
			stream.writeInt(this.gmType);
			
			stream.writeInt(this.serverBornCode);
			
			stream.writeLong(this.serverStartTime);
			
			stream.writeLen(this.logQueue.size());
			if(!this.logQueue.isEmpty())
			{
				for(var logQueueVI=0,logQueueVLen=this.logQueue.length;logQueueVI<logQueueVLen;++logQueueVI)
				{
					var logQueueV:InfoLogData=this.logQueue[logQueueVI];
					stream.writeDataFullNotNull(logQueueV);
					
				}
			}
			
			stream.writeLong(this.nextDailyTime);
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 是否数据一致 */
		protected toDataEquals(data:BaseData):boolean
		{
			var mData:SystemPartData=data as SystemPartData;
			if(this.version==null)
				return false;
			if(!this.version.dataEquals(mData.version))
				return false;
			
			if(this.serverTime!=mData.serverTime)
				return false;
			
			if(this.isBlock!=mData.isBlock)
				return false;
			
			if(this.flowStep!=mData.flowStep)
				return false;
			
			if(this.keepSave==null)
				return false;
			if(!this.keepSave.dataEquals(mData.keepSave))
				return false;
			
			if(mData.clientRandomSeeds!=null)
			{
				if(this.clientRandomSeeds==null)
					return false;
				if(this.clientRandomSeeds.length!=mData.clientRandomSeeds.length)
					return false;
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				var clientRandomSeedsR:number[]=mData.clientRandomSeeds;
				var clientRandomSeedsLen:number=clientRandomSeedsT.length;
				for(var clientRandomSeedsI:number=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
				{
					var clientRandomSeedsU:number=clientRandomSeedsT[clientRandomSeedsI];
					var clientRandomSeedsV:number=clientRandomSeedsR[clientRandomSeedsI];
					if(clientRandomSeedsU!=clientRandomSeedsV)
						return false;
					
				}
			}
			else
			{
				if(this.clientRandomSeeds!=null)
					return false;
			}
			
			if(this.clientRandomSeedIndex!=mData.clientRandomSeedIndex)
				return false;
			
			if(this.clientOfflineWorkReceiveIndex!=mData.clientOfflineWorkReceiveIndex)
				return false;
			
			if(mData.gmCommandSet!=null)
			{
				if(this.gmCommandSet==null)
					return false;
				if(this.gmCommandSet.size()!=mData.gmCommandSet.size())
					return false;
				var gmCommandSetR:SSet<string>=mData.gmCommandSet;
				if(!this.gmCommandSet.isEmpty())
				{
					for(var gmCommandSetV of this.gmCommandSet.getKeys())
					{
						if(!gmCommandSetR.contains(gmCommandSetV))
							return false;
					}
				}
			}
			else
			{
				if(this.gmCommandSet!=null)
					return false;
			}
			
			if(this.gmType!=mData.gmType)
				return false;
			
			if(this.serverBornCode!=mData.serverBornCode)
				return false;
			
			if(this.serverStartTime!=mData.serverStartTime)
				return false;
			
			if(this.logQueue==null)
				return false;
			if(this.logQueue.size()!=mData.logQueue.size())
				return false;
			var logQueueT:SList<InfoLogData>=this.logQueue;
			var logQueueR:SList<InfoLogData>=mData.logQueue;
			var logQueueLen:number=logQueueT.size();
			for(var logQueueI:number=0;logQueueI<logQueueLen;++logQueueI)
			{
				var logQueueU:InfoLogData=logQueueT.get(logQueueI);
				var logQueueV:InfoLogData=logQueueR.get(logQueueI);
				if(logQueueU==null)
					return false;
				if(!logQueueU.dataEquals(logQueueV))
					return false;
				
			}
			
			if(this.nextDailyTime!=mData.nextDailyTime)
				return false;
			
			return true;
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			writer.writeTabs();
			writer.sb.append("version");
			writer.sb.append(':');
			this.version.writeDataString(writer);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("serverTime");
			writer.sb.append(':');
			writer.sb.append(this.serverTime);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("isBlock");
			writer.sb.append(':');
			writer.sb.append(this.isBlock);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("flowStep");
			writer.sb.append(':');
			writer.sb.append(this.flowStep);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("keepSave");
			writer.sb.append(':');
			this.keepSave.writeDataString(writer);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("clientRandomSeeds");
			writer.sb.append(':');
			writer.sb.append("Array<number>");
			if(this.clientRandomSeeds!=null)
			{
				var clientRandomSeedsT:number[]=this.clientRandomSeeds;
				var clientRandomSeedsLen:number=clientRandomSeedsT.length;
				writer.sb.append('(');
				writer.sb.append(clientRandomSeedsLen);
				writer.sb.append(')');
				writer.writeEnter();
				writer.writeLeftBrace();
				for(var clientRandomSeedsI:number=0;clientRandomSeedsI<clientRandomSeedsLen;++clientRandomSeedsI)
				{
					var clientRandomSeedsV:number=clientRandomSeedsT[clientRandomSeedsI];
					writer.writeTabs();
					writer.sb.append(clientRandomSeedsI);
					writer.sb.append(':');
					writer.sb.append(clientRandomSeedsV);
					
					writer.writeEnter();
				}
				writer.writeRightBrace();
			}
			else
			{
				writer.sb.append("=null");
			}
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("clientRandomSeedIndex");
			writer.sb.append(':');
			writer.sb.append(this.clientRandomSeedIndex);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("clientOfflineWorkReceiveIndex");
			writer.sb.append(':');
			writer.sb.append(this.clientOfflineWorkReceiveIndex);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("gmCommandSet");
			writer.sb.append(':');
			writer.sb.append("Set<string>");
			if(this.gmCommandSet!=null)
			{
				writer.sb.append('(');
				writer.sb.append(this.gmCommandSet.size());
				writer.sb.append(')');
				writer.writeEnter();
				writer.writeLeftBrace();
				if(!this.gmCommandSet.isEmpty())
				{
					for(var gmCommandSetV of this.gmCommandSet.getKeys())
					{
						writer.writeTabs();
						writer.sb.append(gmCommandSetV);
						
						writer.writeEnter();
					}
				}
				writer.writeRightBrace();
			}
			else
			{
				writer.sb.append("=null");
			}
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("gmType");
			writer.sb.append(':');
			writer.sb.append(this.gmType);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("serverBornCode");
			writer.sb.append(':');
			writer.sb.append(this.serverBornCode);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("serverStartTime");
			writer.sb.append(':');
			writer.sb.append(this.serverStartTime);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("logQueue");
			writer.sb.append(':');
			writer.sb.append("Queue<InfoLogData>");
			var logQueueT:SList<InfoLogData>=this.logQueue;
			var logQueueLen:number=logQueueT.size();
			writer.sb.append('(');
			writer.sb.append(logQueueLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(var logQueueI:number=0;logQueueI<logQueueLen;++logQueueI)
			{
				var logQueueV:InfoLogData=logQueueT.get(logQueueI);
				writer.writeTabs();
				writer.sb.append(logQueueI);
				writer.sb.append(':');
				logQueueV.writeDataString(writer);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("nextDailyTime");
			writer.sb.append(':');
			writer.sb.append(this.nextDailyTime);
			
			writer.writeEnter();
		}
		
	}
}
