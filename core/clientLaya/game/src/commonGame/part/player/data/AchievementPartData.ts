namespace Shine
{
	/** (generated by shine) */
	export class AchievementPartData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=PlayerPartDataType.Achievement;
		
		/** 运行中数据组 */
		public runningDatas:SMap<number,AchievementData>;
		
		/** 完成数据组 */
		public completeDatas:SMap<number,AchievementCompleteData>;
		
		constructor()
		{
			super();
			this._dataID=PlayerPartDataType.Achievement;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "AchievementPartData";
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			var runningDatasLen:number=stream.readLen();
			if(this.runningDatas!=null)
			{
				this.runningDatas.clear();
				this.runningDatas.ensureCapacity(runningDatasLen);
			}
			else
			{
				this.runningDatas=new SMap<number,AchievementData>(runningDatasLen);
			}
			
			var runningDatasT:SMap<number,AchievementData>=this.runningDatas;
			for(var runningDatasI:number=runningDatasLen-1;runningDatasI>=0;--runningDatasI)
			{
				var runningDatasV:AchievementData;
				runningDatasV=stream.readDataSimpleNotNull() as AchievementData;
				
				runningDatasT.put(runningDatasV.id,runningDatasV);
			}
			
			var completeDatasLen:number=stream.readLen();
			if(this.completeDatas!=null)
			{
				this.completeDatas.clear();
				this.completeDatas.ensureCapacity(completeDatasLen);
			}
			else
			{
				this.completeDatas=new SMap<number,AchievementCompleteData>(completeDatasLen);
			}
			
			var completeDatasT:SMap<number,AchievementCompleteData>=this.completeDatas;
			for(var completeDatasI:number=completeDatasLen-1;completeDatasI>=0;--completeDatasI)
			{
				var completeDatasV:AchievementCompleteData;
				completeDatasV=stream.readDataSimpleNotNull() as AchievementCompleteData;
				
				completeDatasT.put(completeDatasV.id,completeDatasV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeLen(this.runningDatas.size());
			if(!this.runningDatas.isEmpty())
			{
				for(var runningDatasV of this.runningDatas.getValues())
				{
					stream.writeDataSimpleNotNull(runningDatasV);
					
				}
			}
			
			stream.writeLen(this.completeDatas.size());
			if(!this.completeDatas.isEmpty())
			{
				for(var completeDatasV of this.completeDatas.getValues())
				{
					stream.writeDataSimpleNotNull(completeDatasV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof AchievementPartData))
				return;
			
			var mData:AchievementPartData=data as AchievementPartData;
			
			this.runningDatas=mData.runningDatas;
			this.completeDatas=mData.completeDatas;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof AchievementPartData))
				return;
			
			var mData:AchievementPartData=data as AchievementPartData;
			
			if(this.runningDatas!=null)
			{
				this.runningDatas.clear();
				this.runningDatas.ensureCapacity(mData.runningDatas.size());
			}
			else
			{
				this.runningDatas=new SMap<number,AchievementData>(mData.runningDatas.size());
			}
			
			var runningDatasT:SMap<number,AchievementData>=this.runningDatas;
			if(!mData.runningDatas.isEmpty())
			{
				for(var runningDatasV of mData.runningDatas.getValues())
				{
					var runningDatasU:AchievementData;
					runningDatasU=runningDatasV.clone() as AchievementData;
					
					runningDatasT.put(runningDatasU.id,runningDatasU);
				}
			}
			
			if(this.completeDatas!=null)
			{
				this.completeDatas.clear();
				this.completeDatas.ensureCapacity(mData.completeDatas.size());
			}
			else
			{
				this.completeDatas=new SMap<number,AchievementCompleteData>(mData.completeDatas.size());
			}
			
			var completeDatasT:SMap<number,AchievementCompleteData>=this.completeDatas;
			if(!mData.completeDatas.isEmpty())
			{
				for(var completeDatasV of mData.completeDatas.getValues())
				{
					var completeDatasU:AchievementCompleteData;
					completeDatasU=completeDatasV.clone() as AchievementCompleteData;
					
					completeDatasT.put(completeDatasU.id,completeDatasU);
				}
			}
			
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.runningDatas=new SMap<number,AchievementData>();
			this.completeDatas=new SMap<number,AchievementCompleteData>();
		}
		
		/** 读取字节流(完整版) */
		protected toReadBytesFull(stream:BytesReadStream):void
		{
			var position:number=BytesReadStream.getReadBytes(stream);
			
			var runningDatasLen:number=stream.readLen();
			if(this.runningDatas!=null)
			{
				this.runningDatas.clear();
				this.runningDatas.ensureCapacity(runningDatasLen);
			}
			else
			{
				this.runningDatas=new SMap<number,AchievementData>(runningDatasLen);
			}
			
			var runningDatasT:SMap<number,AchievementData>=this.runningDatas;
			for(var runningDatasI:number=runningDatasLen-1;runningDatasI>=0;--runningDatasI)
			{
				var runningDatasV:AchievementData;
				runningDatasV=stream.readDataFullNotNull() as AchievementData;
				
				runningDatasT.put(runningDatasV.id,runningDatasV);
			}
			
			var completeDatasLen:number=stream.readLen();
			if(this.completeDatas!=null)
			{
				this.completeDatas.clear();
				this.completeDatas.ensureCapacity(completeDatasLen);
			}
			else
			{
				this.completeDatas=new SMap<number,AchievementCompleteData>(completeDatasLen);
			}
			
			var completeDatasT:SMap<number,AchievementCompleteData>=this.completeDatas;
			for(var completeDatasI:number=completeDatasLen-1;completeDatasI>=0;--completeDatasI)
			{
				var completeDatasV:AchievementCompleteData;
				completeDatasV=stream.readDataFullNotNull() as AchievementCompleteData;
				
				completeDatasT.put(completeDatasV.id,completeDatasV);
			}
			
			BytesReadStream.disReadBytes(stream,position);
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeLen(this.runningDatas.size());
			if(!this.runningDatas.isEmpty())
			{
				for(var runningDatasV of this.runningDatas.getValues())
				{
					stream.writeDataFullNotNull(runningDatasV);
					
				}
			}
			
			stream.writeLen(this.completeDatas.size());
			if(!this.completeDatas.isEmpty())
			{
				for(var completeDatasV of this.completeDatas.getValues())
				{
					stream.writeDataFullNotNull(completeDatasV);
					
				}
			}
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 是否数据一致 */
		protected toDataEquals(data:BaseData):boolean
		{
			var mData:AchievementPartData=data as AchievementPartData;
			if(this.runningDatas==null)
				return false;
			if(this.runningDatas.size()!=mData.runningDatas.size())
				return false;
			var runningDatasR:SMap<number,AchievementData>=mData.runningDatas;
			if(!this.runningDatas.isEmpty())
			{
				for(var runningDatasK of this.runningDatas.getKeys())
				{
					var runningDatasV:AchievementData=this.runningDatas.get(runningDatasK);
					var runningDatasU:AchievementData=runningDatasR.get(runningDatasK);
					if(runningDatasV==null)
						return false;
					if(!runningDatasV.dataEquals(runningDatasU))
						return false;
					
				}
			}
			
			if(this.completeDatas==null)
				return false;
			if(this.completeDatas.size()!=mData.completeDatas.size())
				return false;
			var completeDatasR:SMap<number,AchievementCompleteData>=mData.completeDatas;
			if(!this.completeDatas.isEmpty())
			{
				for(var completeDatasK of this.completeDatas.getKeys())
				{
					var completeDatasV:AchievementCompleteData=this.completeDatas.get(completeDatasK);
					var completeDatasU:AchievementCompleteData=completeDatasR.get(completeDatasK);
					if(completeDatasV==null)
						return false;
					if(!completeDatasV.dataEquals(completeDatasU))
						return false;
					
				}
			}
			
			return true;
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			writer.writeTabs();
			writer.sb.append("runningDatas");
			writer.sb.append(':');
			writer.sb.append("Map<number,AchievementData>");
			writer.sb.append('(');
			writer.sb.append(this.runningDatas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.runningDatas.isEmpty())
			{
				for(var runningDatasK of this.runningDatas.getKeys())
				{
					var runningDatasV:AchievementData=this.runningDatas.get(runningDatasK);
					writer.writeTabs();
					writer.sb.append(runningDatasK);
					
					writer.sb.append(':');
					runningDatasV.writeDataString(writer);
					
					writer.writeEnter();
				}
			}
			writer.writeRightBrace();
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("completeDatas");
			writer.sb.append(':');
			writer.sb.append("Map<number,AchievementCompleteData>");
			writer.sb.append('(');
			writer.sb.append(this.completeDatas.size());
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			if(!this.completeDatas.isEmpty())
			{
				for(var completeDatasK of this.completeDatas.getKeys())
				{
					var completeDatasV:AchievementCompleteData=this.completeDatas.get(completeDatasK);
					writer.writeTabs();
					writer.sb.append(completeDatasK);
					
					writer.sb.append(':');
					completeDatasV.writeDataString(writer);
					
					writer.writeEnter();
				}
			}
			writer.writeRightBrace();
			
			writer.writeEnter();
		}
		
	}
}
