namespace Shine
{
	/** 社交(generated by shine) */
	export class SocialPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:SocialPartData;
		
		/** 角色社交数据(自己需要的所有角色社交数据) */
		private _roleSocialDic:SMap<number,RoleSocialData>=new SMap<number,RoleSocialData>();
		
		/** 注册的查询角色数据回调字典(接收返回数据) */
		private _reQueryPlayerFuncDic:SMap<number,Func>=new SMap<number,Func>();
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as SocialPartData;
		}
		
		/** 获取数据 */
		public getPartData():SocialPartData
		{
			return this._d;
		}
		
		protected createPartData():BaseData
		{
			return new SocialPartData();
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			this._roleSocialDic.clear();
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			
		}
		
		/** 创建角色社交数据 */
		public createRoleSocialData():RoleSocialData
		{
			var re:RoleSocialData=GameC.factory.createRoleSocialData();
			this.makeRoleSocialData(re);
			return re;
		}
		
		/** 构造角色自身社交数据 */
		public makeRoleSocialData(data:RoleSocialData):void
		{
			if(data.showData!=null)
			{
				this.me.role.makeRoleShowData(data.showData);
			}
			else
			{
				data.showData=this.me.role.createRoleShowData();
			}

			data.isOnline=true;//在线
			data.lastOnlineTime=this.me.getTimeMillis();
		}
		
		/** 移除角色社交数据 */
		public removePlayerRoleSocial(playerID:number):void
		{
			this._roleSocialDic.remove(playerID);
		}
		
		/** 更新全部社交数据组(客户端调用) * */
		public updateRoleSocialDatas():void
		{
			this.me.send(UpdateRoleSocialDataRequest.createUpdateRoleSocialData());
		}
		
		/** 更新社交数据组返回 */
		public onUpdateRoleSocialDatas(dic:SMap<number,RoleSocialData>):void
		{
			if(!dic.isEmpty())
			{
				dic.forEach((k,v) => 
				{
					this.addPlayerRoleSocial(k,v);
				});

				this.me.dispatch(GameEventType.UpdateSocialData);
			}
		}
		
		/** 更新社交数据单个返回 */
		public onUpdateRoleSocialDataOne(data:RoleSocialData):void
		{
			this.addPlayerRoleSocial(data.showData.playerID,data);

			this.me.dispatch(GameEventType.UpdateSocialData);
		}
		
		/** 添加角色社交数据* */
		public addPlayerRoleSocial(playerID:number,data:RoleSocialData):RoleSocialData
		{
			var oldData:RoleSocialData;

			if((oldData=this._roleSocialDic.get(playerID))!=null)
			{
				oldData.copy(data);
				return oldData;
			}
			else
			{
				this._roleSocialDic.put(playerID,data);
				return data;
			}
		}
		
		/** 注册某类型的查询角色接收回调(接收返回数据)(construct阶段用) */
		public registReQueryPlayerFunc(type:number,func:Func):void
		{
			this._reQueryPlayerFuncDic.put(type,func);
		}
		
		/** 查询角色数据 */
		public queryPlayer(playerID:number,type:number,args:number[]=null):void
		{
			this.me.send(QueryPlayerRequest.createQueryPlayer(playerID,type,args));
		}
		
		/** 接收到查询角色事务结果 */
		public onQueryPlayerResult(result:QueryPlayerResultData):void
		{
			var func:Func=this._reQueryPlayerFuncDic.get(result.queryType);

			if(func==null)
			{
				this.me.errorLog("接收到查询角色事务结果时,未注册事务类型:"+result.queryType);
				return;
			}

			func.invoke(result);
		}
		
	}
}
