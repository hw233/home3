namespace Shine
{
	/** 邮件(generated by shine) */
	export class MailPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:MailPartData;
		
		/** 邮件组 */
		private _newNum:number=0;
		
		/** 红点数 */
		private _redPointCount:number=0;
		
		/** 是否获取过邮件列表 */
		private _gotMails:boolean=false;
		
		/** 邮件组 */
		private _mails:SList<MailData>=new SList<MailData>();
		
		constructor()
		{
			super();
		}
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as MailPartData;
		}
		
		/** 获取数据 */
		public getPartData():MailPartData
		{
			return this._d;
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{

		}
		
		public isEmpty():boolean
		{
			return this._mails==null || this._mails.isEmpty();
		}
		
		public getMailList():SList<MailData>
		{
			return this._mails;
		}
		
		public getAllMails():void
		{
			if(this._gotMails)
				return;

			this._gotMails=true;

			GetAllMailRequest.createGetAllMail().send();
		}
		
		public getNewNum():number
		{
			return this._newNum;
		}
		
		/** 删除邮件 */
		private toDeleteMail(index:number):void
		{
			if(this._mails==null)
			{
				this.me.warnLog("删除邮件时,没有邮件列表");
				return;
			}

			let data=this._mails.remove(index);

			if(data==null)
				return;

			this.toRemoveRedPoint(data);

			if(!data.readed)
			{
				this._newNum--;
				this.me.dispatch(GameEventType.RefreshNewMailNum);
			}

			// let values=this._mails.getValues();

			// for(let i=index,len=this._mails.size();i<len;i++)
			// {
			// 	values[i].index=i;
			// }

			this.me.dispatch(GameEventType.DeleteOneMail,index);
		}
		
		private toRemoveRedPoint(data:MailData):void
		{
			if(data.hasRedPoint)
			{
				data.hasRedPoint=false;
				this._redPointCount--;
				// GameC.redPoint.refreshOne(RedPointType.Mail);
			}
		}
		
		public mailReaded(index:number):void
		{
			let data=this._mails.get(index);

			if(data==null)
			{
				this.me.warnLog("标记某邮件已读时,找不到邮件");
				return;
			}

			if(data.readed)
			{
				this.me.warnLog("标记某邮件已读时,邮件已读");
				return;
			}

			this.toRemoveRedPoint(data);

			data.readed=true;
			this._newNum--;
			this.me.dispatch(GameEventType.RefreshNewMailNum);
			this.me.dispatch(GameEventType.RefreshOneMail,index);

			MailReadedRequest.createMailReaded(index,data.instanceID).send();
		}
		
		public mailRemoveRedPoint(index:number):void
		{
			let data=this._mails.get(index);

			if(data==null)
			{
				this.me.warnLog("邮件移除红点时,找不到邮件");
				return;
			}

			if(!data.hasRedPoint)
			{
				this.me.warnLog("邮件移除红点时,没有红点");
				return;
			}

			this.toRemoveRedPoint(data);

			this.me.dispatch(GameEventType.RefreshOneMail,index);

			this.me.send(MailRemoveRedPointRequest.createMailRemoveRedPoint(index));
		}
		
		public takeMail(index:number):void
		{
			let data=this._mails.get(index);

			if(data==null)
			{
				this.me.warnLog("领取邮件时,找不到邮件");
				return;
			}

			if (data.rewarded || data.itemList==null)
			{
				this.me.warnLog("领取邮件时,已经领取过或者没有奖励");
				return;
			}
			
			this.toRemoveRedPoint(data);

			if(!data.readed)
			{
				data.readed=true;
				this._newNum--;
				this.me.dispatch(GameEventType.RefreshNewMailNum);
				this.me.dispatch(GameEventType.RefreshOneMail,index);
			}

			TakeMailRequest.createTakeMail(index,data.instanceID).send();
		}
		
		public deleteMail(index:number):void
		{
			let data=this._mails.get(index);

			if(data==null)
			{
				this.me.warnLog("删除邮件时,找不到邮件");
				return;
			}

			DeleteMailRequest.createDeleteMail(index,data.instanceID).send();
		}
		
		public sendMail(playerID:number,data:MailData):void
		{
			this.me.send(ClientSendMailRequest.createClientSendMail(playerID,data));
		}
		
		public sendMailByArg(playerID:number,args:Array<any>):void
		{
			let data=new MailData();
			data.id=Global.playerMailID;
			data.args=args;
			data.itemList=null;

			this.sendMail(playerID,data);
		}
		
		public onReGetAllMails(mails:SList<MailData>):void
		{
			this._mails=mails;//直接赋值
			this._newNum=0;
			this._redPointCount=0;

			let values=mails;
			let v:MailData;

			//刷序号
			for(let i=0,len=mails.size();i<len;++i)
			{
				// (v=values[i]).index=i;
				v=values[i];
				if(!v.readed)
				{
					this._newNum++;
				}

				if(v.hasRedPoint)
				{
					this._redPointCount++;
				}
			}

			this.me.dispatch(GameEventType.RefreshAllMails);

			//GameC.redPoint.refreshOne(RedPointType.Mail);
		}
		
		public onAddMail(data:MailData):void
		{
			if(this._mails==null)
			{
				this._newNum++;
				this.me.dispatch(GameEventType.RefreshNewMailNum);

				return;
			}

			//超了
			if(Global.mailSaveMaxNum>0 && this._mails.size()==Global.mailSaveMaxNum)
			{
				this.toDeleteMail(0);
			}

			this._mails.add(data);
			// data.index=this._mails.size()-1;//序号

			this._newNum++;
			this.me.dispatch(GameEventType.RefreshNewMailNum);

			if(MailConfig.get(data.id).needRedPoint)
			{
				data.hasRedPoint=true;
				this._redPointCount++;
				//GameC.redPoint.refreshOne(RedPointType.Mail);
			}
			else
			{
				data.hasRedPoint=false;
			}

			this.me.dispatch(GameEventType.AddNewMail,this._mails.size()-1);
			
			this.onAddMailForG(data);
		}
		
		public onAddMailForG(data:MailData):void
		{
			
		}
		
		public onDeleteMail(index:number):void
		{
			this.toDeleteMail(index);
		}
		
		public onTakeMail(index:number):void
		{
			if(this._mails==null)
			{
				this.me.warnLog("领取邮件成功时,没有邮件列表");
				return;
			}

			let data=this._mails.get(index);

			if(data==null)
			{
				this.me.warnLog("领取邮件成功时,找不到邮件");
				return;
			}

			data.rewarded = true;
			this.me.dispatch(GameEventType.RewardOneMail,index);
			if(!data.readed)
			{
				data.readed=true;
				
				this._newNum--;
				this.me.dispatch(GameEventType.RefreshNewMailNum);
			}

			this.me.dispatch(GameEventType.RefreshOneMail,index);
		}
		
		public getRedPointCount():number
		{
			return this._redPointCount;
		}
		
		public printMails():void
		{
			if(this.isEmpty())
			{
				Ctrl.print("mail is empty");
				return;
			}

			//ObjectUtils.printDataList(this._mails);
		}
		
		protected createPartData():BaseData
		{
			return new MailPartData();
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		public takeAllMail():void
		{
			let data:Shine.MailData=null;
			for (let i = this._mails.length-1; i >= 0; --i)
			{
				data = this._mails.get(i);
				data.rewarded = data.readed = true;
			}			
		}
		
		public deleteAllReadedMail():void
		{
			let data:Shine.MailData=null;
			for (let i = this._mails.length-1; i >= 0; --i)
			{
				data = this._mails.get(i);
				if ((data.itemList.length > 0 && data.rewarded) ||
						(data.readed && data.itemList.length == 0))
					this._mails.splice(i, 1);
			}				
		}
		
	}
}
