namespace Shine
{
	/** 背包(generated by shine) */
	export class BagPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:BagPartData;
		
		private _tempMap:SMap<number,number>=new SMap<number,number>();
		
		/** 临时物品组 */
		private _tempItems:SList<ItemData>=new SList<ItemData>();
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as BagPartData;
		}
		
		/** 获取数据 */
		public getPartData():BagPartData
		{
			return this._d;
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			
		}
		
		/** 创建物品通过类型(只创建物品) */
		public createItemByType(type:number):ItemData
		{
			return GameC.pool.createItemData(type);
		}
		
		/** 创建物品数据 */
		public createItem(id:number,num:number):ItemData
		{
			var config:ItemConfig=ItemConfig.get(id);

			var data:ItemData=this.createItemByType(config.type);
			data.id=id;
			data.num=num;
			data.config=config;
			//失效时间
			data.disableTime=config.enableTimeT.getNextTime();

			//额外初始化
			GameC.logic.initItem(data,id);

			return data;
		}
		
		/** 回收物品 */
		public releaseItem(data:ItemData):void
		{
			GameC.pool.releaseItemData(data);
		}
		
		/** 获取某序号的物品 */
		public getItem(index:number):ItemData
		{
			Ctrl.throwError("must override");
			return null;
		}
		
		/** 是否有空余格子 */
		public hasFreeGrid(num:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 是否有物品位置 */
		public hasItemPlaceData(data:ItemData):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 是否有物品位置 */
		public hasItemPlace(id:number,num:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 是否有物品位置 */
		public hasItemPlaceList(list:SList<ItemData>):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 获取某ID的物品数目 */
		public getItemNum(itemID:number):number
		{
			Ctrl.throwError("must override");
			return 0;
		}
		
		/** 添加物品数据 */
		public addItem(data:ItemData,way:number):boolean
		{
			var num:number=data.num;

			if(this.toAddItem(data,way))
			{
				this.toLogAddItem(data.id,num,way);
				return true;
			}

			return false;
		}
		
		protected toAddItem(data:ItemData,way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		public addItemId(id:number,way:number):boolean
		{
			return this.addItemNum(id,1,way);
		}
		
		/** 添加指定id和数目的道具 */
		public addItemNum(id:number,num:number,way:number):boolean
		{
			if(this.toAddItemNum(id,num,way))
			{
				this.toLogAddItem(id,num,way);
				return true;
			}

			return false;
		}
		
		protected toAddItemNum(id:number,num:number,way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		private toLogTempMap(way:number):void
		{
	//		int free=_tempMap.getFreeValue();
	//		long[] tab=_tempMap.getTable();
	//		long entry;
	//		int key;
	//
	//		for(int i=(tab.length) - 1;i >= 0;--i)
	//		{
	//			if((key=((int)(entry=tab[i])))!=free)
	//			{
	//				toLogAddItem(key,(int)(entry >>> 32),way);
	//			}
	//		}
	//
	//		_tempMap.clear();
		}
		
		private toLogTempMapToMail(way:number):void
		{
	//		int free=_tempMap.getFreeValue();
	//		long[] tab=_tempMap.getTable();
	//		long entry;
	//		int key;
	//
	//		for(int i=(tab.length) - 1;i >= 0;--i)
	//		{
	//			if((key=((int)(entry=tab[i])))!=free)
	//			{
	//				toLogAddItemToMail(key,(int)(entry >>> 32),way);
	//			}
	//		}
	//
	//		_tempMap.clear();
		}
		
		/** 添加一组物品 */
		public addItemsList(list:SList<ItemData>,way:number):boolean
		{
			this._tempMap.clear();
			var data:ItemData;
			for(var i:number=list.size()-1;i>=0;--i)
			{
				this._tempMap.put((data=list.get(i)).id,data.num);
			}

			if(this.toAddItemslist(list,way))
			{
				this.toLogTempMap(way);
				return true;
			}
			else
			{
				this._tempMap.clear();
				return false;
			}
		}
		
		/** 添加一组物品(包满邮件) */
		public addItemsAbsList(list:SList<ItemData>,way:number):void
		{
			this._tempMap.clear();
			var data:ItemData;
			for(var i:number=list.size()-1;i>=0;--i)
			{
				this._tempMap.put((data=list.get(i)).id,data.num);
			}

			if(this.toAddItemslist(list,way))
			{
				this.toLogTempMap(way);
			}
			else
			{
				Ctrl.throwError("不该出现背包空间不足");
				// me.mail.addMailForItem(list,way);
				this.toLogTempMapToMail(way);
			}
		}
		
		protected toAddItemslist(list:SList<ItemData>,way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 添加一组物品 */
		public addItems(list:DIntData[],way:number):boolean
		{
			this._tempMap.clear();
			for(var i:number=list.length-1;i>=0;--i)
			{
				this._tempMap.put(list[i].key,list[i].value);
			}

			if(this.toAddItems(list,way))
			{
				this.toLogTempMap(way);
				return true;
			}
			else
			{
				this._tempMap.clear();
				return false;
			}
		}
		
		/** 添加一组物品(包满邮件) */
		public addItemsAbs(list:DIntData[],way:number):void
		{
			this._tempMap.clear();
			for(var i=list.length-1;i>=0;--i)
			{
				this._tempMap.put(list[i].key,list[i].value);
			}

			if(this.toAddItems(list,way))
			{
				this.toLogTempMap(way);
			}
			else
			{
				Ctrl.throwError("不该出现背包空间不足");
				// me.mail.addMailForItem(list,way);
				this.toLogTempMapToMail(way);
			}
		}
		
		protected toAddItems(list:DIntData[],way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 是否有指定id数目的物品 */
		public containsItem(id:number,num:number=1):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 移除道具(1个)(会回收) */
		public removeItem(id:number,way:number):boolean
		{
			return this.removeItemNum(id,1,way);
		}
		
		/** 移除道具(会回收) */
		public removeItemNum(id:number,num:number,way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 移除指定序号的物品(全部数目)(不回收) */
		public removeItemByIndex(index:number,way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 移除指定序号的物品(部分数目)(不回收) */
		public removeItemByIndexNum(index:number,num:number,way:number):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 整理 */
		public cleanUp():void
		{

		}
		
		/** 打印背包 */
		public printBag():void
		{

		}
		
		/** 是否有某奖励的位置 */
		public hasRewardPlace(rewardID:number):boolean
		{
			return this.hasFreeGrid(RewardConfig.get(rewardID).needGrid);
		}
		
		/** 添加奖励 */
		public addReward(rewardID:number,way:number):boolean
		{
			var config:RewardConfig=RewardConfig.get(rewardID);

			//格子数不足
			if(!this.hasFreeGrid(config.needGrid))
			{
				return false;
			}

			//添加物品ok
			if(!this.addItems(config.items,way))
			{
				this.me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
				return false;
			}

			if(config.randomListID>0)
			{
				this.randomItemList(this._tempItems,config.randomListID);

				if(!this.addItemsList(this._tempItems,way))
				{
					this._tempItems.clear();

					this.me.throwError("严重错误,已经判定格子够后，还出现添加物品失败");
					return false;
				}
			}

			this.me.role.addCurrencies(config.currency,way);

			this.onAddReward(way,rewardID,this._tempItems.isEmpty() ? null : this._tempItems);

			this._tempItems.clear();

			return true;
		}
		
		public addRewardAbs(rewardID:number,way:number):void
		{
			var config:RewardConfig=RewardConfig.get(rewardID);

			this.me.role.addCurrencies(config.currency,way);

			this.addItemsAbs(config.items,way);

			if(config.randomListID>0)
			{
				this.randomItemList(this._tempItems,config.randomListID);

				this.addItemsAbsList(this._tempItems,way);
			}

			this.onAddReward(way,rewardID,this._tempItems.isEmpty() ? null : this._tempItems);

			this._tempItems.clear();
		}
		
		/** 随机一个物品(可能为空) */
		public randomItem(randomItemConfigID:number):ItemData
		{
			return GameC.logic.randomItem(randomItemConfigID,this.me);
		}
		
		/** 随机一组物品 */
		public randomItemList(list:SList<ItemData>,randItemListConfigID:number):void
		{
			GameC.logic.randomItemList(list,randItemListConfigID,this.me);
		}
		
		/** 检查物品使用条件 */
		public checkItemUseConditions(data:ItemData,num:number,arg:UseItemArgData,needNotice:boolean):boolean
		{
			var conditions:number[][];

			if((conditions=data.config.useConditions)!=null)
			{
				conditions.forEach(v => 
				{
					if(!this.checkOneItemUseCondition(v,needNotice))
					{
						return false;
					}
				});
			}

			data.config.useActions.forEach(v => 
			{
				if(!this.checkOneItemUseConditionForAction(v,num,arg,needNotice))
				{
					return false;
				}
			});

			return true;
		}
		
		/** 执行使用物品 */
		public toUseItem(data:ItemData,num:number,arg:UseItemArgData):void
		{
			var actions:number[][];

			if((actions=data.config.useActions)!=null)
			{
				this.doItemUseActions(actions,num,arg);
			}

			this.toLogRemoveItem(data.id,num,CallWayType.UseItem);

			this.onItemUse(data.id,num,data,arg);
		}
		
		/** 执行使用物品 */
		public toUseItemId(id:number,num:number,arg:UseItemArgData):void
		{
			var actions:number[][];

			if((actions=ItemConfig.get(id).useActions)!=null)
			{
				this.doItemUseActions(actions,num,arg);
			}

			this.toLogRemoveItem(id,num,CallWayType.UseItem);

			this.onItemUse(id,num,null,arg);
		}
		
		protected doItemUseActions(actions:number[][],num:number,arg:UseItemArgData):void
		{
			// foreach(int[] v in actions)
			// {
			// 	this.doOneItemUseAction(v,num,arg);
			// }
		}
		
		/** 物品使用 */
		protected onItemUse(id:number,num:number,itemData:ItemData,arg:UseItemArgData):void
		{

		}
		
		/** 执行单个道具物品动作 */
		protected checkOneItemUseCondition(args:number[],needNotice:boolean):boolean
		{
			// switch(args[0])
			// {
			// 	case ItemToolUseConditionType.OnStatus:
			// 	{
			// 		if(!this.me.character.getCurrentCharacterUseLogic().getFightLogic().status.getStatus(args[1]))
			// 		{
			// 			if(needNotice)
			// 				this.me.showInfoCode(InfoCodeType.UseItem_need_onStatus,StatusConfig.getShowName(args[1]));

			// 			return false;
			// 		}

			// 	}
			// 		break;
			// 	case ItemToolUseConditionType.OffStatus:
			// 	{
			// 		if(this.me.character.getCurrentCharacterUseLogic().getFightLogic().status.getStatus(args[1]))
			// 		{
			// 			if(needNotice)
			// 				this.me.showInfoCode(InfoCodeType.UseItem_need_offStatus,StatusConfig.getShowName(args[1]));

			// 			return false;
			// 		}
			// 	}
			// 		break;
			// 	case ItemToolUseConditionType.Level:
			// 	{
			// 		if(this.me.role.level<args[1])
			// 		{
			// 			if(needNotice)
			// 				this.me.showInfoCode(InfoCodeType.UseItem_need_level);

			// 			return false;
			// 		}
			// 	}
			// 		break;
			// }

			return true;
		}
		
		/** 执行单个道具物品动作 */
		protected checkOneItemUseConditionForAction(args:number[],num:number,arg:UseItemArgData,needNotice:boolean):boolean
		{
			switch(args[0])
			{
				case ItemToolUseActionType.AddReward:
				{
					var rewardConfig:RewardConfig=RewardConfig.get(args[1]);

					return this.hasFreeGrid(rewardConfig.needGrid * num);
				}
			}

			return true;
		}
		
		/** 执行单个道具物品动作 */
		protected doOneItemUseAction(args:number[],num:number,arg:UseItemArgData):void
		{
			// if(!CommonSetting.isClientDriveLogic)
			// 	return;

			// switch(args[0])
			// {
			// 	case ItemToolUseActionType.HeroAddAttribute:
			// 	{
			// 		var logic:CharacterUseLogic;

			// 		if((logic=this.me.character.getCurrentCharacterUseLogic())!=null)
			// 		{
			// 			logic.getAttributeLogic().addOneAttribute(args[1],args[2]*num);
			// 		}
			// 	}
			// 		break;
			// 	case ItemToolUseActionType.HeroAddAttributeVar:
			// 	{
			// 		CharacterUseLogic logic;

			// 		if((logic=me.character.getCurrentCharacterUseLogic())!=null)
			// 		{
			// 			logic.getAttributeLogic().addOneAttribute(args[1],logic.getFightLogic().getSkillVarValue(args[2])*num);
			// 		}
			// 	}
			// 		break;
			// 	case ItemToolUseActionType.HeroAddBuff:
			// 	{
			// 		CharacterUseLogic logic;

			// 		if((logic=me.character.getCurrentCharacterUseLogic())!=null)
			// 		{
			// 			logic.getBuffLogic().addBuff(args[1],args[2]);//buff只加一次
			// 		}
			// 	}
			// 		break;
			// 	case ItemToolUseActionType.AddCurrency:
			// 	{
			// 		this.me.role.addCurrency(args[1],args[2]*num,CallWayType.UseItem);
			// 	}
			// 		break;
			// 	case ItemToolUseActionType.AddReward:
			// 	{
			// 		this.addReward(args[1],CallWayType.UseItem);
			// 	}
			// 		break;
			// }
		}
		
		/** 通过ID使用物品 */
		public useItemByID(id:number,arg:UseItemArgData=null):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 使用物品 */
		public useItemByIndex(index:number,arg:UseItemArgData=null):boolean
		{
			return this.useItemByIndexNum(index,1,arg);
		}
		
		/** 使用物品 */
		public useItemByIndexNum(index:number,num:number,arg:UseItemArgData):boolean
		{
			Ctrl.throwError("must override");
			return false;
		}
		
		/** 获取红点数目 */
		public getRedPointCount():number
		{
			return 0;
		}
		
		/** 移除某序号的红点 */
		public removeRedPoint(index:number):void
		{

		}
		
		/** 记录添加物品 */
		protected toLogAddItem(id:number,num:number,way:number):void
		{
			//GameC.log.playerAddItem(this.me,id,num,way);
		}
		
		/** 记录移除物品 */
		protected toLogRemoveItem(id:number,num:number,way:number):void
		{
			//GameC.log.playerRemoveItem(this.me,id,num,way);
		}
		
		/** 记录添加物品到邮件 */
		protected toLogAddItemToMail(id:number,num:number,way:number):void
		{
			//GameC.log.playerAddItemToMail(this.me,id,num,way);
		}
		
		/** 服务器返回使用物品结果 */
		public useItemResult(id:number,num:number,result:boolean):void
		{
			
		}
		
		/** 添加奖励提示 */
		public onAddReward(way:number,rewarID:number,randomItemDatas:SList<ItemData>):void
		{
			// var data:RewardShowData=new RewardShowData();

			// data.config=RewardConfig.get(rewarID);

			// if(randomItemDatas==null)
			// 	randomItemDatas=new SList<ItemData>();

			// data.items=randomItemDatas;

			// foreach(DIntData v in data.config.items)
			// {
			// 	data.items.add(createItem(v.key,v.value));
			// }

			// data.currency=new IntIntMap();

			// foreach(var v in data.config.currency)
			// {
			// 	data.currency.addValue(v.key,v.value);
			// }

			//this.me.dispatch(GameEventType.AddReward,data);
		}
		
		protected createPartData():BaseData
		{
			return new BagPartData();
		}
		
		/** 道具出售 */
		public sellItem(index:number,num:number,itemID:number):boolean
		{
			//need override
			return false;
		}
		
		public hasCost(costID:number,num:number=1):boolean
		{
			var config:CostConfig=CostConfig.get(costID);

			if(!this.me.role.hasCurrencies(config.currency,num))
				return false;

			if(!this.containsItems(config.items,num))
				return false;

			return true;
		}
		
		/** 是否有指定物品组(不考虑id重复) */
		public containsItems(items:DIntData[],num:number=1):boolean
		{
			for(var i:number=0;i<items.length;i++)
			{
				if(!this.containsItem(items[i].key,items[i].value*num))
					return false;
			}

			return true;
		}
		
		/** 兑换 */
		public exchange(id:number,num:number=1):void
		{
			var config:ExchangeConfig=ExchangeConfig.get(id);

			if(config==null)
			{
				this.me.warnLog("兑换时,找不到兑换配置");
				return;
			}

			if(!this.hasCost(config.costID,num))
			{
				this.me.warnLog("兑换时,材料不足");
				return;
			}

			//TODO:检查conditions

			// if(CommonSetting.isClientDriveLogic)
			// {
			// 	this.addReward(config.rewarID,CallWayType.Exchange);
			// }
			// else
			// {
				this.me.send(ExchangeRequest.createExchange(id,num));
			// }
		}
		
	}
}
