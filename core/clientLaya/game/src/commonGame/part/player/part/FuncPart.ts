namespace Shine
{
	/** 通用功能(generated by shine) */
	export class FuncPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:FuncPartData;
		
		/** 功能插件字典 */
		private _funcToolDic:SList<SMap<number,FuncTool>>=new SList<SMap<number,FuncTool>>(FuncToolType.size);
		
		/** 功能插件列表 */
		private _funcToolList:SList<FuncTool>=new SList<FuncTool>();
		
		/** 功能插件列表 */
		private _playerFuncToolList:SList<IPlayerFuncTool>=new SList<IPlayerFuncTool>();
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as FuncPartData;
		}
		
		/** 获取数据 */
		public getPartData():FuncPartData
		{
			return this._d;
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			this._funcToolList.forEach(v=>
			{
				v.init();
			})
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			this._funcToolList.forEach(v=>
			{
				v.dispose();

				if(v.isAdded)
				{
					this.removeFuncTool(v);
				}
			})
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			this._d.funcTools.forEach((k,v)=>
			{	
				v.forEach((k1,v1)=>
				{
					var funcTool:FuncTool=this.getFuncTool(k,k1);

					if(funcTool!=null)
					{
					funcTool.setData(v1);
						}
					else
					{
						Ctrl.errorLog("找不到功能插件type:",k,"funcID:",k1);
					}
				});
			});
		}
		
		public afterReadDataSecond():void
		{
			for (var index = 0; index < this._playerFuncToolList.size(); index++) 
			{
				this._playerFuncToolList.get(index).afterReadDataSecond();
			}
		}
		
		/** 每秒调用 */
		public onSecond(delay:number):void
		{
			this._funcToolList.forEach(v=>
			{
				v.onSecond();
			})
		}
		
		/** 配置表更新后(配置替换) */
		public onReloadConfig():void
		{
			this._funcToolList.forEach(v=>
			{
				v.onReloadConfig();
			})
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			
		}
		
		protected createPartData():BaseData
		{
			return new FuncPartData();
		}
		
		/** 功能是否开启 */
		public isFunctionOpen(id:number):boolean
		{
			//TODO:功能开启
			return true;
		}
		
		/** 获取功能插件组(没有就创建) */
		public getFuncToolDic(type:number):SMap<number,FuncTool>
		{
			var dic:SMap<number,FuncTool>=this._funcToolDic[type];
			
			if(dic==null)
			{
				return this._funcToolDic[type]=new SMap<number,FuncTool>();
			}
			else
			{
				return dic;
			}
		}
		
		/** 注册功能插件 */
		public registFuncTool(tool:IPlayerFuncTool):void
		{
			this.toRegistFuncTool(tool);
		}
		
		/** 注册功能插件 */
		public toRegistFuncTool(tool:IPlayerFuncTool):void
		{
			var fTool:FuncTool = (tool as Object) as FuncTool;

			var dic:SMap<number,FuncTool>=this.getFuncToolDic(fTool.getType());
			
			var funcID:number=fTool.getFuncID();
			
			if(ShineSetting.openCheck)
			{
				if(dic.contains(funcID))
				{
					Ctrl.throwError("已经存在功能插件:",fTool.getType(),funcID);
				}
			}
			
			//设置主角
			tool.setMe(this.me);
			
			dic.put(funcID,fTool);
			fTool.toolIndex=this._funcToolList.size();
			this._funcToolList.add(fTool);
			this._playerFuncToolList.add(tool);
		}
		
		/** 添加功能插件(数据不在FuncTool存，而是自行维护,也需要funcID) */
		public addFuncTool(tool:IPlayerFuncTool,data:FuncToolData):void
		{
			var fTool:FuncTool = (tool as Object) as FuncTool;
		
			fTool.isAdded=true;
			this.toRegistFuncTool(tool);
			fTool.setData(data);
			tool.afterReadDataSecond();
		}
		
		/** 移除功能插 */
		public removeFuncTool(tool:FuncTool):void
		{
			if(!tool.isAdded)
			{
				Ctrl.throwError("不可删除非added的FuncTool");
				return;
			}

			this._funcToolList.remove(tool.toolIndex);
			this._playerFuncToolList.remove(tool.toolIndex);

			var dic:SMap<number,FuncTool>=this.getFuncToolDic(tool.getType());
			dic.remove(tool.getFuncID());
		}
		
		/** 获取功能拆件 */
		public getFuncTool(type:number,funcID:number):FuncTool
		{
			return this.getFuncToolDic(type).get(funcID);
		}
		
		/** 获取排行榜工具 */
		public getRankTool(funcID:number):PlayerRankTool
		{
			return this.getFuncTool(FuncToolType.Rank,funcID) as (PlayerRankTool);
		}
		
		/** 获取翻页显示工具 */
		public getPageShowTool(funcID:number):PlayerPageShowTool
		{
			return this.getFuncTool(FuncToolType.PageShow,funcID) as (PlayerPageShowTool);
		}
		
		/** 获取物品容器工具 */
		public getBaseItemContainerTool(funcID:number):BaseItemContainerTool
		{
			var funcTool:FuncTool=this.getFuncTool(FuncToolType.ItemContainer,funcID);

			if(funcTool==null)
				funcTool=this.getFuncTool(FuncToolType.ItemDicContainer,funcID);

			return (funcTool as BaseItemContainerTool);
		}
		
		/** 获取物品容器工具 */
		public getItemContainerTool(funcID:number):PlayerItemContainerTool
		{
			return (this.getFuncTool(FuncToolType.ItemContainer,funcID) as PlayerItemContainerTool);
		}
		
		/** 获取物品字典容器工具 */
		public getItemDicContainerTool(funcID:number):PlayerItemDicContainerTool
		{
			return (this.getFuncTool(FuncToolType.ItemDicContainer,funcID) as PlayerItemDicContainerTool);
		}
		
	}
}
