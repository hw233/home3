namespace Shine
{
	/** 成就(generated by shine) */
	export class AchievementPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:AchievementPartData;
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as AchievementPartData;
		}
		
		/** 获取数据 */
		public getPartData():AchievementPartData
		{
			return this._d;
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			this.me.quest.registTaskRefreshFunc(FunctionType.Achievement,Func.create(this,this.taskRefresh));
			this.me.quest.registTaskCompleteFunc(FunctionType.Achievement,Func.create(this,this.taskComplete));
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			var values:AchievementData[] ;
			var v:AchievementData;

			for(var i:number=(values=this._d.runningDatas.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//重新构造
					this.me.quest.reMakeTask(v.task,FunctionType.Achievement,v.id);
					//添加执行目标
					this.me.quest.addRunningTask(v.task);
				}
			}
		}
		
		/** 配置表更新后(配置替换) */
		public onReloadConfig():void
		{
			this._d.runningDatas.forEachValue(v =>
			{
				v.task.reloadConfig();
			});
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			
		}
		
		private createAchievementData():AchievementData
		{
			// LogicExecutor executor;
			//
			// if((executor=me.getExecutor())!=null)
			// {
			// 	return executor.achievementDataPool.getOne();
			// }

			return new AchievementData();
		}
		
		private releaseAchievementData(data:AchievementData):void
		{
			//TODO:池化

			// LogicExecutor executor;
			//
			// if((executor=me.getExecutor())!=null)
			// {
			// 	executor.achievementDataPool.back(data);
			// }
		}
		
		/** 获取运行中成就 */
		public getRunningAchievement(id:number):AchievementData
		{
			return this._d.runningDatas.get(id);
		}
		
		/** 获取完成成就 */
		public getCompleteAchievement(id:number):AchievementCompleteData
		{
			return this._d.completeDatas.get(id);
		}
		
		private taskRefresh(data:TaskData):void
		{
			var aData:AchievementData=this._d.runningDatas.get(data.mainID);

			if(aData==null)
			{
				Ctrl.throwError("不该找不到成就");
				return;
			}

			this.me.dispatch(GameEventType.RefreshAchievement,aData.id);
		}
		
		private taskComplete(data:TaskData):void
		{
			var aData:AchievementData=this._d.runningDatas.get(data.mainID);

			if(aData==null)
			{
				Ctrl.throwError("不该找不到成就");
				return;
			}

			if(CommonSetting.isClientDriveLogic)
			{
				//回收
				this.me.quest.removeRunningTask(data);
				this.me.quest.releaseTask(data);

				this.toComplete(aData.id);
			}
		}
		
		private toComplete(id:number):void
		{
			//双移除
			this._d.runningDatas.remove(id);

			var cData:AchievementCompleteData=new AchievementCompleteData();
			cData.id=id;
			cData.hasGotReward=false;
			cData.time=this.me.getTimeMillis();

			this._d.completeDatas.put(id,cData);

			this.me.dispatch(GameEventType.RefreshAchievement,id);
			this.me.dispatch(GameEventType.CompleteAchievement,id);

			this.onAchievementComplete(id);
		}
		
		/** 完成成就，g层可复写 */
		protected onAchievementComplete(id:number):void
		{
			
		}
		
		/** 成就完成 */
		public onAchievementCompleteByServer(id:number):void
		{
			var aData:AchievementData=this._d.runningDatas.get(id);

			if(aData==null)
			{
				return;
			}

			this.toComplete(id);
		}
		
		public onAcceptAchievementByServer(data:AchievementData):void
		{
			this._d.runningDatas.put(data.id,data);
			this.me.quest.reMakeTask(data.task,FunctionType.Achievement,data.id);
			this.me.quest.addRunningTask(data.task);
		}
		
		/** 领取成就奖励 */
		public getReward(id:number):void
		{
			var cData:AchievementCompleteData=this._d.completeDatas.get(id);

			if(cData==null)
			{
				this.me.warnLog("领取成就奖励时,找不到完成成就",id);
				return;
			}

			if(cData.hasGotReward)
			{
				this.me.warnLog("领取成就奖励时,已经领过",id);
				return;
			}

			var config:AchievementConfig=AchievementConfig.get(id);

			if(config.rewardID>0)
			{
				if(!this.me.bag.hasRewardPlace(config.rewardID))
				{
					this.me.warnLog("领取成就奖励时,背包空间不足",id);
					return;
				}
			}

			this.me.send(GetAchievementRewardRequest.createGetAchievementReward(id));
		}
		
		/** 收到服务器领取成就奖励 */
		public onGetReward(id:number):void
		{
			var cData:AchievementCompleteData=this._d.completeDatas.get(id);

			if(cData==null)
			{
				this.me.warnLog("收到领取成就奖励时,找不到完成成就",id);
				return;
			}

			cData.hasGotReward=true;

			this.me.dispatch(GameEventType.RefreshAchievement,id);
			this.me.dispatch(GameEventType.GetAchievementReward,id);
		}
		
		protected createPartData():BaseData
		{
			return new AchievementPartData();
		}
		
	}
}
