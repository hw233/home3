namespace Shine
{
	/** 活动(generated by shine) */
	export class ActivityPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:ActivityPartData;
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as ActivityPartData;
		}
		
		/** 获取数据 */
		public getPartData():ActivityPartData
		{
			return this._d;
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			// ActivityConfig.getDic().forEachValue(v=>
			// {
			// 	var sData:ActivityData=this._d.datas.get(v.id);

			// 	//补充
			// 	if(sData==null)
			// 	{
			// 		sData=new ActivityData();
			// 		sData.id=v.id;
			// 		sData.nextResetTime=0;
			// 		sData.lastTurnTime=0;
			// 		sData.nextTurnTime=0;
			// 		sData.joinTimes=0;

			// 		this._d.datas.put(sData.id,sData);
			// 	}
			// });
			
			// //fixed
			// OtherUtils.removeNotExistFromDic1WithDic2(_d.datas,ActivityConfig.getDic());

		}
		
		public beforeLogin():void
		{
		
		}
		
		/** 每秒调用 */
		public onSecond(delay:number):void
		{
			// var now:number =this.me.getTimeMillis();

			// this._d.datas.forEachValue(v=>
			// {
			// 	if(v.nextSeeTurnTime>0 && now>v.nextSeeTurnTime)
			// 	{
			// 		//运行中
			// 		if(v.isCanSee)
			// 		{
			// 			this.doActivityCantSee(v);
			// 		}
			// 		//关闭中
			// 		else
			// 		{
			// 			this.doActivityCanSee(v);
			// 		}
			// 	}
			// })
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			
		}
		
		protected createPartData():BaseData
		{
			return new ActivityPartData();
		}
		
		/** 活动是否开启 */
		public isActivityOpen(id:number):boolean
		{
			return this._d.datas.get(id).isRunning;
		}
		
		/** 活动是否可见 */
		public isActivityCanSee(id:number):boolean
		{
			return this._d.datas.get(id).isCanSee;
		}
		
		/** 检查是否可参加活动 */
		public checkCanJoinActivity(id:number,needNotice:boolean):boolean
		{
			var data:ActivityData=this._d.datas.get(id);

			if(data==null)
			{
				this.me.warnLog("检查参加活动时，找不到活动",id);
				return false;
			}

			if(!data.isRunning)
			{
				this.me.warnLog("检查参加活动时，活动未开始",id);
				return false;
			}

			var config:ActivityConfig=ActivityConfig.get(id);

			if(config.joinCount>0 && data.joinTimes>=config.joinCount)
			{
				this.me.warnLog("检查参加活动时，次数不足",id);
				return false;
			}

			// if(!this.me.role.checkRoleConditions(config.joinConditions,needNotice))
			// {
			// 	this.me.warnLog("检查参加活动时，进入条件不满足",id);
			// 	return false;
			// }

			return true;
		}
		
		public doActivityCanSee(data:ActivityData):void
		{
			var config:ActivityConfig=ActivityConfig.get(data.id);

			data.isCanSee=true;
			data.nextSeeTurnTime=config.cantSeeTimeT.getNextTime();

			this.me.dispatch(GameEventType.ActivitySee,data.id);
		}
		
		public doActivityCantSee(data:ActivityData):void
		{
			var config:ActivityConfig=ActivityConfig.get(data.id);

			data.isCanSee=false;
			data.nextSeeTurnTime=config.canSeeTimeT.getNextTime();

			this.me.dispatch(GameEventType.ActivityCantSee,data.id);
		}
		
		/** 服务器活动开启 */
		public doActivityOpen(id:number,lastTurnTime:number,nextTurnTime:number,atTime:boolean):void
		{
			var data:ActivityData=this._d.datas.get(id);
			data.isRunning=true;
			data.lastTurnTime=lastTurnTime;
			data.nextTurnTime=nextTurnTime;
			this.me.onActivityOpen(data.id,atTime);

			this.me.dispatch(GameEventType.ActivityOpen,id);
		}
		
		/** 服务器活动关闭 */
		public doActivityClose(id:number,lastTurnTime:number,nextTurnTime:number,atTime:boolean):void
		{
			var data:ActivityData=this._d.datas.get(id);
			data.isRunning=false;
			data.lastTurnTime=lastTurnTime;
			data.nextTurnTime=nextTurnTime;
			this.me.onActivityClose(data.id,atTime);
			
			this.me.dispatch(GameEventType.ActivityClose,id);
		}
		
		/** 服务器活动重置 */
		public doActivityReset(id:number,nextTime:number,atTime:boolean):void
		{
			var data:ActivityData=this._d.datas.get(id);
			data.joinTimes=0;
			data.nextResetTime=nextTime;
			this.me.onActivityReset(data.id,atTime);

			this.me.dispatch(GameEventType.ActivityReset,id);
		}
		
		/** 活动完成一次 */
		public activityCompleteOnce(id:number,joinTimes:number):void
		{
			var data:ActivityData=this._d.datas.get(id);
			data.joinTimes=joinTimes;

			this.me.dispatch(GameEventType.ActivityCompleteOnce,id);
		}
		
	}
}
