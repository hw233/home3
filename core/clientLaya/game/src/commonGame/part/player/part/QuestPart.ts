namespace Shine
{
	/** 任务(generated by shine) */
	export class QuestPart extends PlayerBasePart
	{
		/** 数据 */
		private _d:QuestPartData;
		
		/** 运行中的任务目标 */
		private _runningTaskDic:SMap<number,TaskData>=new SMap<number,TaskData>();
		
		/** 执行目标类型组(单键) */
		protected _runningTaskTypeOneDic:SMap<number,SMap<number,TaskData>>=new SMap< number,SMap<number,TaskData>>();
		
		/** 执行目标类型组(双键) */
		protected _runningTaskTypeTwoDic:SMap<number,SMap<number,TaskData>>=new SMap<number,SMap<number,TaskData>>();
		
		/** 刷新回调组 */
		private _taskRefreshFuncDic:SMap<number,Func>=new SMap<number,Func>();
		
		/** 完成回调组 */
		private _taskCompleteFuncDic:SMap<number,Func>=new SMap<number,Func>();
		
		/** 粗略可接组 */
		private _waitAcceptQuests:SMap<number,QuestConfig>=new SMap<number,QuestConfig>();
		
		/** 可接任务列表 */
		private _canAcceptQuests:SMap<number,QuestConfig>=new SMap<number,QuestConfig>();
		
		/** 可视任务列表 */
		private _canSeeQuests:SMap<number,QuestConfig>=new SMap<number,QuestConfig>();
		
		public setData(data:BaseData):void
		{
			super.setData(data);
			
			this._d=data as QuestPartData;
		}
		
		/** 获取数据 */
		public getPartData():QuestPartData
		{
			return this._d;
		}
		
		/** 构造函数(只在new后调用一次,再次从池中取出不会调用) */
		public construct():void
		{
			this.registTaskRefreshFunc(FunctionType.Quest,Func.create(this,this.taskRefreshForQuest));
			this.registTaskCompleteFunc(FunctionType.Quest,Func.create(this,this.taskCompleteForQuest));
		}
		
		/** 构造数据前 */
		protected beforeMakeData():void
		{
			
		}
		
		/** 初始化(创建后刚调用,与dispose成对) */
		public init():void
		{
			
		}
		
		/** 析构(回池前调用,与init成对) */
		public dispose():void
		{
			this.clearOneRunning(this._runningTaskTypeOneDic.getValues());
			this.clearOneRunning(this._runningTaskTypeTwoDic.getValues());
		}
		
		private clearOneRunning(values:SMap<number,TaskData>[]):void
		{
			var v:SMap<number,TaskData>;

			for(var i:number=values.length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					if(!v.isEmpty())
					{
						v.forEach((k,v) => 
						{
							this.releaseTask(v);
						});

						v.clear();
					}
				}
			}
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadData():void
		{
			this._d.accepts.forEachValue(data=>
			{
				data.makeConfig();

				for (var index = 0; index < data.tasks.length; index++)
				{
					this.reMakeTask(data.tasks[index],FunctionType.Quest,data.id);
				}
				this.addRunningQuest(data);
			});

			this.countWaitAcceptQuests();
			this.countCanAcceptAndCanSeeQuests();
		}
		
		/** 从库中读完数据后(做数据的补充解析)(onNewCreate后也会调用一次)(主线程) */
		public afterReadDataSecond():void
		{
			//先任务
			var values:QuestData[];
			var v:QuestData;

			for(var i:number=(values=this._d.accepts.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					if(v.isComplete())
					{
						this.preQuestComplete(v);

						if(v!=values[i])
						{
							++i;
						}
					}
				}
			}

			//再任务目标
			this.checkTaskDic(this._runningTaskTypeOneDic.getValues());
			this.checkTaskDic(this._runningTaskTypeTwoDic.getValues());
		}
		
		/** 每秒调用 */
		public onSecond(delay:number):void
		{
			var now:number=this.me.getTimeMillis();

			var values:QuestData[] ;
			var v:QuestData;

			for(var i:number=(values=this._d.accepts.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//有有效时间
					if(!v.isFailed && !v.config.failTimeT.isEmpty() && now>=v.enableTime)
					{
						this.preQuestFailed(v);
					}
				}
			}

			var values1:QuestCompleteData[] ;
			var v1:QuestCompleteData;

			for(var i1:number=(values1=this._d.completeQuestsDic.getValues()).length-1;i1>=0;--i1)
			{
				if((v1=values1[i1])!=null)
				{
					//超时
					if(now>=v1.reTime)
					{
						//移除
						this._d.completeQuestsDic.remove(v1.id);

						++i1;
					}
				}
			}
		}
		
		/** 配置表更新后(配置替换) */
		public onReloadConfig():void
		{
			var values:QuestData[] ;
			var v:QuestData;

			for(var i:number=(values=this._d.accepts.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					for(var tData of v.tasks)
					{
						tData.reloadConfig();
					}
				}
			}

			this._runningTaskTypeOneDic.forEachValue(v1=>
			{
				v1.forEachValue(v2=>v2.reloadConfig());
			});

			this._runningTaskTypeTwoDic.forEachValue(v1=>
			{
				v1.forEachValue(v2=>v2.reloadConfig());
			});
		}
		
		/** 功能开启(id:功能ID) */
		public onFunctionOpen(id:number):void
		{
			
		}
		
		/** 功能关闭(id:功能ID) */
		public onFunctionClose(id:number):void
		{
			
		}
		
		private checkTaskDic(values1:SMap<number,TaskData>[]):void
		{
			var v1:SMap<Number, TaskData> ;

			for(var i1:number=values1.length-1;i1>=0;--i1)
			{
				if((v1=values1[i1])!=null)
				{
					var values2:TaskData[] ;
					var v2:TaskData;

					for(var i2:number=(values2=v1.getValues()).length-1;i2>=0;--i2)
					{
						if((v2=values2[i2])!=null)
						{
							if(v2.isComplete())
							{
								this.taskComplete(v2);

								if(v2!=values2[i2])
								{
									++i2;
								}
							}
						}
					}
				}
			}
		}
		
		/** 注册目标刷新回调 */
		public registTaskRefreshFunc(funcID:number,func:Func):void
		{
			if(ShineSetting.openCheck)
			{
				if(this._taskRefreshFuncDic.contains(funcID))
				{
					Ctrl.throwError("registTaskCompleteFunc时,重复的功能ID",funcID);
				}
			}

			this._taskRefreshFuncDic.put(funcID,func);
		}
		
		/** 注册目标完成回调 */
		public registTaskCompleteFunc(funcID:number,func:Func):void
		{
			if(ShineSetting.openCheck)
			{
				if(this._taskCompleteFuncDic.contains(funcID))
				{
					Ctrl.throwError("registTaskCompleteFunc时,重复的功能ID",funcID);
				}
			}

			this._taskCompleteFuncDic.put(funcID,func);
		}
		
		/** 创建任务目标数据(只创建类) */
		protected toCreateTaskData(type:number):TaskData
		{
			return GameC.pool.createTaskData(type);
		}
		
		/** 创建任务目标数据(只创建类) */
		public releaseTask(data:TaskData):void
		{
			GameC.pool.releaseTaskData(data.config.type,data);
		}
		
		/** 回收任务数据 */
		private releaseQuest(data:QuestData):void
		{
			for(var v of data.tasks)
			{
				this.releaseTask(v);
			}

			data.clear();

			//TODO:QuestData回收
		}
		
		/** 获取任务目标(运行中的) */
		public getTask(instanceID:number):TaskData
		{
			return this._runningTaskDic.get(instanceID);
		}
		
		/** 获取已接任务 */
		public getAcceptQuest(id:number):QuestData
		{
			return this._d.accepts.get(id);
		}
		
		/** 任务是否已接 */
		public isQuestAccept(id:number):boolean
		{
			return this._d.accepts.contains(id);
		}
		
		/** 获取某任务是否完成 */
		public isQuestCompleteId(id:number):boolean
		{
			return this.isQuestComplete(QuestConfig.get(id));
		}
		
		/** 获取某任务是否完成 */
		private isQuestComplete(config:QuestConfig):boolean
		{
			if(this._d.completeIDs.contains(config.id))
				return true;

			var line:DIntData;
			//有值
			if(!(line=config.questLine).isEmpty())
			{
				return line.value<=this._d.completeLines.getOrDefault(line.key,-1);
			}

			var cData:QuestCompleteData;

			if((cData=this._d.completeQuestsDic.get(config.id))!=null)
			{
				return cData.isSuccess;
			}

			return false;
		}
		
		/** 获取某任务是否失败 */
		public isQuestFailed(id:number):boolean
		{
			var data:QuestData;
			if((data=this._d.accepts.get(id))!=null)
			{
				return data.isFailed;
			}

			var cData:QuestCompleteData;
			if((cData=this._d.completeQuestsDic.get(id))!=null)
			{
				return !cData.isSuccess;
			}

			return false;
		}
		
		/** 通过id创建任务目标 */
		public createTaskByID(id:number,funcID:number,mainID:number,num:number=0):TaskData
		{
			if(!CommonSetting.isClientDriveLogic)
				Ctrl.throwError("客户端不支持自行创建目标");

			var config:TaskConfig=TaskConfig.get(id);

			var taskData:TaskData=this.toCreateTaskData(config.type);
			taskData.id=config.id;
			taskData.config=config;
			taskData.funcID=funcID;
			taskData.mainID=mainID;
			taskData.num=num;

			taskData.instanceID=++this._d.clientTaskInstanceIDIndex;

			this.refreshTaskData(taskData);

			return taskData;
		}
		
		/** 获取可接任务列表 */
		public getCanAcceptQuests():SMap<number,QuestConfig>
		{
			return this._canAcceptQuests;
		}
		
		/** 重建任务目标数据(afterRead阶段) */
		public reMakeTask(data:TaskData,funcID:number,mainID:number):void
		{
			data.config=TaskConfig.get(data.id);
			data.funcID=funcID;
			data.mainID=mainID;

			this.refreshTaskData(data);
		}
		
		/** 预接任务 */
		protected preDoAcceptQuest(config:QuestConfig):void
		{
			//TODO:找NPC
			this.doAcceptQuestConfig(config);
		}
		
		/** 执行接取任务 */
		private doAcceptQuestConfig(config:QuestConfig):void
		{
			if(CommonSetting.isClientDriveLogic)
			{
				var qData:QuestData=GameC.factory.createQuestData();
				qData.id=config.id;
				qData.makeConfig();

				var list:number[] =config.tasks;

				var tasks:TaskData[] =qData.tasks=new TaskData[list.length];

				for(var i:number=0;i<list.length;i++)
				{
					tasks[i]=this.createTaskByID(list[i],FunctionType.Quest,config.id);
				}

				if(config.failTimeT!=null)
				{
					qData.enableTime=config.failTimeT.getNextTime();
				}
				else
				{
					qData.enableTime=0;
				}

				this.doAcceptQuest(qData);
			}
			else
			{
				this.me.send(AcceptQuestRequest.createAcceptQuest(config.id));
			}
		}
		
		/** 执行接取任务 */
		private doAcceptQuest(data:QuestData):void
		{
			this._d.accepts.put(data.id,data);

			var isComplete:boolean=data.isComplete();

			if(!isComplete)
			{
				this.addRunningQuest(data);
			}

			this._waitAcceptQuests.remove(data.id);
			this._canAcceptQuests.remove(data.id);
			this._canSeeQuests.remove(data.id);


			//推送
			this.me.dispatch(GameEventType.RefreshCanAcceptQuests);
			this.me.dispatch(GameEventType.RefreshCanSeeQuests);
			this.me.dispatch(GameEventType.AcceptQuest,data.id);

			if(isComplete)
			{
				this.preQuestComplete(data);
			}
		}
		
		private addRunningQuest(data:QuestData):void
		{
			var tasks:TaskData[] =data.tasks;
			var tData:TaskData;

			//串行
			if(data.config.executeType==QuestExecuteType.Serial)
			{
				for(var i:number=0;i<tasks.length;i++)
				{
					//未完成,或刷新式的
					if(!(tData=tasks[i]).isComplete())
					{
						//只加一次
						this.doAddRunningTask(tData);
						break;
					}
				}
			}
			//并行或任意
			else
			{
				for(var i:number=0;i<tasks.length;i++)
				{
					//未完成,或刷新式的
					if(!(tData=tasks[i]).isComplete() || TaskTypeConfig.get(tData.config.type).needUpdate)
					{
						this.doAddRunningTask(tData);
					}
				}
			}
		}
		
		/** 添加执行目标 */
		public addRunningTask(data:TaskData):void
		{
			this.refreshTaskData(data);

			this.doAddRunningTask(data);

		//直接完成
			if(data.isComplete())
			{
				this.taskComplete(data);
			}
		}
		
		/** 执行添加任务目标 */
		private doAddRunningTask(data:TaskData):void
		{
			this._runningTaskDic.put(data.instanceID,data);

			//双键
			if(TaskTypeConfig.get(data.config.type).needSecondKey)
			{
				this._runningTaskTypeTwoDic.computeIfAbsent(data.config.type<<32 | data.config.args[1],k=>new SMap<number,TaskData>()).put(data.instanceID,data);
			}
			//单键
			else
			{
				this._runningTaskTypeOneDic.computeIfAbsent(data.config.type,k=>new SMap<number,TaskData>()).put(data.instanceID,data);
			}
		}
		
		/** 移除执行目标 */
		public removeRunningTask(data:TaskData):void
		{
			this._runningTaskDic.remove(data.instanceID);

			var dic:SMap<number,TaskData> ;
			//双键
			if(TaskTypeConfig.get(data.config.type).needSecondKey)
			{
				dic=this._runningTaskTypeTwoDic.get(data.config.type << 32 | data.config.args[1]);
			}
			//单键
			else
			{
				dic=this._runningTaskTypeOneDic.get(data.config.type);
			}

			if(dic!=null)
			{
				dic.remove(data.instanceID);
			}
		}
		
		/** 目标刷新 */
		private taskRefresh(data:TaskData):void
		{
			var func:Func;

			if((func=this._taskRefreshFuncDic.get(data.funcID))==null)
				return;

			func.invoke(data);
		}
		
		/** 目标完成 */
		private taskComplete(data:TaskData):void
		{
			//先移除
			if(!TaskTypeConfig.get(data.config.type).needUpdate)
			{
				this.removeRunningTask(data);
			}

			var func:Func;

			if((func=this._taskCompleteFuncDic.get(data.funcID))==null)
			{
				Ctrl.throwError("找不到注册的task回调");
				return;
			}

			func.invoke(data);
		}
		
		/** 目标刷新 */
		private taskRefreshForQuest(data:TaskData):void
		{
			var qData:QuestData=this.getAcceptQuest(data.mainID);

			if(qData==null)
			{
				Ctrl.throwError("不该找不到任务");
				return;
			}

			this.me.dispatch(GameEventType.RefreshOneQuest,qData.id);
		}
		
		/** 目标完成 */
		private taskCompleteForQuest(data:TaskData):void
		{
			var qData:QuestData=this.getAcceptQuest(data.mainID);

			if(qData==null)
			{
				Ctrl.throwError("不该找不到任务");
				return;
			}

			//完成
			if(qData.isComplete())
			{
				this.preQuestComplete(qData);
			}
			else
			{
				//串行
				if(qData.config.executeType==QuestExecuteType.Serial)
				{
					this.removeRunningTask(data);

					var index:number=ObjectUtils.arrayIndexOf(qData.tasks,data);

					if(index==-1)
					{
						Ctrl.throwError("不该找不到任务目标索引");
					}

					//添加下一个
					this.addRunningTask(qData.tasks[index+1]);
				}
			}
		}
		
		/** 任务失败 */
		private preQuestFailed(data:QuestData):void
		{
			if(CommonSetting.isClientDriveLogic)
			{
				this.toQuestFailed(data);
			}
			else
			{
				//等服务器推
			}
		}
		
		private toQuestFailed(data:QuestData):void
		{
			data.isFailed=true;
			this.addCompleteRecord(data.config,false);
			this.me.dispatch(GameEventType.QuestFaied,data.id);
		}
		
		/** 任务预备完成 */
		private preQuestComplete(data:QuestData):void
		{
			//TODO:客户端任务完成

			switch(data.config.commitType)
			{
				case QuestCommitType.Auto:
				{
					this.toCommitQuest(data,true);
				}
					break;
				case QuestCommitType.ByNPC:
				{
					this.toCommitQuest(data,true);
				}
					break;
			}
		}
		
		/** 任务预备完成 */
		private addCompleteRecord(config:QuestConfig,isSuccess:boolean):void
		{
			switch(config.repeatType)
			{
				case QuestRepeatType.Once:
				{
					//胜利记录
					if(isSuccess)
					{
						var questLine:DIntData;
						if(!(questLine=config.questLine).isEmpty())
						{
							//更高
							if(questLine.value>this._d.completeLines.getOrDefault(questLine.key,-1))
							{
								this._d.completeLines.put(questLine.key,questLine.value);
							}
						}
						else
						{
							this._d.completeIDs.add(config.id);
						}

						this.checkWaitAcceptQuestByComplete(config);
					}
				}
					break;
				case QuestRepeatType.Cycle:
				{
					//TODO:暂时先依赖g层的消息赋值
					
					// var cData:QuestCompleteData=this._d.completeQuestsDic.get(config.id);

					// if(cData==null)
					// {
					// 	cData=new QuestCompleteData();
					// 	cData.id=config.id;
					// 	this._d.completeQuestsDic.put(config.id,cData);
					// }

					// //下个时间
					// cData.reTime=config.cycleTimeT.getNextTime();
					// cData.isSuccess=isSuccess;
				}
					break;
			}
		}
		
		/** 移除已接任务 */
		private removeAcceptQuest(data:QuestData):void
		{
			this._d.accepts.remove(data.id);

			//全部移除
			for(var v of data.tasks)
			{
				this.removeRunningTask(v);
			}
		}
		
		/** 提交任务 */
		private doCommitQuest(data:QuestData):void
		{
			var config:QuestConfig=data.config;

			this.removeAcceptQuest(data);

			this.addCompleteRecord(data.config,true);
			//回收
			this.releaseQuest(data);

			this.checkReAddWaitAccept(config);

			this.me.dispatch(GameEventType.CommitQuest,config.id);
		}
		
		/** 执行完成任务 */
		private toCommitQuest(data:QuestData,isAbs:boolean):void
		{
			if(CommonSetting.isClientDriveLogic)
			{
				//有奖励
				if(data.config.rewardID>0)
				{
					//奖励
					if(isAbs)
					{
						this.me.bag.addRewardAbs(data.config.rewardID,CallWayType.CommitQuest);
					}
					else
					{
						this.me.bag.addReward(data.config.rewardID,CallWayType.CommitQuest);
					}
				}

				this.doCommitQuest(data);
			}
			else
			{
				this.me.send(CommitQuestRequest.createCommitQuest(data.id));
			}
		}
		
		/** 任务目标事件 */
		public taskEvent(type:number,args:any):void
		{
			var dic:SMap<number,TaskData> ;

			var typeConfig:TaskTypeConfig;

			if((typeConfig=TaskTypeConfig.get(type)).needSecondKey)
			{
				if((dic=this._runningTaskTypeTwoDic.get(type<<32 | args[0]))==null || dic.isEmpty())
					return;
			}
			else
			{
				if((dic=this._runningTaskTypeOneDic.get(type))==null || dic.isEmpty())
					return;
			}

			//不是客户端执行
			if(!typeConfig.isClientDrive && !CommonSetting.isClientDriveLogic)
			{
				return;
			}

			var values:TaskData[] ;
			var v:TaskData;

			var lastIsComplete:boolean;
			var lastNum:number;

			for(var i:number=(values=dic.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//未完成
					if(!(lastIsComplete=v.isComplete()) || typeConfig.needUpdate)
					{
						lastNum=v.num;

						this.toTaskEvent(v,args);

						//有变化
						if(lastNum!=v.num)
						{
							this.taskRefresh(v);
						}

						//新的完成
						if(v.isComplete() && !lastIsComplete)
						{
							this.taskComplete(v);

							if(v!=values[i])
							{
								++i;
							}
						}
					}
				}
			}
		}
		
		/** 检查任务可接基础条件 */
		private checkQuestCanAcceptFirst(config:QuestConfig):boolean
		{
			//已接
			if(this._d.accepts.contains(config.id))
				return false;

			//完成
			if(this._d.completeIDs.contains(config.id))
				return false;

			//周期完成
			if(this._d.completeQuestsDic.contains(config.id))
				return false;

			var line:DIntData;
			//链完成
			if(!(line=config.questLine).isEmpty() && line.value<=this._d.completeLines.getOrDefault(line.key,-1))
				return false;

			//前置未完成
			if(!this.checkQuestPreAllComplete(config))
			{
				return false;
			}

			return true;
		}
		
		/** 检查某任务的前置是否都完成 */
		private checkQuestPreAllComplete(config:QuestConfig):boolean
		{
			for(var v of config.preQuests)
			{
				if(!this.isQuestCompleteId(v))
				{
					return false;
				}
			}

			return true;
		}
		
		/** 检查任务是否可接 */
		public checkQuestCanAccept(config:QuestConfig,needNotice:boolean):boolean
		{
			if(!this.checkQuestCanAcceptFirst(config))
			{
				return false;
			}

			if(!this.checkAcceptConditions(config,needNotice))
			{
				return false;
			}

			return true;
		}
		
		/** 检查接受任务条件(只看条件部分) */
		public checkAcceptConditions(config:QuestConfig,needNotice:boolean):boolean
		{
			for(var v2 of config.acceptConditions)
			{
				if(!this.checkOneAcceptCondition(v2,needNotice))
				{
					return false;
				}
			}

			return true;
		}
		
		/** 检查可视任务条件(只看条件部分) */
		public checkSeeConditions(config:QuestConfig):boolean
		{
			for(var v2 of config.acceptConditions)
			{
				if(!this.checkOneSeeCondition(v2))
				{
					return false;
				}
			}

			return true;
		}
		
		/** 接取任务(执行数据) */
		public acceptQuest(id:number):void
		{
			if(this._d.accepts.contains(id))
			{
				this.me.warnLog("接任务时,任务已接",id);
				return;
			}

			if(this.isQuestCompleteId(id))
			{
				this.me.warnLog("接任务时,任务已完成",id);
				return;
			}

			var config:QuestConfig=QuestConfig.get(id);

			//任务失败了
			var cData:QuestCompleteData;

			if((cData=this._d.completeQuestsDic.get(id))!=null && !cData.isSuccess)
			{
				//不可接取失败
				if(!config.cantAcceptFailed)
				{
					this.me.warnLog("接任务时,不可接取已失败的任务",id);
					return;
				}
			}

			config.preQuests.forEach(v => 
			{
				if(!this.isQuestCompleteId(v))
				{
					this.me.warnLog("接任务时,前置任务未完成",id,v);
					return;
				}
			});

			config.acceptConditions.forEach(v => 
			{
				if(!this.checkOneAcceptCondition(v,false))
				{
					this.me.warnLog("接任务时,条件不满足",id);
					return;
				}
			});

			this.preDoAcceptQuest(config);
		}
		
		/** 放弃任务 */
		private doGiveUpQuest(data:QuestData):void
		{
			var config:QuestConfig=data.config;

			//没失败
			if(!data.isFailed)
			{
				data.isFailed=true;
				this.addCompleteRecord(config,false);
			}

			this.removeAcceptQuest(data);
			this.releaseQuest(data);

			this.checkReAddWaitAccept(config);

			this.me.dispatch(GameEventType.GiveUpQuest,config.id);
		}
		
		/** 检查重新添加到等待接取组 */
		private checkReAddWaitAccept(config:QuestConfig):void
		{
			//可接
			if(this.checkQuestCanAcceptFirst(config))
			{
				this._waitAcceptQuests.put(config.id,config);

				if(this.checkSeeConditions(config))
				{
					this._canSeeQuests.put(config.id,config);

					this.me.dispatch(GameEventType.RefreshCanSeeQuests);
				}

				if(this.checkAcceptConditions(config,false))
				{
					this._canAcceptQuests.put(config.id,config);

					this.me.dispatch(GameEventType.RefreshCanAcceptQuests);

					// 自动接
					if(config.acceptType==QuestAcceptType.Auto)
					{
						this.acceptQuest(config.id);
					}
				}
			}
		}
		
		/** 检查等待接取组受到完成任务的影响 */
		private checkWaitAcceptQuestByComplete(config:QuestConfig):void
		{
			var hasSee:boolean=false;
			var hasAccept:boolean=false;

			var values:number[]=config.afterQuests;

			var qConfig:QuestConfig;

			for(var  i:number=0,len=config.afterQuests.size();i<len;++i)
			{
				//可接
				if(this.checkQuestCanAcceptFirst(qConfig=QuestConfig.get(values[i])))
				{
					this._waitAcceptQuests.put(qConfig.id,qConfig);

					if(this.checkSeeConditions(qConfig))
					{
						this._canSeeQuests.put(qConfig.id,qConfig);

						hasSee=true;
					}

					if(this.checkAcceptConditions(qConfig,false))
					{
						this._canAcceptQuests.put(qConfig.id,qConfig);

						hasAccept=true;
					}
				}
			}

			if(hasSee)
				this.me.dispatch(GameEventType.RefreshCanSeeQuests);

			if(hasAccept)
				this.me.dispatch(GameEventType.RefreshCanAcceptQuests);

			this.checkAutoAccept();
		}
		
		/** 提交任务 */
		public commitQuest(id:number):void
		{
			var data:QuestData=this._d.accepts.get(id);

			if(data==null)
			{
				this.me.warnLog("提交任务时,任务不存在");
				return;
			}

			if(data.isFailed)
			{
				this.me.warnLog("提交任务时,任务已失败");
				return;
			}

			if(!data.isComplete())
			{
				this.me.warnLog("提交任务时,任务未完成");
				return;
			}

			if(data.config.rewardID>0)
			{
				if(!this.me.bag.hasRewardPlace(data.config.rewardID))
				{
					this.me.warnLog("提交任务时,背包空间不足");

					//提交任务时背包空间不足
					//GameC.info.showInfoCode(InfoCodeType.BagNotEnough);
					return;
				}
			}

			this.toCommitQuest(data,false);
		}
		
		/** 客户端任务目标事件 */
		public clientTaskEvent(type:number,args:any):void
		{
			var typeConfig:TaskTypeConfig=TaskTypeConfig.get(type);

			if(typeConfig==null)
			{
				this.me.warnLog("clientTaskEvent时,找不到目标配置",type);
				return;
			}

			if(CommonSetting.isClientDriveLogic)
			{
				this.taskEvent(type,args);
			}
			else
			{
				if(!typeConfig.isClientDrive)
				{
					this.me.warnLog("clientTaskEvent时,不可客户端驱动",type);
					return;
				}

				this.me.send(ClientTaskEventRequest.createClientTaskEvent(type,args));
			}
		}
		
		/** 接任务(gm指令)(并完成所有前置) */
		public acceptQuestByGM(id:number,needPre:boolean):void
		{
			if(this._d.accepts.contains(id))
			{
				this.me.warnLog("gm接任务时,任务已接",id);
				return;
			}

			if(this.isQuestCompleteId(id))
			{
				this.me.warnLog("gm接任务时,任务已完成",id);
				return;
			}

			if(needPre)
			{
				this.toCompleteQuestByGm(id);
			}

			this.doAcceptQuestConfig(QuestConfig.getConfig(id));
		}
		
		/** 完成任务(gm指令)(并完成所有前置) */
		public commitQuestByGM(id:number):void
		{
			this.toCompleteQuestByGm(id);
		}
		
		/** 完成任务以及前置(gm) */
		private toCompleteQuestByGm(id:number):void
		{
			if(this.isQuestCompleteId(id))
				return;

			var config:QuestConfig=QuestConfig.get(id);

			//前置任务
			for(var v of config.preQuests)
			{
				this.toCompleteQuestByGm(v);
			}

			//完成当前
			var qData:QuestData=this._d.accepts.get(id);

			if(qData==null)
			{
				this.doAcceptQuestConfig(config);

				qData=this._d.accepts.get(id);

				//已自动完成
				if(qData==null)
					return;
			}

			this.toCommitQuest(qData,true);
		}
		
		/** 检查单个接取条件 */
		protected checkOneAcceptCondition(args:number[],needNotice:boolean):boolean
		{
			switch(args[0])
			{
				case QuestAcceptConditionType.Level:
				{
					if(this.me.role.getLevel()<args[1])
					{
						return false;
					}
				}
					break;
				// case QuestAcceptConditionType.FunctionOpen:
				// {
				// 	if(!this.me.func.isFunctionOpen(args[1]))
				// 	{
				// 		return false;
				// 	}
				// }
				// 	break;
				// case QuestAcceptConditionType.NeedGuild:
				// {
				// 	if(!this.me.guild.hasGuild())
				// 	{
				// 		if(needNotice)
				// 		{
				// 			this.me.showInfoCode(InfoCodeType.NeedGuild);
				// 		}

				// 		return false;
				// 	}
				// }
				// 	break;
			}

			return true;
		}
		
		/** 检查单个可视条件 */
		protected checkOneSeeCondition(args:number[]):boolean
		{
			switch(args[0])
			{
				case QuestAcceptConditionType.Level:
				{
					if(this.me.role.getLevel()+Global.questCanSeeLevelD<args[1])
					{
						return false;
					}
				}
					break;
				// case QuestAcceptConditionType.FunctionOpen:
				// {
				// 	if(!this.me.func.isFunctionOpen(args[1]))
				// 	{
				// 		return false;
				// 	}
				// }
				// 	break;
				// case QuestAcceptConditionType.NeedGuild:
				// {
				// 	if(!this.me.guild.hasGuild())
				// 	{
				// 		return false;
				// 	}
				// }
				// 	break;
			}

			return true;
		}
		
		/** 更新目标数据 */
		protected refreshTaskData(data:TaskData):void
		{
			if(!CommonSetting.isClientDriveLogic)
				return;

			var args:number[];

			switch((args=data.config.args)[0])
			{
				case TaskType.Level:
				{
					if(this.me.role.getLevel()>=args[1])
						data.num=1;
				}
					break;
			}
		}
		
		/** 执行目标时间 */
		protected toTaskEvent(data:TaskData,vars:number[]):void
		{
			var args:number[]=data.config.args;

			switch(data.config.type)
			{
				case TaskType.WinBattle:
				case TaskType.KillMonster:
				{
					data.num++;
				}
					break;
				case TaskType.Level:
				{
					if(this.me.role.getLevel()>=args[1])
						data.num=1;
				}
					break;
				case TaskType.FriendNum:
				{
					var num:number=vars[0];

					if(num>data.num)
					{
						data.num=num;
					}
				}
					break;
				case TaskType.TotalAddCurrency:
				case TaskType.TotalCostCurrency:
				{
					//类型相同
					if(args[1]==vars[0])
					{
						data.num=vars[1];
					}
				}
					break;
			}
		}
		
		/** 统计所有可接任务列表 */
		private countWaitAcceptQuests():void
		{
			var dic:SMap<number,QuestConfig> =QuestConfig.getDic();

			if(dic==null)
				return;

			var waitAcceptQuests:SMap<number,QuestConfig> =this._waitAcceptQuests;
			waitAcceptQuests.clear();

			var accepts:SMap<number,QuestData> =this._d.accepts;

			var completeIDs:SSet<number> =this._d.completeIDs;

			var completeQuestsDic:SMap<number,QuestCompleteData> =this._d.completeQuestsDic;
			var completeLines:SMap<number,number> =this._d.completeLines;

			var values:QuestConfig[];
			var v:QuestConfig;
			var questID:number;
			var line:DIntData;

			for(var i:number=(values=dic.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					//可主动接
					if(v.acceptType!=QuestAcceptType.Passive)
					{
						questID=v.id;

						//已接
						if(accepts.contains(questID))
							continue;

						//完成
						if(completeIDs.contains(questID))
							continue;

						//周期完成
						if(completeQuestsDic.contains(questID))
							continue;

						//链完成
						if(!(line=v.questLine).isEmpty() && line.value<=completeLines.getOrDefault(line.key,-1))
							continue;

						//前置未完成
						if(!this.checkQuestPreAllComplete(v))
						{
							continue;
						}

						waitAcceptQuests.put(v.id,v);
					}
				}
			}
		}
		
		/** 统计可接与可见任务列表 */
		private countCanAcceptAndCanSeeQuests():void
		{
			this._canAcceptQuests.clear();
			this._canSeeQuests.clear();

			var values:QuestConfig[] ;
			var v:QuestConfig;

			for(var i:number=(values=this._waitAcceptQuests.getValues()).length-1;i>=0;--i)
			{
				if((v=values[i])!=null)
				{
					if(this.checkSeeConditions(v))
					{
						this._canSeeQuests.put(v.id,v);
					}

					if(this.checkAcceptConditions(v,false))
					{
						this._canAcceptQuests.put(v.id,v);
					}
				}
			}

			this.me.dispatch(GameEventType.RefreshCanAcceptQuests);
			this.me.dispatch(GameEventType.RefreshCanSeeQuests);

			this.checkAutoAccept();
		}
		
		/** 任务条件改变 */
		public questConditionChanged():void
		{
			this.countCanAcceptAndCanSeeQuests();
		}
		
		/** 刷新任务目标(服务器) */
		public onRefreshTask(instanceID:number,num:number):void
		{
			var data:TaskData=this.getTask(instanceID);

			if(data==null)
			{
				this.me.warnLog("刷新任务目标时,找不到数据");
				return;
			}

			data.num=num;

			this.taskRefresh(data);
		}
		
		/** 接收任务 */
		public onAcceptQuest(data:QuestData):void
		{
			data.makeConfig();

			for(var v of data.tasks)
			{
				this.reMakeTask(v,FunctionType.Quest,data.id);
			}

			this.doAcceptQuest(data);
		}
		
		public onCommitQuest(id:number):void
		{
			var data:QuestData=this._d.accepts.get(id);

			if(data==null)
			{
				this.me.warnLog("提交任务时,找不到已接任务");
				return;
			}

			this.doCommitQuest(data);
		}
		
		/** 放弃任务 */
		public onGiveUpQuest(id:number):void
		{
			var data:QuestData=this._d.accepts.get(id);

			if(data==null)
			{
				this.me.warnLog("放弃任务时,找不到已接任务");
				return;
			}

			this.doGiveUpQuest(data);
		}
		
		/** 任务失败 */
		public onQuestFailed(id:number):void
		{
			var data:QuestData=this._d.accepts.get(id);

			if(data==null)
			{
				this.me.warnLog("任务失败时,找不到已接任务");
				return;
			}

			this.toQuestFailed(data);
		}
		
		/** 清空所有任务回调(gm用) */
		public onClearAllQuest():void
		{
			this._d.accepts.forEachValue(data=>
			{
				this.removeAcceptQuest(data);
			});

			this._d.completeIDs.clear();
			this._d.completeLines.clear();
			this._d.completeQuestsDic.clear();

			this.countWaitAcceptQuests();
			this.countCanAcceptAndCanSeeQuests();

			this.me.dispatch(GameEventType.RefreshAllQuest);
		}
		
		/** 移除已接任务 */
		public onRemoveAcceptQuest(id:number):void
		{
			var data:QuestData=this._d.accepts.get(id);

			if(data==null)
				return;

			this.removeAcceptQuest(data);

			this.me.dispatch(GameEventType.RemoveAcceptQuest,data.id);
		}
		
		protected createPartData():BaseData
		{
			return new QuestPartData();
		}
		
		/** 检查接取可接任务 并接取 */
		private checkAutoAccept():void
		{
			this._canAcceptQuests.forEachValue(v => 
			{
				if(v.acceptType==QuestAcceptType.Auto)
				{
					this.acceptQuest(v.id);
				}
			});
		}
		
	}
}
