namespace Shine
{
	/** 重连消息(generated by shine) */
	export class SocketReconnectRequest extends ShineRequest
	{
		/** 数据类型ID */
		public static dataID:number=ShineRequestType.SocketReconnect;
		
		/** 源socketID */
		public socketID:number;
		
		/** 令牌 */
		public token:number;
		
		/** 最后收包索引 */
		public lastReceiveIndex:number;
		
		constructor()
		{
			super();
			this._dataID=ShineRequestType.SocketReconnect;
		}
		
		protected copyData():void
		{
			super.copyData();
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "SocketReconnectRequest";
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			super.toWriteBytesFull(stream);
			
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeInt(this.socketID);
			
			stream.writeInt(this.token);
			
			stream.writeInt(this.lastReceiveIndex);
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			stream.writeInt(this.socketID);
			
			stream.writeInt(this.token);
			
			stream.writeInt(this.lastReceiveIndex);
			
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			super.toWriteDataString(writer);
			
			writer.writeTabs();
			writer.sb.append("socketID");
			writer.sb.append(':');
			writer.sb.append(this.socketID);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("token");
			writer.sb.append(':');
			writer.sb.append(this.token);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("lastReceiveIndex");
			writer.sb.append(':');
			writer.sb.append(this.lastReceiveIndex);
			
			writer.writeEnter();
		}
		
		/** 创建实例 */
		public static createSocketReconnect(socketID:number,token:number,lastReceiveIndex:number):SocketReconnectRequest
		{
			var re:SocketReconnectRequest=new SocketReconnectRequest();
			re.socketID=socketID;
			re.token=token;
			re.lastReceiveIndex=lastReceiveIndex;
			return re;
		}
		
	}
}
