namespace Shine
{
	/** 时间经过数据(generated by shine) */
	export class TimePassData extends BaseData
	{
		/** 数据类型ID */
		public static dataID:number=ShineDataType.TimePass;
		
		/** 走过的时间 */
		public timePass:number;
		
		/** 时间上限 */
		public timeMax:number;
		
		constructor()
		{
			super();
			this._dataID=ShineDataType.TimePass;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "TimePassData";
		}
		
		/** 读取字节流(完整版) */
		protected toReadBytesFull(stream:BytesReadStream):void
		{
			var position:number=BytesReadStream.getReadBytes(stream);
			
			this.timePass=stream.readInt();
			
			this.timeMax=stream.readInt();
			
			BytesReadStream.disReadBytes(stream,position);
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeInt(this.timePass);
			
			stream.writeInt(this.timeMax);
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.timePass=stream.readInt();
			
			this.timeMax=stream.readInt();
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeInt(this.timePass);
			
			stream.writeInt(this.timeMax);
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof TimePassData))
				return;
			
			var mData:TimePassData=data as TimePassData;
			
			this.timePass=mData.timePass;
			this.timeMax=mData.timeMax;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof TimePassData))
				return;
			
			var mData:TimePassData=data as TimePassData;
			
			this.timePass=mData.timePass;
			
			this.timeMax=mData.timeMax;
			
		}
		
		/** 是否数据一致 */
		protected toDataEquals(data:BaseData):boolean
		{
			var mData:TimePassData=data as TimePassData;
			if(this.timePass!=mData.timePass)
				return false;
			
			if(this.timeMax!=mData.timeMax)
				return false;
			
			return true;
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			writer.writeTabs();
			writer.sb.append("timePass");
			writer.sb.append(':');
			writer.sb.append(this.timePass);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("timeMax");
			writer.sb.append(':');
			writer.sb.append(this.timeMax);
			
			writer.writeEnter();
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			
		}
		
	}
}
