namespace Shine
{
	/** 大数(generated by shine) */
	export class BigNumberData extends BaseData
	{
		/** 是否负数 */
		public isNegative:boolean;
		
		/** 数据类型ID */
		public static dataID:number=ShineDataType.BigNumber;
		
		/** 值组 */
		public values:SList<number>;
		
		constructor()
		{
			super();
			this._dataID=ShineDataType.BigNumber;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "BigNumberData";
		}
		
		/** 读取字节流(完整版) */
		protected toReadBytesFull(stream:BytesReadStream):void
		{
			var position:number=BytesReadStream.getReadBytes(stream);
			
			this.isNegative=stream.readBoolean();
			
			var valuesLen:number=stream.readLen();
			if(this.values!=null)
			{
				this.values.clear();
				this.values.ensureCapacity(valuesLen);
			}
			else
			{
				this.values=new SList<number>();
			}
			
			var valuesT:SList<number>=this.values;
			for(var valuesI:number=valuesLen-1;valuesI>=0;--valuesI)
			{
				var valuesV:number;
				valuesV=stream.readInt();
				
				valuesT.add(valuesV);
			}
			
			BytesReadStream.disReadBytes(stream,position);
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			stream.writeBoolean(this.isNegative);
			
			stream.writeLen(this.values.size());
			if(!this.values.isEmpty())
			{
				for(var valuesVI=0,valuesVLen=this.values.length;valuesVI<valuesVLen;++valuesVI)
				{
					var valuesV:number=this.values[valuesVI];
					stream.writeInt(valuesV);
					
				}
			}
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			this.isNegative=stream.readBoolean();
			
			var valuesLen:number=stream.readLen();
			if(this.values!=null)
			{
				this.values.clear();
				this.values.ensureCapacity(valuesLen);
			}
			else
			{
				this.values=new SList<number>();
			}
			
			var valuesT:SList<number>=this.values;
			for(var valuesI:number=valuesLen-1;valuesI>=0;--valuesI)
			{
				var valuesV:number;
				valuesV=stream.readInt();
				
				valuesT.add(valuesV);
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			stream.writeBoolean(this.isNegative);
			
			stream.writeLen(this.values.size());
			if(!this.values.isEmpty())
			{
				for(var valuesVI=0,valuesVLen=this.values.length;valuesVI<valuesVLen;++valuesVI)
				{
					var valuesV:number=this.values[valuesVI];
					stream.writeInt(valuesV);
					
				}
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			if(!(data instanceof BigNumberData))
				return;
			
			var mData:BigNumberData=data as BigNumberData;
			
			this.isNegative=mData.isNegative;
			this.values=mData.values;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			if(!(data instanceof BigNumberData))
				return;
			
			var mData:BigNumberData=data as BigNumberData;
			
			this.isNegative=mData.isNegative;
			
			if(this.values!=null)
			{
				this.values.clear();
				this.values.ensureCapacity(mData.values.size());
			}
			else
			{
				this.values=new SList<number>();
			}
			
			var valuesT:SList<number>=this.values;
			if(!mData.values.isEmpty())
			{
				for(var valuesVI=0,valuesVLen=mData.values.length;valuesVI<valuesVLen;++valuesVI)
				{
					var valuesV:number=mData.values[valuesVI];
					var valuesU:number;
					valuesU=valuesV;
					
					valuesT.add(valuesU);
				}
			}
			
		}
		
		/** 是否数据一致 */
		protected toDataEquals(data:BaseData):boolean
		{
			var mData:BigNumberData=data as BigNumberData;
			if(this.isNegative!=mData.isNegative)
				return false;
			
			if(this.values==null)
				return false;
			if(this.values.size()!=mData.values.size())
				return false;
			var valuesT:SList<number>=this.values;
			var valuesR:SList<number>=mData.values;
			var valuesLen:number=valuesT.size();
			for(var valuesI:number=0;valuesI<valuesLen;++valuesI)
			{
				var valuesU:number=valuesT.get(valuesI);
				var valuesV:number=valuesR.get(valuesI);
				if(valuesU!=valuesV)
					return false;
				
			}
			
			return true;
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			writer.writeTabs();
			writer.sb.append("isNegative");
			writer.sb.append(':');
			writer.sb.append(this.isNegative);
			
			writer.writeEnter();
			writer.writeTabs();
			writer.sb.append("values");
			writer.sb.append(':');
			writer.sb.append("List<number>");
			var valuesT:SList<number>=this.values;
			var valuesLen:number=valuesT.size();
			writer.sb.append('(');
			writer.sb.append(valuesLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(var valuesI:number=0;valuesI<valuesLen;++valuesI)
			{
				var valuesV:number=valuesT.get(valuesI);
				writer.writeTabs();
				writer.sb.append(valuesI);
				writer.sb.append(':');
				writer.sb.append(valuesV);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
			
			writer.writeEnter();
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			this.values=new SList<number>();
		}
		
	}
}
