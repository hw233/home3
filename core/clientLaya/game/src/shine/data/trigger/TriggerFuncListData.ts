namespace Shine
{
	/** trigger方法组(generated by shine) */
	export class TriggerFuncListData extends TriggerObjData
	{
		/** 数据类型ID */
		public static dataID:number=ShineDataType.TriggerFuncList;
		
		/** 函数组 */
		public funcList:TriggerFuncData[];
		
		constructor()
		{
			super();
			this._dataID=ShineDataType.TriggerFuncList;
		}
		
		/** 获取数据类名 */
		public getDataClassName():string
		{
			return "TriggerFuncListData";
		}
		
		/** 读取字节流(完整版) */
		protected toReadBytesFull(stream:BytesReadStream):void
		{
			super.toReadBytesFull(stream);
			
			var position:number=BytesReadStream.getReadBytes(stream);
			
			var funcListLen:number=stream.readLen();
			this.funcList=new Array<TriggerFuncData>(funcListLen);
			var funcListT:TriggerFuncData[]=this.funcList;
			for(var funcListI:number=0;funcListI<funcListLen;++funcListI)
			{
				var funcListV:TriggerFuncData;
				funcListV=stream.readDataFullNotNull() as TriggerFuncData;
				
				funcListT[funcListI]=funcListV;
			}
			
			BytesReadStream.disReadBytes(stream,position);
		}
		
		/** 写入字节流(完整版) */
		protected toWriteBytesFull(stream:BytesWriteStream):void
		{
			super.toWriteBytesFull(stream);
			
			var position:number=BytesWriteStream.getWriteBytes(stream);
			
			var funcListT:TriggerFuncData[]=this.funcList;
			stream.writeLen(funcListT.length);
			for(var funcListVI=0,funcListVLen=funcListT.length;funcListVI<funcListVLen;++funcListVI)
			{
				var funcListV:TriggerFuncData=funcListT[funcListVI];
				stream.writeDataFullNotNull(funcListV);
				
			}
			
			BytesWriteStream.disWriteBytes(stream,position);
		}
		
		/** 读取字节流(简版) */
		protected toReadBytesSimple(stream:BytesReadStream):void
		{
			super.toReadBytesSimple(stream);
			
			var funcListLen:number=stream.readLen();
			this.funcList=new Array<TriggerFuncData>(funcListLen);
			var funcListT:TriggerFuncData[]=this.funcList;
			for(var funcListI:number=0;funcListI<funcListLen;++funcListI)
			{
				var funcListV:TriggerFuncData;
				funcListV=stream.readDataSimpleNotNull() as TriggerFuncData;
				
				funcListT[funcListI]=funcListV;
			}
			
		}
		
		/** 写入字节流(简版) */
		protected toWriteBytesSimple(stream:BytesWriteStream):void
		{
			super.toWriteBytesSimple(stream);
			
			var funcListT:TriggerFuncData[]=this.funcList;
			stream.writeLen(funcListT.length);
			for(var funcListVI=0,funcListVLen=funcListT.length;funcListVI<funcListVLen;++funcListVI)
			{
				var funcListV:TriggerFuncData=funcListT[funcListVI];
				stream.writeDataSimpleNotNull(funcListV);
				
			}
			
		}
		
		/** 复制(潜拷贝) */
		protected toShadowCopy(data:BaseData):void
		{
			super.toShadowCopy(data);
			
			if(!(data instanceof TriggerFuncListData))
				return;
			
			var mData:TriggerFuncListData=data as TriggerFuncListData;
			
			this.funcList=mData.funcList;
		}
		
		/** 复制(深拷贝) */
		protected toCopy(data:BaseData):void
		{
			super.toCopy(data);
			
			if(!(data instanceof TriggerFuncListData))
				return;
			
			var mData:TriggerFuncListData=data as TriggerFuncListData;
			
			var funcListR:TriggerFuncData[]=mData.funcList;
			var funcListLen:number=funcListR.length;
			this.funcList=new Array<TriggerFuncData>(funcListLen);
			var funcListT:TriggerFuncData[]=this.funcList;
			for(var funcListI:number=0;funcListI<funcListLen;++funcListI)
			{
				var funcListV:TriggerFuncData=funcListR[funcListI];
				var funcListU:TriggerFuncData;
				funcListU=funcListV.clone() as TriggerFuncData;
				
				funcListT[funcListI]=funcListU;
			}
			
		}
		
		/** 是否数据一致 */
		protected toDataEquals(data:BaseData):boolean
		{
			if(!super.toDataEquals(data))
				return false;
			
			var mData:TriggerFuncListData=data as TriggerFuncListData;
			if(this.funcList==null)
				return false;
			if(this.funcList.length!=mData.funcList.length)
				return false;
			var funcListT:TriggerFuncData[]=this.funcList;
			var funcListR:TriggerFuncData[]=mData.funcList;
			var funcListLen:number=funcListT.length;
			for(var funcListI:number=0;funcListI<funcListLen;++funcListI)
			{
				var funcListU:TriggerFuncData=funcListT[funcListI];
				var funcListV:TriggerFuncData=funcListR[funcListI];
				if(funcListU==null)
					return false;
				if(!funcListU.dataEquals(funcListV))
					return false;
				
			}
			
			return true;
		}
		
		/** 转文本输出 */
		protected toWriteDataString(writer:DataWriter):void
		{
			super.toWriteDataString(writer);
			
			writer.writeTabs();
			writer.sb.append("funcList");
			writer.sb.append(':');
			writer.sb.append("Array<TriggerFuncData>");
			var funcListT:TriggerFuncData[]=this.funcList;
			var funcListLen:number=funcListT.length;
			writer.sb.append('(');
			writer.sb.append(funcListLen);
			writer.sb.append(')');
			writer.writeEnter();
			writer.writeLeftBrace();
			for(var funcListI:number=0;funcListI<funcListLen;++funcListI)
			{
				var funcListV:TriggerFuncData=funcListT[funcListI];
				writer.writeTabs();
				writer.sb.append(funcListI);
				writer.sb.append(':');
				funcListV.writeDataString(writer);
				
				writer.writeEnter();
			}
			writer.writeRightBrace();
			
			writer.writeEnter();
		}
		
		/** 初始化初值 */
		public initDefault():void
		{
			super.initDefault();
			
			this.funcList=new Array<TriggerFuncData>(0);
		}
		
	}
}
